class ACModeling_ACBoundary:
    def FirstMethod(self, crlPart, bIsMergePart, bIsRenumber):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        ACModeling.ACBoundary.FirstMethod(crlPart, bIsMergePart, bIsRenumber)
        ```
        
        Macro: {ref}`Macro-ACModeling-ACBoundaryMethod1`
        
        Ribbon: {menuselection}`ACModeling --> ACBoundary --> FirstMethod`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. This is a required input.
        
        **`bIsMergePart`**
        : A _Boolean_ specifying the is merge part. This is a required input.
        
        **`bIsRenumber`**
        : A _Boolean_ specifying the is renumber. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        ACModeling.ACBoundary.FirstMethod(crlPart, bIsMergePart, bIsRenumber)
        ```
        
        """
        message = "ACModeling.ACBoundary.FirstMethod({},{},{})".format(crlPart, bIsMergePart, bIsRenumber)
        return JPT_RUN_LINE(message)

class ACModeling_Create:
    def Convex(self, crlPart=[], dMeshSize=0.005, dOffset=0.02, dRadius=0.02, iDAxisGround=0, dScale=0.001):
        r"""
        ## Description
        
        Create Convex In Boundary
        
        ## Syntax
        
        ```python
        ACModeling.Create.Convex(crlPart=[], dMeshSize=0.005, dOffset=0.02, dRadius=0.02, iDAxisGround=0, dScale=0.001)
        ```
        
        Macro: {ref}`Macro-ACModeling-CreateConvex`
        
        Ribbon: {menuselection}`ACModeling --> Create --> Convex`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`dMeshSize`**
        : A _Double_ specifying the mesh size. The default value is 0.005.
        
        **`dOffset`**
        : A _Double_ specifying the offset. The default value is 0.02.
        
        **`dRadius`**
        : A _Double_ specifying the radius. The default value is 0.02.
        
        **`iDAxisGround`**
        : An _Integer_ specifying the axis ground. The default value is 0.
        
        **`dScale`**
        : A _Double_ specifying the scale. The default value is 0.001.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        ACModeling.Create.Convex(crlPart=[], dMeshSize=0.005, dOffset=0.02, dRadius=0.02, iDAxisGround=0, dScale=0.001)
        ```
        
        """
        message = "ACModeling.Create.Convex({},{},{},{},{},{})".format(crlPart, dMeshSize, dOffset, dRadius, iDAxisGround, dScale)
        return JPT_RUN_LINE(message)

class ADVC_MakeProcess:
    def Static(self, strName, iGeomNonlinear=0, advcStructTimeStep=ADVC_STRUCT_TIME_STEP(), bConvergence=False, advcConvergence=ADVC_CONVERGENCE(), bContact=False, advcContactIter=ADVC_CONTACT_ITER(), bAutoIncrement=False, advcAutoIncrement=ADVC_AUTO_INCREMENT(), dStabilizationFactor=0.0, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=-1, strRefPath="", listAdvcRefStressResult=[]):
        r"""
        ## Description
        
        create static process
        
        ## Syntax
        
        ```python
        Analysis.ADVC.MakeProcess.Static(strName, iGeomNonlinear=0, advcStructTimeStep=ADVC_STRUCT_TIME_STEP(), bConvergence=False, advcConvergence=ADVC_CONVERGENCE(), bContact=False, advcContactIter=ADVC_CONTACT_ITER(), bAutoIncrement=False, advcAutoIncrement=ADVC_AUTO_INCREMENT(), dStabilizationFactor=0.0, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=-1, strRefPath="", listAdvcRefStressResult=[])
        ```
        
        Macro: {ref}`Macro-Analysis-AdvcStaticProcess`
        
        Ribbon: {menuselection}`Analysis --> ADVC --> MakeProcess --> Static`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`iGeomNonlinear`**
        : An _Integer_ specifying the geometry nonlinear. The default value is 0.
        
        **`advcStructTimeStep`**
        : A _ADVC_STRUCT_TIME_STEP_ specifying the struct time step. The default value is ADVC_STRUCT_TIME_STEP().
        
        **`bConvergence`**
        : A _Boolean_ specifying the convergence. The default value is False.
        
        **`advcConvergence`**
        : A _ADVC_CONVERGENCE_ specifying the convergence. The default value is ADVC_CONVERGENCE().
        
        **`bContact`**
        : A _Boolean_ specifying the contact. The default value is False.
        
        **`advcContactIter`**
        : A _ADVC_CONTACT_ITER_ specifying the contact iterator. The default value is ADVC_CONTACT_ITER().
        
        **`bAutoIncrement`**
        : A _Boolean_ specifying the auto increment. The default value is False.
        
        **`advcAutoIncrement`**
        : A _ADVC_AUTO_INCREMENT_ specifying the auto increment. The default value is ADVC_AUTO_INCREMENT().
        
        **`dStabilizationFactor`**
        : A _Double_ specifying the stabilization factor. The default value is 0.0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`listLoadNode`**
        : A _LOAD_NODE List_ specifying the load node. The default value is [].
        
        **`listLoadCaseNode`**
        : A _LOAD_CASE_NODE List_ specifying the load case node. The default value is [].
        
        **`listLoadNodeContact`**
        : A _LOAD_NODE_CONTACT List_ specifying the load node contact. The default value is [].
        
        **`ilOutputParamList`**
        : A _Integer List_ specifying the output param list. The default value is [].
        
        **`iRefType`**
        : An _Integer_ specifying the reference type. The default value is -1.
        
        **`strRefPath`**
        : A _String_ specifying the reference path. The default value is "".
        
        **`listAdvcRefStressResult`**
        : A _ADVC_REF_STRESS_RESULT List_ specifying the advc reference stress result. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.ADVC.MakeProcess.Static(strName, iGeomNonlinear=0, advcStructTimeStep=ADVC_STRUCT_TIME_STEP(), bConvergence=False, advcConvergence=ADVC_CONVERGENCE(), bContact=False, advcContactIter=ADVC_CONTACT_ITER(), bAutoIncrement=False, advcAutoIncrement=ADVC_AUTO_INCREMENT(), dStabilizationFactor=0.0, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=-1, strRefPath="", listAdvcRefStressResult=[])
        ```
        
        """
        message = "Analysis.ADVC.MakeProcess.Static('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{})".format(strName, iGeomNonlinear, advcStructTimeStep, bConvergence, advcConvergence, bContact, advcContactIter, bAutoIncrement, advcAutoIncrement, dStabilizationFactor, crEdit, listLoadNode, listLoadCaseNode, listLoadNodeContact, ilOutputParamList, iRefType, strRefPath, listAdvcRefStressResult)
        return JPT_RUN_LINE(message)

    def Creep(self, strName, iGeomNonlinear=0, advcStructTimeStep=ADVC_STRUCT_TIME_STEP(), bConvergence=False, advcConvergence=ADVC_CONVERGENCE(), bContact=False, advcContactIter=ADVC_CONTACT_ITER(), bAutoIncrement=False, advcAutoIncrement=ADVC_AUTO_INCREMENT(), dStabilizationFactor=DFLT_DBL, bThetaDefined=False, dTheta=DFLT_DBL, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=-1, strRefPath="", listAdvcRefStressResult=[]):
        r"""
        ## Description
        
        create creep process
        
        ## Syntax
        
        ```python
        Analysis.ADVC.MakeProcess.Creep(strName, iGeomNonlinear=0, advcStructTimeStep=ADVC_STRUCT_TIME_STEP(), bConvergence=False, advcConvergence=ADVC_CONVERGENCE(), bContact=False, advcContactIter=ADVC_CONTACT_ITER(), bAutoIncrement=False, advcAutoIncrement=ADVC_AUTO_INCREMENT(), dStabilizationFactor=DFLT_DBL, bThetaDefined=False, dTheta=DFLT_DBL, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=-1, strRefPath="", listAdvcRefStressResult=[])
        ```
        
        Macro: {ref}`Macro-Analysis-AdvcCreepProcess`
        
        Ribbon: {menuselection}`Analysis --> ADVC --> MakeProcess --> Creep`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`iGeomNonlinear`**
        : An _Integer_ specifying the geometry nonlinear. The default value is 0.
        
        **`advcStructTimeStep`**
        : A _ADVC_STRUCT_TIME_STEP_ specifying the struct time step. The default value is ADVC_STRUCT_TIME_STEP().
        
        **`bConvergence`**
        : A _Boolean_ specifying the convergence. The default value is False.
        
        **`advcConvergence`**
        : A _ADVC_CONVERGENCE_ specifying the convergence. The default value is ADVC_CONVERGENCE().
        
        **`bContact`**
        : A _Boolean_ specifying the contact. The default value is False.
        
        **`advcContactIter`**
        : A _ADVC_CONTACT_ITER_ specifying the contact iterator. The default value is ADVC_CONTACT_ITER().
        
        **`bAutoIncrement`**
        : A _Boolean_ specifying the auto increment. The default value is False.
        
        **`advcAutoIncrement`**
        : A _ADVC_AUTO_INCREMENT_ specifying the auto increment. The default value is ADVC_AUTO_INCREMENT().
        
        **`dStabilizationFactor`**
        : A _Double_ specifying the stabilization factor. The default value is DFLT_DBL.
        
        **`bThetaDefined`**
        : A _Boolean_ specifying the theta defined. The default value is False.
        
        **`dTheta`**
        : A _Double_ specifying the theta. The default value is DFLT_DBL.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`listLoadNode`**
        : A _LOAD_NODE List_ specifying the load node. The default value is [].
        
        **`listLoadCaseNode`**
        : A _LOAD_CASE_NODE List_ specifying the load case node. The default value is [].
        
        **`listLoadNodeContact`**
        : A _LOAD_NODE_CONTACT List_ specifying the load node contact. The default value is [].
        
        **`ilOutputParamList`**
        : A _Integer List_ specifying the output param list. The default value is [].
        
        **`iRefType`**
        : An _Integer_ specifying the reference type. The default value is -1.
        
        **`strRefPath`**
        : A _String_ specifying the reference path. The default value is "".
        
        **`listAdvcRefStressResult`**
        : A _ADVC_REF_STRESS_RESULT List_ specifying the advc reference stress result. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.ADVC.MakeProcess.Creep(strName, iGeomNonlinear=0, advcStructTimeStep=ADVC_STRUCT_TIME_STEP(), bConvergence=False, advcConvergence=ADVC_CONVERGENCE(), bContact=False, advcContactIter=ADVC_CONTACT_ITER(), bAutoIncrement=False, advcAutoIncrement=ADVC_AUTO_INCREMENT(), dStabilizationFactor=DFLT_DBL, bThetaDefined=False, dTheta=DFLT_DBL, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=-1, strRefPath="", listAdvcRefStressResult=[])
        ```
        
        """
        message = "Analysis.ADVC.MakeProcess.Creep('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{})".format(strName, iGeomNonlinear, advcStructTimeStep, bConvergence, advcConvergence, bContact, advcContactIter, bAutoIncrement, advcAutoIncrement, dStabilizationFactor, bThetaDefined, dTheta, crEdit, listLoadNode, listLoadCaseNode, listLoadNodeContact, ilOutputParamList, iRefType, strRefPath, listAdvcRefStressResult)
        return JPT_RUN_LINE(message)

    def Dynamic(self, strName, iGeomNonlinear=0, advcStructTimeStep=ADVC_STRUCT_TIME_STEP(), bConvergence=False, advcConvergence=ADVC_CONVERGENCE(), bContact=False, advcContactIter=ADVC_CONTACT_ITER(), bAutoIncrement=False, advcAutoIncrement=ADVC_AUTO_INCREMENT(), bDynamic=False, advcDynamic=ADVC_DYNAMIC(), crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=-1, strRefPath="", listAdvcRefStressResult=[]):
        r"""
        ## Description
        
        create ADVC dynamic process
        
        ## Syntax
        
        ```python
        Analysis.ADVC.MakeProcess.Dynamic(strName, iGeomNonlinear=0, advcStructTimeStep=ADVC_STRUCT_TIME_STEP(), bConvergence=False, advcConvergence=ADVC_CONVERGENCE(), bContact=False, advcContactIter=ADVC_CONTACT_ITER(), bAutoIncrement=False, advcAutoIncrement=ADVC_AUTO_INCREMENT(), bDynamic=False, advcDynamic=ADVC_DYNAMIC(), crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=-1, strRefPath="", listAdvcRefStressResult=[])
        ```
        
        Macro: {ref}`Macro-Analysis-AdvcDynamicProcess`
        
        Ribbon: {menuselection}`Analysis --> ADVC --> MakeProcess --> Dynamic`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`iGeomNonlinear`**
        : An _Integer_ specifying the geometry nonlinear. The default value is 0.
        
        **`advcStructTimeStep`**
        : A _ADVC_STRUCT_TIME_STEP_ specifying the struct time step. The default value is ADVC_STRUCT_TIME_STEP().
        
        **`bConvergence`**
        : A _Boolean_ specifying the convergence. The default value is False.
        
        **`advcConvergence`**
        : A _ADVC_CONVERGENCE_ specifying the convergence. The default value is ADVC_CONVERGENCE().
        
        **`bContact`**
        : A _Boolean_ specifying the contact. The default value is False.
        
        **`advcContactIter`**
        : A _ADVC_CONTACT_ITER_ specifying the contact iterator. The default value is ADVC_CONTACT_ITER().
        
        **`bAutoIncrement`**
        : A _Boolean_ specifying the auto increment. The default value is False.
        
        **`advcAutoIncrement`**
        : A _ADVC_AUTO_INCREMENT_ specifying the auto increment. The default value is ADVC_AUTO_INCREMENT().
        
        **`bDynamic`**
        : A _Boolean_ specifying the ADVC dynamic. The default value is False.
        
        **`advcDynamic`**
        : A _ADVC_DYNAMIC_ specifying the ADVC dynamic. The default value is ADVC_DYNAMIC().
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`listLoadNode`**
        : A _LOAD_NODE List_ specifying the load node. The default value is [].
        
        **`listLoadCaseNode`**
        : A _LOAD_CASE_NODE List_ specifying the load case node. The default value is [].
        
        **`listLoadNodeContact`**
        : A _LOAD_NODE_CONTACT List_ specifying the load node contact. The default value is [].
        
        **`ilOutputParamList`**
        : A _Integer List_ specifying the output param list. The default value is [].
        
        **`iRefType`**
        : An _Integer_ specifying the reference type. The default value is -1.
        
        **`strRefPath`**
        : A _String_ specifying the reference path. The default value is "".
        
        **`listAdvcRefStressResult`**
        : A _ADVC_REF_STRESS_RESULT List_ specifying the advc reference stress result. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.ADVC.MakeProcess.Dynamic(strName, iGeomNonlinear=0, advcStructTimeStep=ADVC_STRUCT_TIME_STEP(), bConvergence=False, advcConvergence=ADVC_CONVERGENCE(), bContact=False, advcContactIter=ADVC_CONTACT_ITER(), bAutoIncrement=False, advcAutoIncrement=ADVC_AUTO_INCREMENT(), bDynamic=False, advcDynamic=ADVC_DYNAMIC(), crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=-1, strRefPath="", listAdvcRefStressResult=[])
        ```
        
        """
        message = "Analysis.ADVC.MakeProcess.Dynamic('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{})".format(strName, iGeomNonlinear, advcStructTimeStep, bConvergence, advcConvergence, bContact, advcContactIter, bAutoIncrement, advcAutoIncrement, bDynamic, advcDynamic, crEdit, listLoadNode, listLoadCaseNode, listLoadNodeContact, ilOutputParamList, iRefType, strRefPath, listAdvcRefStressResult)
        return JPT_RUN_LINE(message)

    def EigenValue(self, strName, bEigenValue=False, iNumberOfModes=0, iEigenvecNorm=10, dShift=DFLT_DBL, dCgcgpiTol=DFLT_DBL, dCgcgpiEigTol=DFLT_DBL, iCgcgpiLoopMax=DFLT_INT, dCgcgpiInnerTol=DFLT_DBL, iCgcgpiBlockSize=DFLT_INT, iCgcgpiExtraMode=DFLT_INT, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=-1, strRefPath="", listAdvcRefStressResult=[]):
        r"""
        ## Description
        
        create advc eigen value process
        
        ## Syntax
        
        ```python
        Analysis.ADVC.MakeProcess.EigenValue(strName, bEigenValue=False, iNumberOfModes=0, iEigenvecNorm=10, dShift=DFLT_DBL, dCgcgpiTol=DFLT_DBL, dCgcgpiEigTol=DFLT_DBL, iCgcgpiLoopMax=DFLT_INT, dCgcgpiInnerTol=DFLT_DBL, iCgcgpiBlockSize=DFLT_INT, iCgcgpiExtraMode=DFLT_INT, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=-1, strRefPath="", listAdvcRefStressResult=[])
        ```
        
        Macro: {ref}`Macro-Analysis-AdvcEigenProcess`
        
        Ribbon: {menuselection}`Analysis --> ADVC --> MakeProcess --> EigenValue`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`bEigenValue`**
        : A _Boolean_ specifying the eigen value. The default value is False.
        
        **`iNumberOfModes`**
        : An _Integer_ specifying the number of modes. The default value is 0.
        
        **`iEigenvecNorm`**
        : An _Integer_ specifying the eigenvec norm. The default value is 10.
        
        **`dShift`**
        : A _Double_ specifying the shift. The default value is DFLT_DBL.
        
        **`dCgcgpiTol`**
        : A _Double_ specifying the cgcgpi tolerance. The default value is DFLT_DBL.
        
        **`dCgcgpiEigTol`**
        : A _Double_ specifying the cgcgpi eig tolerance. The default value is DFLT_DBL.
        
        **`iCgcgpiLoopMax`**
        : An _Integer_ specifying the cgcgpi loop maximum. The default value is DFLT_INT.
        
        **`dCgcgpiInnerTol`**
        : A _Double_ specifying the cgcgpi inner tolerance. The default value is DFLT_DBL.
        
        **`iCgcgpiBlockSize`**
        : An _Integer_ specifying the cgcgpi block size. The default value is DFLT_INT.
        
        **`iCgcgpiExtraMode`**
        : An _Integer_ specifying the cgcgpi extra mode. The default value is DFLT_INT.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`listLoadNode`**
        : A _LOAD_NODE List_ specifying the load node. The default value is [].
        
        **`listLoadCaseNode`**
        : A _LOAD_CASE_NODE List_ specifying the load case node. The default value is [].
        
        **`listLoadNodeContact`**
        : A _LOAD_NODE_CONTACT List_ specifying the load node contact. The default value is [].
        
        **`ilOutputParamList`**
        : A _Integer List_ specifying the output param list. The default value is [].
        
        **`iRefType`**
        : An _Integer_ specifying the reference type. The default value is -1.
        
        **`strRefPath`**
        : A _String_ specifying the reference path. The default value is "".
        
        **`listAdvcRefStressResult`**
        : A _ADVC_REF_STRESS_RESULT List_ specifying the advc reference stress result. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.ADVC.MakeProcess.EigenValue(strName, bEigenValue=False, iNumberOfModes=0, iEigenvecNorm=10, dShift=DFLT_DBL, dCgcgpiTol=DFLT_DBL, dCgcgpiEigTol=DFLT_DBL, iCgcgpiLoopMax=DFLT_INT, dCgcgpiInnerTol=DFLT_DBL, iCgcgpiBlockSize=DFLT_INT, iCgcgpiExtraMode=DFLT_INT, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=-1, strRefPath="", listAdvcRefStressResult=[])
        ```
        
        """
        message = "Analysis.ADVC.MakeProcess.EigenValue('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{})".format(strName, bEigenValue, iNumberOfModes, iEigenvecNorm, dShift, dCgcgpiTol, dCgcgpiEigTol, iCgcgpiLoopMax, dCgcgpiInnerTol, iCgcgpiBlockSize, iCgcgpiExtraMode, crEdit, listLoadNode, listLoadCaseNode, listLoadNodeContact, ilOutputParamList, iRefType, strRefPath, listAdvcRefStressResult)
        return JPT_RUN_LINE(message)

    def DynamicExplicit(self, strName, iGeomNonlinear=0, advcStructTimeStep=ADVC_STRUCT_TIME_STEP(), bConvergence=False, advcConvergence=ADVC_CONVERGENCE(), bContact=False, advcContactIter=ADVC_CONTACT_ITER(), bAutoIncrement=False, advcAutoIncrement=ADVC_AUTO_INCREMENT(), iLogMessageInterval=DFLT_INT, iLinearApproximation=-1, dBulkViscosityCoef1=DFLT_DBL, dBulkViscosityCoef2=DFLT_DBL, dMassScalingdt=DFLT_DBL, dDtScaleFactor=DFLT_DBL, dPenaltyScaleFactor=DFLT_DBL, iContactSearchInterval=DFLT_INT, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=-1, strRefPath="", listAdvcRefStressResult=[]):
        r"""
        ## Description
        
        create ADVC dynamic explicit process.
        
        ## Syntax
        
        ```python
        Analysis.ADVC.MakeProcess.DynamicExplicit(strName, iGeomNonlinear=0, advcStructTimeStep=ADVC_STRUCT_TIME_STEP(), bConvergence=False, advcConvergence=ADVC_CONVERGENCE(), bContact=False, advcContactIter=ADVC_CONTACT_ITER(), bAutoIncrement=False, advcAutoIncrement=ADVC_AUTO_INCREMENT(), iLogMessageInterval=DFLT_INT, iLinearApproximation=-1, dBulkViscosityCoef1=DFLT_DBL, dBulkViscosityCoef2=DFLT_DBL, dMassScalingdt=DFLT_DBL, dDtScaleFactor=DFLT_DBL, dPenaltyScaleFactor=DFLT_DBL, iContactSearchInterval=DFLT_INT, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=-1, strRefPath="", listAdvcRefStressResult=[])
        ```
        
        Macro: {ref}`Macro-Analysis-AdvcDynamicExplicitProcess`
        
        Ribbon: {menuselection}`Analysis --> ADVC --> MakeProcess --> DynamicExplicit`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`iGeomNonlinear`**
        : An _Integer_ specifying the geometry nonlinear. The default value is 0.
        
        **`advcStructTimeStep`**
        : A _ADVC_STRUCT_TIME_STEP_ specifying the struct time step. The default value is ADVC_STRUCT_TIME_STEP().
        
        **`bConvergence`**
        : A _Boolean_ specifying the convergence. The default value is False.
        
        **`advcConvergence`**
        : A _ADVC_CONVERGENCE_ specifying the convergence. The default value is ADVC_CONVERGENCE().
        
        **`bContact`**
        : A _Boolean_ specifying the contact. The default value is False.
        
        **`advcContactIter`**
        : A _ADVC_CONTACT_ITER_ specifying the contact iterator. The default value is ADVC_CONTACT_ITER().
        
        **`bAutoIncrement`**
        : A _Boolean_ specifying the auto increment. The default value is False.
        
        **`advcAutoIncrement`**
        : A _ADVC_AUTO_INCREMENT_ specifying the auto increment. The default value is ADVC_AUTO_INCREMENT().
        
        **`iLogMessageInterval`**
        : An _Integer_ specifying the log message interval. The default value is DFLT_INT.
        
        **`iLinearApproximation`**
        : An _Integer_ specifying the linear approximation. The default value is -1.
        
        **`dBulkViscosityCoef1`**
        : A _Double_ specifying the bulk viscosity coefficient 1. The default value is DFLT_DBL.
        
        **`dBulkViscosityCoef2`**
        : A _Double_ specifying the bulk viscosity coefficient 2. The default value is DFLT_DBL.
        
        **`dMassScalingdt`**
        : A _Double_ specifying the mass scalingdt. The default value is DFLT_DBL.
        
        **`dDtScaleFactor`**
        : A _Double_ specifying the data scale factor. The default value is DFLT_DBL.
        
        **`dPenaltyScaleFactor`**
        : A _Double_ specifying the penalty scale factor. The default value is DFLT_DBL.
        
        **`iContactSearchInterval`**
        : An _Integer_ specifying the contact search interval. The default value is DFLT_INT.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`listLoadNode`**
        : A _LOAD_NODE List_ specifying the load node. The default value is [].
        
        **`listLoadCaseNode`**
        : A _LOAD_CASE_NODE List_ specifying the load case node. The default value is [].
        
        **`listLoadNodeContact`**
        : A _LOAD_NODE_CONTACT List_ specifying the load node contact. The default value is [].
        
        **`ilOutputParamList`**
        : A _Integer List_ specifying the output param list. The default value is [].
        
        **`iRefType`**
        : An _Integer_ specifying the reference type. The default value is -1.
        
        **`strRefPath`**
        : A _String_ specifying the reference path. The default value is "".
        
        **`listAdvcRefStressResult`**
        : A _ADVC_REF_STRESS_RESULT List_ specifying the advc reference stress result. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.ADVC.MakeProcess.DynamicExplicit(strName, iGeomNonlinear=0, advcStructTimeStep=ADVC_STRUCT_TIME_STEP(), bConvergence=False, advcConvergence=ADVC_CONVERGENCE(), bContact=False, advcContactIter=ADVC_CONTACT_ITER(), bAutoIncrement=False, advcAutoIncrement=ADVC_AUTO_INCREMENT(), iLogMessageInterval=DFLT_INT, iLinearApproximation=-1, dBulkViscosityCoef1=DFLT_DBL, dBulkViscosityCoef2=DFLT_DBL, dMassScalingdt=DFLT_DBL, dDtScaleFactor=DFLT_DBL, dPenaltyScaleFactor=DFLT_DBL, iContactSearchInterval=DFLT_INT, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=-1, strRefPath="", listAdvcRefStressResult=[])
        ```
        
        """
        message = "Analysis.ADVC.MakeProcess.DynamicExplicit('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{})".format(strName, iGeomNonlinear, advcStructTimeStep, bConvergence, advcConvergence, bContact, advcContactIter, bAutoIncrement, advcAutoIncrement, iLogMessageInterval, iLinearApproximation, dBulkViscosityCoef1, dBulkViscosityCoef2, dMassScalingdt, dDtScaleFactor, dPenaltyScaleFactor, iContactSearchInterval, crEdit, listLoadNode, listLoadCaseNode, listLoadNodeContact, ilOutputParamList, iRefType, strRefPath, listAdvcRefStressResult)
        return JPT_RUN_LINE(message)

    def ModalFreqResp(self, strName, strRefEigenDir="", dRefLowFreq=DFLT_DBL, dRefHighFreq=DFLT_DBL, crModalDampingRatio=None, crExcitationFreq=None, bAutoFreqInterval=False, dMaxFreq=DFLT_DBL, dMinFreq=DFLT_DBL, iNumFreqPoint=DFLT_INT, dBiasParam=DFLT_DBL, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=-1, strRefPath="", listAdvcRefStressResult=[]):
        r"""
        ## Description
        
        create modal frequency response process of ADVC
        
        ## Syntax
        
        ```python
        Analysis.ADVC.MakeProcess.ModalFreqResp(strName, strRefEigenDir="", dRefLowFreq=DFLT_DBL, dRefHighFreq=DFLT_DBL, crModalDampingRatio=None, crExcitationFreq=None, bAutoFreqInterval=False, dMaxFreq=DFLT_DBL, dMinFreq=DFLT_DBL, iNumFreqPoint=DFLT_INT, dBiasParam=DFLT_DBL, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=-1, strRefPath="", listAdvcRefStressResult=[])
        ```
        
        Macro: {ref}`Macro-Analysis-AdvcModalFreqRespProcess`
        
        Ribbon: {menuselection}`Analysis --> ADVC --> MakeProcess --> ModalFreqResp`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`strRefEigenDir`**
        : A _String_ specifying the reference eigen direction. The default value is "".
        
        **`dRefLowFreq`**
        : A _Double_ specifying the reference low frequence. The default value is DFLT_DBL.
        
        **`dRefHighFreq`**
        : A _Double_ specifying the reference high frequence. The default value is DFLT_DBL.
        
        **`crModalDampingRatio`**
        : A _Cursor_ specifying the modal damping ratio. The default value is None.
        
        **`crExcitationFreq`**
        : A _Cursor_ specifying the excitation frequence. The default value is None.
        
        **`bAutoFreqInterval`**
        : A _Boolean_ specifying the auto frequence interval. The default value is False.
        
        **`dMaxFreq`**
        : A _Double_ specifying the maximum frequence. The default value is DFLT_DBL.
        
        **`dMinFreq`**
        : A _Double_ specifying the minimum frequence. The default value is DFLT_DBL.
        
        **`iNumFreqPoint`**
        : An _Integer_ specifying the number frequence point. The default value is DFLT_INT.
        
        **`dBiasParam`**
        : A _Double_ specifying the bias param. The default value is DFLT_DBL.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`listLoadNode`**
        : A _LOAD_NODE List_ specifying the load node. The default value is [].
        
        **`listLoadCaseNode`**
        : A _LOAD_CASE_NODE List_ specifying the load case node. The default value is [].
        
        **`listLoadNodeContact`**
        : A _LOAD_NODE_CONTACT List_ specifying the load node contact. The default value is [].
        
        **`ilOutputParamList`**
        : A _Integer List_ specifying the output param list. The default value is [].
        
        **`iRefType`**
        : An _Integer_ specifying the reference type. The default value is -1.
        
        **`strRefPath`**
        : A _String_ specifying the reference path. The default value is "".
        
        **`listAdvcRefStressResult`**
        : A _ADVC_REF_STRESS_RESULT List_ specifying the advc reference stress result. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.ADVC.MakeProcess.ModalFreqResp(strName, strRefEigenDir="", dRefLowFreq=DFLT_DBL, dRefHighFreq=DFLT_DBL, crModalDampingRatio=None, crExcitationFreq=None, bAutoFreqInterval=False, dMaxFreq=DFLT_DBL, dMinFreq=DFLT_DBL, iNumFreqPoint=DFLT_INT, dBiasParam=DFLT_DBL, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=-1, strRefPath="", listAdvcRefStressResult=[])
        ```
        
        """
        message = "Analysis.ADVC.MakeProcess.ModalFreqResp('{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{})".format(strName, strRefEigenDir, dRefLowFreq, dRefHighFreq, crModalDampingRatio, crExcitationFreq, bAutoFreqInterval, dMaxFreq, dMinFreq, iNumFreqPoint, dBiasParam, crEdit, listLoadNode, listLoadCaseNode, listLoadNodeContact, ilOutputParamList, iRefType, strRefPath, listAdvcRefStressResult)
        return JPT_RUN_LINE(message)

    def ResponseSpectrum(self, strName="", strRefEigenDir="", dRefLowFreq=DFLT_DBL, dRefHighFreq=DFLT_DBL, iPropMethod=0, iSpttype=0, dSptFactor0=DFLT_DBL, crSpt0=None, dSptFactor1=DFLT_DBL, crSpt1=None, dSptFactor2=DFLT_DBL, crSpt2=None, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=0, strRefPath="", listAdvcRefStressResult=[]):
        r"""
        ## Description
        
        create advc response spectrum process
        
        ## Syntax
        
        ```python
        Analysis.ADVC.MakeProcess.ResponseSpectrum(strName="", strRefEigenDir="", dRefLowFreq=DFLT_DBL, dRefHighFreq=DFLT_DBL, iPropMethod=0, iSpttype=0, dSptFactor0=DFLT_DBL, crSpt0=None, dSptFactor1=DFLT_DBL, crSpt1=None, dSptFactor2=DFLT_DBL, crSpt2=None, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=0, strRefPath="", listAdvcRefStressResult=[])
        ```
        
        Macro: {ref}`Macro-Analysis-AdvcSpectrumProcess`
        
        Ribbon: {menuselection}`Analysis --> ADVC --> MakeProcess --> ResponseSpectrum`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`strRefEigenDir`**
        : A _String_ specifying the reference eigen direction. The default value is "".
        
        **`dRefLowFreq`**
        : A _Double_ specifying the reference low frequence. The default value is DFLT_DBL.
        
        **`dRefHighFreq`**
        : A _Double_ specifying the reference high frequence. The default value is DFLT_DBL.
        
        **`iPropMethod`**
        : An _Integer_ specifying the property method. The default value is 0.
        
        **`iSpttype`**
        : An _Integer_ specifying the spectrum type. The default value is 0.
        
        **`dSptFactor0`**
        : A _Double_ specifying the spectrum factor0. The default value is DFLT_DBL.
        
        **`crSpt0`**
        : A _Cursor_ specifying the spt0. The default value is None.
        
        **`dSptFactor1`**
        : A _Double_ specifying the spectrum factor1. The default value is DFLT_DBL.
        
        **`crSpt1`**
        : A _Cursor_ specifying the spectrum 1. The default value is None.
        
        **`dSptFactor2`**
        : A _Double_ specifying the spectrum factor2. The default value is DFLT_DBL.
        
        **`crSpt2`**
        : A _Cursor_ specifying the spectrum 2. The default value is None.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`listLoadNode`**
        : A _LOAD_NODE List_ specifying the load node. The default value is [].
        
        **`listLoadCaseNode`**
        : A _LOAD_CASE_NODE List_ specifying the load case node. The default value is [].
        
        **`listLoadNodeContact`**
        : A _LOAD_NODE_CONTACT List_ specifying the load node contact. The default value is [].
        
        **`ilOutputParamList`**
        : A _Integer List_ specifying the output param list. The default value is [].
        
        **`iRefType`**
        : An _Integer_ specifying the reference type. The default value is 0.
        
        **`strRefPath`**
        : A _String_ specifying the reference path. The default value is "".
        
        **`listAdvcRefStressResult`**
        : A _ADVC_REF_STRESS_RESULT List_ specifying the advc reference stress result. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.ADVC.MakeProcess.ResponseSpectrum(strName="", strRefEigenDir="", dRefLowFreq=DFLT_DBL, dRefHighFreq=DFLT_DBL, iPropMethod=0, iSpttype=0, dSptFactor0=DFLT_DBL, crSpt0=None, dSptFactor1=DFLT_DBL, crSpt1=None, dSptFactor2=DFLT_DBL, crSpt2=None, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=0, strRefPath="", listAdvcRefStressResult=[])
        ```
        
        """
        message = "Analysis.ADVC.MakeProcess.ResponseSpectrum('{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{})".format(strName, strRefEigenDir, dRefLowFreq, dRefHighFreq, iPropMethod, iSpttype, dSptFactor0, crSpt0, dSptFactor1, crSpt1, dSptFactor2, crSpt2, crEdit, listLoadNode, listLoadCaseNode, listLoadNodeContact, ilOutputParamList, iRefType, strRefPath, listAdvcRefStressResult)
        return JPT_RUN_LINE(message)

    def SteadyState(self, strName="", iEndType=1, dMaxTime=1, iFixedOrAuto=0, dMaxChange=DFLT_DBL, dInitDt=DFLT_DBL, iDefineMaxDt=0, dMaxDt=DFLT_DBL, iDefineMinDt=0, dMinDt=DFLT_DBL, dFixedDt=DFLT_DBL, iOutputLast=-1, iOutputInterval=DFLT_INT, iRestartLast=-1, iRestartInterval=DFLT_INT, dOutputTimeInterval=DFLT_DBL, dRestartTimeInterval=DFLT_DBL, iOutputInit=-1, iListOutputInterval=DFLT_INT, bConvergence=False, dCgTol=DFLT_DBL, dCgNrTol=DFLT_DBL, dCgDispTol=DFLT_DBL, dCgNrDispTol=DFLT_DBL, dCgDispLimitTol=DFLT_DBL, dCgTotalDispLimitTol=DFLT_DBL, dNewtonTol=DFLT_DBL, dNewtonDispTol=DFLT_DBL, dNewtonDispLimitTol=DFLT_DBL, dNewtonTotalDispLimitTol=DFLT_DBL, iCgloopMax=DFLT_INT, iNewtonMax=DFLT_INT, dHtNlLoopTol=DFLT_DBL, iHtNlLoopMax=DFLT_INT, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[]):
        r"""
        ## Description
        
        create advc heat transfer steady state process
        
        ## Syntax
        
        ```python
        Analysis.ADVC.MakeProcess.SteadyState(strName="", iEndType=1, dMaxTime=1, iFixedOrAuto=0, dMaxChange=DFLT_DBL, dInitDt=DFLT_DBL, iDefineMaxDt=0, dMaxDt=DFLT_DBL, iDefineMinDt=0, dMinDt=DFLT_DBL, dFixedDt=DFLT_DBL, iOutputLast=-1, iOutputInterval=DFLT_INT, iRestartLast=-1, iRestartInterval=DFLT_INT, dOutputTimeInterval=DFLT_DBL, dRestartTimeInterval=DFLT_DBL, iOutputInit=-1, iListOutputInterval=DFLT_INT, bConvergence=False, dCgTol=DFLT_DBL, dCgNrTol=DFLT_DBL, dCgDispTol=DFLT_DBL, dCgNrDispTol=DFLT_DBL, dCgDispLimitTol=DFLT_DBL, dCgTotalDispLimitTol=DFLT_DBL, dNewtonTol=DFLT_DBL, dNewtonDispTol=DFLT_DBL, dNewtonDispLimitTol=DFLT_DBL, dNewtonTotalDispLimitTol=DFLT_DBL, iCgloopMax=DFLT_INT, iNewtonMax=DFLT_INT, dHtNlLoopTol=DFLT_DBL, iHtNlLoopMax=DFLT_INT, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[])
        ```
        
        Macro: {ref}`Macro-Analysis-AdvcSSHProcess`
        
        Ribbon: {menuselection}`Analysis --> ADVC --> MakeProcess --> SteadyState`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`iEndType`**
        : An _Integer_ specifying the end type. The default value is 1.
        
        **`dMaxTime`**
        : A _Double_ specifying the maximum time. The default value is 1.
        
        **`iFixedOrAuto`**
        : An _Integer_ specifying the fixed or auto. The default value is 0.
        
        **`dMaxChange`**
        : A _Double_ specifying the maximum change. The default value is DFLT_DBL.
        
        **`dInitDt`**
        : A _Double_ specifying the initial data. The default value is DFLT_DBL.
        
        **`iDefineMaxDt`**
        : An _Integer_ specifying the define maximum data. The default value is 0.
        
        **`dMaxDt`**
        : A _Double_ specifying the maximum data. The default value is DFLT_DBL.
        
        **`iDefineMinDt`**
        : An _Integer_ specifying the define minimum data. The default value is 0.
        
        **`dMinDt`**
        : A _Double_ specifying the minimum data. The default value is DFLT_DBL.
        
        **`dFixedDt`**
        : A _Double_ specifying the fixed data. The default value is DFLT_DBL.
        
        **`iOutputLast`**
        : An _Integer_ specifying the output last. The default value is -1.
        
        **`iOutputInterval`**
        : An _Integer_ specifying the output interval. The default value is DFLT_INT.
        
        **`iRestartLast`**
        : An _Integer_ specifying the restart last. The default value is -1.
        
        **`iRestartInterval`**
        : An _Integer_ specifying the restart interval. The default value is DFLT_INT.
        
        **`dOutputTimeInterval`**
        : A _Double_ specifying the output time interval. The default value is DFLT_DBL.
        
        **`dRestartTimeInterval`**
        : A _Double_ specifying the restart time interval. The default value is DFLT_DBL.
        
        **`iOutputInit`**
        : An _Integer_ specifying the output initial. The default value is -1.
        
        **`iListOutputInterval`**
        : An _Integer_ specifying the list output interval. The default value is DFLT_INT.
        
        **`bConvergence`**
        : A _Boolean_ specifying the convergence. The default value is False.
        
        **`dCgTol`**
        : A _Double_ specifying the cg tolerance. The default value is DFLT_DBL.
        
        **`dCgNrTol`**
        : A _Double_ specifying the cg nr tolerance. The default value is DFLT_DBL.
        
        **`dCgDispTol`**
        : A _Double_ specifying the cg displacement tolerance. The default value is DFLT_DBL.
        
        **`dCgNrDispTol`**
        : A _Double_ specifying the cg nr displacement tolerance. The default value is DFLT_DBL.
        
        **`dCgDispLimitTol`**
        : A _Double_ specifying the cg displacement limit tolerance. The default value is DFLT_DBL.
        
        **`dCgTotalDispLimitTol`**
        : A _Double_ specifying the cg total displacement limit tolerance. The default value is DFLT_DBL.
        
        **`dNewtonTol`**
        : A _Double_ specifying the newton tolerance. The default value is DFLT_DBL.
        
        **`dNewtonDispTol`**
        : A _Double_ specifying the newton displacement tolerance. The default value is DFLT_DBL.
        
        **`dNewtonDispLimitTol`**
        : A _Double_ specifying the newton displacement limit tolerance. The default value is DFLT_DBL.
        
        **`dNewtonTotalDispLimitTol`**
        : A _Double_ specifying the newton total displacement limit tolerance. The default value is DFLT_DBL.
        
        **`iCgloopMax`**
        : An _Integer_ specifying the cgloop maximum. The default value is DFLT_INT.
        
        **`iNewtonMax`**
        : An _Integer_ specifying the newton maximum. The default value is DFLT_INT.
        
        **`dHtNlLoopTol`**
        : A _Double_ specifying the ht nl loop tolerance. The default value is DFLT_DBL.
        
        **`iHtNlLoopMax`**
        : An _Integer_ specifying the ht nl loop maximum. The default value is DFLT_INT.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`listLoadNode`**
        : A _LOAD_NODE List_ specifying the load node. The default value is [].
        
        **`listLoadCaseNode`**
        : A _LOAD_CASE_NODE List_ specifying the load case node. The default value is [].
        
        **`listLoadNodeContact`**
        : A _LOAD_NODE_CONTACT List_ specifying the load node contact. The default value is [].
        
        **`ilOutputParamList`**
        : A _Integer List_ specifying the output param list. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.ADVC.MakeProcess.SteadyState(strName="", iEndType=1, dMaxTime=1, iFixedOrAuto=0, dMaxChange=DFLT_DBL, dInitDt=DFLT_DBL, iDefineMaxDt=0, dMaxDt=DFLT_DBL, iDefineMinDt=0, dMinDt=DFLT_DBL, dFixedDt=DFLT_DBL, iOutputLast=-1, iOutputInterval=DFLT_INT, iRestartLast=-1, iRestartInterval=DFLT_INT, dOutputTimeInterval=DFLT_DBL, dRestartTimeInterval=DFLT_DBL, iOutputInit=-1, iListOutputInterval=DFLT_INT, bConvergence=False, dCgTol=DFLT_DBL, dCgNrTol=DFLT_DBL, dCgDispTol=DFLT_DBL, dCgNrDispTol=DFLT_DBL, dCgDispLimitTol=DFLT_DBL, dCgTotalDispLimitTol=DFLT_DBL, dNewtonTol=DFLT_DBL, dNewtonDispTol=DFLT_DBL, dNewtonDispLimitTol=DFLT_DBL, dNewtonTotalDispLimitTol=DFLT_DBL, iCgloopMax=DFLT_INT, iNewtonMax=DFLT_INT, dHtNlLoopTol=DFLT_DBL, iHtNlLoopMax=DFLT_INT, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[])
        ```
        
        """
        message = "Analysis.ADVC.MakeProcess.SteadyState('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, iEndType, dMaxTime, iFixedOrAuto, dMaxChange, dInitDt, iDefineMaxDt, dMaxDt, iDefineMinDt, dMinDt, dFixedDt, iOutputLast, iOutputInterval, iRestartLast, iRestartInterval, dOutputTimeInterval, dRestartTimeInterval, iOutputInit, iListOutputInterval, bConvergence, dCgTol, dCgNrTol, dCgDispTol, dCgNrDispTol, dCgDispLimitTol, dCgTotalDispLimitTol, dNewtonTol, dNewtonDispTol, dNewtonDispLimitTol, dNewtonTotalDispLimitTol, iCgloopMax, iNewtonMax, dHtNlLoopTol, iHtNlLoopMax, crEdit, listLoadNode, listLoadCaseNode, listLoadNodeContact, ilOutputParamList)
        return JPT_RUN_LINE(message)

    def Transient(self, strName="", iEndType=1, dMaxTime=1, dSteadyRate=0.0, iFixedOrAuto=0, dMaxChange=DFLT_DBL, dInitDt=DFLT_DBL, iDefineMaxDt=0, dMaxDt=DFLT_DBL, iDefineMinDt=0, dMinDt=DFLT_DBL, dFixedDt=DFLT_DBL, iOutputLast=-1, iOutputInterval=DFLT_INT, iRestartLast=-1, iRestartInterval=DFLT_INT, dOutputTimeInterval=DFLT_DBL, dRestartTimeInterval=DFLT_DBL, iOutputInit=-1, iListOutputInterval=DFLT_INT, bConvergence=False, dCgTol=DFLT_DBL, dCgNrTol=DFLT_DBL, dCgDispTol=DFLT_DBL, dCgNrDispTol=DFLT_DBL, dCgDispLimitTol=DFLT_DBL, dCgTotalDispLimitTol=DFLT_DBL, dNewtonTol=DFLT_DBL, dNewtonDispTol=DFLT_DBL, dNewtonDispLimitTol=DFLT_DBL, dNewtonTotalDispLimitTol=DFLT_DBL, iCgloopMax=DFLT_INT, iNewtonMax=DFLT_INT, dHtNlLoopTol=DFLT_DBL, iHtNlLoopMax=DFLT_INT, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[]):
        r"""
        ## Description
        
        create advc heat transfer transient process
        
        ## Syntax
        
        ```python
        Analysis.ADVC.MakeProcess.Transient(strName="", iEndType=1, dMaxTime=1, dSteadyRate=0.0, iFixedOrAuto=0, dMaxChange=DFLT_DBL, dInitDt=DFLT_DBL, iDefineMaxDt=0, dMaxDt=DFLT_DBL, iDefineMinDt=0, dMinDt=DFLT_DBL, dFixedDt=DFLT_DBL, iOutputLast=-1, iOutputInterval=DFLT_INT, iRestartLast=-1, iRestartInterval=DFLT_INT, dOutputTimeInterval=DFLT_DBL, dRestartTimeInterval=DFLT_DBL, iOutputInit=-1, iListOutputInterval=DFLT_INT, bConvergence=False, dCgTol=DFLT_DBL, dCgNrTol=DFLT_DBL, dCgDispTol=DFLT_DBL, dCgNrDispTol=DFLT_DBL, dCgDispLimitTol=DFLT_DBL, dCgTotalDispLimitTol=DFLT_DBL, dNewtonTol=DFLT_DBL, dNewtonDispTol=DFLT_DBL, dNewtonDispLimitTol=DFLT_DBL, dNewtonTotalDispLimitTol=DFLT_DBL, iCgloopMax=DFLT_INT, iNewtonMax=DFLT_INT, dHtNlLoopTol=DFLT_DBL, iHtNlLoopMax=DFLT_INT, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[])
        ```
        
        Macro: {ref}`Macro-Analysis-AdvcTHProcess`
        
        Ribbon: {menuselection}`Analysis --> ADVC --> MakeProcess --> Transient`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`iEndType`**
        : An _Integer_ specifying the end type. The default value is 1.
        
        **`dMaxTime`**
        : A _Double_ specifying the maximum time. The default value is 1.
        
        **`dSteadyRate`**
        : A _Double_ specifying the steady rate. The default value is 0.0.
        
        **`iFixedOrAuto`**
        : An _Integer_ specifying the fixed or auto. The default value is 0.
        
        **`dMaxChange`**
        : A _Double_ specifying the maximum change. The default value is DFLT_DBL.
        
        **`dInitDt`**
        : A _Double_ specifying the initial data. The default value is DFLT_DBL.
        
        **`iDefineMaxDt`**
        : An _Integer_ specifying the define maximum data. The default value is 0.
        
        **`dMaxDt`**
        : A _Double_ specifying the maximum data. The default value is DFLT_DBL.
        
        **`iDefineMinDt`**
        : An _Integer_ specifying the define minimum data. The default value is 0.
        
        **`dMinDt`**
        : A _Double_ specifying the minimum data. The default value is DFLT_DBL.
        
        **`dFixedDt`**
        : A _Double_ specifying the fixed data. The default value is DFLT_DBL.
        
        **`iOutputLast`**
        : An _Integer_ specifying the output last. The default value is -1.
        
        **`iOutputInterval`**
        : An _Integer_ specifying the output interval. The default value is DFLT_INT.
        
        **`iRestartLast`**
        : An _Integer_ specifying the restart last. The default value is -1.
        
        **`iRestartInterval`**
        : An _Integer_ specifying the restart interval. The default value is DFLT_INT.
        
        **`dOutputTimeInterval`**
        : A _Double_ specifying the output time interval. The default value is DFLT_DBL.
        
        **`dRestartTimeInterval`**
        : A _Double_ specifying the restart time interval. The default value is DFLT_DBL.
        
        **`iOutputInit`**
        : An _Integer_ specifying the output initial. The default value is -1.
        
        **`iListOutputInterval`**
        : An _Integer_ specifying the list output interval. The default value is DFLT_INT.
        
        **`bConvergence`**
        : A _Boolean_ specifying the convergence. The default value is False.
        
        **`dCgTol`**
        : A _Double_ specifying the cg tolerance. The default value is DFLT_DBL.
        
        **`dCgNrTol`**
        : A _Double_ specifying the cg nr tolerance. The default value is DFLT_DBL.
        
        **`dCgDispTol`**
        : A _Double_ specifying the cg displacement tolerance. The default value is DFLT_DBL.
        
        **`dCgNrDispTol`**
        : A _Double_ specifying the cg nr displacement tolerance. The default value is DFLT_DBL.
        
        **`dCgDispLimitTol`**
        : A _Double_ specifying the cg displacement limit tolerance. The default value is DFLT_DBL.
        
        **`dCgTotalDispLimitTol`**
        : A _Double_ specifying the cg total displacement limit tolerance. The default value is DFLT_DBL.
        
        **`dNewtonTol`**
        : A _Double_ specifying the newton tolerance. The default value is DFLT_DBL.
        
        **`dNewtonDispTol`**
        : A _Double_ specifying the newton displacement tolerance. The default value is DFLT_DBL.
        
        **`dNewtonDispLimitTol`**
        : A _Double_ specifying the newton displacement limit tolerance. The default value is DFLT_DBL.
        
        **`dNewtonTotalDispLimitTol`**
        : A _Double_ specifying the newton total displacement limit tolerance. The default value is DFLT_DBL.
        
        **`iCgloopMax`**
        : An _Integer_ specifying the cgloop maximum. The default value is DFLT_INT.
        
        **`iNewtonMax`**
        : An _Integer_ specifying the newton maximum. The default value is DFLT_INT.
        
        **`dHtNlLoopTol`**
        : A _Double_ specifying the ht nl loop tolerance. The default value is DFLT_DBL.
        
        **`iHtNlLoopMax`**
        : An _Integer_ specifying the ht nl loop maximum. The default value is DFLT_INT.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`listLoadNode`**
        : A _LOAD_NODE List_ specifying the load node. The default value is [].
        
        **`listLoadCaseNode`**
        : A _LOAD_CASE_NODE List_ specifying the load case node. The default value is [].
        
        **`listLoadNodeContact`**
        : A _LOAD_NODE_CONTACT List_ specifying the load node contact. The default value is [].
        
        **`ilOutputParamList`**
        : A _Integer List_ specifying the output param list. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.ADVC.MakeProcess.Transient(strName="", iEndType=1, dMaxTime=1, dSteadyRate=0.0, iFixedOrAuto=0, dMaxChange=DFLT_DBL, dInitDt=DFLT_DBL, iDefineMaxDt=0, dMaxDt=DFLT_DBL, iDefineMinDt=0, dMinDt=DFLT_DBL, dFixedDt=DFLT_DBL, iOutputLast=-1, iOutputInterval=DFLT_INT, iRestartLast=-1, iRestartInterval=DFLT_INT, dOutputTimeInterval=DFLT_DBL, dRestartTimeInterval=DFLT_DBL, iOutputInit=-1, iListOutputInterval=DFLT_INT, bConvergence=False, dCgTol=DFLT_DBL, dCgNrTol=DFLT_DBL, dCgDispTol=DFLT_DBL, dCgNrDispTol=DFLT_DBL, dCgDispLimitTol=DFLT_DBL, dCgTotalDispLimitTol=DFLT_DBL, dNewtonTol=DFLT_DBL, dNewtonDispTol=DFLT_DBL, dNewtonDispLimitTol=DFLT_DBL, dNewtonTotalDispLimitTol=DFLT_DBL, iCgloopMax=DFLT_INT, iNewtonMax=DFLT_INT, dHtNlLoopTol=DFLT_DBL, iHtNlLoopMax=DFLT_INT, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[])
        ```
        
        """
        message = "Analysis.ADVC.MakeProcess.Transient('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, iEndType, dMaxTime, dSteadyRate, iFixedOrAuto, dMaxChange, dInitDt, iDefineMaxDt, dMaxDt, iDefineMinDt, dMinDt, dFixedDt, iOutputLast, iOutputInterval, iRestartLast, iRestartInterval, dOutputTimeInterval, dRestartTimeInterval, iOutputInit, iListOutputInterval, bConvergence, dCgTol, dCgNrTol, dCgDispTol, dCgNrDispTol, dCgDispLimitTol, dCgTotalDispLimitTol, dNewtonTol, dNewtonDispTol, dNewtonDispLimitTol, dNewtonTotalDispLimitTol, iCgloopMax, iNewtonMax, dHtNlLoopTol, iHtNlLoopMax, crEdit, listLoadNode, listLoadCaseNode, listLoadNodeContact, ilOutputParamList)
        return JPT_RUN_LINE(message)

    def Fatigue(self, strName="", bFatigue=False, iMethod=0, iStressAxis=0, iSafetyType=0, dSearchResolution=DFLT_DBL, dSafetyMax=DFLT_DBL, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=-1, strRefPath="", listAdvcRefStressResult=[]):
        r"""
        ## Description
        
        create advc fatigue process
        
        ## Syntax
        
        ```python
        Analysis.ADVC.MakeProcess.Fatigue(strName="", bFatigue=False, iMethod=0, iStressAxis=0, iSafetyType=0, dSearchResolution=DFLT_DBL, dSafetyMax=DFLT_DBL, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=-1, strRefPath="", listAdvcRefStressResult=[])
        ```
        
        Macro: {ref}`Macro-Analysis-AdvcFatigueProcess`
        
        Ribbon: {menuselection}`Analysis --> ADVC --> MakeProcess --> Fatigue`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`bFatigue`**
        : A _Boolean_ specifying the fatigue. The default value is False.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`iStressAxis`**
        : An _Integer_ specifying the stress axis. The default value is 0.
        
        **`iSafetyType`**
        : An _Integer_ specifying the safety type. The default value is 0.
        
        **`dSearchResolution`**
        : A _Double_ specifying the search resolution. The default value is DFLT_DBL.
        
        **`dSafetyMax`**
        : A _Double_ specifying the safety maximum. The default value is DFLT_DBL.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`listLoadNode`**
        : A _LOAD_NODE List_ specifying the load node. The default value is [].
        
        **`listLoadCaseNode`**
        : A _LOAD_CASE_NODE List_ specifying the load case node. The default value is [].
        
        **`listLoadNodeContact`**
        : A _LOAD_NODE_CONTACT List_ specifying the load node contact. The default value is [].
        
        **`ilOutputParamList`**
        : A _Integer List_ specifying the output param list. The default value is [].
        
        **`iRefType`**
        : An _Integer_ specifying the reference type. The default value is -1.
        
        **`strRefPath`**
        : A _String_ specifying the reference path. The default value is "".
        
        **`listAdvcRefStressResult`**
        : A _ADVC_REF_STRESS_RESULT List_ specifying the advc reference stress result. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.ADVC.MakeProcess.Fatigue(strName="", bFatigue=False, iMethod=0, iStressAxis=0, iSafetyType=0, dSearchResolution=DFLT_DBL, dSafetyMax=DFLT_DBL, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=-1, strRefPath="", listAdvcRefStressResult=[])
        ```
        
        """
        message = "Analysis.ADVC.MakeProcess.Fatigue('{}',{},{},{},{},{},{},{},{},{},{},{},{},'{}',{})".format(strName, bFatigue, iMethod, iStressAxis, iSafetyType, dSearchResolution, dSafetyMax, crEdit, listLoadNode, listLoadCaseNode, listLoadNodeContact, ilOutputParamList, iRefType, strRefPath, listAdvcRefStressResult)
        return JPT_RUN_LINE(message)

    def RandomResponse(self, strName="", strRefEigenDir="", dRefLowFreq=DFLT_DBL, dRefHighFreq=DFLT_DBL, crModalDampingRatio=None, crExcitationFreq=None, bAutoFreqInterval=False, dMaxFreq=DFLT_DBL, dMinFreq=DFLT_DBL, iNumFreqPoint=DFLT_INT, dBiasParam=DFLT_DBL, iPropMethod=0, iPSDtype=-1, iPSDdir=0, crPSDLoad=None, dPSDFactor=DFLT_DBL, dGravityAccel=DFLT_DBL, iOutputEigenFreqStep=-1, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=-1, strRefPath="", listAdvcRefStressResult=[]):
        r"""
        ## Description
        
        create advc random response process
        
        ## Syntax
        
        ```python
        Analysis.ADVC.MakeProcess.RandomResponse(strName="", strRefEigenDir="", dRefLowFreq=DFLT_DBL, dRefHighFreq=DFLT_DBL, crModalDampingRatio=None, crExcitationFreq=None, bAutoFreqInterval=False, dMaxFreq=DFLT_DBL, dMinFreq=DFLT_DBL, iNumFreqPoint=DFLT_INT, dBiasParam=DFLT_DBL, iPropMethod=0, iPSDtype=-1, iPSDdir=0, crPSDLoad=None, dPSDFactor=DFLT_DBL, dGravityAccel=DFLT_DBL, iOutputEigenFreqStep=-1, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=-1, strRefPath="", listAdvcRefStressResult=[])
        ```
        
        Macro: {ref}`Macro-Analysis-AdvcRandomProcess`
        
        Ribbon: {menuselection}`Analysis --> ADVC --> MakeProcess --> RandomResponse`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`strRefEigenDir`**
        : A _String_ specifying the reference eigen direction. The default value is "".
        
        **`dRefLowFreq`**
        : A _Double_ specifying the reference low frequence. The default value is DFLT_DBL.
        
        **`dRefHighFreq`**
        : A _Double_ specifying the reference high frequence. The default value is DFLT_DBL.
        
        **`crModalDampingRatio`**
        : A _Cursor_ specifying the modal damping ratio. The default value is None.
        
        **`crExcitationFreq`**
        : A _Cursor_ specifying the excitation frequence. The default value is None.
        
        **`bAutoFreqInterval`**
        : A _Boolean_ specifying the auto frequence interval. The default value is False.
        
        **`dMaxFreq`**
        : A _Double_ specifying the maximum frequence. The default value is DFLT_DBL.
        
        **`dMinFreq`**
        : A _Double_ specifying the minimum frequence. The default value is DFLT_DBL.
        
        **`iNumFreqPoint`**
        : An _Integer_ specifying the number frequence point. The default value is DFLT_INT.
        
        **`dBiasParam`**
        : A _Double_ specifying the bias param. The default value is DFLT_DBL.
        
        **`iPropMethod`**
        : An _Integer_ specifying the property method. The default value is 0.
        
        **`iPSDtype`**
        : An _Integer_ specifying the PSD type. The default value is -1.
        
        **`iPSDdir`**
        : An _Integer_ specifying the PSD ddir. The default value is 0.
        
        **`crPSDLoad`**
        : A _Cursor_ specifying the PSD load. The default value is None.
        
        **`dPSDFactor`**
        : A _Double_ specifying the PSD factor. The default value is DFLT_DBL.
        
        **`dGravityAccel`**
        : A _Double_ specifying the gravity accel. The default value is DFLT_DBL.
        
        **`iOutputEigenFreqStep`**
        : An _Integer_ specifying the output eigen frequence step. The default value is -1.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`listLoadNode`**
        : A _LOAD_NODE List_ specifying the load node. The default value is [].
        
        **`listLoadCaseNode`**
        : A _LOAD_CASE_NODE List_ specifying the load case node. The default value is [].
        
        **`listLoadNodeContact`**
        : A _LOAD_NODE_CONTACT List_ specifying the load node contact. The default value is [].
        
        **`ilOutputParamList`**
        : A _Integer List_ specifying the output param list. The default value is [].
        
        **`iRefType`**
        : An _Integer_ specifying the reference type. The default value is -1.
        
        **`strRefPath`**
        : A _String_ specifying the reference path. The default value is "".
        
        **`listAdvcRefStressResult`**
        : A _ADVC_REF_STRESS_RESULT List_ specifying the advc reference stress result. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.ADVC.MakeProcess.RandomResponse(strName="", strRefEigenDir="", dRefLowFreq=DFLT_DBL, dRefHighFreq=DFLT_DBL, crModalDampingRatio=None, crExcitationFreq=None, bAutoFreqInterval=False, dMaxFreq=DFLT_DBL, dMinFreq=DFLT_DBL, iNumFreqPoint=DFLT_INT, dBiasParam=DFLT_DBL, iPropMethod=0, iPSDtype=-1, iPSDdir=0, crPSDLoad=None, dPSDFactor=DFLT_DBL, dGravityAccel=DFLT_DBL, iOutputEigenFreqStep=-1, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=-1, strRefPath="", listAdvcRefStressResult=[])
        ```
        
        """
        message = "Analysis.ADVC.MakeProcess.RandomResponse('{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{})".format(strName, strRefEigenDir, dRefLowFreq, dRefHighFreq, crModalDampingRatio, crExcitationFreq, bAutoFreqInterval, dMaxFreq, dMinFreq, iNumFreqPoint, dBiasParam, iPropMethod, iPSDtype, iPSDdir, crPSDLoad, dPSDFactor, dGravityAccel, iOutputEigenFreqStep, crEdit, listLoadNode, listLoadCaseNode, listLoadNodeContact, ilOutputParamList, iRefType, strRefPath, listAdvcRefStressResult)
        return JPT_RUN_LINE(message)

class Analysis_AbaqusStep:
    def DynamicStep(self, abaqusDynamic=ABAQUS_DYNAMIC(), crEdit=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Analysis.AbaqusStep.DynamicStep(abaqusDynamic=ABAQUS_DYNAMIC(), crEdit=None)
        ```
        
        Macro: {ref}`Macro-Analysis-AbaqusDynamicStep`
        
        Ribbon: {menuselection}`Analysis --> AbaqusStep --> DynamicStep`
        
        ## Inputs
        
        **`abaqusDynamic`**
        : A _ABAQUS_DYNAMIC_ specifying the abaqus dynamic. The default value is ABAQUS_DYNAMIC().
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.AbaqusStep.DynamicStep(abaqusDynamic=ABAQUS_DYNAMIC(), crEdit=None)
        ```
        
        """
        message = "Analysis.AbaqusStep.DynamicStep({},{})".format(abaqusDynamic, crEdit)
        return JPT_RUN_LINE(message)

    def TransientStep(self, strName="", strDesp="", iEnableAutomatic=0, iMaxInc=0, dInitSize=DFLT_DBL, dMinSize=DFLT_DBL, dMaxSize=DFLT_DBL, dMaxAllowTChange=DFLT_DBL, iEndsteptBchecked=0, dlEndsteptTlist=[], dMaxAllowEmissivityChange=DFLT_DBL, iMethod=0, iMatrixStorage=0, iSolutionTech=0, iAllowedIters=0, dAdjustFactor=DFLT_DBL, iMaxContactIter=0, iEnableNlgeom=0, dTimePeriod=DFLT_DBL, iConvertDscntIter=0, iRamp=0, iExtrapolateMethod=0, listAbaqusOutputRequest=[], crEdit=None):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Analysis.AbaqusStep.TransientStep(strName="", strDesp="", iEnableAutomatic=0, iMaxInc=0, dInitSize=DFLT_DBL, dMinSize=DFLT_DBL, dMaxSize=DFLT_DBL, dMaxAllowTChange=DFLT_DBL, iEndsteptBchecked=0, dlEndsteptTlist=[], dMaxAllowEmissivityChange=DFLT_DBL, iMethod=0, iMatrixStorage=0, iSolutionTech=0, iAllowedIters=0, dAdjustFactor=DFLT_DBL, iMaxContactIter=0, iEnableNlgeom=0, dTimePeriod=DFLT_DBL, iConvertDscntIter=0, iRamp=0, iExtrapolateMethod=0, listAbaqusOutputRequest=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-Analysis-AbaqusTransientStep`
        
        Ribbon: {menuselection}`Analysis --> AbaqusStep --> TransientStep`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`strDesp`**
        : A _String_ specifying the description. The default value is "".
        
        **`iEnableAutomatic`**
        : An _Integer_ specifying the enable automatic. The default value is 0.
        
        **`iMaxInc`**
        : An _Integer_ specifying the maximum increment. The default value is 0.
        
        **`dInitSize`**
        : A _Double_ specifying the initial size. The default value is DFLT_DBL.
        
        **`dMinSize`**
        : A _Double_ specifying the minimum size. The default value is DFLT_DBL.
        
        **`dMaxSize`**
        : A _Double_ specifying the maximum size. The default value is DFLT_DBL.
        
        **`dMaxAllowTChange`**
        : A _Double_ specifying the maximum allow t change. The default value is DFLT_DBL.
        
        **`iEndsteptBchecked`**
        : An _Integer_ specifying the end step time check. The default value is 0.
        
        **`dlEndsteptTlist`**
        : A _Double List_ specifying the end step time table list. The default value is [].
        
        **`dMaxAllowEmissivityChange`**
        : A _Double_ specifying the maximum allow emissivity change. The default value is DFLT_DBL.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`iMatrixStorage`**
        : An _Integer_ specifying the matrix storage. The default value is 0.
        
        **`iSolutionTech`**
        : An _Integer_ specifying the solution technology. The default value is 0.
        
        **`iAllowedIters`**
        : An _Integer_ specifying the allowed iterators. The default value is 0.
        
        **`dAdjustFactor`**
        : A _Double_ specifying the adjust factor. The default value is DFLT_DBL.
        
        **`iMaxContactIter`**
        : An _Integer_ specifying the maximum contact iterator. The default value is 0.
        
        **`iEnableNlgeom`**
        : An _Integer_ specifying the enable nlgeom. The default value is 0.
        
        **`dTimePeriod`**
        : A _Double_ specifying the time period. The default value is DFLT_DBL.
        
        **`iConvertDscntIter`**
        : An _Integer_ specifying the convert destination count iterator. The default value is 0.
        
        **`iRamp`**
        : An _Integer_ specifying the ramp. The default value is 0.
        
        **`iExtrapolateMethod`**
        : An _Integer_ specifying the extrapolate method. The default value is 0.
        
        **`listAbaqusOutputRequest`**
        : A _ABAQUS_OUTPUT_REQUEST List_ specifying the abaqus output request. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.AbaqusStep.TransientStep(strName="", strDesp="", iEnableAutomatic=0, iMaxInc=0, dInitSize=DFLT_DBL, dMinSize=DFLT_DBL, dMaxSize=DFLT_DBL, dMaxAllowTChange=DFLT_DBL, iEndsteptBchecked=0, dlEndsteptTlist=[], dMaxAllowEmissivityChange=DFLT_DBL, iMethod=0, iMatrixStorage=0, iSolutionTech=0, iAllowedIters=0, dAdjustFactor=DFLT_DBL, iMaxContactIter=0, iEnableNlgeom=0, dTimePeriod=DFLT_DBL, iConvertDscntIter=0, iRamp=0, iExtrapolateMethod=0, listAbaqusOutputRequest=[], crEdit=None)
        ```
        
        """
        message = "Analysis.AbaqusStep.TransientStep('{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, strDesp, iEnableAutomatic, iMaxInc, dInitSize, dMinSize, dMaxSize, dMaxAllowTChange, iEndsteptBchecked, dlEndsteptTlist, dMaxAllowEmissivityChange, iMethod, iMatrixStorage, iSolutionTech, iAllowedIters, dAdjustFactor, iMaxContactIter, iEnableNlgeom, dTimePeriod, iConvertDscntIter, iRamp, iExtrapolateMethod, listAbaqusOutputRequest, crEdit)
        return JPT_RUN_LINE(message)

    def CoupledTDStep(self, strName, strDesp="", iEnableAutomatic=0, iMaxInc=100, dInitSize=1.0, dMinSize=1.0e-5, dMaxSize=1.0, abaqusPair1=ABAQUS_PAIR(), abaqusPair2=ABAQUS_PAIR(), iCSVIntegration=0, iMethod=0, iMatrixStorage=0, iSolutionTech=0, iAllowedIters=8, dAdjustFactor=1.0, iMaxContactIter=30, iType=0, iEnableUseAdaptive=1, dDampingfactor=0.0002, dMaxRationofStrainEnergy=0.05, iEnableNlgeom=0, dTimePeriod=1.0, iTransient=1, iConvertDscntIter=0, iRamp=1, iExtrapolateMethod=0, iEnableIncludeCSV=0, listAbaqusOutputRequest=[], crEdit=None):
        r"""
        ## Description
        
        create abaqus step of coupled Temp-Displacement
        
        ## Syntax
        
        ```python
        Analysis.AbaqusStep.CoupledTDStep(strName, strDesp="", iEnableAutomatic=0, iMaxInc=100, dInitSize=1.0, dMinSize=1.0e-5, dMaxSize=1.0, abaqusPair1=ABAQUS_PAIR(), abaqusPair2=ABAQUS_PAIR(), iCSVIntegration=0, iMethod=0, iMatrixStorage=0, iSolutionTech=0, iAllowedIters=8, dAdjustFactor=1.0, iMaxContactIter=30, iType=0, iEnableUseAdaptive=1, dDampingfactor=0.0002, dMaxRationofStrainEnergy=0.05, iEnableNlgeom=0, dTimePeriod=1.0, iTransient=1, iConvertDscntIter=0, iRamp=1, iExtrapolateMethod=0, iEnableIncludeCSV=0, listAbaqusOutputRequest=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-Analysis-AbaqusCoupledTDStep`
        
        Ribbon: {menuselection}`Analysis --> AbaqusStep --> CoupledTDStep`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`strDesp`**
        : A _String_ specifying the description. The default value is "".
        
        **`iEnableAutomatic`**
        : An _Integer_ specifying the enable automatic. The default value is 0.
        
        **`iMaxInc`**
        : An _Integer_ specifying the maximum increment. The default value is 100.
        
        **`dInitSize`**
        : A _Double_ specifying the initial size. The default value is 1.0.
        
        **`dMinSize`**
        : A _Double_ specifying the minimum size. The default value is 1.0e-5.
        
        **`dMaxSize`**
        : A _Double_ specifying the maximum size. The default value is 1.0.
        
        **`abaqusPair1`**
        : A _ABAQUS_PAIR1_ specifying the abaqus pair 1 data structure. The default value is ABAQUS_PAIR().
        
        **`abaqusPair2`**
        : A _ABAQUS_PAIR2_ specifying the abaqus pair 2 data structure. The default value is ABAQUS_PAIR().
        
        **`iCSVIntegration`**
        : An _Integer_ specifying the CSV integration. The default value is 0.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`iMatrixStorage`**
        : An _Integer_ specifying the matrix storage. The default value is 0.
        
        **`iSolutionTech`**
        : An _Integer_ specifying the solution technology. The default value is 0.
        
        **`iAllowedIters`**
        : An _Integer_ specifying the allowed iterators. The default value is 8.
        
        **`dAdjustFactor`**
        : A _Double_ specifying the adjust factor. The default value is 1.0.
        
        **`iMaxContactIter`**
        : An _Integer_ specifying the maximum contact iterator. The default value is 30.
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 0.
        
        **`iEnableUseAdaptive`**
        : An _Integer_ specifying the enable use adaptive. The default value is 1.
        
        **`dDampingfactor`**
        : A _Double_ specifying the dampingfactor. The default value is 0.0002.
        
        **`dMaxRationofStrainEnergy`**
        : A _Double_ specifying the maximum rationof strain energy. The default value is 0.05.
        
        **`iEnableNlgeom`**
        : An _Integer_ specifying the enable nlgeom. The default value is 0.
        
        **`dTimePeriod`**
        : A _Double_ specifying the time period. The default value is 1.0.
        
        **`iTransient`**
        : An _Integer_ specifying the transient. The default value is 1.
        
        **`iConvertDscntIter`**
        : An _Integer_ specifying the convert destination count iterator. The default value is 0.
        
        **`iRamp`**
        : An _Integer_ specifying the ramp. The default value is 1.
        
        **`iExtrapolateMethod`**
        : An _Integer_ specifying the extrapolate method. The default value is 0.
        
        **`iEnableIncludeCSV`**
        : An _Integer_ specifying the enable include CSV. The default value is 0.
        
        **`listAbaqusOutputRequest`**
        : A _ABAQUS_OUTPUT_REQUEST List_ specifying the abaqus output request. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.AbaqusStep.CoupledTDStep(strName, strDesp="", iEnableAutomatic=0, iMaxInc=100, dInitSize=1.0, dMinSize=1.0e-5, dMaxSize=1.0, abaqusPair1=ABAQUS_PAIR(), abaqusPair2=ABAQUS_PAIR(), iCSVIntegration=0, iMethod=0, iMatrixStorage=0, iSolutionTech=0, iAllowedIters=8, dAdjustFactor=1.0, iMaxContactIter=30, iType=0, iEnableUseAdaptive=1, dDampingfactor=0.0002, dMaxRationofStrainEnergy=0.05, iEnableNlgeom=0, dTimePeriod=1.0, iTransient=1, iConvertDscntIter=0, iRamp=1, iExtrapolateMethod=0, iEnableIncludeCSV=0, listAbaqusOutputRequest=[], crEdit=None)
        ```
        
        """
        message = "Analysis.AbaqusStep.CoupledTDStep('{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, strDesp, iEnableAutomatic, iMaxInc, dInitSize, dMinSize, dMaxSize, abaqusPair1, abaqusPair2, iCSVIntegration, iMethod, iMatrixStorage, iSolutionTech, iAllowedIters, dAdjustFactor, iMaxContactIter, iType, iEnableUseAdaptive, dDampingfactor, dMaxRationofStrainEnergy, iEnableNlgeom, dTimePeriod, iTransient, iConvertDscntIter, iRamp, iExtrapolateMethod, iEnableIncludeCSV, listAbaqusOutputRequest, crEdit)
        return JPT_RUN_LINE(message)

    def DynamicExplicitStep(self, strName, strDesp="", iEnableAutomatic=1, iIncrmtEstimator=0, abaqusPair1=ABAQUS_PAIR(), dTimeScalfactor=1.0, abaqusPair2=ABAQUS_PAIR(), iEnableNlgeom=1, dTimePeriod=1.0, iEnableIncludeHeatEffect=0, dLinearBlkVisco=0.06, dQuadrBlkVisco=1.2, listAbaqusOutputRequest=[], crEdit=None):
        r"""
        ## Description
        
        create abaqus step of abaqus dynamic explicit
        
        ## Syntax
        
        ```python
        Analysis.AbaqusStep.DynamicExplicitStep(strName, strDesp="", iEnableAutomatic=1, iIncrmtEstimator=0, abaqusPair1=ABAQUS_PAIR(), dTimeScalfactor=1.0, abaqusPair2=ABAQUS_PAIR(), iEnableNlgeom=1, dTimePeriod=1.0, iEnableIncludeHeatEffect=0, dLinearBlkVisco=0.06, dQuadrBlkVisco=1.2, listAbaqusOutputRequest=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-Analysis-AbaqusDynamicExplicitStep`
        
        Ribbon: {menuselection}`Analysis --> AbaqusStep --> DynamicExplicitStep`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`strDesp`**
        : A _String_ specifying the description. The default value is "".
        
        **`iEnableAutomatic`**
        : An _Integer_ specifying the enable automatic. The default value is 1.
        
        **`iIncrmtEstimator`**
        : An _Integer_ specifying the increment estimator. The default value is 0.
        
        **`abaqusPair1`**
        : A _ABAQUS_PAIR1_ specifying the abaqus pair 1 data structure. The default value is ABAQUS_PAIR().
        
        **`dTimeScalfactor`**
        : A _Double_ specifying the time scalfactor. The default value is 1.0.
        
        **`abaqusPair2`**
        : A _ABAQUS_PAIR2_ specifying the abaqus pair 2 data structure. The default value is ABAQUS_PAIR().
        
        **`iEnableNlgeom`**
        : An _Integer_ specifying the enable nlgeom. The default value is 1.
        
        **`dTimePeriod`**
        : A _Double_ specifying the time period. The default value is 1.0.
        
        **`iEnableIncludeHeatEffect`**
        : An _Integer_ specifying the enable include heat effect. The default value is 0.
        
        **`dLinearBlkVisco`**
        : A _Double_ specifying the linear block visco. The default value is 0.06.
        
        **`dQuadrBlkVisco`**
        : A _Double_ specifying the quadro block visco. The default value is 1.2.
        
        **`listAbaqusOutputRequest`**
        : A _ABAQUS_OUTPUT_REQUEST List_ specifying the abaqus output request. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.AbaqusStep.DynamicExplicitStep(strName, strDesp="", iEnableAutomatic=1, iIncrmtEstimator=0, abaqusPair1=ABAQUS_PAIR(), dTimeScalfactor=1.0, abaqusPair2=ABAQUS_PAIR(), iEnableNlgeom=1, dTimePeriod=1.0, iEnableIncludeHeatEffect=0, dLinearBlkVisco=0.06, dQuadrBlkVisco=1.2, listAbaqusOutputRequest=[], crEdit=None)
        ```
        
        """
        message = "Analysis.AbaqusStep.DynamicExplicitStep('{}','{}',{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, strDesp, iEnableAutomatic, iIncrmtEstimator, abaqusPair1, dTimeScalfactor, abaqusPair2, iEnableNlgeom, dTimePeriod, iEnableIncludeHeatEffect, dLinearBlkVisco, dQuadrBlkVisco, listAbaqusOutputRequest, crEdit)
        return JPT_RUN_LINE(message)

    def ModalStep(self, strName, strDesp="", iEigenSolver=0, iNFreqRequestbchecked=0, ilNFreqRequestTList=[], iFreqShiftbchecked=0, ilFreqShiftTList=[], iFreqRangebchecked=0, ilFreqRangeTList=[], iIncldAcoustic=0, iBlockSizebchecked=0, ilBlockSizeTList=[], iMaxBlkNumofLanczosStepbchecked=0, ilMaxBlkNumofLanczosStepTList=[], iEnableUseSIM=0, iEnableIncludeResMods=0, iNEigenRequest=2147483647, iMaxItersUsed=30, iVectorsUsed=2147483647, iMethod=0, iMatrixStorage=0, iNormalizeEigenBy=1, iEvalPropFreqbchecked=0, ilEvalPropFreqTList=[], abaqusOutputRequest=[], crEdit=None):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Analysis.AbaqusStep.ModalStep(strName, strDesp="", iEigenSolver=0, iNFreqRequestbchecked=0, ilNFreqRequestTList=[], iFreqShiftbchecked=0, ilFreqShiftTList=[], iFreqRangebchecked=0, ilFreqRangeTList=[], iIncldAcoustic=0, iBlockSizebchecked=0, ilBlockSizeTList=[], iMaxBlkNumofLanczosStepbchecked=0, ilMaxBlkNumofLanczosStepTList=[], iEnableUseSIM=0, iEnableIncludeResMods=0, iNEigenRequest=2147483647, iMaxItersUsed=30, iVectorsUsed=2147483647, iMethod=0, iMatrixStorage=0, iNormalizeEigenBy=1, iEvalPropFreqbchecked=0, ilEvalPropFreqTList=[], abaqusOutputRequest=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-Analysis-AbaqusModalStep`
        
        Ribbon: {menuselection}`Analysis --> AbaqusStep --> ModalStep`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`strDesp`**
        : A _String_ specifying the description. The default value is "".
        
        **`iEigenSolver`**
        : An _Integer_ specifying the eigen solver. The default value is 0.
        
        **`iNFreqRequestbchecked`**
        : An _Integer_ specifying the frequence request check. The default value is 0.
        
        **`ilNFreqRequestTList`**
        : A _Integer List_ specifying the frequence request table list. The default value is [].
        
        **`iFreqShiftbchecked`**
        : An _Integer_ specifying the frequence shiftbchecked. The default value is 0.
        
        **`ilFreqShiftTList`**
        : A _Integer List_ specifying the frequence shift table list. The default value is [].
        
        **`iFreqRangebchecked`**
        : An _Integer_ specifying the frequence range check. The default value is 0.
        
        **`ilFreqRangeTList`**
        : A _Integer List_ specifying the frequence range table list. The default value is [].
        
        **`iIncldAcoustic`**
        : An _Integer_ specifying the include acoustic. The default value is 0.
        
        **`iBlockSizebchecked`**
        : An _Integer_ specifying the block size check. The default value is 0.
        
        **`ilBlockSizeTList`**
        : A _Integer List_ specifying the block size table list. The default value is [].
        
        **`iMaxBlkNumofLanczosStepbchecked`**
        : An _Integer_ specifying the maximum block number of lanczos step check. The default value is 0.
        
        **`ilMaxBlkNumofLanczosStepTList`**
        : A _Integer List_ specifying the maximum block number of lanczos step table list. The default value is [].
        
        **`iEnableUseSIM`**
        : An _Integer_ specifying the enable use s i m. The default value is 0.
        
        **`iEnableIncludeResMods`**
        : An _Integer_ specifying the enable include result modes. The default value is 0.
        
        **`iNEigenRequest`**
        : An _Integer_ specifying the n eigen request. The default value is 2147483647.
        
        **`iMaxItersUsed`**
        : An _Integer_ specifying the maximum iterators used. The default value is 30.
        
        **`iVectorsUsed`**
        : An _Integer_ specifying the vectors used. The default value is 2147483647.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`iMatrixStorage`**
        : An _Integer_ specifying the matrix storage. The default value is 0.
        
        **`iNormalizeEigenBy`**
        : An _Integer_ specifying the normalize eigen by. The default value is 1.
        
        **`iEvalPropFreqbchecked`**
        : An _Integer_ specifying the evaluation property freqbchecked. The default value is 0.
        
        **`ilEvalPropFreqTList`**
        : A _Integer List_ specifying the evaluation property frequence table list. The default value is [].
        
        **`abaqusOutputRequest`**
        : A _ABAQUS_OUTPUT_REQUEST_ specifying the output request. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.AbaqusStep.ModalStep(strName, strDesp="", iEigenSolver=0, iNFreqRequestbchecked=0, ilNFreqRequestTList=[], iFreqShiftbchecked=0, ilFreqShiftTList=[], iFreqRangebchecked=0, ilFreqRangeTList=[], iIncldAcoustic=0, iBlockSizebchecked=0, ilBlockSizeTList=[], iMaxBlkNumofLanczosStepbchecked=0, ilMaxBlkNumofLanczosStepTList=[], iEnableUseSIM=0, iEnableIncludeResMods=0, iNEigenRequest=2147483647, iMaxItersUsed=30, iVectorsUsed=2147483647, iMethod=0, iMatrixStorage=0, iNormalizeEigenBy=1, iEvalPropFreqbchecked=0, ilEvalPropFreqTList=[], abaqusOutputRequest=[], crEdit=None)
        ```
        
        """
        message = "Analysis.AbaqusStep.ModalStep('{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, strDesp, iEigenSolver, iNFreqRequestbchecked, ilNFreqRequestTList, iFreqShiftbchecked, ilFreqShiftTList, iFreqRangebchecked, ilFreqRangeTList, iIncldAcoustic, iBlockSizebchecked, ilBlockSizeTList, iMaxBlkNumofLanczosStepbchecked, ilMaxBlkNumofLanczosStepTList, iEnableUseSIM, iEnableIncludeResMods, iNEigenRequest, iMaxItersUsed, iVectorsUsed, iMethod, iMatrixStorage, iNormalizeEigenBy, iEvalPropFreqbchecked, ilEvalPropFreqTList, abaqusOutputRequest, crEdit)
        return JPT_RUN_LINE(message)

    def StaticRiskStep(self, strName, strDesp="", iEnableAutomatic=0, iMaxInc=100, dInitSize=1.0, dMinSize=1.0e-5, dMaxSize=1.0, iMethod=0, iMatrixStorage=0, dMaxLdPropFactor=0.0, iEnableMaxLdPropFactor=0, iEnableMaxDisp=0, dMaxDisp=DFLT_DBL, iEnableMaxDispDof=DFLT_INT, strNdRgn="", iEnableNlgeom=0, iEnableIncludeHeatEffect=0, iConvertDscntIter=0, dTotalArcLength=1.0, iExtrapolateMethod=0, iEnableAcceptByMaxIters=0, iEnableLongTerm=0, iEnablePerturbation=0, iFullplasticregionBchecked=0, strlFullplasticregionTlist=[], iOutput=0, crEdit=None):
        r"""
        ## Description
        
        Abaqus Static Risk Step
        
        ## Syntax
        
        ```python
        Analysis.AbaqusStep.StaticRiskStep(strName, strDesp="", iEnableAutomatic=0, iMaxInc=100, dInitSize=1.0, dMinSize=1.0e-5, dMaxSize=1.0, iMethod=0, iMatrixStorage=0, dMaxLdPropFactor=0.0, iEnableMaxLdPropFactor=0, iEnableMaxDisp=0, dMaxDisp=DFLT_DBL, iEnableMaxDispDof=DFLT_INT, strNdRgn="", iEnableNlgeom=0, iEnableIncludeHeatEffect=0, iConvertDscntIter=0, dTotalArcLength=1.0, iExtrapolateMethod=0, iEnableAcceptByMaxIters=0, iEnableLongTerm=0, iEnablePerturbation=0, iFullplasticregionBchecked=0, strlFullplasticregionTlist=[], iOutput=0, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Analysis-AbaqusStaticRiskStep`
        
        Ribbon: {menuselection}`Analysis --> AbaqusStep --> StaticRiskStep`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`strDesp`**
        : A _String_ specifying the description. The default value is "".
        
        **`iEnableAutomatic`**
        : An _Integer_ specifying the enable automatic. The default value is 0.
        
        **`iMaxInc`**
        : An _Integer_ specifying the maximum increment. The default value is 100.
        
        **`dInitSize`**
        : A _Double_ specifying the initial size. The default value is 1.0.
        
        **`dMinSize`**
        : A _Double_ specifying the minimum size. The default value is 1.0e-5.
        
        **`dMaxSize`**
        : A _Double_ specifying the maximum size. The default value is 1.0.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`iMatrixStorage`**
        : An _Integer_ specifying the matrix storage. The default value is 0.
        
        **`dMaxLdPropFactor`**
        : A _Double_ specifying the maximum ld property factor. The default value is 0.0.
        
        **`iEnableMaxLdPropFactor`**
        : An _Integer_ specifying the enable maximum ld property factor. The default value is 0.
        
        **`iEnableMaxDisp`**
        : An _Integer_ specifying the enable maximum displacement. The default value is 0.
        
        **`dMaxDisp`**
        : A _Double_ specifying the maximum displacement. The default value is DFLT_DBL.
        
        **`iEnableMaxDispDof`**
        : An _Integer_ specifying the enable maximum displacement dof. The default value is DFLT_INT.
        
        **`strNdRgn`**
        : A _String_ specifying the nd rgn. The default value is "".
        
        **`iEnableNlgeom`**
        : An _Integer_ specifying the enable nlgeom. The default value is 0.
        
        **`iEnableIncludeHeatEffect`**
        : An _Integer_ specifying the enable include heat effect. The default value is 0.
        
        **`iConvertDscntIter`**
        : An _Integer_ specifying the convert destination count iterator. The default value is 0.
        
        **`dTotalArcLength`**
        : A _Double_ specifying the total arc length. The default value is 1.0.
        
        **`iExtrapolateMethod`**
        : An _Integer_ specifying the extrapolate method. The default value is 0.
        
        **`iEnableAcceptByMaxIters`**
        : An _Integer_ specifying the enable accept by maximum iterators. The default value is 0.
        
        **`iEnableLongTerm`**
        : An _Integer_ specifying the enable long term. The default value is 0.
        
        **`iEnablePerturbation`**
        : An _Integer_ specifying the enable perturbation. The default value is 0.
        
        **`iFullplasticregionBchecked`**
        : An _Integer_ specifying the fullplasticregion check. The default value is 0.
        
        **`strlFullplasticregionTlist`**
        : A _String List_ specifying the fullplasticregion table list. The default value is [].
        
        **`iOutput`**
        : An _Integer_ specifying the output. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.AbaqusStep.StaticRiskStep(strName, strDesp="", iEnableAutomatic=0, iMaxInc=100, dInitSize=1.0, dMinSize=1.0e-5, dMaxSize=1.0, iMethod=0, iMatrixStorage=0, dMaxLdPropFactor=0.0, iEnableMaxLdPropFactor=0, iEnableMaxDisp=0, dMaxDisp=DFLT_DBL, iEnableMaxDispDof=DFLT_INT, strNdRgn="", iEnableNlgeom=0, iEnableIncludeHeatEffect=0, iConvertDscntIter=0, dTotalArcLength=1.0, iExtrapolateMethod=0, iEnableAcceptByMaxIters=0, iEnableLongTerm=0, iEnablePerturbation=0, iFullplasticregionBchecked=0, strlFullplasticregionTlist=[], iOutput=0, crEdit=None)
        ```
        
        """
        message = "Analysis.AbaqusStep.StaticRiskStep('{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},'{}',{},{},{},{},{},{},{},{},{},'{}',{},{})".format(strName, strDesp, iEnableAutomatic, iMaxInc, dInitSize, dMinSize, dMaxSize, iMethod, iMatrixStorage, dMaxLdPropFactor, iEnableMaxLdPropFactor, iEnableMaxDisp, dMaxDisp, iEnableMaxDispDof, strNdRgn, iEnableNlgeom, iEnableIncludeHeatEffect, iConvertDscntIter, dTotalArcLength, iExtrapolateMethod, iEnableAcceptByMaxIters, iEnableLongTerm, iEnablePerturbation, iFullplasticregionBchecked, strlFullplasticregionTlist, iOutput, crEdit)
        return JPT_RUN_LINE(message)

    def SteadyStateStep(self, strName, strDesp="", iEnableAutomatic=0, iMaxInc=100, iNitSize=1, dMinSize=1.0e-5, dMaxSize=1.0, dMaxAllowTChange=DFLT_DBL, iEndStepbchecked=0, dlEndStepTList=[], dMaxAllowEmissivityChange=0.1, iMethod=0, iMatrixStorage=0, iSolutionTech=0, iAllowedIters=8, iAdjustFactor=1, iMaxContactIter=30, iEnableNlgeom=0, dTimePeriod=1.0, iConvertDscntIter=0, iRamp=0, iExtrapolateMethod=0, iOutput=0, crEdit=None):
        r"""
        ## Description
        
        Abaqus Steady State Step
        
        ## Syntax
        
        ```python
        Analysis.AbaqusStep.SteadyStateStep(strName, strDesp="", iEnableAutomatic=0, iMaxInc=100, iNitSize=1, dMinSize=1.0e-5, dMaxSize=1.0, dMaxAllowTChange=DFLT_DBL, iEndStepbchecked=0, dlEndStepTList=[], dMaxAllowEmissivityChange=0.1, iMethod=0, iMatrixStorage=0, iSolutionTech=0, iAllowedIters=8, iAdjustFactor=1, iMaxContactIter=30, iEnableNlgeom=0, dTimePeriod=1.0, iConvertDscntIter=0, iRamp=0, iExtrapolateMethod=0, iOutput=0, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Analysis-AbaqusSteadyStateStep`
        
        Ribbon: {menuselection}`Analysis --> AbaqusStep --> SteadyStateStep`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`strDesp`**
        : A _String_ specifying the description. The default value is "".
        
        **`iEnableAutomatic`**
        : An _Integer_ specifying the enable automatic. The default value is 0.
        
        **`iMaxInc`**
        : An _Integer_ specifying the maximum increment. The default value is 100.
        
        **`iNitSize`**
        : An _Integer_ specifying the initial size. The default value is 1.
        
        **`dMinSize`**
        : A _Double_ specifying the minimum size. The default value is 1.0e-5.
        
        **`dMaxSize`**
        : A _Double_ specifying the maximum size. The default value is 1.0.
        
        **`dMaxAllowTChange`**
        : A _Double_ specifying the maximum allow table change. The default value is DFLT_DBL.
        
        **`iEndStepbchecked`**
        : An _Integer_ specifying the end step check. The default value is 0.
        
        **`dlEndStepTList`**
        : A _Double List_ specifying the end step table list. The default value is [].
        
        **`dMaxAllowEmissivityChange`**
        : A _Double_ specifying the maximum allow emissivity change. The default value is 0.1.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`iMatrixStorage`**
        : An _Integer_ specifying the matrix storage. The default value is 0.
        
        **`iSolutionTech`**
        : An _Integer_ specifying the solution technology. The default value is 0.
        
        **`iAllowedIters`**
        : An _Integer_ specifying the allowed iterators. The default value is 8.
        
        **`iAdjustFactor`**
        : An _Integer_ specifying the adjust factor. The default value is 1.
        
        **`iMaxContactIter`**
        : An _Integer_ specifying the maximum contact iterator. The default value is 30.
        
        **`iEnableNlgeom`**
        : An _Integer_ specifying the enable nlgeom. The default value is 0.
        
        **`dTimePeriod`**
        : A _Double_ specifying the time period. The default value is 1.0.
        
        **`iConvertDscntIter`**
        : An _Integer_ specifying the convert destination count iterator. The default value is 0.
        
        **`iRamp`**
        : An _Integer_ specifying the ramp. The default value is 0.
        
        **`iExtrapolateMethod`**
        : An _Integer_ specifying the extrapolate method. The default value is 0.
        
        **`iOutput`**
        : An _Integer_ specifying the output. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.AbaqusStep.SteadyStateStep(strName, strDesp="", iEnableAutomatic=0, iMaxInc=100, iNitSize=1, dMinSize=1.0e-5, dMaxSize=1.0, dMaxAllowTChange=DFLT_DBL, iEndStepbchecked=0, dlEndStepTList=[], dMaxAllowEmissivityChange=0.1, iMethod=0, iMatrixStorage=0, iSolutionTech=0, iAllowedIters=8, iAdjustFactor=1, iMaxContactIter=30, iEnableNlgeom=0, dTimePeriod=1.0, iConvertDscntIter=0, iRamp=0, iExtrapolateMethod=0, iOutput=0, crEdit=None)
        ```
        
        """
        message = "Analysis.AbaqusStep.SteadyStateStep('{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, strDesp, iEnableAutomatic, iMaxInc, iNitSize, dMinSize, dMaxSize, dMaxAllowTChange, iEndStepbchecked, dlEndStepTList, dMaxAllowEmissivityChange, iMethod, iMatrixStorage, iSolutionTech, iAllowedIters, iAdjustFactor, iMaxContactIter, iEnableNlgeom, dTimePeriod, iConvertDscntIter, iRamp, iExtrapolateMethod, iOutput, crEdit)
        return JPT_RUN_LINE(message)

class Analysis_ACTRAN:
    def ExportBdf(self, strPath=""):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Analysis.ACTRAN.ExportBdf(strPath="")
        ```
        
        Macro: {ref}`Macro-Analysis-ExportActranBdf`
        
        Ribbon: {menuselection}`Analysis --> ACTRAN --> ExportBdf`
        
        ## Inputs
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.ACTRAN.ExportBdf(strPath="")
        ```
        
        """
        message = "Analysis.ACTRAN.ExportBdf('{}')".format(strPath)
        return JPT_RUN_LINE(message)

    def Run(self, actranAnalysis=ACTRAN_ANALYSIS(), crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Analysis.ACTRAN.Run(actranAnalysis=ACTRAN_ANALYSIS(), crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-Analysis-AnalysisActranRun`
        
        Ribbon: {menuselection}`Analysis --> ACTRAN --> Run`
        
        ## Inputs
        
        **`actranAnalysis`**
        : A _ACTRAN_ANALYSIS_ specifying the actran analysis data structure. The default value is ACTRAN_ANALYSIS().
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.ACTRAN.Run(actranAnalysis=ACTRAN_ANALYSIS(), crlTarget=[], crEdit=None)
        ```
        
        """
        message = "Analysis.ACTRAN.Run({},{},{})".format(actranAnalysis, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def CreateEdat(self, actranAnalysis=ACTRAN_ANALYSIS(), crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Analysis.ACTRAN.CreateEdat(actranAnalysis=ACTRAN_ANALYSIS(), crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-Analysis-AnalysisActranJob`
        
        Ribbon: {menuselection}`Analysis --> ACTRAN --> CreateEdat`
        
        ## Inputs
        
        **`actranAnalysis`**
        : A _ACTRAN_ANALYSIS_ specifying the actran analysis data structure. The default value is ACTRAN_ANALYSIS().
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.ACTRAN.CreateEdat(actranAnalysis=ACTRAN_ANALYSIS(), crlTarget=[], crEdit=None)
        ```
        
        """
        message = "Analysis.ACTRAN.CreateEdat({},{},{})".format(actranAnalysis, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

class Analysis_Analysis:
    def Abaqus(self, strName, bRBE2toMPC, bRenameProcess, iCodeType, iSurfDefType, iUnit, iWriteType, strDescription, crlStepSequence, crEdit, strlUserText, bExptNdEleGroups, bDeleteFloatingNodes, bExptFaceElemGroups2Surface, bLoadCase, bAutoAssignDummyProperty, crDummyMat):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Analysis.Analysis.Abaqus(strName, bRBE2toMPC, bRenameProcess, iCodeType, iSurfDefType, iUnit, iWriteType, strDescription, crlStepSequence, crEdit, strlUserText, bExptNdEleGroups, bDeleteFloatingNodes, bExptFaceElemGroups2Surface, bLoadCase, bAutoAssignDummyProperty, crDummyMat)
        ```
        
        Macro: {ref}`Macro-Analysis-CreateAbaqusJob`
        
        Ribbon: {menuselection}`Analysis --> Analysis --> Abaqus`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`bRBE2toMPC`**
        : A _Boolean_ specifying the RBE2 to MPC. This is a required input.
        
        **`bRenameProcess`**
        : A _Boolean_ specifying the rename process. This is a required input.
        
        **`iCodeType`**
        : An _Integer_ specifying the code type. This is a required input.
        
        **`iSurfDefType`**
        : An _Integer_ specifying the surface definition type. This is a required input.
        
        **`iUnit`**
        : An _Integer_ specifying the unit. This is a required input.
        
        **`iWriteType`**
        : An _Integer_ specifying the write type. This is a required input.
        
        **`strDescription`**
        : A _String_ specifying the description. This is a required input.
        
        **`crlStepSequence`**
        : A _Cursor List_ specifying the step sequence. This is a required input.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. This is a required input.
        
        **`strlUserText`**
        : A _String List_ specifying the user text. This is a required input.
        
        **`bExptNdEleGroups`**
        : A _Boolean_ specifying the exeption nd element groups. This is a required input.
        
        **`bDeleteFloatingNodes`**
        : A _Boolean_ specifying the delete floating nodes. This is a required input.
        
        **`bExptFaceElemGroups2Surface`**
        : A _Boolean_ specifying the exeption face element groups2 surface. This is a required input.
        
        **`bLoadCase`**
        : A _Boolean_ specifying the load case. This is a required input.
        
        **`bAutoAssignDummyProperty`**
        : A _Boolean_ specifying the auto assign dummy property. This is a required input.
        
        **`crDummyMat`**
        : A _Cursor_ specifying the dummy material. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.Analysis.Abaqus(strName, bRBE2toMPC, bRenameProcess, iCodeType, iSurfDefType, iUnit, iWriteType, strDescription, crlStepSequence, crEdit, strlUserText, bExptNdEleGroups, bDeleteFloatingNodes, bExptFaceElemGroups2Surface, bLoadCase, bAutoAssignDummyProperty, crDummyMat)
        ```
        
        """
        message = "Analysis.Analysis.Abaqus('{}',{},{},{},{},{},{},'{}',{},{},'{}',{},{},{},{},{},{})".format(strName, bRBE2toMPC, bRenameProcess, iCodeType, iSurfDefType, iUnit, iWriteType, strDescription, crlStepSequence, crEdit, strlUserText, bExptNdEleGroups, bDeleteFloatingNodes, bExptFaceElemGroups2Surface, bLoadCase, bAutoAssignDummyProperty, crDummyMat)
        return JPT_RUN_LINE(message)

class Analysis_Ansys:
    def HeadTransferSteady(self, strName, iJobdataAnatype=0, iJobdataSoltype=0, strJobdataJobname="Job1", strJobdataJobdescription="", bBasicdataBoutputdisplacements=False, bBasicdataBoutputreactionload=False, bBasicdataBoutputstrain=False, bBasicdataBoutputstress=False, iBasicdataIanalysisopt=0, bBasicdataBcalPressEffects=False, dBasicdataFunitem=0.0, dBasicdataFreftemp=0.0, dBasicdataFendloadtime=0.0, iBasicdataItimestep=0, iBasicdataIstepchosen=0, iBasicdataIsubstepnum=0, iBasicdataImaxsubstep=0, iBasicdataIminstepnum=0, dBasicdataFtimestepsize=0.0, dBasicdataFmintimestep=0.0, dBasicdataFmaxtimestep=0.0, iBasicdataIwritereslutfre=1, iBasicdataIn=1, bRunAPDL=False, bWriteResultDB=False, dFEndFreq=DFLT_DBL, dFStartFreq=DFLT_DBL, iFulltransdataIsolutionoption=0, dFulltransdataFpropchange=0.05, iFulltransdataIpointnum=64, dFulltransdataFmintemp=0.0, dFulltransdataFmaxtemp=0.0, iFulltransdataIequationsolv=0, dFulltransdataFtollevel=0.0, dFulltransdataFmultiplier=0.0, bFulltransdataBsignleprecision=False, bFulltransdataBmemorysave=False, dFulltransdataFtempdiff=1.1, dHarmonicdataFstartfreq=0.0, dHarmonicdataFendfreq=1.0, iHarmonicdataNsubsteps=0, dHarmonicdataFalphad=0.0, dHarmonicdataFbetad=0.0, dHarmonicdataFdmprat=0.0, bHarmonicdataBoutputdisplacements=False, bHarmonicdataBoutputstrain=False, bHarmonicdataBoutputstress=False, iLCId=0, iModeShape=0, iModaldataImodemethod=0, iModaldataIextractnum=1, bModaldataBexpandshape=True, iModaldataIexpandnum=0, bModaldataBuseapprox=False, bModaldataBinclprsseff=False, bModaldataBmemorysave=False, bModaldataBrsvec=False, bModaldataBoutputdisplacements=False, bModaldataBoutputstrain=False, bModaldataBoutputstress=False, iReduceddataIprintnum=0, bSsdataBmemorysave=False, bSsdataBoutputheatflux=False, bSsdataBoutputtemperature=False, bSsdataBpivotscheck=True, bSsdataBsignleprecision=False, dSsdataFmultiplier=0.0, dSsdataFtempdiff=0.0, dSsdataFtollevel=0.0, iSsdataIadaptivedes=0, iSsdataIequationsolv=0, iSsdataInpoption=0, strAnsysVersion="", strCommandLineOption="", bOutputSOLVE=False, iSubspacedataIrigidmode=0, iSubspacedataIworksize=8, iSubspacedataInpadnum=4, iSubspacedataIblocknum=5, iSubspacedataImaxiteratcnt=0, iSubspacedataIminnshift=0, iSubspacedataIseqcheck=0, bTransientdataBtraneffect=True, iTransientdataIloadingtype=0, dTransientdataFmassmatrixmult=0.0, dTransientdataFstiffmatrixmult=0.0, bTransientdataBmidstep=False, dTransientdataFtolerancebisection=0.0, dTransientdataFtolerancetimestep=0.0, iTransientdataItimeinteralgor=0, iTransientdataItimeinter=0, dTransientdataFgamma=0.005, dTransientdataFalpha=0.25250625, dTransientdataFdelta=0.505, dTransientdataFalphaf=0.005, dTransientdataFalpham=0.0, bTransientdataBoutputtemperature=False, bTransientdataBoutputheatflux=False, crEdit=None):
        r"""
        ## Description
        
        Set parameters
        
        ## Syntax
        
        ```python
        Analysis.Ansys.HeadTransferSteady(strName, iJobdataAnatype=0, iJobdataSoltype=0, strJobdataJobname="Job1", strJobdataJobdescription="", bBasicdataBoutputdisplacements=False, bBasicdataBoutputreactionload=False, bBasicdataBoutputstrain=False, bBasicdataBoutputstress=False, iBasicdataIanalysisopt=0, bBasicdataBcalPressEffects=False, dBasicdataFunitem=0.0, dBasicdataFreftemp=0.0, dBasicdataFendloadtime=0.0, iBasicdataItimestep=0, iBasicdataIstepchosen=0, iBasicdataIsubstepnum=0, iBasicdataImaxsubstep=0, iBasicdataIminstepnum=0, dBasicdataFtimestepsize=0.0, dBasicdataFmintimestep=0.0, dBasicdataFmaxtimestep=0.0, iBasicdataIwritereslutfre=1, iBasicdataIn=1, bRunAPDL=False, bWriteResultDB=False, dFEndFreq=DFLT_DBL, dFStartFreq=DFLT_DBL, iFulltransdataIsolutionoption=0, dFulltransdataFpropchange=0.05, iFulltransdataIpointnum=64, dFulltransdataFmintemp=0.0, dFulltransdataFmaxtemp=0.0, iFulltransdataIequationsolv=0, dFulltransdataFtollevel=0.0, dFulltransdataFmultiplier=0.0, bFulltransdataBsignleprecision=False, bFulltransdataBmemorysave=False, dFulltransdataFtempdiff=1.1, dHarmonicdataFstartfreq=0.0, dHarmonicdataFendfreq=1.0, iHarmonicdataNsubsteps=0, dHarmonicdataFalphad=0.0, dHarmonicdataFbetad=0.0, dHarmonicdataFdmprat=0.0, bHarmonicdataBoutputdisplacements=False, bHarmonicdataBoutputstrain=False, bHarmonicdataBoutputstress=False, iLCId=0, iModeShape=0, iModaldataImodemethod=0, iModaldataIextractnum=1, bModaldataBexpandshape=True, iModaldataIexpandnum=0, bModaldataBuseapprox=False, bModaldataBinclprsseff=False, bModaldataBmemorysave=False, bModaldataBrsvec=False, bModaldataBoutputdisplacements=False, bModaldataBoutputstrain=False, bModaldataBoutputstress=False, iReduceddataIprintnum=0, bSsdataBmemorysave=False, bSsdataBoutputheatflux=False, bSsdataBoutputtemperature=False, bSsdataBpivotscheck=True, bSsdataBsignleprecision=False, dSsdataFmultiplier=0.0, dSsdataFtempdiff=0.0, dSsdataFtollevel=0.0, iSsdataIadaptivedes=0, iSsdataIequationsolv=0, iSsdataInpoption=0, strAnsysVersion="", strCommandLineOption="", bOutputSOLVE=False, iSubspacedataIrigidmode=0, iSubspacedataIworksize=8, iSubspacedataInpadnum=4, iSubspacedataIblocknum=5, iSubspacedataImaxiteratcnt=0, iSubspacedataIminnshift=0, iSubspacedataIseqcheck=0, bTransientdataBtraneffect=True, iTransientdataIloadingtype=0, dTransientdataFmassmatrixmult=0.0, dTransientdataFstiffmatrixmult=0.0, bTransientdataBmidstep=False, dTransientdataFtolerancebisection=0.0, dTransientdataFtolerancetimestep=0.0, iTransientdataItimeinteralgor=0, iTransientdataItimeinter=0, dTransientdataFgamma=0.005, dTransientdataFalpha=0.25250625, dTransientdataFdelta=0.505, dTransientdataFalphaf=0.005, dTransientdataFalpham=0.0, bTransientdataBoutputtemperature=False, bTransientdataBoutputheatflux=False, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Analysis-CreateAnsysJob`
        
        Ribbon: {menuselection}`Analysis --> Ansys --> HeadTransferSteady`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`iJobdataAnatype`**
        : An _Integer_ specifying the job data analysis type. The default value is 0.
        
        **`iJobdataSoltype`**
        : An _Integer_ specifying the job data solution type. The default value is 0.
        
        **`strJobdataJobname`**
        : A _String_ specifying the job data job name. The default value is "Job1".
        
        **`strJobdataJobdescription`**
        : A _String_ specifying the job data job description. The default value is "".
        
        **`bBasicdataBoutputdisplacements`**
        : A _Boolean_ specifying the basic data output displacements. The default value is False.
        
        **`bBasicdataBoutputreactionload`**
        : A _Boolean_ specifying the basic data output reaction oad. The default value is False.
        
        **`bBasicdataBoutputstrain`**
        : A _Boolean_ specifying the basic data output strain. The default value is False.
        
        **`bBasicdataBoutputstress`**
        : A _Boolean_ specifying the basic data output stress. The default value is False.
        
        **`iBasicdataIanalysisopt`**
        : An _Integer_ specifying the basic data analysis option. The default value is 0.
        
        **`bBasicdataBcalPressEffects`**
        : A _Boolean_ specifying the basic data caculation press effects. The default value is False.
        
        **`dBasicdataFunitem`**
        : A _Double_ specifying the basic data unit temperature. The default value is 0.0.
        
        **`dBasicdataFreftemp`**
        : A _Double_ specifying the basic data reference temperature. The default value is 0.0.
        
        **`dBasicdataFendloadtime`**
        : A _Double_ specifying the basic data end load time. The default value is 0.0.
        
        **`iBasicdataItimestep`**
        : An _Integer_ specifying the basic data time step. The default value is 0.
        
        **`iBasicdataIstepchosen`**
        : An _Integer_ specifying the basic data step chosen. The default value is 0.
        
        **`iBasicdataIsubstepnum`**
        : An _Integer_ specifying the basic data sub step number. The default value is 0.
        
        **`iBasicdataImaxsubstep`**
        : An _Integer_ specifying the basic data maximum sub step. The default value is 0.
        
        **`iBasicdataIminstepnum`**
        : An _Integer_ specifying the basic data minimum sub step. The default value is 0.
        
        **`dBasicdataFtimestepsize`**
        : A _Double_ specifying the basic data time step size. The default value is 0.0.
        
        **`dBasicdataFmintimestep`**
        : A _Double_ specifying the basic data minimum sub step. The default value is 0.0.
        
        **`dBasicdataFmaxtimestep`**
        : A _Double_ specifying the basic data maximum sub step. The default value is 0.0.
        
        **`iBasicdataIwritereslutfre`**
        : An _Integer_ specifying the basic data write result frequency. The default value is 1.
        
        **`iBasicdataIn`**
        : An _Integer_ specifying the basic data in. The default value is 1.
        
        **`bRunAPDL`**
        : A _Boolean_ specifying the run Ansys APDL. The default value is False.
        
        **`bWriteResultDB`**
        : A _Boolean_ specifying the write result d . The default value is False.
        
        **`dFEndFreq`**
        : A _Double_ specifying the end frequence. The default value is DFLT_DBL.
        
        **`dFStartFreq`**
        : A _Double_ specifying the start frequence. The default value is DFLT_DBL.
        
        **`iFulltransdataIsolutionoption`**
        : An _Integer_ specifying the full translation data solution option. The default value is 0.
        
        **`dFulltransdataFpropchange`**
        : A _Double_ specifying the full translation data property change. The default value is 0.05.
        
        **`iFulltransdataIpointnum`**
        : An _Integer_ specifying the full translation data point number. The default value is 64.
        
        **`dFulltransdataFmintemp`**
        : A _Double_ specifying the full translation data minimum temperature. The default value is 0.0.
        
        **`dFulltransdataFmaxtemp`**
        : A _Double_ specifying the full translation data maximum temperature. The default value is 0.0.
        
        **`iFulltransdataIequationsolv`**
        : An _Integer_ specifying the full translation data equation solve. The default value is 0.
        
        **`dFulltransdataFtollevel`**
        : A _Double_ specifying the full translation data tolerance level. The default value is 0.0.
        
        **`dFulltransdataFmultiplier`**
        : A _Double_ specifying the full translation data multiplier. The default value is 0.0.
        
        **`bFulltransdataBsignleprecision`**
        : A _Boolean_ specifying the full translation data single precision. The default value is False.
        
        **`bFulltransdataBmemorysave`**
        : A _Boolean_ specifying the full translation data memory save. The default value is False.
        
        **`dFulltransdataFtempdiff`**
        : A _Double_ specifying the full translation data temperature difference. The default value is 1.1.
        
        **`dHarmonicdataFstartfreq`**
        : A _Double_ specifying the harmonic data start frequence. The default value is 0.0.
        
        **`dHarmonicdataFendfreq`**
        : A _Double_ specifying the harmonic data end frequence. The default value is 1.0.
        
        **`iHarmonicdataNsubsteps`**
        : An _Integer_ specifying the harmonic data sub steps. The default value is 0.
        
        **`dHarmonicdataFalphad`**
        : A _Double_ specifying the harmonic data alpha. The default value is 0.0.
        
        **`dHarmonicdataFbetad`**
        : A _Double_ specifying the harmonic data beta. The default value is 0.0.
        
        **`dHarmonicdataFdmprat`**
        : A _Double_ specifying the harmonic data DMP ratio. The default value is 0.0.
        
        **`bHarmonicdataBoutputdisplacements`**
        : A _Boolean_ specifying the harmonic data output displacements. The default value is False.
        
        **`bHarmonicdataBoutputstrain`**
        : A _Boolean_ specifying the harmonic data output strain. The default value is False.
        
        **`bHarmonicdataBoutputstress`**
        : A _Boolean_ specifying the harmonic data output stress. The default value is False.
        
        **`iLCId`**
        : An _Integer_ specifying the LC ID. The default value is 0.
        
        **`iModeShape`**
        : An _Integer_ specifying the mode shape. The default value is 0.
        
        **`iModaldataImodemethod`**
        : An _Integer_ specifying the modal data mode method. The default value is 0.
        
        **`iModaldataIextractnum`**
        : An _Integer_ specifying the modal data extract number. The default value is 1.
        
        **`bModaldataBexpandshape`**
        : A _Boolean_ specifying the modal data expand shape. The default value is True.
        
        **`iModaldataIexpandnum`**
        : An _Integer_ specifying the modal data expand number. The default value is 0.
        
        **`bModaldataBuseapprox`**
        : A _Boolean_ specifying the modal data use approximately. The default value is False.
        
        **`bModaldataBinclprsseff`**
        : A _Boolean_ specifying the modal data include prsseff. The default value is False.
        
        **`bModaldataBmemorysave`**
        : A _Boolean_ specifying the modal data memory save. The default value is False.
        
        **`bModaldataBrsvec`**
        : A _Boolean_ specifying the modal data resource vector. The default value is False.
        
        **`bModaldataBoutputdisplacements`**
        : A _Boolean_ specifying the modal data output displacements. The default value is False.
        
        **`bModaldataBoutputstrain`**
        : A _Boolean_ specifying the modal data output strain. The default value is False.
        
        **`bModaldataBoutputstress`**
        : A _Boolean_ specifying the modal data output stress. The default value is False.
        
        **`iReduceddataIprintnum`**
        : An _Integer_ specifying the reduceddata print number. The default value is 0.
        
        **`bSsdataBmemorysave`**
        : A _Boolean_ specifying the ssdata memory save. The default value is False.
        
        **`bSsdataBoutputheatflux`**
        : A _Boolean_ specifying the ssdata output heat flux. The default value is False.
        
        **`bSsdataBoutputtemperature`**
        : A _Boolean_ specifying the ssdata output temperature. The default value is False.
        
        **`bSsdataBpivotscheck`**
        : A _Boolean_ specifying the ssdata pivots check. The default value is True.
        
        **`bSsdataBsignleprecision`**
        : A _Boolean_ specifying the ssdata single precision. The default value is False.
        
        **`dSsdataFmultiplier`**
        : A _Double_ specifying the ssdata multiplier. The default value is 0.0.
        
        **`dSsdataFtempdiff`**
        : A _Double_ specifying the ssdata temperature difference. The default value is 0.0.
        
        **`dSsdataFtollevel`**
        : A _Double_ specifying the ssdata tolerance level. The default value is 0.0.
        
        **`iSsdataIadaptivedes`**
        : An _Integer_ specifying the ssdata adaptive destination. The default value is 0.
        
        **`iSsdataIequationsolv`**
        : An _Integer_ specifying the ssdata equation solve. The default value is 0.
        
        **`iSsdataInpoption`**
        : An _Integer_ specifying the ssdata inpoption. The default value is 0.
        
        **`strAnsysVersion`**
        : A _String_ specifying the ansys version. The default value is "".
        
        **`strCommandLineOption`**
        : A _String_ specifying the command line option. The default value is "".
        
        **`bOutputSOLVE`**
        : A _Boolean_ specifying the output solve. The default value is False.
        
        **`iSubspacedataIrigidmode`**
        : An _Integer_ specifying the subspace data rigid mode. The default value is 0.
        
        **`iSubspacedataIworksize`**
        : An _Integer_ specifying the subspace data work size. The default value is 8.
        
        **`iSubspacedataInpadnum`**
        : An _Integer_ specifying the subspace data inpad number. The default value is 4.
        
        **`iSubspacedataIblocknum`**
        : An _Integer_ specifying the subspace data block number. The default value is 5.
        
        **`iSubspacedataImaxiteratcnt`**
        : An _Integer_ specifying the subspace data maximum iterator number. The default value is 0.
        
        **`iSubspacedataIminnshift`**
        : An _Integer_ specifying the subspace data iminnshift. The default value is 0.
        
        **`iSubspacedataIseqcheck`**
        : An _Integer_ specifying the subspace data iseqcheck. The default value is 0.
        
        **`bTransientdataBtraneffect`**
        : A _Boolean_ specifying the transient data effection. The default value is True.
        
        **`iTransientdataIloadingtype`**
        : An _Integer_ specifying the transient data loading type. The default value is 0.
        
        **`dTransientdataFmassmatrixmult`**
        : A _Double_ specifying the transient data mass matrix multiple. The default value is 0.0.
        
        **`dTransientdataFstiffmatrixmult`**
        : A _Double_ specifying the transient data stiff matrix multiple. The default value is 0.0.
        
        **`bTransientdataBmidstep`**
        : A _Boolean_ specifying the transient data midle step. The default value is False.
        
        **`dTransientdataFtolerancebisection`**
        : A _Double_ specifying the transient data tolerance binary section. The default value is 0.0.
        
        **`dTransientdataFtolerancetimestep`**
        : A _Double_ specifying the transient data tolerance time step. The default value is 0.0.
        
        **`iTransientdataItimeinteralgor`**
        : An _Integer_ specifying the transient data time inter algorithm. The default value is 0.
        
        **`iTransientdataItimeinter`**
        : An _Integer_ specifying the transient data time inter. The default value is 0.
        
        **`dTransientdataFgamma`**
        : A _Double_ specifying the transient data gamma. The default value is 0.005.
        
        **`dTransientdataFalpha`**
        : A _Double_ specifying the transient data alpha. The default value is 0.25250625.
        
        **`dTransientdataFdelta`**
        : A _Double_ specifying the transient data delta. The default value is 0.505.
        
        **`dTransientdataFalphaf`**
        : A _Double_ specifying the transient data alpha f. The default value is 0.005.
        
        **`dTransientdataFalpham`**
        : A _Double_ specifying the transient data alpha m. The default value is 0.0.
        
        **`bTransientdataBoutputtemperature`**
        : A _Boolean_ specifying the transient data output temperature. The default value is False.
        
        **`bTransientdataBoutputheatflux`**
        : A _Boolean_ specifying the transient data output heat flux. The default value is False.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.Ansys.HeadTransferSteady(strName, iJobdataAnatype=0, iJobdataSoltype=0, strJobdataJobname="Job1", strJobdataJobdescription="", bBasicdataBoutputdisplacements=False, bBasicdataBoutputreactionload=False, bBasicdataBoutputstrain=False, bBasicdataBoutputstress=False, iBasicdataIanalysisopt=0, bBasicdataBcalPressEffects=False, dBasicdataFunitem=0.0, dBasicdataFreftemp=0.0, dBasicdataFendloadtime=0.0, iBasicdataItimestep=0, iBasicdataIstepchosen=0, iBasicdataIsubstepnum=0, iBasicdataImaxsubstep=0, iBasicdataIminstepnum=0, dBasicdataFtimestepsize=0.0, dBasicdataFmintimestep=0.0, dBasicdataFmaxtimestep=0.0, iBasicdataIwritereslutfre=1, iBasicdataIn=1, bRunAPDL=False, bWriteResultDB=False, dFEndFreq=DFLT_DBL, dFStartFreq=DFLT_DBL, iFulltransdataIsolutionoption=0, dFulltransdataFpropchange=0.05, iFulltransdataIpointnum=64, dFulltransdataFmintemp=0.0, dFulltransdataFmaxtemp=0.0, iFulltransdataIequationsolv=0, dFulltransdataFtollevel=0.0, dFulltransdataFmultiplier=0.0, bFulltransdataBsignleprecision=False, bFulltransdataBmemorysave=False, dFulltransdataFtempdiff=1.1, dHarmonicdataFstartfreq=0.0, dHarmonicdataFendfreq=1.0, iHarmonicdataNsubsteps=0, dHarmonicdataFalphad=0.0, dHarmonicdataFbetad=0.0, dHarmonicdataFdmprat=0.0, bHarmonicdataBoutputdisplacements=False, bHarmonicdataBoutputstrain=False, bHarmonicdataBoutputstress=False, iLCId=0, iModeShape=0, iModaldataImodemethod=0, iModaldataIextractnum=1, bModaldataBexpandshape=True, iModaldataIexpandnum=0, bModaldataBuseapprox=False, bModaldataBinclprsseff=False, bModaldataBmemorysave=False, bModaldataBrsvec=False, bModaldataBoutputdisplacements=False, bModaldataBoutputstrain=False, bModaldataBoutputstress=False, iReduceddataIprintnum=0, bSsdataBmemorysave=False, bSsdataBoutputheatflux=False, bSsdataBoutputtemperature=False, bSsdataBpivotscheck=True, bSsdataBsignleprecision=False, dSsdataFmultiplier=0.0, dSsdataFtempdiff=0.0, dSsdataFtollevel=0.0, iSsdataIadaptivedes=0, iSsdataIequationsolv=0, iSsdataInpoption=0, strAnsysVersion="", strCommandLineOption="", bOutputSOLVE=False, iSubspacedataIrigidmode=0, iSubspacedataIworksize=8, iSubspacedataInpadnum=4, iSubspacedataIblocknum=5, iSubspacedataImaxiteratcnt=0, iSubspacedataIminnshift=0, iSubspacedataIseqcheck=0, bTransientdataBtraneffect=True, iTransientdataIloadingtype=0, dTransientdataFmassmatrixmult=0.0, dTransientdataFstiffmatrixmult=0.0, bTransientdataBmidstep=False, dTransientdataFtolerancebisection=0.0, dTransientdataFtolerancetimestep=0.0, iTransientdataItimeinteralgor=0, iTransientdataItimeinter=0, dTransientdataFgamma=0.005, dTransientdataFalpha=0.25250625, dTransientdataFdelta=0.505, dTransientdataFalphaf=0.005, dTransientdataFalpham=0.0, bTransientdataBoutputtemperature=False, bTransientdataBoutputheatflux=False, crEdit=None)
        ```
        
        """
        message = "Analysis.Ansys.HeadTransferSteady('{}',{},{},'{}','{}',{},{},'{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}','{}',{},{},{},{},{},{},{},{},{},{},{},'{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},'{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, iJobdataAnatype, iJobdataSoltype, strJobdataJobname, strJobdataJobdescription, bBasicdataBoutputdisplacements, bBasicdataBoutputreactionload, bBasicdataBoutputstrain, bBasicdataBoutputstress, iBasicdataIanalysisopt, bBasicdataBcalPressEffects, dBasicdataFunitem, dBasicdataFreftemp, dBasicdataFendloadtime, iBasicdataItimestep, iBasicdataIstepchosen, iBasicdataIsubstepnum, iBasicdataImaxsubstep, iBasicdataIminstepnum, dBasicdataFtimestepsize, dBasicdataFmintimestep, dBasicdataFmaxtimestep, iBasicdataIwritereslutfre, iBasicdataIn, bRunAPDL, bWriteResultDB, dFEndFreq, dFStartFreq, iFulltransdataIsolutionoption, dFulltransdataFpropchange, iFulltransdataIpointnum, dFulltransdataFmintemp, dFulltransdataFmaxtemp, iFulltransdataIequationsolv, dFulltransdataFtollevel, dFulltransdataFmultiplier, bFulltransdataBsignleprecision, bFulltransdataBmemorysave, dFulltransdataFtempdiff, dHarmonicdataFstartfreq, dHarmonicdataFendfreq, iHarmonicdataNsubsteps, dHarmonicdataFalphad, dHarmonicdataFbetad, dHarmonicdataFdmprat, bHarmonicdataBoutputdisplacements, bHarmonicdataBoutputstrain, bHarmonicdataBoutputstress, iLCId, iModeShape, iModaldataImodemethod, iModaldataIextractnum, bModaldataBexpandshape, iModaldataIexpandnum, bModaldataBuseapprox, bModaldataBinclprsseff, bModaldataBmemorysave, bModaldataBrsvec, bModaldataBoutputdisplacements, bModaldataBoutputstrain, bModaldataBoutputstress, iReduceddataIprintnum, bSsdataBmemorysave, bSsdataBoutputheatflux, bSsdataBoutputtemperature, bSsdataBpivotscheck, bSsdataBsignleprecision, dSsdataFmultiplier, dSsdataFtempdiff, dSsdataFtollevel, iSsdataIadaptivedes, iSsdataIequationsolv, iSsdataInpoption, strAnsysVersion, strCommandLineOption, bOutputSOLVE, iSubspacedataIrigidmode, iSubspacedataIworksize, iSubspacedataInpadnum, iSubspacedataIblocknum, iSubspacedataImaxiteratcnt, iSubspacedataIminnshift, iSubspacedataIseqcheck, bTransientdataBtraneffect, iTransientdataIloadingtype, dTransientdataFmassmatrixmult, dTransientdataFstiffmatrixmult, bTransientdataBmidstep, dTransientdataFtolerancebisection, dTransientdataFtolerancetimestep, iTransientdataItimeinteralgor, iTransientdataItimeinter, dTransientdataFgamma, dTransientdataFalpha, dTransientdataFdelta, dTransientdataFalphaf, dTransientdataFalpham, bTransientdataBoutputtemperature, bTransientdataBoutputheatflux, crEdit)
        return JPT_RUN_LINE(message)

    def LinearStatic(self, strJobName, iJobdataAnatype=0, iJobdataSoltype=0, strJobdataJobname="Job1", strJobdataJobdescription="", bBasicdataBoutputdisplacements=False, bBasicdataBoutputreactionload=False, bBasicdataBoutputstrain=False, bBasicdataBoutputstress=False, iBasicdataIanalysisopt=0, bBasicdataBcalPressEffects=False, dBasicdataFunitem=0.0, dBasicdataFreftemp=0.0, dBasicdataFendloadtime=0.0, iBasicdataItimestep=0, iBasicdataIstepchosen=0, iBasicdataIsubstepnum=0, iBasicdataImaxsubstep=0, iBasicdataIminstepnum=0, dBasicdataFtimestepsize=0.0, dBasicdataFmintimestep=0.0, dBasicdataFmaxtimestep=0.0, iBasicdataIwritereslutfre=1, iBasicdataIn=1, bRunAPDL=False, bWriteResultDB=False, dFEndFreq=DFLT_DBL, dFStartFreq=DFLT_DBL, iFulltransdataIsolutionoption=0, dFulltransdataFpropchange=0.05, iFulltransdataIpointnum=64, dFulltransdataFmintemp=0.0, dFulltransdataFmaxtemp=0.0, iFulltransdataIequationsolv=0, dFulltransdataFtollevel=0.0, dFulltransdataFmultiplier=0.0, bFulltransdataBsignleprecision=False, bFulltransdataBmemorysave=False, dFulltransdataFtempdiff=1.1, dHarmonicdataFstartfreq=0.0, dHarmonicdataFendfreq=1.0, iHarmonicdataNsubsteps=0, dHarmonicdataFalphad=0.0, dHarmonicdataFbetad=0.0, dHarmonicdataFdmprat=0.0, bHarmonicdataBoutputdisplacements=False, bHarmonicdataBoutputstrain=False, bHarmonicdataBoutputstress=False, iLCId=0, iModeShape=0, iModaldataImodemethod=0, iModaldataIextractnum=1, bModaldataBexpandshape=True, iModaldataIexpandnum=0, bModaldataBuseapprox=False, bModaldataBinclprsseff=False, bModaldataBmemorysave=False, bModaldataBrsvec=False, bModaldataBoutputdisplacements=False, bModaldataBoutputstrain=False, bModaldataBoutputstress=False, iReduceddataIprintnum=0, bSsdataBmemorysave=False, bSsdataBoutputheatflux=False, bSsdataBoutputtemperature=False, bSsdataBpivotscheck=True, bSsdataBsignleprecision=False, dSsdataFmultiplier=0.0, dSsdataFtempdiff=0.0, dSsdataFtollevel=0.0, iSsdataIadaptivedes=0, iSsdataIequationsolv=0, iSsdataInpoption=0, strAnsysVersion="", strCommandLineOption="", bOutputSOLVE=False, iSubspacedataIrigidmode=0, iSubspacedataIworksize=8, iSubspacedataInpadnum=4, iSubspacedataIblocknum=5, iSubspacedataImaxiteratcnt=0, iSubspacedataIminnshift=0, iSubspacedataIseqcheck=0, bTransientdataBtraneffect=True, iTransientdataIloadingtype=0, dTransientdataFmassmatrixmult=0.0, dTransientdataFstiffmatrixmult=0.0, bTransientdataBmidstep=False, dTransientdataFtolerancebisection=0.0, dTransientdataFtolerancetimestep=0.0, iTransientdataItimeinteralgor=0, iTransientdataItimeinter=0, dTransientdataFgamma=0.005, dTransientdataFalpha=0.25250625, dTransientdataFdelta=0.505, dTransientdataFalphaf=0.005, dTransientdataFalpham=0.0, bTransientdataBoutputtemperature=False, bTransientdataBoutputheatflux=False, crEdit=None, strFileName="", crAnsysJob=None):
        r"""
        ## Description
        
        Create and export Ansys job for Linear Static Structural
        
        ## Syntax
        
        ```python
        Analysis.Ansys.LinearStatic(strJobName, iJobdataAnatype=0, iJobdataSoltype=0, strJobdataJobname="Job1", strJobdataJobdescription="", bBasicdataBoutputdisplacements=False, bBasicdataBoutputreactionload=False, bBasicdataBoutputstrain=False, bBasicdataBoutputstress=False, iBasicdataIanalysisopt=0, bBasicdataBcalPressEffects=False, dBasicdataFunitem=0.0, dBasicdataFreftemp=0.0, dBasicdataFendloadtime=0.0, iBasicdataItimestep=0, iBasicdataIstepchosen=0, iBasicdataIsubstepnum=0, iBasicdataImaxsubstep=0, iBasicdataIminstepnum=0, dBasicdataFtimestepsize=0.0, dBasicdataFmintimestep=0.0, dBasicdataFmaxtimestep=0.0, iBasicdataIwritereslutfre=1, iBasicdataIn=1, bRunAPDL=False, bWriteResultDB=False, dFEndFreq=DFLT_DBL, dFStartFreq=DFLT_DBL, iFulltransdataIsolutionoption=0, dFulltransdataFpropchange=0.05, iFulltransdataIpointnum=64, dFulltransdataFmintemp=0.0, dFulltransdataFmaxtemp=0.0, iFulltransdataIequationsolv=0, dFulltransdataFtollevel=0.0, dFulltransdataFmultiplier=0.0, bFulltransdataBsignleprecision=False, bFulltransdataBmemorysave=False, dFulltransdataFtempdiff=1.1, dHarmonicdataFstartfreq=0.0, dHarmonicdataFendfreq=1.0, iHarmonicdataNsubsteps=0, dHarmonicdataFalphad=0.0, dHarmonicdataFbetad=0.0, dHarmonicdataFdmprat=0.0, bHarmonicdataBoutputdisplacements=False, bHarmonicdataBoutputstrain=False, bHarmonicdataBoutputstress=False, iLCId=0, iModeShape=0, iModaldataImodemethod=0, iModaldataIextractnum=1, bModaldataBexpandshape=True, iModaldataIexpandnum=0, bModaldataBuseapprox=False, bModaldataBinclprsseff=False, bModaldataBmemorysave=False, bModaldataBrsvec=False, bModaldataBoutputdisplacements=False, bModaldataBoutputstrain=False, bModaldataBoutputstress=False, iReduceddataIprintnum=0, bSsdataBmemorysave=False, bSsdataBoutputheatflux=False, bSsdataBoutputtemperature=False, bSsdataBpivotscheck=True, bSsdataBsignleprecision=False, dSsdataFmultiplier=0.0, dSsdataFtempdiff=0.0, dSsdataFtollevel=0.0, iSsdataIadaptivedes=0, iSsdataIequationsolv=0, iSsdataInpoption=0, strAnsysVersion="", strCommandLineOption="", bOutputSOLVE=False, iSubspacedataIrigidmode=0, iSubspacedataIworksize=8, iSubspacedataInpadnum=4, iSubspacedataIblocknum=5, iSubspacedataImaxiteratcnt=0, iSubspacedataIminnshift=0, iSubspacedataIseqcheck=0, bTransientdataBtraneffect=True, iTransientdataIloadingtype=0, dTransientdataFmassmatrixmult=0.0, dTransientdataFstiffmatrixmult=0.0, bTransientdataBmidstep=False, dTransientdataFtolerancebisection=0.0, dTransientdataFtolerancetimestep=0.0, iTransientdataItimeinteralgor=0, iTransientdataItimeinter=0, dTransientdataFgamma=0.005, dTransientdataFalpha=0.25250625, dTransientdataFdelta=0.505, dTransientdataFalphaf=0.005, dTransientdataFalpham=0.0, bTransientdataBoutputtemperature=False, bTransientdataBoutputheatflux=False, crEdit=None, strFileName="", crAnsysJob=None)
        ```
        
        Macro: {ref}`Macro-Analysis-Ansys_LinearStaticStructural`
        
        Ribbon: {menuselection}`Analysis --> Ansys --> LinearStatic`
        
        ## Inputs
        
        **`strJobName`**
        : A _String_ specifying the job name. This is a required input.
        
        **`iJobdataAnatype`**
        : An _Integer_ specifying the job data analysis type. The default value is 0.
        
        **`iJobdataSoltype`**
        : An _Integer_ specifying the job data solution type. The default value is 0.
        
        **`strJobdataJobname`**
        : A _String_ specifying the job data job name. The default value is "Job1".
        
        **`strJobdataJobdescription`**
        : A _String_ specifying the job data job description. The default value is "".
        
        **`bBasicdataBoutputdisplacements`**
        : A _Boolean_ specifying the basic data output displacements. The default value is False.
        
        **`bBasicdataBoutputreactionload`**
        : A _Boolean_ specifying the basic data output reaction oad. The default value is False.
        
        **`bBasicdataBoutputstrain`**
        : A _Boolean_ specifying the basic data output strain. The default value is False.
        
        **`bBasicdataBoutputstress`**
        : A _Boolean_ specifying the basic data output stress. The default value is False.
        
        **`iBasicdataIanalysisopt`**
        : An _Integer_ specifying the basic data analysis option. The default value is 0.
        
        **`bBasicdataBcalPressEffects`**
        : A _Boolean_ specifying the basic data caculation press effects. The default value is False.
        
        **`dBasicdataFunitem`**
        : A _Double_ specifying the basic data unit temperature. The default value is 0.0.
        
        **`dBasicdataFreftemp`**
        : A _Double_ specifying the basic data reference temperature. The default value is 0.0.
        
        **`dBasicdataFendloadtime`**
        : A _Double_ specifying the basic data end load time. The default value is 0.0.
        
        **`iBasicdataItimestep`**
        : An _Integer_ specifying the basic data time step. The default value is 0.
        
        **`iBasicdataIstepchosen`**
        : An _Integer_ specifying the basic data step chosen. The default value is 0.
        
        **`iBasicdataIsubstepnum`**
        : An _Integer_ specifying the basic data sub step number. The default value is 0.
        
        **`iBasicdataImaxsubstep`**
        : An _Integer_ specifying the basic data maximum sub step. The default value is 0.
        
        **`iBasicdataIminstepnum`**
        : An _Integer_ specifying the basic data minimum sub step. The default value is 0.
        
        **`dBasicdataFtimestepsize`**
        : A _Double_ specifying the basic data time step size. The default value is 0.0.
        
        **`dBasicdataFmintimestep`**
        : A _Double_ specifying the basic data minimum sub step. The default value is 0.0.
        
        **`dBasicdataFmaxtimestep`**
        : A _Double_ specifying the basic data maximum sub step. The default value is 0.0.
        
        **`iBasicdataIwritereslutfre`**
        : An _Integer_ specifying the basic data write result frequency. The default value is 1.
        
        **`iBasicdataIn`**
        : An _Integer_ specifying the basic data in. The default value is 1.
        
        **`bRunAPDL`**
        : A _Boolean_ specifying the run Ansys APDL. The default value is False.
        
        **`bWriteResultDB`**
        : A _Boolean_ specifying the write result d . The default value is False.
        
        **`dFEndFreq`**
        : A _Double_ specifying the end frequence. The default value is DFLT_DBL.
        
        **`dFStartFreq`**
        : A _Double_ specifying the start frequence. The default value is DFLT_DBL.
        
        **`iFulltransdataIsolutionoption`**
        : An _Integer_ specifying the full translation data solution option. The default value is 0.
        
        **`dFulltransdataFpropchange`**
        : A _Double_ specifying the full translation data property change. The default value is 0.05.
        
        **`iFulltransdataIpointnum`**
        : An _Integer_ specifying the full translation data point number. The default value is 64.
        
        **`dFulltransdataFmintemp`**
        : A _Double_ specifying the full translation data minimum temperature. The default value is 0.0.
        
        **`dFulltransdataFmaxtemp`**
        : A _Double_ specifying the full translation data maximum temperature. The default value is 0.0.
        
        **`iFulltransdataIequationsolv`**
        : An _Integer_ specifying the full translation data equation solve. The default value is 0.
        
        **`dFulltransdataFtollevel`**
        : A _Double_ specifying the full translation data tolerance level. The default value is 0.0.
        
        **`dFulltransdataFmultiplier`**
        : A _Double_ specifying the full translation data multiplier. The default value is 0.0.
        
        **`bFulltransdataBsignleprecision`**
        : A _Boolean_ specifying the full translation data single precision. The default value is False.
        
        **`bFulltransdataBmemorysave`**
        : A _Boolean_ specifying the full translation data memory save. The default value is False.
        
        **`dFulltransdataFtempdiff`**
        : A _Double_ specifying the full translation data temperature difference. The default value is 1.1.
        
        **`dHarmonicdataFstartfreq`**
        : A _Double_ specifying the harmonic data start frequence. The default value is 0.0.
        
        **`dHarmonicdataFendfreq`**
        : A _Double_ specifying the harmonic data end frequence. The default value is 1.0.
        
        **`iHarmonicdataNsubsteps`**
        : An _Integer_ specifying the harmonic data sub steps. The default value is 0.
        
        **`dHarmonicdataFalphad`**
        : A _Double_ specifying the harmonic data alpha. The default value is 0.0.
        
        **`dHarmonicdataFbetad`**
        : A _Double_ specifying the harmonic data beta. The default value is 0.0.
        
        **`dHarmonicdataFdmprat`**
        : A _Double_ specifying the harmonic data DMP ratio. The default value is 0.0.
        
        **`bHarmonicdataBoutputdisplacements`**
        : A _Boolean_ specifying the harmonic data output displacements. The default value is False.
        
        **`bHarmonicdataBoutputstrain`**
        : A _Boolean_ specifying the harmonic data output strain. The default value is False.
        
        **`bHarmonicdataBoutputstress`**
        : A _Boolean_ specifying the harmonic data output stress. The default value is False.
        
        **`iLCId`**
        : An _Integer_ specifying the LC ID. The default value is 0.
        
        **`iModeShape`**
        : An _Integer_ specifying the mode shape. The default value is 0.
        
        **`iModaldataImodemethod`**
        : An _Integer_ specifying the modal data mode method. The default value is 0.
        
        **`iModaldataIextractnum`**
        : An _Integer_ specifying the modal data extract number. The default value is 1.
        
        **`bModaldataBexpandshape`**
        : A _Boolean_ specifying the modal data expand shape. The default value is True.
        
        **`iModaldataIexpandnum`**
        : An _Integer_ specifying the modal data expand number. The default value is 0.
        
        **`bModaldataBuseapprox`**
        : A _Boolean_ specifying the modal data use approximately. The default value is False.
        
        **`bModaldataBinclprsseff`**
        : A _Boolean_ specifying the modal data include prsseff. The default value is False.
        
        **`bModaldataBmemorysave`**
        : A _Boolean_ specifying the modal data memory save. The default value is False.
        
        **`bModaldataBrsvec`**
        : A _Boolean_ specifying the modal data resource vector. The default value is False.
        
        **`bModaldataBoutputdisplacements`**
        : A _Boolean_ specifying the modal data output displacements. The default value is False.
        
        **`bModaldataBoutputstrain`**
        : A _Boolean_ specifying the modal data output strain. The default value is False.
        
        **`bModaldataBoutputstress`**
        : A _Boolean_ specifying the modal data output stress. The default value is False.
        
        **`iReduceddataIprintnum`**
        : An _Integer_ specifying the reduceddata print number. The default value is 0.
        
        **`bSsdataBmemorysave`**
        : A _Boolean_ specifying the ssdata memory save. The default value is False.
        
        **`bSsdataBoutputheatflux`**
        : A _Boolean_ specifying the ssdata output heat flux. The default value is False.
        
        **`bSsdataBoutputtemperature`**
        : A _Boolean_ specifying the ssdata output temperature. The default value is False.
        
        **`bSsdataBpivotscheck`**
        : A _Boolean_ specifying the ssdata pivots check. The default value is True.
        
        **`bSsdataBsignleprecision`**
        : A _Boolean_ specifying the ssdata single precision. The default value is False.
        
        **`dSsdataFmultiplier`**
        : A _Double_ specifying the ssdata multiplier. The default value is 0.0.
        
        **`dSsdataFtempdiff`**
        : A _Double_ specifying the ssdata temperature difference. The default value is 0.0.
        
        **`dSsdataFtollevel`**
        : A _Double_ specifying the ssdata tolerance level. The default value is 0.0.
        
        **`iSsdataIadaptivedes`**
        : An _Integer_ specifying the ssdata adaptive destination. The default value is 0.
        
        **`iSsdataIequationsolv`**
        : An _Integer_ specifying the ssdata equation solve. The default value is 0.
        
        **`iSsdataInpoption`**
        : An _Integer_ specifying the ssdata inpoption. The default value is 0.
        
        **`strAnsysVersion`**
        : A _String_ specifying the ansys version. The default value is "".
        
        **`strCommandLineOption`**
        : A _String_ specifying the command line option. The default value is "".
        
        **`bOutputSOLVE`**
        : A _Boolean_ specifying the output solve. The default value is False.
        
        **`iSubspacedataIrigidmode`**
        : An _Integer_ specifying the subspace data rigid mode. The default value is 0.
        
        **`iSubspacedataIworksize`**
        : An _Integer_ specifying the subspace data work size. The default value is 8.
        
        **`iSubspacedataInpadnum`**
        : An _Integer_ specifying the subspace data inpad number. The default value is 4.
        
        **`iSubspacedataIblocknum`**
        : An _Integer_ specifying the subspace data block number. The default value is 5.
        
        **`iSubspacedataImaxiteratcnt`**
        : An _Integer_ specifying the subspace data maximum iterator number. The default value is 0.
        
        **`iSubspacedataIminnshift`**
        : An _Integer_ specifying the subspace data iminnshift. The default value is 0.
        
        **`iSubspacedataIseqcheck`**
        : An _Integer_ specifying the subspace data iseqcheck. The default value is 0.
        
        **`bTransientdataBtraneffect`**
        : A _Boolean_ specifying the transient data effection. The default value is True.
        
        **`iTransientdataIloadingtype`**
        : An _Integer_ specifying the transient data loading type. The default value is 0.
        
        **`dTransientdataFmassmatrixmult`**
        : A _Double_ specifying the transient data mass matrix multiple. The default value is 0.0.
        
        **`dTransientdataFstiffmatrixmult`**
        : A _Double_ specifying the transient data stiff matrix multiple. The default value is 0.0.
        
        **`bTransientdataBmidstep`**
        : A _Boolean_ specifying the transient data midle step. The default value is False.
        
        **`dTransientdataFtolerancebisection`**
        : A _Double_ specifying the transient data tolerance binary section. The default value is 0.0.
        
        **`dTransientdataFtolerancetimestep`**
        : A _Double_ specifying the transient data tolerance time step. The default value is 0.0.
        
        **`iTransientdataItimeinteralgor`**
        : An _Integer_ specifying the transient data time inter algorithm. The default value is 0.
        
        **`iTransientdataItimeinter`**
        : An _Integer_ specifying the transient data time inter. The default value is 0.
        
        **`dTransientdataFgamma`**
        : A _Double_ specifying the transient data gamma. The default value is 0.005.
        
        **`dTransientdataFalpha`**
        : A _Double_ specifying the transient data alpha. The default value is 0.25250625.
        
        **`dTransientdataFdelta`**
        : A _Double_ specifying the transient data delta. The default value is 0.505.
        
        **`dTransientdataFalphaf`**
        : A _Double_ specifying the transient data alpha f. The default value is 0.005.
        
        **`dTransientdataFalpham`**
        : A _Double_ specifying the transient data alpha m. The default value is 0.0.
        
        **`bTransientdataBoutputtemperature`**
        : A _Boolean_ specifying the transient data output temperature. The default value is False.
        
        **`bTransientdataBoutputheatflux`**
        : A _Boolean_ specifying the transient data output heat flux. The default value is False.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strFileName`**
        : A _String_ specifying the file name. The default value is "".
        
        **`crAnsysJob`**
        : A _Cursor_ specifying the ansys job. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.Ansys.LinearStatic(strJobName, iJobdataAnatype=0, iJobdataSoltype=0, strJobdataJobname="Job1", strJobdataJobdescription="", bBasicdataBoutputdisplacements=False, bBasicdataBoutputreactionload=False, bBasicdataBoutputstrain=False, bBasicdataBoutputstress=False, iBasicdataIanalysisopt=0, bBasicdataBcalPressEffects=False, dBasicdataFunitem=0.0, dBasicdataFreftemp=0.0, dBasicdataFendloadtime=0.0, iBasicdataItimestep=0, iBasicdataIstepchosen=0, iBasicdataIsubstepnum=0, iBasicdataImaxsubstep=0, iBasicdataIminstepnum=0, dBasicdataFtimestepsize=0.0, dBasicdataFmintimestep=0.0, dBasicdataFmaxtimestep=0.0, iBasicdataIwritereslutfre=1, iBasicdataIn=1, bRunAPDL=False, bWriteResultDB=False, dFEndFreq=DFLT_DBL, dFStartFreq=DFLT_DBL, iFulltransdataIsolutionoption=0, dFulltransdataFpropchange=0.05, iFulltransdataIpointnum=64, dFulltransdataFmintemp=0.0, dFulltransdataFmaxtemp=0.0, iFulltransdataIequationsolv=0, dFulltransdataFtollevel=0.0, dFulltransdataFmultiplier=0.0, bFulltransdataBsignleprecision=False, bFulltransdataBmemorysave=False, dFulltransdataFtempdiff=1.1, dHarmonicdataFstartfreq=0.0, dHarmonicdataFendfreq=1.0, iHarmonicdataNsubsteps=0, dHarmonicdataFalphad=0.0, dHarmonicdataFbetad=0.0, dHarmonicdataFdmprat=0.0, bHarmonicdataBoutputdisplacements=False, bHarmonicdataBoutputstrain=False, bHarmonicdataBoutputstress=False, iLCId=0, iModeShape=0, iModaldataImodemethod=0, iModaldataIextractnum=1, bModaldataBexpandshape=True, iModaldataIexpandnum=0, bModaldataBuseapprox=False, bModaldataBinclprsseff=False, bModaldataBmemorysave=False, bModaldataBrsvec=False, bModaldataBoutputdisplacements=False, bModaldataBoutputstrain=False, bModaldataBoutputstress=False, iReduceddataIprintnum=0, bSsdataBmemorysave=False, bSsdataBoutputheatflux=False, bSsdataBoutputtemperature=False, bSsdataBpivotscheck=True, bSsdataBsignleprecision=False, dSsdataFmultiplier=0.0, dSsdataFtempdiff=0.0, dSsdataFtollevel=0.0, iSsdataIadaptivedes=0, iSsdataIequationsolv=0, iSsdataInpoption=0, strAnsysVersion="", strCommandLineOption="", bOutputSOLVE=False, iSubspacedataIrigidmode=0, iSubspacedataIworksize=8, iSubspacedataInpadnum=4, iSubspacedataIblocknum=5, iSubspacedataImaxiteratcnt=0, iSubspacedataIminnshift=0, iSubspacedataIseqcheck=0, bTransientdataBtraneffect=True, iTransientdataIloadingtype=0, dTransientdataFmassmatrixmult=0.0, dTransientdataFstiffmatrixmult=0.0, bTransientdataBmidstep=False, dTransientdataFtolerancebisection=0.0, dTransientdataFtolerancetimestep=0.0, iTransientdataItimeinteralgor=0, iTransientdataItimeinter=0, dTransientdataFgamma=0.005, dTransientdataFalpha=0.25250625, dTransientdataFdelta=0.505, dTransientdataFalphaf=0.005, dTransientdataFalpham=0.0, bTransientdataBoutputtemperature=False, bTransientdataBoutputheatflux=False, crEdit=None, strFileName="", crAnsysJob=None)
        ```
        
        """
        message = "Analysis.Ansys.LinearStatic('{}',{},{},'{}','{}',{},{},'{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}','{}',{},{},{},{},{},{},{},{},{},{},{},'{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},'{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{})".format(strJobName, iJobdataAnatype, iJobdataSoltype, strJobdataJobname, strJobdataJobdescription, bBasicdataBoutputdisplacements, bBasicdataBoutputreactionload, bBasicdataBoutputstrain, bBasicdataBoutputstress, iBasicdataIanalysisopt, bBasicdataBcalPressEffects, dBasicdataFunitem, dBasicdataFreftemp, dBasicdataFendloadtime, iBasicdataItimestep, iBasicdataIstepchosen, iBasicdataIsubstepnum, iBasicdataImaxsubstep, iBasicdataIminstepnum, dBasicdataFtimestepsize, dBasicdataFmintimestep, dBasicdataFmaxtimestep, iBasicdataIwritereslutfre, iBasicdataIn, bRunAPDL, bWriteResultDB, dFEndFreq, dFStartFreq, iFulltransdataIsolutionoption, dFulltransdataFpropchange, iFulltransdataIpointnum, dFulltransdataFmintemp, dFulltransdataFmaxtemp, iFulltransdataIequationsolv, dFulltransdataFtollevel, dFulltransdataFmultiplier, bFulltransdataBsignleprecision, bFulltransdataBmemorysave, dFulltransdataFtempdiff, dHarmonicdataFstartfreq, dHarmonicdataFendfreq, iHarmonicdataNsubsteps, dHarmonicdataFalphad, dHarmonicdataFbetad, dHarmonicdataFdmprat, bHarmonicdataBoutputdisplacements, bHarmonicdataBoutputstrain, bHarmonicdataBoutputstress, iLCId, iModeShape, iModaldataImodemethod, iModaldataIextractnum, bModaldataBexpandshape, iModaldataIexpandnum, bModaldataBuseapprox, bModaldataBinclprsseff, bModaldataBmemorysave, bModaldataBrsvec, bModaldataBoutputdisplacements, bModaldataBoutputstrain, bModaldataBoutputstress, iReduceddataIprintnum, bSsdataBmemorysave, bSsdataBoutputheatflux, bSsdataBoutputtemperature, bSsdataBpivotscheck, bSsdataBsignleprecision, dSsdataFmultiplier, dSsdataFtempdiff, dSsdataFtollevel, iSsdataIadaptivedes, iSsdataIequationsolv, iSsdataInpoption, strAnsysVersion, strCommandLineOption, bOutputSOLVE, iSubspacedataIrigidmode, iSubspacedataIworksize, iSubspacedataInpadnum, iSubspacedataIblocknum, iSubspacedataImaxiteratcnt, iSubspacedataIminnshift, iSubspacedataIseqcheck, bTransientdataBtraneffect, iTransientdataIloadingtype, dTransientdataFmassmatrixmult, dTransientdataFstiffmatrixmult, bTransientdataBmidstep, dTransientdataFtolerancebisection, dTransientdataFtolerancetimestep, iTransientdataItimeinteralgor, iTransientdataItimeinter, dTransientdataFgamma, dTransientdataFalpha, dTransientdataFdelta, dTransientdataFalphaf, dTransientdataFalpham, bTransientdataBoutputtemperature, bTransientdataBoutputheatflux, crEdit, strFileName, crAnsysJob)
        return JPT_RUN_LINE(message)

    def NormalModes(self, strJobName, iJobdataAnatype=0, iJobdataSoltype=0, strJobdataJobname="Job1", strJobdataJobdescription="", bBasicdataBoutputdisplacements=False, bBasicdataBoutputreactionload=False, bBasicdataBoutputstrain=False, bBasicdataBoutputstress=False, iBasicdataIanalysisopt=0, bBasicdataBcalPressEffects=False, dBasicdataFunitem=0.0, dBasicdataFreftemp=0.0, dBasicdataFendloadtime=0.0, iBasicdataItimestep=0, iBasicdataIstepchosen=0, iBasicdataIsubstepnum=0, iBasicdataImaxsubstep=0, iBasicdataIminstepnum=0, dBasicdataFtimestepsize=0.0, dBasicdataFmintimestep=0.0, dBasicdataFmaxtimestep=0.0, iBasicdataIwritereslutfre=1, iBasicdataIn=1, bRunAPDL=False, bWriteResultDB=False, dFEndFreq=DFLT_DBL, dFStartFreq=DFLT_DBL, iFulltransdataIsolutionoption=0, dFulltransdataFpropchange=0.05, iFulltransdataIpointnum=64, dFulltransdataFmintemp=0.0, dFulltransdataFmaxtemp=0.0, iFulltransdataIequationsolv=0, dFulltransdataFtollevel=0.0, dFulltransdataFmultiplier=0.0, bFulltransdataBsignleprecision=False, bFulltransdataBmemorysave=False, dFulltransdataFtempdiff=1.1, dHarmonicdataFstartfreq=0.0, dHarmonicdataFendfreq=1.0, iHarmonicdataNsubsteps=0, dHarmonicdataFalphad=0.0, dHarmonicdataFbetad=0.0, dHarmonicdataFdmprat=0.0, bHarmonicdataBoutputdisplacements=False, bHarmonicdataBoutputstrain=False, bHarmonicdataBoutputstress=False, iLCId=0, iModeShape=0, iModaldataImodemethod=0, iModaldataIextractnum=1, bModaldataBexpandshape=True, iModaldataIexpandnum=0, bModaldataBuseapprox=False, bModaldataBinclprsseff=False, bModaldataBmemorysave=False, bModaldataBrsvec=False, bModaldataBoutputdisplacements=False, bModaldataBoutputstrain=False, bModaldataBoutputstress=False, iReduceddataIprintnum=0, bSsdataBmemorysave=False, bSsdataBoutputheatflux=False, bSsdataBoutputtemperature=False, bSsdataBpivotscheck=True, bSsdataBsignleprecision=False, dSsdataFmultiplier=0.0, dSsdataFtempdiff=0.0, dSsdataFtollevel=0.0, iSsdataIadaptivedes=0, iSsdataIequationsolv=0, iSsdataInpoption=0, strAnsysVersion="", strCommandLineOption="", bOutputSOLVE=False, iSubspacedataIrigidmode=0, iSubspacedataIworksize=8, iSubspacedataInpadnum=4, iSubspacedataIblocknum=5, iSubspacedataImaxiteratcnt=0, iSubspacedataIminnshift=0, iSubspacedataIseqcheck=0, bTransientdataBtraneffect=True, iTransientdataIloadingtype=0, dTransientdataFmassmatrixmult=0.0, dTransientdataFstiffmatrixmult=0.0, bTransientdataBmidstep=False, dTransientdataFtolerancebisection=0.0, dTransientdataFtolerancetimestep=0.0, iTransientdataItimeinteralgor=0, iTransientdataItimeinter=0, dTransientdataFgamma=0.005, dTransientdataFalpha=0.25250625, dTransientdataFdelta=0.505, dTransientdataFalphaf=0.005, dTransientdataFalpham=0.0, bTransientdataBoutputtemperature=False, bTransientdataBoutputheatflux=False, crEdit=None, strFileName="", crAnsysJob=None):
        r"""
        ## Description
        
        Create and export Ansys job for Normal Modes Structural
        
        ## Syntax
        
        ```python
        Analysis.Ansys.NormalModes(strJobName, iJobdataAnatype=0, iJobdataSoltype=0, strJobdataJobname="Job1", strJobdataJobdescription="", bBasicdataBoutputdisplacements=False, bBasicdataBoutputreactionload=False, bBasicdataBoutputstrain=False, bBasicdataBoutputstress=False, iBasicdataIanalysisopt=0, bBasicdataBcalPressEffects=False, dBasicdataFunitem=0.0, dBasicdataFreftemp=0.0, dBasicdataFendloadtime=0.0, iBasicdataItimestep=0, iBasicdataIstepchosen=0, iBasicdataIsubstepnum=0, iBasicdataImaxsubstep=0, iBasicdataIminstepnum=0, dBasicdataFtimestepsize=0.0, dBasicdataFmintimestep=0.0, dBasicdataFmaxtimestep=0.0, iBasicdataIwritereslutfre=1, iBasicdataIn=1, bRunAPDL=False, bWriteResultDB=False, dFEndFreq=DFLT_DBL, dFStartFreq=DFLT_DBL, iFulltransdataIsolutionoption=0, dFulltransdataFpropchange=0.05, iFulltransdataIpointnum=64, dFulltransdataFmintemp=0.0, dFulltransdataFmaxtemp=0.0, iFulltransdataIequationsolv=0, dFulltransdataFtollevel=0.0, dFulltransdataFmultiplier=0.0, bFulltransdataBsignleprecision=False, bFulltransdataBmemorysave=False, dFulltransdataFtempdiff=1.1, dHarmonicdataFstartfreq=0.0, dHarmonicdataFendfreq=1.0, iHarmonicdataNsubsteps=0, dHarmonicdataFalphad=0.0, dHarmonicdataFbetad=0.0, dHarmonicdataFdmprat=0.0, bHarmonicdataBoutputdisplacements=False, bHarmonicdataBoutputstrain=False, bHarmonicdataBoutputstress=False, iLCId=0, iModeShape=0, iModaldataImodemethod=0, iModaldataIextractnum=1, bModaldataBexpandshape=True, iModaldataIexpandnum=0, bModaldataBuseapprox=False, bModaldataBinclprsseff=False, bModaldataBmemorysave=False, bModaldataBrsvec=False, bModaldataBoutputdisplacements=False, bModaldataBoutputstrain=False, bModaldataBoutputstress=False, iReduceddataIprintnum=0, bSsdataBmemorysave=False, bSsdataBoutputheatflux=False, bSsdataBoutputtemperature=False, bSsdataBpivotscheck=True, bSsdataBsignleprecision=False, dSsdataFmultiplier=0.0, dSsdataFtempdiff=0.0, dSsdataFtollevel=0.0, iSsdataIadaptivedes=0, iSsdataIequationsolv=0, iSsdataInpoption=0, strAnsysVersion="", strCommandLineOption="", bOutputSOLVE=False, iSubspacedataIrigidmode=0, iSubspacedataIworksize=8, iSubspacedataInpadnum=4, iSubspacedataIblocknum=5, iSubspacedataImaxiteratcnt=0, iSubspacedataIminnshift=0, iSubspacedataIseqcheck=0, bTransientdataBtraneffect=True, iTransientdataIloadingtype=0, dTransientdataFmassmatrixmult=0.0, dTransientdataFstiffmatrixmult=0.0, bTransientdataBmidstep=False, dTransientdataFtolerancebisection=0.0, dTransientdataFtolerancetimestep=0.0, iTransientdataItimeinteralgor=0, iTransientdataItimeinter=0, dTransientdataFgamma=0.005, dTransientdataFalpha=0.25250625, dTransientdataFdelta=0.505, dTransientdataFalphaf=0.005, dTransientdataFalpham=0.0, bTransientdataBoutputtemperature=False, bTransientdataBoutputheatflux=False, crEdit=None, strFileName="", crAnsysJob=None)
        ```
        
        Macro: {ref}`Macro-Analysis-Ansys_NormalModesStructural`
        
        Ribbon: {menuselection}`Analysis --> Ansys --> NormalModes`
        
        ## Inputs
        
        **`strJobName`**
        : A _String_ specifying the job name. This is a required input.
        
        **`iJobdataAnatype`**
        : An _Integer_ specifying the job data analysis type. The default value is 0.
        
        **`iJobdataSoltype`**
        : An _Integer_ specifying the job data solution type. The default value is 0.
        
        **`strJobdataJobname`**
        : A _String_ specifying the job data job name. The default value is "Job1".
        
        **`strJobdataJobdescription`**
        : A _String_ specifying the job data job description. The default value is "".
        
        **`bBasicdataBoutputdisplacements`**
        : A _Boolean_ specifying the basic data output displacements. The default value is False.
        
        **`bBasicdataBoutputreactionload`**
        : A _Boolean_ specifying the basic data output reaction oad. The default value is False.
        
        **`bBasicdataBoutputstrain`**
        : A _Boolean_ specifying the basic data output strain. The default value is False.
        
        **`bBasicdataBoutputstress`**
        : A _Boolean_ specifying the basic data output stress. The default value is False.
        
        **`iBasicdataIanalysisopt`**
        : An _Integer_ specifying the basic data analysis option. The default value is 0.
        
        **`bBasicdataBcalPressEffects`**
        : A _Boolean_ specifying the basic data caculation press effects. The default value is False.
        
        **`dBasicdataFunitem`**
        : A _Double_ specifying the basic data unit temperature. The default value is 0.0.
        
        **`dBasicdataFreftemp`**
        : A _Double_ specifying the basic data reference temperature. The default value is 0.0.
        
        **`dBasicdataFendloadtime`**
        : A _Double_ specifying the basic data end load time. The default value is 0.0.
        
        **`iBasicdataItimestep`**
        : An _Integer_ specifying the basic data time step. The default value is 0.
        
        **`iBasicdataIstepchosen`**
        : An _Integer_ specifying the basic data step chosen. The default value is 0.
        
        **`iBasicdataIsubstepnum`**
        : An _Integer_ specifying the basic data sub step number. The default value is 0.
        
        **`iBasicdataImaxsubstep`**
        : An _Integer_ specifying the basic data maximum sub step. The default value is 0.
        
        **`iBasicdataIminstepnum`**
        : An _Integer_ specifying the basic data minimum sub step. The default value is 0.
        
        **`dBasicdataFtimestepsize`**
        : A _Double_ specifying the basic data time step size. The default value is 0.0.
        
        **`dBasicdataFmintimestep`**
        : A _Double_ specifying the basic data minimum sub step. The default value is 0.0.
        
        **`dBasicdataFmaxtimestep`**
        : A _Double_ specifying the basic data maximum sub step. The default value is 0.0.
        
        **`iBasicdataIwritereslutfre`**
        : An _Integer_ specifying the basic data write result frequency. The default value is 1.
        
        **`iBasicdataIn`**
        : An _Integer_ specifying the basic data increment. The default value is 1.
        
        **`bRunAPDL`**
        : A _Boolean_ specifying the run Ansys APDL. The default value is False.
        
        **`bWriteResultDB`**
        : A _Boolean_ specifying the write result database. The default value is False.
        
        **`dFEndFreq`**
        : A _Double_ specifying the end frequence. The default value is DFLT_DBL.
        
        **`dFStartFreq`**
        : A _Double_ specifying the start frequence. The default value is DFLT_DBL.
        
        **`iFulltransdataIsolutionoption`**
        : An _Integer_ specifying the full translation data solution option. The default value is 0.
        
        **`dFulltransdataFpropchange`**
        : A _Double_ specifying the full translation data property change. The default value is 0.05.
        
        **`iFulltransdataIpointnum`**
        : An _Integer_ specifying the full translation data point number. The default value is 64.
        
        **`dFulltransdataFmintemp`**
        : A _Double_ specifying the full translation data minimum temperature. The default value is 0.0.
        
        **`dFulltransdataFmaxtemp`**
        : A _Double_ specifying the full translation data maximum temperature. The default value is 0.0.
        
        **`iFulltransdataIequationsolv`**
        : An _Integer_ specifying the full translation data equation solve. The default value is 0.
        
        **`dFulltransdataFtollevel`**
        : A _Double_ specifying the full translation data tolerance level. The default value is 0.0.
        
        **`dFulltransdataFmultiplier`**
        : A _Double_ specifying the full translation data multiplier. The default value is 0.0.
        
        **`bFulltransdataBsignleprecision`**
        : A _Boolean_ specifying the full translation data single precision. The default value is False.
        
        **`bFulltransdataBmemorysave`**
        : A _Boolean_ specifying the full translation data memory save. The default value is False.
        
        **`dFulltransdataFtempdiff`**
        : A _Double_ specifying the full translation data temperature difference. The default value is 1.1.
        
        **`dHarmonicdataFstartfreq`**
        : A _Double_ specifying the harmonic data start frequence. The default value is 0.0.
        
        **`dHarmonicdataFendfreq`**
        : A _Double_ specifying the harmonic data end frequence. The default value is 1.0.
        
        **`iHarmonicdataNsubsteps`**
        : An _Integer_ specifying the harmonic data sub steps. The default value is 0.
        
        **`dHarmonicdataFalphad`**
        : A _Double_ specifying the harmonic data alpha. The default value is 0.0.
        
        **`dHarmonicdataFbetad`**
        : A _Double_ specifying the harmonic data beta. The default value is 0.0.
        
        **`dHarmonicdataFdmprat`**
        : A _Double_ specifying the harmonic data DMP ratio. The default value is 0.0.
        
        **`bHarmonicdataBoutputdisplacements`**
        : A _Boolean_ specifying the harmonic data output displacements. The default value is False.
        
        **`bHarmonicdataBoutputstrain`**
        : A _Boolean_ specifying the harmonic data output strain. The default value is False.
        
        **`bHarmonicdataBoutputstress`**
        : A _Boolean_ specifying the harmonic data output stress. The default value is False.
        
        **`iLCId`**
        : An _Integer_ specifying the LC ID. The default value is 0.
        
        **`iModeShape`**
        : An _Integer_ specifying the mode shape. The default value is 0.
        
        **`iModaldataImodemethod`**
        : An _Integer_ specifying the modal data mode method. The default value is 0.
        
        **`iModaldataIextractnum`**
        : An _Integer_ specifying the modal data extract number. The default value is 1.
        
        **`bModaldataBexpandshape`**
        : A _Boolean_ specifying the modal data expand shape. The default value is True.
        
        **`iModaldataIexpandnum`**
        : An _Integer_ specifying the modal data expand number. The default value is 0.
        
        **`bModaldataBuseapprox`**
        : A _Boolean_ specifying the modal data use approximately. The default value is False.
        
        **`bModaldataBinclprsseff`**
        : A _Boolean_ specifying the modal data include prsseff. The default value is False.
        
        **`bModaldataBmemorysave`**
        : A _Boolean_ specifying the modal data memory save. The default value is False.
        
        **`bModaldataBrsvec`**
        : A _Boolean_ specifying the modal data resource vector. The default value is False.
        
        **`bModaldataBoutputdisplacements`**
        : A _Boolean_ specifying the modal data output displacements. The default value is False.
        
        **`bModaldataBoutputstrain`**
        : A _Boolean_ specifying the modal data output strain. The default value is False.
        
        **`bModaldataBoutputstress`**
        : A _Boolean_ specifying the modal data output stress. The default value is False.
        
        **`iReduceddataIprintnum`**
        : An _Integer_ specifying the reduceddata print number. The default value is 0.
        
        **`bSsdataBmemorysave`**
        : A _Boolean_ specifying the ssdata memory save. The default value is False.
        
        **`bSsdataBoutputheatflux`**
        : A _Boolean_ specifying the ssdata output heat flux. The default value is False.
        
        **`bSsdataBoutputtemperature`**
        : A _Boolean_ specifying the ssdata output temperature. The default value is False.
        
        **`bSsdataBpivotscheck`**
        : A _Boolean_ specifying the ssdata pivots check. The default value is True.
        
        **`bSsdataBsignleprecision`**
        : A _Boolean_ specifying the ssdata single precision. The default value is False.
        
        **`dSsdataFmultiplier`**
        : A _Double_ specifying the ssdata multiplier. The default value is 0.0.
        
        **`dSsdataFtempdiff`**
        : A _Double_ specifying the ssdata temperature difference. The default value is 0.0.
        
        **`dSsdataFtollevel`**
        : A _Double_ specifying the ssdata tolerance level. The default value is 0.0.
        
        **`iSsdataIadaptivedes`**
        : An _Integer_ specifying the ssdata adaptive destination. The default value is 0.
        
        **`iSsdataIequationsolv`**
        : An _Integer_ specifying the ssdata equation solve. The default value is 0.
        
        **`iSsdataInpoption`**
        : An _Integer_ specifying the ssdata inpoption. The default value is 0.
        
        **`strAnsysVersion`**
        : A _String_ specifying the ansys version. The default value is "".
        
        **`strCommandLineOption`**
        : A _String_ specifying the command line option. The default value is "".
        
        **`bOutputSOLVE`**
        : A _Boolean_ specifying the output solve. The default value is False.
        
        **`iSubspacedataIrigidmode`**
        : An _Integer_ specifying the subspace data rigid mode. The default value is 0.
        
        **`iSubspacedataIworksize`**
        : An _Integer_ specifying the subspace data work size. The default value is 8.
        
        **`iSubspacedataInpadnum`**
        : An _Integer_ specifying the subspace data inpad number. The default value is 4.
        
        **`iSubspacedataIblocknum`**
        : An _Integer_ specifying the subspace data block number. The default value is 5.
        
        **`iSubspacedataImaxiteratcnt`**
        : An _Integer_ specifying the subspace data maximum iterator number. The default value is 0.
        
        **`iSubspacedataIminnshift`**
        : An _Integer_ specifying the subspace data iminnshift. The default value is 0.
        
        **`iSubspacedataIseqcheck`**
        : An _Integer_ specifying the subspace data iseqcheck. The default value is 0.
        
        **`bTransientdataBtraneffect`**
        : A _Boolean_ specifying the transient data effection. The default value is True.
        
        **`iTransientdataIloadingtype`**
        : An _Integer_ specifying the transient data loading type. The default value is 0.
        
        **`dTransientdataFmassmatrixmult`**
        : A _Double_ specifying the transient data mass matrix multiple. The default value is 0.0.
        
        **`dTransientdataFstiffmatrixmult`**
        : A _Double_ specifying the transient data stiff matrix multiple. The default value is 0.0.
        
        **`bTransientdataBmidstep`**
        : A _Boolean_ specifying the transient data midle step. The default value is False.
        
        **`dTransientdataFtolerancebisection`**
        : A _Double_ specifying the transient data tolerance binary section. The default value is 0.0.
        
        **`dTransientdataFtolerancetimestep`**
        : A _Double_ specifying the transient data tolerance time step. The default value is 0.0.
        
        **`iTransientdataItimeinteralgor`**
        : An _Integer_ specifying the transient data time inter algorithm. The default value is 0.
        
        **`iTransientdataItimeinter`**
        : An _Integer_ specifying the transient data time inter. The default value is 0.
        
        **`dTransientdataFgamma`**
        : A _Double_ specifying the transient data gamma. The default value is 0.005.
        
        **`dTransientdataFalpha`**
        : A _Double_ specifying the transient data alpha. The default value is 0.25250625.
        
        **`dTransientdataFdelta`**
        : A _Double_ specifying the transient data delta. The default value is 0.505.
        
        **`dTransientdataFalphaf`**
        : A _Double_ specifying the transient data alpha f. The default value is 0.005.
        
        **`dTransientdataFalpham`**
        : A _Double_ specifying the transient data alpha m. The default value is 0.0.
        
        **`bTransientdataBoutputtemperature`**
        : A _Boolean_ specifying the transient data output temperature. The default value is False.
        
        **`bTransientdataBoutputheatflux`**
        : A _Boolean_ specifying the transient data output heat flux. The default value is False.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strFileName`**
        : A _String_ specifying the file name. The default value is "".
        
        **`crAnsysJob`**
        : A _Cursor_ specifying the ansys job. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.Ansys.NormalModes(strJobName, iJobdataAnatype=0, iJobdataSoltype=0, strJobdataJobname="Job1", strJobdataJobdescription="", bBasicdataBoutputdisplacements=False, bBasicdataBoutputreactionload=False, bBasicdataBoutputstrain=False, bBasicdataBoutputstress=False, iBasicdataIanalysisopt=0, bBasicdataBcalPressEffects=False, dBasicdataFunitem=0.0, dBasicdataFreftemp=0.0, dBasicdataFendloadtime=0.0, iBasicdataItimestep=0, iBasicdataIstepchosen=0, iBasicdataIsubstepnum=0, iBasicdataImaxsubstep=0, iBasicdataIminstepnum=0, dBasicdataFtimestepsize=0.0, dBasicdataFmintimestep=0.0, dBasicdataFmaxtimestep=0.0, iBasicdataIwritereslutfre=1, iBasicdataIn=1, bRunAPDL=False, bWriteResultDB=False, dFEndFreq=DFLT_DBL, dFStartFreq=DFLT_DBL, iFulltransdataIsolutionoption=0, dFulltransdataFpropchange=0.05, iFulltransdataIpointnum=64, dFulltransdataFmintemp=0.0, dFulltransdataFmaxtemp=0.0, iFulltransdataIequationsolv=0, dFulltransdataFtollevel=0.0, dFulltransdataFmultiplier=0.0, bFulltransdataBsignleprecision=False, bFulltransdataBmemorysave=False, dFulltransdataFtempdiff=1.1, dHarmonicdataFstartfreq=0.0, dHarmonicdataFendfreq=1.0, iHarmonicdataNsubsteps=0, dHarmonicdataFalphad=0.0, dHarmonicdataFbetad=0.0, dHarmonicdataFdmprat=0.0, bHarmonicdataBoutputdisplacements=False, bHarmonicdataBoutputstrain=False, bHarmonicdataBoutputstress=False, iLCId=0, iModeShape=0, iModaldataImodemethod=0, iModaldataIextractnum=1, bModaldataBexpandshape=True, iModaldataIexpandnum=0, bModaldataBuseapprox=False, bModaldataBinclprsseff=False, bModaldataBmemorysave=False, bModaldataBrsvec=False, bModaldataBoutputdisplacements=False, bModaldataBoutputstrain=False, bModaldataBoutputstress=False, iReduceddataIprintnum=0, bSsdataBmemorysave=False, bSsdataBoutputheatflux=False, bSsdataBoutputtemperature=False, bSsdataBpivotscheck=True, bSsdataBsignleprecision=False, dSsdataFmultiplier=0.0, dSsdataFtempdiff=0.0, dSsdataFtollevel=0.0, iSsdataIadaptivedes=0, iSsdataIequationsolv=0, iSsdataInpoption=0, strAnsysVersion="", strCommandLineOption="", bOutputSOLVE=False, iSubspacedataIrigidmode=0, iSubspacedataIworksize=8, iSubspacedataInpadnum=4, iSubspacedataIblocknum=5, iSubspacedataImaxiteratcnt=0, iSubspacedataIminnshift=0, iSubspacedataIseqcheck=0, bTransientdataBtraneffect=True, iTransientdataIloadingtype=0, dTransientdataFmassmatrixmult=0.0, dTransientdataFstiffmatrixmult=0.0, bTransientdataBmidstep=False, dTransientdataFtolerancebisection=0.0, dTransientdataFtolerancetimestep=0.0, iTransientdataItimeinteralgor=0, iTransientdataItimeinter=0, dTransientdataFgamma=0.005, dTransientdataFalpha=0.25250625, dTransientdataFdelta=0.505, dTransientdataFalphaf=0.005, dTransientdataFalpham=0.0, bTransientdataBoutputtemperature=False, bTransientdataBoutputheatflux=False, crEdit=None, strFileName="", crAnsysJob=None)
        ```
        
        """
        message = "Analysis.Ansys.NormalModes('{}',{},{},'{}','{}',{},{},'{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}','{}',{},{},{},{},{},{},{},{},{},{},{},'{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},'{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{})".format(strJobName, iJobdataAnatype, iJobdataSoltype, strJobdataJobname, strJobdataJobdescription, bBasicdataBoutputdisplacements, bBasicdataBoutputreactionload, bBasicdataBoutputstrain, bBasicdataBoutputstress, iBasicdataIanalysisopt, bBasicdataBcalPressEffects, dBasicdataFunitem, dBasicdataFreftemp, dBasicdataFendloadtime, iBasicdataItimestep, iBasicdataIstepchosen, iBasicdataIsubstepnum, iBasicdataImaxsubstep, iBasicdataIminstepnum, dBasicdataFtimestepsize, dBasicdataFmintimestep, dBasicdataFmaxtimestep, iBasicdataIwritereslutfre, iBasicdataIn, bRunAPDL, bWriteResultDB, dFEndFreq, dFStartFreq, iFulltransdataIsolutionoption, dFulltransdataFpropchange, iFulltransdataIpointnum, dFulltransdataFmintemp, dFulltransdataFmaxtemp, iFulltransdataIequationsolv, dFulltransdataFtollevel, dFulltransdataFmultiplier, bFulltransdataBsignleprecision, bFulltransdataBmemorysave, dFulltransdataFtempdiff, dHarmonicdataFstartfreq, dHarmonicdataFendfreq, iHarmonicdataNsubsteps, dHarmonicdataFalphad, dHarmonicdataFbetad, dHarmonicdataFdmprat, bHarmonicdataBoutputdisplacements, bHarmonicdataBoutputstrain, bHarmonicdataBoutputstress, iLCId, iModeShape, iModaldataImodemethod, iModaldataIextractnum, bModaldataBexpandshape, iModaldataIexpandnum, bModaldataBuseapprox, bModaldataBinclprsseff, bModaldataBmemorysave, bModaldataBrsvec, bModaldataBoutputdisplacements, bModaldataBoutputstrain, bModaldataBoutputstress, iReduceddataIprintnum, bSsdataBmemorysave, bSsdataBoutputheatflux, bSsdataBoutputtemperature, bSsdataBpivotscheck, bSsdataBsignleprecision, dSsdataFmultiplier, dSsdataFtempdiff, dSsdataFtollevel, iSsdataIadaptivedes, iSsdataIequationsolv, iSsdataInpoption, strAnsysVersion, strCommandLineOption, bOutputSOLVE, iSubspacedataIrigidmode, iSubspacedataIworksize, iSubspacedataInpadnum, iSubspacedataIblocknum, iSubspacedataImaxiteratcnt, iSubspacedataIminnshift, iSubspacedataIseqcheck, bTransientdataBtraneffect, iTransientdataIloadingtype, dTransientdataFmassmatrixmult, dTransientdataFstiffmatrixmult, bTransientdataBmidstep, dTransientdataFtolerancebisection, dTransientdataFtolerancetimestep, iTransientdataItimeinteralgor, iTransientdataItimeinter, dTransientdataFgamma, dTransientdataFalpha, dTransientdataFdelta, dTransientdataFalphaf, dTransientdataFalpham, bTransientdataBoutputtemperature, bTransientdataBoutputheatflux, crEdit, strFileName, crAnsysJob)
        return JPT_RUN_LINE(message)

    def Harmonic(self, strJobName, iJobdataAnatype=0, iJobdataSoltype=0, strJobdataJobname="Job1", strJobdataJobdescription="", bBasicdataBoutputdisplacements=False, bBasicdataBoutputreactionload=False, bBasicdataBoutputstrain=False, bBasicdataBoutputstress=False, iBasicdataIanalysisopt=0, bBasicdataBcalPressEffects=False, dBasicdataFunitem=0.0, dBasicdataFreftemp=0.0, dBasicdataFendloadtime=0.0, iBasicdataItimestep=0, iBasicdataIstepchosen=0, iBasicdataIsubstepnum=0, iBasicdataImaxsubstep=0, iBasicdataIminstepnum=0, dBasicdataFtimestepsize=0.0, dBasicdataFmintimestep=0.0, dBasicdataFmaxtimestep=0.0, iBasicdataIwritereslutfre=1, iBasicdataIn=1, bRunAPDL=False, bWriteResultDB=False, dFEndFreq=DFLT_DBL, dFStartFreq=DFLT_DBL, iFulltransdataIsolutionoption=0, dFulltransdataFpropchange=0.05, iFulltransdataIpointnum=64, dFulltransdataFmintemp=0.0, dFulltransdataFmaxtemp=0.0, iFulltransdataIequationsolv=0, dFulltransdataFtollevel=0.0, dFulltransdataFmultiplier=0.0, bFulltransdataBsignleprecision=False, bFulltransdataBmemorysave=False, dFulltransdataFtempdiff=1.1, dHarmonicdataFstartfreq=0.0, dHarmonicdataFendfreq=1.0, iHarmonicdataNsubsteps=0, dHarmonicdataFalphad=0.0, dHarmonicdataFbetad=0.0, dHarmonicdataFdmprat=0.0, bHarmonicdataBoutputdisplacements=False, bHarmonicdataBoutputstrain=False, bHarmonicdataBoutputstress=False, iLCId=0, iModeShape=0, iModaldataImodemethod=0, iModaldataIextractnum=1, bModaldataBexpandshape=True, iModaldataIexpandnum=0, bModaldataBuseapprox=False, bModaldataBinclprsseff=False, bModaldataBmemorysave=False, bModaldataBrsvec=False, bModaldataBoutputdisplacements=False, bModaldataBoutputstrain=False, bModaldataBoutputstress=False, iReduceddataIprintnum=0, bSsdataBmemorysave=False, bSsdataBoutputheatflux=False, bSsdataBoutputtemperature=False, bSsdataBpivotscheck=True, bSsdataBsignleprecision=False, dSsdataFmultiplier=0.0, dSsdataFtempdiff=0.0, dSsdataFtollevel=0.0, iSsdataIadaptivedes=0, iSsdataIequationsolv=0, iSsdataInpoption=0, strAnsysVersion="", strCommandLineOption="", bOutputSOLVE=False, iSubspacedataIrigidmode=0, iSubspacedataIworksize=8, iSubspacedataInpadnum=4, iSubspacedataIblocknum=5, iSubspacedataImaxiteratcnt=0, iSubspacedataIminnshift=0, iSubspacedataIseqcheck=0, bTransientdataBtraneffect=True, iTransientdataIloadingtype=0, dTransientdataFmassmatrixmult=0.0, dTransientdataFstiffmatrixmult=0.0, bTransientdataBmidstep=False, dTransientdataFtolerancebisection=0.0, dTransientdataFtolerancetimestep=0.0, iTransientdataItimeinteralgor=0, iTransientdataItimeinter=0, dTransientdataFgamma=0.005, dTransientdataFalpha=0.25250625, dTransientdataFdelta=0.505, dTransientdataFalphaf=0.005, dTransientdataFalpham=0.0, bTransientdataBoutputtemperature=False, bTransientdataBoutputheatflux=False, crEdit=None, strFileName="", crAnsysJob=None):
        r"""
        ## Description
        
        Create and export Ansys job for Harmonic Structural
        
        ## Syntax
        
        ```python
        Analysis.Ansys.Harmonic(strJobName, iJobdataAnatype=0, iJobdataSoltype=0, strJobdataJobname="Job1", strJobdataJobdescription="", bBasicdataBoutputdisplacements=False, bBasicdataBoutputreactionload=False, bBasicdataBoutputstrain=False, bBasicdataBoutputstress=False, iBasicdataIanalysisopt=0, bBasicdataBcalPressEffects=False, dBasicdataFunitem=0.0, dBasicdataFreftemp=0.0, dBasicdataFendloadtime=0.0, iBasicdataItimestep=0, iBasicdataIstepchosen=0, iBasicdataIsubstepnum=0, iBasicdataImaxsubstep=0, iBasicdataIminstepnum=0, dBasicdataFtimestepsize=0.0, dBasicdataFmintimestep=0.0, dBasicdataFmaxtimestep=0.0, iBasicdataIwritereslutfre=1, iBasicdataIn=1, bRunAPDL=False, bWriteResultDB=False, dFEndFreq=DFLT_DBL, dFStartFreq=DFLT_DBL, iFulltransdataIsolutionoption=0, dFulltransdataFpropchange=0.05, iFulltransdataIpointnum=64, dFulltransdataFmintemp=0.0, dFulltransdataFmaxtemp=0.0, iFulltransdataIequationsolv=0, dFulltransdataFtollevel=0.0, dFulltransdataFmultiplier=0.0, bFulltransdataBsignleprecision=False, bFulltransdataBmemorysave=False, dFulltransdataFtempdiff=1.1, dHarmonicdataFstartfreq=0.0, dHarmonicdataFendfreq=1.0, iHarmonicdataNsubsteps=0, dHarmonicdataFalphad=0.0, dHarmonicdataFbetad=0.0, dHarmonicdataFdmprat=0.0, bHarmonicdataBoutputdisplacements=False, bHarmonicdataBoutputstrain=False, bHarmonicdataBoutputstress=False, iLCId=0, iModeShape=0, iModaldataImodemethod=0, iModaldataIextractnum=1, bModaldataBexpandshape=True, iModaldataIexpandnum=0, bModaldataBuseapprox=False, bModaldataBinclprsseff=False, bModaldataBmemorysave=False, bModaldataBrsvec=False, bModaldataBoutputdisplacements=False, bModaldataBoutputstrain=False, bModaldataBoutputstress=False, iReduceddataIprintnum=0, bSsdataBmemorysave=False, bSsdataBoutputheatflux=False, bSsdataBoutputtemperature=False, bSsdataBpivotscheck=True, bSsdataBsignleprecision=False, dSsdataFmultiplier=0.0, dSsdataFtempdiff=0.0, dSsdataFtollevel=0.0, iSsdataIadaptivedes=0, iSsdataIequationsolv=0, iSsdataInpoption=0, strAnsysVersion="", strCommandLineOption="", bOutputSOLVE=False, iSubspacedataIrigidmode=0, iSubspacedataIworksize=8, iSubspacedataInpadnum=4, iSubspacedataIblocknum=5, iSubspacedataImaxiteratcnt=0, iSubspacedataIminnshift=0, iSubspacedataIseqcheck=0, bTransientdataBtraneffect=True, iTransientdataIloadingtype=0, dTransientdataFmassmatrixmult=0.0, dTransientdataFstiffmatrixmult=0.0, bTransientdataBmidstep=False, dTransientdataFtolerancebisection=0.0, dTransientdataFtolerancetimestep=0.0, iTransientdataItimeinteralgor=0, iTransientdataItimeinter=0, dTransientdataFgamma=0.005, dTransientdataFalpha=0.25250625, dTransientdataFdelta=0.505, dTransientdataFalphaf=0.005, dTransientdataFalpham=0.0, bTransientdataBoutputtemperature=False, bTransientdataBoutputheatflux=False, crEdit=None, strFileName="", crAnsysJob=None)
        ```
        
        Macro: {ref}`Macro-Analysis-Ansys_HarmonicStructural`
        
        Ribbon: {menuselection}`Analysis --> Ansys --> Harmonic`
        
        ## Inputs
        
        **`strJobName`**
        : A _String_ specifying the job name. This is a required input.
        
        **`iJobdataAnatype`**
        : An _Integer_ specifying the job data analysis type. The default value is 0.
        
        **`iJobdataSoltype`**
        : An _Integer_ specifying the job data solution type. The default value is 0.
        
        **`strJobdataJobname`**
        : A _String_ specifying the job data job name. The default value is "Job1".
        
        **`strJobdataJobdescription`**
        : A _String_ specifying the job data job description. The default value is "".
        
        **`bBasicdataBoutputdisplacements`**
        : A _Boolean_ specifying the basic data output displacements. The default value is False.
        
        **`bBasicdataBoutputreactionload`**
        : A _Boolean_ specifying the basic data output reaction oad. The default value is False.
        
        **`bBasicdataBoutputstrain`**
        : A _Boolean_ specifying the basic data output strain. The default value is False.
        
        **`bBasicdataBoutputstress`**
        : A _Boolean_ specifying the basic data output stress. The default value is False.
        
        **`iBasicdataIanalysisopt`**
        : An _Integer_ specifying the basic data analysis option. The default value is 0.
        
        **`bBasicdataBcalPressEffects`**
        : A _Boolean_ specifying the basic data caculation press effects. The default value is False.
        
        **`dBasicdataFunitem`**
        : A _Double_ specifying the basic data unit temperature. The default value is 0.0.
        
        **`dBasicdataFreftemp`**
        : A _Double_ specifying the basic data reference temperature. The default value is 0.0.
        
        **`dBasicdataFendloadtime`**
        : A _Double_ specifying the basic data end load time. The default value is 0.0.
        
        **`iBasicdataItimestep`**
        : An _Integer_ specifying the basic data time step. The default value is 0.
        
        **`iBasicdataIstepchosen`**
        : An _Integer_ specifying the basic data step chosen. The default value is 0.
        
        **`iBasicdataIsubstepnum`**
        : An _Integer_ specifying the basic data sub step number. The default value is 0.
        
        **`iBasicdataImaxsubstep`**
        : An _Integer_ specifying the basic data maximum sub step. The default value is 0.
        
        **`iBasicdataIminstepnum`**
        : An _Integer_ specifying the basic data minimum sub step. The default value is 0.
        
        **`dBasicdataFtimestepsize`**
        : A _Double_ specifying the basic data time step size. The default value is 0.0.
        
        **`dBasicdataFmintimestep`**
        : A _Double_ specifying the basic data minimum sub step. The default value is 0.0.
        
        **`dBasicdataFmaxtimestep`**
        : A _Double_ specifying the basic data maximum sub step. The default value is 0.0.
        
        **`iBasicdataIwritereslutfre`**
        : An _Integer_ specifying the basic data write result frequency. The default value is 1.
        
        **`iBasicdataIn`**
        : An _Integer_ specifying the basic data in. The default value is 1.
        
        **`bRunAPDL`**
        : A _Boolean_ specifying the run Ansys APDL. The default value is False.
        
        **`bWriteResultDB`**
        : A _Boolean_ specifying the write result database. The default value is False.
        
        **`dFEndFreq`**
        : A _Double_ specifying the end frequence. The default value is DFLT_DBL.
        
        **`dFStartFreq`**
        : A _Double_ specifying the start frequence. The default value is DFLT_DBL.
        
        **`iFulltransdataIsolutionoption`**
        : An _Integer_ specifying the full translation data solution option. The default value is 0.
        
        **`dFulltransdataFpropchange`**
        : A _Double_ specifying the full translation data property change. The default value is 0.05.
        
        **`iFulltransdataIpointnum`**
        : An _Integer_ specifying the full translation data point number. The default value is 64.
        
        **`dFulltransdataFmintemp`**
        : A _Double_ specifying the full translation data minimum temperature. The default value is 0.0.
        
        **`dFulltransdataFmaxtemp`**
        : A _Double_ specifying the full translation data maximum temperature. The default value is 0.0.
        
        **`iFulltransdataIequationsolv`**
        : An _Integer_ specifying the full translation data equation solve. The default value is 0.
        
        **`dFulltransdataFtollevel`**
        : A _Double_ specifying the full translation data tolerance level. The default value is 0.0.
        
        **`dFulltransdataFmultiplier`**
        : A _Double_ specifying the full translation data multiplier. The default value is 0.0.
        
        **`bFulltransdataBsignleprecision`**
        : A _Boolean_ specifying the full translation data single precision. The default value is False.
        
        **`bFulltransdataBmemorysave`**
        : A _Boolean_ specifying the full translation data memory save. The default value is False.
        
        **`dFulltransdataFtempdiff`**
        : A _Double_ specifying the full translation data temperature difference. The default value is 1.1.
        
        **`dHarmonicdataFstartfreq`**
        : A _Double_ specifying the harmonic data start frequence. The default value is 0.0.
        
        **`dHarmonicdataFendfreq`**
        : A _Double_ specifying the harmonic data end frequence. The default value is 1.0.
        
        **`iHarmonicdataNsubsteps`**
        : An _Integer_ specifying the harmonic data sub steps. The default value is 0.
        
        **`dHarmonicdataFalphad`**
        : A _Double_ specifying the harmonic data alpha. The default value is 0.0.
        
        **`dHarmonicdataFbetad`**
        : A _Double_ specifying the harmonic data beta. The default value is 0.0.
        
        **`dHarmonicdataFdmprat`**
        : A _Double_ specifying the harmonic data DMP ratio. The default value is 0.0.
        
        **`bHarmonicdataBoutputdisplacements`**
        : A _Boolean_ specifying the harmonic data output displacements. The default value is False.
        
        **`bHarmonicdataBoutputstrain`**
        : A _Boolean_ specifying the harmonic data output strain. The default value is False.
        
        **`bHarmonicdataBoutputstress`**
        : A _Boolean_ specifying the harmonic data output stress. The default value is False.
        
        **`iLCId`**
        : An _Integer_ specifying the LC ID. The default value is 0.
        
        **`iModeShape`**
        : An _Integer_ specifying the mode shape. The default value is 0.
        
        **`iModaldataImodemethod`**
        : An _Integer_ specifying the modal data mode method. The default value is 0.
        
        **`iModaldataIextractnum`**
        : An _Integer_ specifying the modal data extract number. The default value is 1.
        
        **`bModaldataBexpandshape`**
        : A _Boolean_ specifying the modal data expand shape. The default value is True.
        
        **`iModaldataIexpandnum`**
        : An _Integer_ specifying the modal data expand number. The default value is 0.
        
        **`bModaldataBuseapprox`**
        : A _Boolean_ specifying the modal data use approximately. The default value is False.
        
        **`bModaldataBinclprsseff`**
        : A _Boolean_ specifying the modal data include prsseff. The default value is False.
        
        **`bModaldataBmemorysave`**
        : A _Boolean_ specifying the modal data memory save. The default value is False.
        
        **`bModaldataBrsvec`**
        : A _Boolean_ specifying the modal data resource vector. The default value is False.
        
        **`bModaldataBoutputdisplacements`**
        : A _Boolean_ specifying the modal data output displacements. The default value is False.
        
        **`bModaldataBoutputstrain`**
        : A _Boolean_ specifying the modal data output strain. The default value is False.
        
        **`bModaldataBoutputstress`**
        : A _Boolean_ specifying the modal data output stress. The default value is False.
        
        **`iReduceddataIprintnum`**
        : An _Integer_ specifying the reduceddata print number. The default value is 0.
        
        **`bSsdataBmemorysave`**
        : A _Boolean_ specifying the ssdata memory save. The default value is False.
        
        **`bSsdataBoutputheatflux`**
        : A _Boolean_ specifying the ssdata output heat flux. The default value is False.
        
        **`bSsdataBoutputtemperature`**
        : A _Boolean_ specifying the ssdata output temperature. The default value is False.
        
        **`bSsdataBpivotscheck`**
        : A _Boolean_ specifying the ssdata pivots check. The default value is True.
        
        **`bSsdataBsignleprecision`**
        : A _Boolean_ specifying the ssdata single precision. The default value is False.
        
        **`dSsdataFmultiplier`**
        : A _Double_ specifying the ssdata multiplier. The default value is 0.0.
        
        **`dSsdataFtempdiff`**
        : A _Double_ specifying the ssdata temperature difference. The default value is 0.0.
        
        **`dSsdataFtollevel`**
        : A _Double_ specifying the ssdata tolerance level. The default value is 0.0.
        
        **`iSsdataIadaptivedes`**
        : An _Integer_ specifying the ssdata adaptive destination. The default value is 0.
        
        **`iSsdataIequationsolv`**
        : An _Integer_ specifying the ssdata equation solve. The default value is 0.
        
        **`iSsdataInpoption`**
        : An _Integer_ specifying the ssdata inpoption. The default value is 0.
        
        **`strAnsysVersion`**
        : A _String_ specifying the ansys version. The default value is "".
        
        **`strCommandLineOption`**
        : A _String_ specifying the command line option. The default value is "".
        
        **`bOutputSOLVE`**
        : A _Boolean_ specifying the output solve. The default value is False.
        
        **`iSubspacedataIrigidmode`**
        : An _Integer_ specifying the subspace data rigid mode. The default value is 0.
        
        **`iSubspacedataIworksize`**
        : An _Integer_ specifying the subspace data work size. The default value is 8.
        
        **`iSubspacedataInpadnum`**
        : An _Integer_ specifying the subspace data inpad number. The default value is 4.
        
        **`iSubspacedataIblocknum`**
        : An _Integer_ specifying the subspace data block number. The default value is 5.
        
        **`iSubspacedataImaxiteratcnt`**
        : An _Integer_ specifying the subspace data maximum iterator number. The default value is 0.
        
        **`iSubspacedataIminnshift`**
        : An _Integer_ specifying the subspace data iminnshift. The default value is 0.
        
        **`iSubspacedataIseqcheck`**
        : An _Integer_ specifying the subspace data iseqcheck. The default value is 0.
        
        **`bTransientdataBtraneffect`**
        : A _Boolean_ specifying the transient data effection. The default value is True.
        
        **`iTransientdataIloadingtype`**
        : An _Integer_ specifying the transient data loading type. The default value is 0.
        
        **`dTransientdataFmassmatrixmult`**
        : A _Double_ specifying the transient data mass matrix multiple. The default value is 0.0.
        
        **`dTransientdataFstiffmatrixmult`**
        : A _Double_ specifying the transient data stiff matrix multiple. The default value is 0.0.
        
        **`bTransientdataBmidstep`**
        : A _Boolean_ specifying the transient data midle step. The default value is False.
        
        **`dTransientdataFtolerancebisection`**
        : A _Double_ specifying the transient data tolerance binary section. The default value is 0.0.
        
        **`dTransientdataFtolerancetimestep`**
        : A _Double_ specifying the transient data tolerance time step. The default value is 0.0.
        
        **`iTransientdataItimeinteralgor`**
        : An _Integer_ specifying the transient data time inter algorithm. The default value is 0.
        
        **`iTransientdataItimeinter`**
        : An _Integer_ specifying the transient data time inter. The default value is 0.
        
        **`dTransientdataFgamma`**
        : A _Double_ specifying the transient data gamma. The default value is 0.005.
        
        **`dTransientdataFalpha`**
        : A _Double_ specifying the transient data alpha. The default value is 0.25250625.
        
        **`dTransientdataFdelta`**
        : A _Double_ specifying the transient data delta. The default value is 0.505.
        
        **`dTransientdataFalphaf`**
        : A _Double_ specifying the transient data alpha f. The default value is 0.005.
        
        **`dTransientdataFalpham`**
        : A _Double_ specifying the transient data alpha m. The default value is 0.0.
        
        **`bTransientdataBoutputtemperature`**
        : A _Boolean_ specifying the transient data output temperature. The default value is False.
        
        **`bTransientdataBoutputheatflux`**
        : A _Boolean_ specifying the transient data output heat flux. The default value is False.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strFileName`**
        : A _String_ specifying the file name. The default value is "".
        
        **`crAnsysJob`**
        : A _Cursor_ specifying the ansys job. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.Ansys.Harmonic(strJobName, iJobdataAnatype=0, iJobdataSoltype=0, strJobdataJobname="Job1", strJobdataJobdescription="", bBasicdataBoutputdisplacements=False, bBasicdataBoutputreactionload=False, bBasicdataBoutputstrain=False, bBasicdataBoutputstress=False, iBasicdataIanalysisopt=0, bBasicdataBcalPressEffects=False, dBasicdataFunitem=0.0, dBasicdataFreftemp=0.0, dBasicdataFendloadtime=0.0, iBasicdataItimestep=0, iBasicdataIstepchosen=0, iBasicdataIsubstepnum=0, iBasicdataImaxsubstep=0, iBasicdataIminstepnum=0, dBasicdataFtimestepsize=0.0, dBasicdataFmintimestep=0.0, dBasicdataFmaxtimestep=0.0, iBasicdataIwritereslutfre=1, iBasicdataIn=1, bRunAPDL=False, bWriteResultDB=False, dFEndFreq=DFLT_DBL, dFStartFreq=DFLT_DBL, iFulltransdataIsolutionoption=0, dFulltransdataFpropchange=0.05, iFulltransdataIpointnum=64, dFulltransdataFmintemp=0.0, dFulltransdataFmaxtemp=0.0, iFulltransdataIequationsolv=0, dFulltransdataFtollevel=0.0, dFulltransdataFmultiplier=0.0, bFulltransdataBsignleprecision=False, bFulltransdataBmemorysave=False, dFulltransdataFtempdiff=1.1, dHarmonicdataFstartfreq=0.0, dHarmonicdataFendfreq=1.0, iHarmonicdataNsubsteps=0, dHarmonicdataFalphad=0.0, dHarmonicdataFbetad=0.0, dHarmonicdataFdmprat=0.0, bHarmonicdataBoutputdisplacements=False, bHarmonicdataBoutputstrain=False, bHarmonicdataBoutputstress=False, iLCId=0, iModeShape=0, iModaldataImodemethod=0, iModaldataIextractnum=1, bModaldataBexpandshape=True, iModaldataIexpandnum=0, bModaldataBuseapprox=False, bModaldataBinclprsseff=False, bModaldataBmemorysave=False, bModaldataBrsvec=False, bModaldataBoutputdisplacements=False, bModaldataBoutputstrain=False, bModaldataBoutputstress=False, iReduceddataIprintnum=0, bSsdataBmemorysave=False, bSsdataBoutputheatflux=False, bSsdataBoutputtemperature=False, bSsdataBpivotscheck=True, bSsdataBsignleprecision=False, dSsdataFmultiplier=0.0, dSsdataFtempdiff=0.0, dSsdataFtollevel=0.0, iSsdataIadaptivedes=0, iSsdataIequationsolv=0, iSsdataInpoption=0, strAnsysVersion="", strCommandLineOption="", bOutputSOLVE=False, iSubspacedataIrigidmode=0, iSubspacedataIworksize=8, iSubspacedataInpadnum=4, iSubspacedataIblocknum=5, iSubspacedataImaxiteratcnt=0, iSubspacedataIminnshift=0, iSubspacedataIseqcheck=0, bTransientdataBtraneffect=True, iTransientdataIloadingtype=0, dTransientdataFmassmatrixmult=0.0, dTransientdataFstiffmatrixmult=0.0, bTransientdataBmidstep=False, dTransientdataFtolerancebisection=0.0, dTransientdataFtolerancetimestep=0.0, iTransientdataItimeinteralgor=0, iTransientdataItimeinter=0, dTransientdataFgamma=0.005, dTransientdataFalpha=0.25250625, dTransientdataFdelta=0.505, dTransientdataFalphaf=0.005, dTransientdataFalpham=0.0, bTransientdataBoutputtemperature=False, bTransientdataBoutputheatflux=False, crEdit=None, strFileName="", crAnsysJob=None)
        ```
        
        """
        message = "Analysis.Ansys.Harmonic('{}',{},{},'{}','{}',{},{},'{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}','{}',{},{},{},{},{},{},{},{},{},{},{},'{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},'{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{})".format(strJobName, iJobdataAnatype, iJobdataSoltype, strJobdataJobname, strJobdataJobdescription, bBasicdataBoutputdisplacements, bBasicdataBoutputreactionload, bBasicdataBoutputstrain, bBasicdataBoutputstress, iBasicdataIanalysisopt, bBasicdataBcalPressEffects, dBasicdataFunitem, dBasicdataFreftemp, dBasicdataFendloadtime, iBasicdataItimestep, iBasicdataIstepchosen, iBasicdataIsubstepnum, iBasicdataImaxsubstep, iBasicdataIminstepnum, dBasicdataFtimestepsize, dBasicdataFmintimestep, dBasicdataFmaxtimestep, iBasicdataIwritereslutfre, iBasicdataIn, bRunAPDL, bWriteResultDB, dFEndFreq, dFStartFreq, iFulltransdataIsolutionoption, dFulltransdataFpropchange, iFulltransdataIpointnum, dFulltransdataFmintemp, dFulltransdataFmaxtemp, iFulltransdataIequationsolv, dFulltransdataFtollevel, dFulltransdataFmultiplier, bFulltransdataBsignleprecision, bFulltransdataBmemorysave, dFulltransdataFtempdiff, dHarmonicdataFstartfreq, dHarmonicdataFendfreq, iHarmonicdataNsubsteps, dHarmonicdataFalphad, dHarmonicdataFbetad, dHarmonicdataFdmprat, bHarmonicdataBoutputdisplacements, bHarmonicdataBoutputstrain, bHarmonicdataBoutputstress, iLCId, iModeShape, iModaldataImodemethod, iModaldataIextractnum, bModaldataBexpandshape, iModaldataIexpandnum, bModaldataBuseapprox, bModaldataBinclprsseff, bModaldataBmemorysave, bModaldataBrsvec, bModaldataBoutputdisplacements, bModaldataBoutputstrain, bModaldataBoutputstress, iReduceddataIprintnum, bSsdataBmemorysave, bSsdataBoutputheatflux, bSsdataBoutputtemperature, bSsdataBpivotscheck, bSsdataBsignleprecision, dSsdataFmultiplier, dSsdataFtempdiff, dSsdataFtollevel, iSsdataIadaptivedes, iSsdataIequationsolv, iSsdataInpoption, strAnsysVersion, strCommandLineOption, bOutputSOLVE, iSubspacedataIrigidmode, iSubspacedataIworksize, iSubspacedataInpadnum, iSubspacedataIblocknum, iSubspacedataImaxiteratcnt, iSubspacedataIminnshift, iSubspacedataIseqcheck, bTransientdataBtraneffect, iTransientdataIloadingtype, dTransientdataFmassmatrixmult, dTransientdataFstiffmatrixmult, bTransientdataBmidstep, dTransientdataFtolerancebisection, dTransientdataFtolerancetimestep, iTransientdataItimeinteralgor, iTransientdataItimeinter, dTransientdataFgamma, dTransientdataFalpha, dTransientdataFdelta, dTransientdataFalphaf, dTransientdataFalpham, bTransientdataBoutputtemperature, bTransientdataBoutputheatflux, crEdit, strFileName, crAnsysJob)
        return JPT_RUN_LINE(message)

    def Steady(self, strJobName, iJobdataAnatype=0, iJobdataSoltype=0, strJobdataJobname="Job1", strJobdataJobdescription="", bBasicdataBoutputdisplacements=False, bBasicdataBoutputreactionload=False, bBasicdataBoutputstrain=False, bBasicdataBoutputstress=False, iBasicdataIanalysisopt=0, bBasicdataBcalPressEffects=False, dBasicdataFunitem=0.0, dBasicdataFreftemp=0.0, dBasicdataFendloadtime=0.0, iBasicdataItimestep=0, iBasicdataIstepchosen=0, iBasicdataIsubstepnum=0, iBasicdataImaxsubstep=0, iBasicdataIminstepnum=0, dBasicdataFtimestepsize=0.0, dBasicdataFmintimestep=0.0, dBasicdataFmaxtimestep=0.0, iBasicdataIwritereslutfre=1, iBasicdataIn=1, bRunAPDL=False, bWriteResultDB=False, dFEndFreq=DFLT_DBL, dFStartFreq=DFLT_DBL, iFulltransdataIsolutionoption=0, dFulltransdataFpropchange=0.05, iFulltransdataIpointnum=64, dFulltransdataFmintemp=0.0, dFulltransdataFmaxtemp=0.0, iFulltransdataIequationsolv=0, dFulltransdataFtollevel=0.0, dFulltransdataFmultiplier=0.0, bFulltransdataBsignleprecision=False, bFulltransdataBmemorysave=False, dFulltransdataFtempdiff=1.1, dHarmonicdataFstartfreq=0.0, dHarmonicdataFendfreq=1.0, iHarmonicdataNsubsteps=0, dHarmonicdataFalphad=0.0, dHarmonicdataFbetad=0.0, dHarmonicdataFdmprat=0.0, bHarmonicdataBoutputdisplacements=False, bHarmonicdataBoutputstrain=False, bHarmonicdataBoutputstress=False, iLCId=0, iModeShape=0, iModaldataImodemethod=0, iModaldataIextractnum=1, bModaldataBexpandshape=True, iModaldataIexpandnum=0, bModaldataBuseapprox=False, bModaldataBinclprsseff=False, bModaldataBmemorysave=False, bModaldataBrsvec=False, bModaldataBoutputdisplacements=False, bModaldataBoutputstrain=False, bModaldataBoutputstress=False, iReduceddataIprintnum=0, bSsdataBmemorysave=False, bSsdataBoutputheatflux=False, bSsdataBoutputtemperature=False, bSsdataBpivotscheck=True, bSsdataBsignleprecision=False, dSsdataFmultiplier=0.0, dSsdataFtempdiff=0.0, dSsdataFtollevel=0.0, iSsdataIadaptivedes=0, iSsdataIequationsolv=0, iSsdataInpoption=0, strAnsysVersion="", strCommandLineOption="", bOutputSOLVE=False, iSubspacedataIrigidmode=0, iSubspacedataIworksize=8, iSubspacedataInpadnum=4, iSubspacedataIblocknum=5, iSubspacedataImaxiteratcnt=0, iSubspacedataIminnshift=0, iSubspacedataIseqcheck=0, bTransientdataBtraneffect=True, iTransientdataIloadingtype=0, dTransientdataFmassmatrixmult=0.0, dTransientdataFstiffmatrixmult=0.0, bTransientdataBmidstep=False, dTransientdataFtolerancebisection=0.0, dTransientdataFtolerancetimestep=0.0, iTransientdataItimeinteralgor=0, iTransientdataItimeinter=0, dTransientdataFgamma=0.005, dTransientdataFalpha=0.25250625, dTransientdataFdelta=0.505, dTransientdataFalphaf=0.005, dTransientdataFalpham=0.0, bTransientdataBoutputtemperature=False, bTransientdataBoutputheatflux=False, crEdit=None, strFileName="", crAnsysJob=None):
        r"""
        ## Description
        
        Create and export Ansys job for Steady Heat Transfer
        
        ## Syntax
        
        ```python
        Analysis.Ansys.Steady(strJobName, iJobdataAnatype=0, iJobdataSoltype=0, strJobdataJobname="Job1", strJobdataJobdescription="", bBasicdataBoutputdisplacements=False, bBasicdataBoutputreactionload=False, bBasicdataBoutputstrain=False, bBasicdataBoutputstress=False, iBasicdataIanalysisopt=0, bBasicdataBcalPressEffects=False, dBasicdataFunitem=0.0, dBasicdataFreftemp=0.0, dBasicdataFendloadtime=0.0, iBasicdataItimestep=0, iBasicdataIstepchosen=0, iBasicdataIsubstepnum=0, iBasicdataImaxsubstep=0, iBasicdataIminstepnum=0, dBasicdataFtimestepsize=0.0, dBasicdataFmintimestep=0.0, dBasicdataFmaxtimestep=0.0, iBasicdataIwritereslutfre=1, iBasicdataIn=1, bRunAPDL=False, bWriteResultDB=False, dFEndFreq=DFLT_DBL, dFStartFreq=DFLT_DBL, iFulltransdataIsolutionoption=0, dFulltransdataFpropchange=0.05, iFulltransdataIpointnum=64, dFulltransdataFmintemp=0.0, dFulltransdataFmaxtemp=0.0, iFulltransdataIequationsolv=0, dFulltransdataFtollevel=0.0, dFulltransdataFmultiplier=0.0, bFulltransdataBsignleprecision=False, bFulltransdataBmemorysave=False, dFulltransdataFtempdiff=1.1, dHarmonicdataFstartfreq=0.0, dHarmonicdataFendfreq=1.0, iHarmonicdataNsubsteps=0, dHarmonicdataFalphad=0.0, dHarmonicdataFbetad=0.0, dHarmonicdataFdmprat=0.0, bHarmonicdataBoutputdisplacements=False, bHarmonicdataBoutputstrain=False, bHarmonicdataBoutputstress=False, iLCId=0, iModeShape=0, iModaldataImodemethod=0, iModaldataIextractnum=1, bModaldataBexpandshape=True, iModaldataIexpandnum=0, bModaldataBuseapprox=False, bModaldataBinclprsseff=False, bModaldataBmemorysave=False, bModaldataBrsvec=False, bModaldataBoutputdisplacements=False, bModaldataBoutputstrain=False, bModaldataBoutputstress=False, iReduceddataIprintnum=0, bSsdataBmemorysave=False, bSsdataBoutputheatflux=False, bSsdataBoutputtemperature=False, bSsdataBpivotscheck=True, bSsdataBsignleprecision=False, dSsdataFmultiplier=0.0, dSsdataFtempdiff=0.0, dSsdataFtollevel=0.0, iSsdataIadaptivedes=0, iSsdataIequationsolv=0, iSsdataInpoption=0, strAnsysVersion="", strCommandLineOption="", bOutputSOLVE=False, iSubspacedataIrigidmode=0, iSubspacedataIworksize=8, iSubspacedataInpadnum=4, iSubspacedataIblocknum=5, iSubspacedataImaxiteratcnt=0, iSubspacedataIminnshift=0, iSubspacedataIseqcheck=0, bTransientdataBtraneffect=True, iTransientdataIloadingtype=0, dTransientdataFmassmatrixmult=0.0, dTransientdataFstiffmatrixmult=0.0, bTransientdataBmidstep=False, dTransientdataFtolerancebisection=0.0, dTransientdataFtolerancetimestep=0.0, iTransientdataItimeinteralgor=0, iTransientdataItimeinter=0, dTransientdataFgamma=0.005, dTransientdataFalpha=0.25250625, dTransientdataFdelta=0.505, dTransientdataFalphaf=0.005, dTransientdataFalpham=0.0, bTransientdataBoutputtemperature=False, bTransientdataBoutputheatflux=False, crEdit=None, strFileName="", crAnsysJob=None)
        ```
        
        Macro: {ref}`Macro-Analysis-Ansys_SteadyHeatTransfer`
        
        Ribbon: {menuselection}`Analysis --> Ansys --> Steady`
        
        ## Inputs
        
        **`strJobName`**
        : A _String_ specifying the job name. This is a required input.
        
        **`iJobdataAnatype`**
        : An _Integer_ specifying the job data analysis type. The default value is 0.
        
        **`iJobdataSoltype`**
        : An _Integer_ specifying the job data solution type. The default value is 0.
        
        **`strJobdataJobname`**
        : A _String_ specifying the job data job name. The default value is "Job1".
        
        **`strJobdataJobdescription`**
        : A _String_ specifying the job data job description. The default value is "".
        
        **`bBasicdataBoutputdisplacements`**
        : A _Boolean_ specifying the basic data output displacements. The default value is False.
        
        **`bBasicdataBoutputreactionload`**
        : A _Boolean_ specifying the basic data output reaction oad. The default value is False.
        
        **`bBasicdataBoutputstrain`**
        : A _Boolean_ specifying the basic data output strain. The default value is False.
        
        **`bBasicdataBoutputstress`**
        : A _Boolean_ specifying the basic data output stress. The default value is False.
        
        **`iBasicdataIanalysisopt`**
        : An _Integer_ specifying the basic data analysis option. The default value is 0.
        
        **`bBasicdataBcalPressEffects`**
        : A _Boolean_ specifying the basic data caculation press effects. The default value is False.
        
        **`dBasicdataFunitem`**
        : A _Double_ specifying the basic data unit temperature. The default value is 0.0.
        
        **`dBasicdataFreftemp`**
        : A _Double_ specifying the basic data reference temperature. The default value is 0.0.
        
        **`dBasicdataFendloadtime`**
        : A _Double_ specifying the basic data end load time. The default value is 0.0.
        
        **`iBasicdataItimestep`**
        : An _Integer_ specifying the basic data time step. The default value is 0.
        
        **`iBasicdataIstepchosen`**
        : An _Integer_ specifying the basic data step chosen. The default value is 0.
        
        **`iBasicdataIsubstepnum`**
        : An _Integer_ specifying the basic data sub step number. The default value is 0.
        
        **`iBasicdataImaxsubstep`**
        : An _Integer_ specifying the basic data maximum sub step. The default value is 0.
        
        **`iBasicdataIminstepnum`**
        : An _Integer_ specifying the basic data minimum sub step. The default value is 0.
        
        **`dBasicdataFtimestepsize`**
        : A _Double_ specifying the basic data time step size. The default value is 0.0.
        
        **`dBasicdataFmintimestep`**
        : A _Double_ specifying the basic data minimum sub step. The default value is 0.0.
        
        **`dBasicdataFmaxtimestep`**
        : A _Double_ specifying the basic data maximum sub step. The default value is 0.0.
        
        **`iBasicdataIwritereslutfre`**
        : An _Integer_ specifying the basic data write result frequency. The default value is 1.
        
        **`iBasicdataIn`**
        : An _Integer_ specifying the basic data in. The default value is 1.
        
        **`bRunAPDL`**
        : A _Boolean_ specifying the run Ansys APDL. The default value is False.
        
        **`bWriteResultDB`**
        : A _Boolean_ specifying the write result d . The default value is False.
        
        **`dFEndFreq`**
        : A _Double_ specifying the end frequence. The default value is DFLT_DBL.
        
        **`dFStartFreq`**
        : A _Double_ specifying the start frequence. The default value is DFLT_DBL.
        
        **`iFulltransdataIsolutionoption`**
        : An _Integer_ specifying the full translation data solution option. The default value is 0.
        
        **`dFulltransdataFpropchange`**
        : A _Double_ specifying the full translation data property change. The default value is 0.05.
        
        **`iFulltransdataIpointnum`**
        : An _Integer_ specifying the full translation data point number. The default value is 64.
        
        **`dFulltransdataFmintemp`**
        : A _Double_ specifying the full translation data minimum temperature. The default value is 0.0.
        
        **`dFulltransdataFmaxtemp`**
        : A _Double_ specifying the full translation data maximum temperature. The default value is 0.0.
        
        **`iFulltransdataIequationsolv`**
        : An _Integer_ specifying the full translation data equation solve. The default value is 0.
        
        **`dFulltransdataFtollevel`**
        : A _Double_ specifying the full translation data tolerance level. The default value is 0.0.
        
        **`dFulltransdataFmultiplier`**
        : A _Double_ specifying the full translation data multiplier. The default value is 0.0.
        
        **`bFulltransdataBsignleprecision`**
        : A _Boolean_ specifying the full translation data single precision. The default value is False.
        
        **`bFulltransdataBmemorysave`**
        : A _Boolean_ specifying the full translation data memory save. The default value is False.
        
        **`dFulltransdataFtempdiff`**
        : A _Double_ specifying the full translation data temperature difference. The default value is 1.1.
        
        **`dHarmonicdataFstartfreq`**
        : A _Double_ specifying the harmonic data start frequence. The default value is 0.0.
        
        **`dHarmonicdataFendfreq`**
        : A _Double_ specifying the harmonic data end frequence. The default value is 1.0.
        
        **`iHarmonicdataNsubsteps`**
        : An _Integer_ specifying the harmonic data sub steps. The default value is 0.
        
        **`dHarmonicdataFalphad`**
        : A _Double_ specifying the harmonic data alpha. The default value is 0.0.
        
        **`dHarmonicdataFbetad`**
        : A _Double_ specifying the harmonic data beta. The default value is 0.0.
        
        **`dHarmonicdataFdmprat`**
        : A _Double_ specifying the harmonic data DMP ratio. The default value is 0.0.
        
        **`bHarmonicdataBoutputdisplacements`**
        : A _Boolean_ specifying the harmonic data output displacements. The default value is False.
        
        **`bHarmonicdataBoutputstrain`**
        : A _Boolean_ specifying the harmonic data output strain. The default value is False.
        
        **`bHarmonicdataBoutputstress`**
        : A _Boolean_ specifying the harmonic data output stress. The default value is False.
        
        **`iLCId`**
        : An _Integer_ specifying the LC ID. The default value is 0.
        
        **`iModeShape`**
        : An _Integer_ specifying the mode shape. The default value is 0.
        
        **`iModaldataImodemethod`**
        : An _Integer_ specifying the modal data mode method. The default value is 0.
        
        **`iModaldataIextractnum`**
        : An _Integer_ specifying the modal data extract number. The default value is 1.
        
        **`bModaldataBexpandshape`**
        : A _Boolean_ specifying the modal data expand shape. The default value is True.
        
        **`iModaldataIexpandnum`**
        : An _Integer_ specifying the modal data expand number. The default value is 0.
        
        **`bModaldataBuseapprox`**
        : A _Boolean_ specifying the modal data use approximately. The default value is False.
        
        **`bModaldataBinclprsseff`**
        : A _Boolean_ specifying the modal data include prsseff. The default value is False.
        
        **`bModaldataBmemorysave`**
        : A _Boolean_ specifying the modal data memory save. The default value is False.
        
        **`bModaldataBrsvec`**
        : A _Boolean_ specifying the modal data resource vector. The default value is False.
        
        **`bModaldataBoutputdisplacements`**
        : A _Boolean_ specifying the modal data output displacements. The default value is False.
        
        **`bModaldataBoutputstrain`**
        : A _Boolean_ specifying the modal data output strain. The default value is False.
        
        **`bModaldataBoutputstress`**
        : A _Boolean_ specifying the modal data output stress. The default value is False.
        
        **`iReduceddataIprintnum`**
        : An _Integer_ specifying the reduceddata print number. The default value is 0.
        
        **`bSsdataBmemorysave`**
        : A _Boolean_ specifying the ssdata memory save. The default value is False.
        
        **`bSsdataBoutputheatflux`**
        : A _Boolean_ specifying the ssdata output heat flux. The default value is False.
        
        **`bSsdataBoutputtemperature`**
        : A _Boolean_ specifying the ssdata output temperature. The default value is False.
        
        **`bSsdataBpivotscheck`**
        : A _Boolean_ specifying the ssdata pivots check. The default value is True.
        
        **`bSsdataBsignleprecision`**
        : A _Boolean_ specifying the ssdata single precision. The default value is False.
        
        **`dSsdataFmultiplier`**
        : A _Double_ specifying the ssdata multiplier. The default value is 0.0.
        
        **`dSsdataFtempdiff`**
        : A _Double_ specifying the ssdata temperature difference. The default value is 0.0.
        
        **`dSsdataFtollevel`**
        : A _Double_ specifying the ssdata tolerance level. The default value is 0.0.
        
        **`iSsdataIadaptivedes`**
        : An _Integer_ specifying the ssdata adaptive destination. The default value is 0.
        
        **`iSsdataIequationsolv`**
        : An _Integer_ specifying the ssdata equation solve. The default value is 0.
        
        **`iSsdataInpoption`**
        : An _Integer_ specifying the ssdata inpoption. The default value is 0.
        
        **`strAnsysVersion`**
        : A _String_ specifying the ansys version. The default value is "".
        
        **`strCommandLineOption`**
        : A _String_ specifying the command line option. The default value is "".
        
        **`bOutputSOLVE`**
        : A _Boolean_ specifying the output solve. The default value is False.
        
        **`iSubspacedataIrigidmode`**
        : An _Integer_ specifying the subspace data rigid mode. The default value is 0.
        
        **`iSubspacedataIworksize`**
        : An _Integer_ specifying the subspace data work size. The default value is 8.
        
        **`iSubspacedataInpadnum`**
        : An _Integer_ specifying the subspace data inpad number. The default value is 4.
        
        **`iSubspacedataIblocknum`**
        : An _Integer_ specifying the subspace data block number. The default value is 5.
        
        **`iSubspacedataImaxiteratcnt`**
        : An _Integer_ specifying the subspace data maximum iterator number. The default value is 0.
        
        **`iSubspacedataIminnshift`**
        : An _Integer_ specifying the subspace data iminnshift. The default value is 0.
        
        **`iSubspacedataIseqcheck`**
        : An _Integer_ specifying the subspace data iseqcheck. The default value is 0.
        
        **`bTransientdataBtraneffect`**
        : A _Boolean_ specifying the transient data effection. The default value is True.
        
        **`iTransientdataIloadingtype`**
        : An _Integer_ specifying the transient data loading type. The default value is 0.
        
        **`dTransientdataFmassmatrixmult`**
        : A _Double_ specifying the transient data mass matrix multiple. The default value is 0.0.
        
        **`dTransientdataFstiffmatrixmult`**
        : A _Double_ specifying the transient data stiff matrix multiple. The default value is 0.0.
        
        **`bTransientdataBmidstep`**
        : A _Boolean_ specifying the transient data midle step. The default value is False.
        
        **`dTransientdataFtolerancebisection`**
        : A _Double_ specifying the transient data tolerance binary section. The default value is 0.0.
        
        **`dTransientdataFtolerancetimestep`**
        : A _Double_ specifying the transient data tolerance time step. The default value is 0.0.
        
        **`iTransientdataItimeinteralgor`**
        : An _Integer_ specifying the transient data time inter algorithm. The default value is 0.
        
        **`iTransientdataItimeinter`**
        : An _Integer_ specifying the transient data time inter. The default value is 0.
        
        **`dTransientdataFgamma`**
        : A _Double_ specifying the transient data gamma. The default value is 0.005.
        
        **`dTransientdataFalpha`**
        : A _Double_ specifying the transient data alpha. The default value is 0.25250625.
        
        **`dTransientdataFdelta`**
        : A _Double_ specifying the transient data delta. The default value is 0.505.
        
        **`dTransientdataFalphaf`**
        : A _Double_ specifying the transient data alpha f. The default value is 0.005.
        
        **`dTransientdataFalpham`**
        : A _Double_ specifying the transient data alpha m. The default value is 0.0.
        
        **`bTransientdataBoutputtemperature`**
        : A _Boolean_ specifying the transient data output temperature. The default value is False.
        
        **`bTransientdataBoutputheatflux`**
        : A _Boolean_ specifying the transient data output heat flux. The default value is False.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strFileName`**
        : A _String_ specifying the file name. The default value is "".
        
        **`crAnsysJob`**
        : A _Cursor_ specifying the ansys job. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.Ansys.Steady(strJobName, iJobdataAnatype=0, iJobdataSoltype=0, strJobdataJobname="Job1", strJobdataJobdescription="", bBasicdataBoutputdisplacements=False, bBasicdataBoutputreactionload=False, bBasicdataBoutputstrain=False, bBasicdataBoutputstress=False, iBasicdataIanalysisopt=0, bBasicdataBcalPressEffects=False, dBasicdataFunitem=0.0, dBasicdataFreftemp=0.0, dBasicdataFendloadtime=0.0, iBasicdataItimestep=0, iBasicdataIstepchosen=0, iBasicdataIsubstepnum=0, iBasicdataImaxsubstep=0, iBasicdataIminstepnum=0, dBasicdataFtimestepsize=0.0, dBasicdataFmintimestep=0.0, dBasicdataFmaxtimestep=0.0, iBasicdataIwritereslutfre=1, iBasicdataIn=1, bRunAPDL=False, bWriteResultDB=False, dFEndFreq=DFLT_DBL, dFStartFreq=DFLT_DBL, iFulltransdataIsolutionoption=0, dFulltransdataFpropchange=0.05, iFulltransdataIpointnum=64, dFulltransdataFmintemp=0.0, dFulltransdataFmaxtemp=0.0, iFulltransdataIequationsolv=0, dFulltransdataFtollevel=0.0, dFulltransdataFmultiplier=0.0, bFulltransdataBsignleprecision=False, bFulltransdataBmemorysave=False, dFulltransdataFtempdiff=1.1, dHarmonicdataFstartfreq=0.0, dHarmonicdataFendfreq=1.0, iHarmonicdataNsubsteps=0, dHarmonicdataFalphad=0.0, dHarmonicdataFbetad=0.0, dHarmonicdataFdmprat=0.0, bHarmonicdataBoutputdisplacements=False, bHarmonicdataBoutputstrain=False, bHarmonicdataBoutputstress=False, iLCId=0, iModeShape=0, iModaldataImodemethod=0, iModaldataIextractnum=1, bModaldataBexpandshape=True, iModaldataIexpandnum=0, bModaldataBuseapprox=False, bModaldataBinclprsseff=False, bModaldataBmemorysave=False, bModaldataBrsvec=False, bModaldataBoutputdisplacements=False, bModaldataBoutputstrain=False, bModaldataBoutputstress=False, iReduceddataIprintnum=0, bSsdataBmemorysave=False, bSsdataBoutputheatflux=False, bSsdataBoutputtemperature=False, bSsdataBpivotscheck=True, bSsdataBsignleprecision=False, dSsdataFmultiplier=0.0, dSsdataFtempdiff=0.0, dSsdataFtollevel=0.0, iSsdataIadaptivedes=0, iSsdataIequationsolv=0, iSsdataInpoption=0, strAnsysVersion="", strCommandLineOption="", bOutputSOLVE=False, iSubspacedataIrigidmode=0, iSubspacedataIworksize=8, iSubspacedataInpadnum=4, iSubspacedataIblocknum=5, iSubspacedataImaxiteratcnt=0, iSubspacedataIminnshift=0, iSubspacedataIseqcheck=0, bTransientdataBtraneffect=True, iTransientdataIloadingtype=0, dTransientdataFmassmatrixmult=0.0, dTransientdataFstiffmatrixmult=0.0, bTransientdataBmidstep=False, dTransientdataFtolerancebisection=0.0, dTransientdataFtolerancetimestep=0.0, iTransientdataItimeinteralgor=0, iTransientdataItimeinter=0, dTransientdataFgamma=0.005, dTransientdataFalpha=0.25250625, dTransientdataFdelta=0.505, dTransientdataFalphaf=0.005, dTransientdataFalpham=0.0, bTransientdataBoutputtemperature=False, bTransientdataBoutputheatflux=False, crEdit=None, strFileName="", crAnsysJob=None)
        ```
        
        """
        message = "Analysis.Ansys.Steady('{}',{},{},'{}','{}',{},{},'{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}','{}',{},{},{},{},{},{},{},{},{},{},{},'{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},'{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{})".format(strJobName, iJobdataAnatype, iJobdataSoltype, strJobdataJobname, strJobdataJobdescription, bBasicdataBoutputdisplacements, bBasicdataBoutputreactionload, bBasicdataBoutputstrain, bBasicdataBoutputstress, iBasicdataIanalysisopt, bBasicdataBcalPressEffects, dBasicdataFunitem, dBasicdataFreftemp, dBasicdataFendloadtime, iBasicdataItimestep, iBasicdataIstepchosen, iBasicdataIsubstepnum, iBasicdataImaxsubstep, iBasicdataIminstepnum, dBasicdataFtimestepsize, dBasicdataFmintimestep, dBasicdataFmaxtimestep, iBasicdataIwritereslutfre, iBasicdataIn, bRunAPDL, bWriteResultDB, dFEndFreq, dFStartFreq, iFulltransdataIsolutionoption, dFulltransdataFpropchange, iFulltransdataIpointnum, dFulltransdataFmintemp, dFulltransdataFmaxtemp, iFulltransdataIequationsolv, dFulltransdataFtollevel, dFulltransdataFmultiplier, bFulltransdataBsignleprecision, bFulltransdataBmemorysave, dFulltransdataFtempdiff, dHarmonicdataFstartfreq, dHarmonicdataFendfreq, iHarmonicdataNsubsteps, dHarmonicdataFalphad, dHarmonicdataFbetad, dHarmonicdataFdmprat, bHarmonicdataBoutputdisplacements, bHarmonicdataBoutputstrain, bHarmonicdataBoutputstress, iLCId, iModeShape, iModaldataImodemethod, iModaldataIextractnum, bModaldataBexpandshape, iModaldataIexpandnum, bModaldataBuseapprox, bModaldataBinclprsseff, bModaldataBmemorysave, bModaldataBrsvec, bModaldataBoutputdisplacements, bModaldataBoutputstrain, bModaldataBoutputstress, iReduceddataIprintnum, bSsdataBmemorysave, bSsdataBoutputheatflux, bSsdataBoutputtemperature, bSsdataBpivotscheck, bSsdataBsignleprecision, dSsdataFmultiplier, dSsdataFtempdiff, dSsdataFtollevel, iSsdataIadaptivedes, iSsdataIequationsolv, iSsdataInpoption, strAnsysVersion, strCommandLineOption, bOutputSOLVE, iSubspacedataIrigidmode, iSubspacedataIworksize, iSubspacedataInpadnum, iSubspacedataIblocknum, iSubspacedataImaxiteratcnt, iSubspacedataIminnshift, iSubspacedataIseqcheck, bTransientdataBtraneffect, iTransientdataIloadingtype, dTransientdataFmassmatrixmult, dTransientdataFstiffmatrixmult, bTransientdataBmidstep, dTransientdataFtolerancebisection, dTransientdataFtolerancetimestep, iTransientdataItimeinteralgor, iTransientdataItimeinter, dTransientdataFgamma, dTransientdataFalpha, dTransientdataFdelta, dTransientdataFalphaf, dTransientdataFalpham, bTransientdataBoutputtemperature, bTransientdataBoutputheatflux, crEdit, strFileName, crAnsysJob)
        return JPT_RUN_LINE(message)

class Analysis_Nastran:
    def ModalTransientResponse(self, strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), bDummyPropAutoAssign=False, iDummyPropMaterialID=0, crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0):
        r"""
        ## Description
        
        Export Nastran Modal Transient Response
        
        ## Syntax
        
        ```python
        Analysis.Nastran.ModalTransientResponse(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), bDummyPropAutoAssign=False, iDummyPropMaterialID=0, crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0)
        ```
        
        Macro: {ref}`Macro-Analysis-Nastran_ModalTransientResponse`
        
        Ribbon: {menuselection}`Analysis --> Nastran --> ModalTransientResponse`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "Job_1".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`nastranAnalysis`**
        : A _NASTRAN_ANALYSIS_ specifying the nastran analysis data structure. The default value is NASTRAN_ANALYSIS().
        
        **`bDummyPropAutoAssign`**
        : A _Boolean_ specifying the dummy property auto assign. The default value is False.
        
        **`iDummyPropMaterialID`**
        : An _Integer_ specifying the dummy property material ID. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        **`iModelCheckAnswer`**
        : An _Integer_ specifying the model check answer. The default value is 0.
        
        **`iDeleteSlaveNodesAnswer`**
        : An _Integer_ specifying the delete slave nodes answer. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.Nastran.ModalTransientResponse(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), bDummyPropAutoAssign=False, iDummyPropMaterialID=0, crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0)
        ```
        
        """
        message = "Analysis.Nastran.ModalTransientResponse('{}','{}',{},'{}',{},{},{},'{}',{},{})".format(strName, strDescription, crlTarget, nastranAnalysis, bDummyPropAutoAssign, iDummyPropMaterialID, crEdit, strPath, iModelCheckAnswer, iDeleteSlaveNodesAnswer)
        return JPT_RUN_LINE(message)

    def LinearBuckling(self, strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), bDummyPropAutoAssign=False, iDummyPropMaterialID=0, crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0):
        r"""
        ## Description
        
        Export Nastran Linear Buckling
        
        ## Syntax
        
        ```python
        Analysis.Nastran.LinearBuckling(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), bDummyPropAutoAssign=False, iDummyPropMaterialID=0, crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0)
        ```
        
        Macro: {ref}`Macro-Analysis-Nastran_LinearBuckling`
        
        Ribbon: {menuselection}`Analysis --> Nastran --> LinearBuckling`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "Job_1".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`nastranAnalysis`**
        : A _NASTRAN_ANALYSIS_ specifying the nastran analysis data structure. The default value is NASTRAN_ANALYSIS().
        
        **`bDummyPropAutoAssign`**
        : A _Boolean_ specifying the dummy property auto assign. The default value is False.
        
        **`iDummyPropMaterialID`**
        : An _Integer_ specifying the dummy property material ID. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        **`iModelCheckAnswer`**
        : An _Integer_ specifying the model check answer. The default value is 0.
        
        **`iDeleteSlaveNodesAnswer`**
        : An _Integer_ specifying the delete slave nodes answer. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.Nastran.LinearBuckling(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), bDummyPropAutoAssign=False, iDummyPropMaterialID=0, crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0)
        ```
        
        """
        message = "Analysis.Nastran.LinearBuckling('{}','{}',{},'{}',{},{},{},'{}',{},{})".format(strName, strDescription, crlTarget, nastranAnalysis, bDummyPropAutoAssign, iDummyPropMaterialID, crEdit, strPath, iModelCheckAnswer, iDeleteSlaveNodesAnswer)
        return JPT_RUN_LINE(message)

    def Transient(self, strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), bDummyPropAutoAssign=False, iDummyPropMaterialID=0, crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0):
        r"""
        ## Description
        
        Export Nastran Transient
        
        ## Syntax
        
        ```python
        Analysis.Nastran.Transient(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), bDummyPropAutoAssign=False, iDummyPropMaterialID=0, crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0)
        ```
        
        Macro: {ref}`Macro-Analysis-Nastran_Transient`
        
        Ribbon: {menuselection}`Analysis --> Nastran --> Transient`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "Job_1".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`nastranAnalysis`**
        : A _NASTRAN_ANALYSIS_ specifying the nastran analysis data structure. The default value is NASTRAN_ANALYSIS().
        
        **`bDummyPropAutoAssign`**
        : A _Boolean_ specifying the dummy property auto assign. The default value is False.
        
        **`iDummyPropMaterialID`**
        : An _Integer_ specifying the dummy property material ID. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        **`iModelCheckAnswer`**
        : An _Integer_ specifying the model check answer. The default value is 0.
        
        **`iDeleteSlaveNodesAnswer`**
        : An _Integer_ specifying the delete slave nodes answer. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.Nastran.Transient(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), bDummyPropAutoAssign=False, iDummyPropMaterialID=0, crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0)
        ```
        
        """
        message = "Analysis.Nastran.Transient('{}','{}',{},'{}',{},{},{},'{}',{},{})".format(strName, strDescription, crlTarget, nastranAnalysis, bDummyPropAutoAssign, iDummyPropMaterialID, crEdit, strPath, iModelCheckAnswer, iDeleteSlaveNodesAnswer)
        return JPT_RUN_LINE(message)

    def SteadyState(self, strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), bDummyPropAutoAssign=False, iDummyPropMaterialID=0, crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0):
        r"""
        ## Description
        
        Export Nastran Steady State
        
        ## Syntax
        
        ```python
        Analysis.Nastran.SteadyState(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), bDummyPropAutoAssign=False, iDummyPropMaterialID=0, crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0)
        ```
        
        Macro: {ref}`Macro-Analysis-Nastran_SteadyState`
        
        Ribbon: {menuselection}`Analysis --> Nastran --> SteadyState`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "Job_1".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`nastranAnalysis`**
        : A _NASTRAN_ANALYSIS_ specifying the nastran analysis data structure. The default value is NASTRAN_ANALYSIS().
        
        **`bDummyPropAutoAssign`**
        : A _Boolean_ specifying the dummy property auto assign. The default value is False.
        
        **`iDummyPropMaterialID`**
        : An _Integer_ specifying the dummy property material ID. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        **`iModelCheckAnswer`**
        : An _Integer_ specifying the model check answer. The default value is 0.
        
        **`iDeleteSlaveNodesAnswer`**
        : An _Integer_ specifying the delete slave nodes answer. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.Nastran.SteadyState(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), bDummyPropAutoAssign=False, iDummyPropMaterialID=0, crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0)
        ```
        
        """
        message = "Analysis.Nastran.SteadyState('{}','{}',{},'{}',{},{},{},'{}',{},{})".format(strName, strDescription, crlTarget, nastranAnalysis, bDummyPropAutoAssign, iDummyPropMaterialID, crEdit, strPath, iModelCheckAnswer, iDeleteSlaveNodesAnswer)
        return JPT_RUN_LINE(message)

    def ModalFrequencyResponse(self, strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), bDummyPropAutoAssign=False, iDummyPropMaterialID=0, crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0):
        r"""
        ## Description
        
        Export Nastran Modal Frequency Response
        
        ## Syntax
        
        ```python
        Analysis.Nastran.ModalFrequencyResponse(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), bDummyPropAutoAssign=False, iDummyPropMaterialID=0, crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0)
        ```
        
        Macro: {ref}`Macro-Analysis-Nastran_ModalFrequencyResponse`
        
        Ribbon: {menuselection}`Analysis --> Nastran --> ModalFrequencyResponse`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "Job_1".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`nastranAnalysis`**
        : A _NASTRAN_ANALYSIS_ specifying the nastran analysis data structure. The default value is NASTRAN_ANALYSIS().
        
        **`bDummyPropAutoAssign`**
        : A _Boolean_ specifying the dummy property auto assign. The default value is False.
        
        **`iDummyPropMaterialID`**
        : An _Integer_ specifying the dummy property material ID. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        **`iModelCheckAnswer`**
        : An _Integer_ specifying the model check answer. The default value is 0.
        
        **`iDeleteSlaveNodesAnswer`**
        : An _Integer_ specifying the delete slave nodes answer. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.Nastran.ModalFrequencyResponse(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), bDummyPropAutoAssign=False, iDummyPropMaterialID=0, crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0)
        ```
        
        """
        message = "Analysis.Nastran.ModalFrequencyResponse('{}','{}',{},'{}',{},{},{},'{}',{},{})".format(strName, strDescription, crlTarget, nastranAnalysis, bDummyPropAutoAssign, iDummyPropMaterialID, crEdit, strPath, iModelCheckAnswer, iDeleteSlaveNodesAnswer)
        return JPT_RUN_LINE(message)

    def LinearStatic(self, strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), bDummyPropAutoAssign=False, iDummyPropMaterialID=0, crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0):
        r"""
        ## Description
        
        Export Nastran Linear Static
        
        ## Syntax
        
        ```python
        Analysis.Nastran.LinearStatic(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), bDummyPropAutoAssign=False, iDummyPropMaterialID=0, crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0)
        ```
        
        Macro: {ref}`Macro-Analysis-Nastran_LinearStatic`
        
        Ribbon: {menuselection}`Analysis --> Nastran --> LinearStatic`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "Job_1".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`nastranAnalysis`**
        : A _NASTRAN_ANALYSIS_ specifying the nastran analysis data structure. The default value is NASTRAN_ANALYSIS().
        
        **`bDummyPropAutoAssign`**
        : A _Boolean_ specifying the dummy property auto assign. The default value is False.
        
        **`iDummyPropMaterialID`**
        : An _Integer_ specifying the dummy property material ID. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        **`iModelCheckAnswer`**
        : An _Integer_ specifying the model check answer. The default value is 0.
        
        **`iDeleteSlaveNodesAnswer`**
        : An _Integer_ specifying the delete slave nodes answer. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.Nastran.LinearStatic(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), bDummyPropAutoAssign=False, iDummyPropMaterialID=0, crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0)
        ```
        
        """
        message = "Analysis.Nastran.LinearStatic('{}','{}',{},'{}',{},{},{},'{}',{},{})".format(strName, strDescription, crlTarget, nastranAnalysis, bDummyPropAutoAssign, iDummyPropMaterialID, crEdit, strPath, iModelCheckAnswer, iDeleteSlaveNodesAnswer)
        return JPT_RUN_LINE(message)

    def NormalModes(self, strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), bDummyPropAutoAssign=False, iDummyPropMaterialID=0, crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0):
        r"""
        ## Description
        
        Export Nastran Normal Modes
        
        ## Syntax
        
        ```python
        Analysis.Nastran.NormalModes(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), bDummyPropAutoAssign=False, iDummyPropMaterialID=0, crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0)
        ```
        
        Macro: {ref}`Macro-Analysis-Nastran_NormalModes`
        
        Ribbon: {menuselection}`Analysis --> Nastran --> NormalModes`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "Job_1".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`nastranAnalysis`**
        : A _NASTRAN_ANALYSIS_ specifying the nastran analysis data structure. The default value is NASTRAN_ANALYSIS().
        
        **`bDummyPropAutoAssign`**
        : A _Boolean_ specifying the dummy property auto assign. The default value is False.
        
        **`iDummyPropMaterialID`**
        : An _Integer_ specifying the dummy property material ID. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        **`iModelCheckAnswer`**
        : An _Integer_ specifying the model check answer. The default value is 0.
        
        **`iDeleteSlaveNodesAnswer`**
        : An _Integer_ specifying the delete slave nodes answer. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.Nastran.NormalModes(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), bDummyPropAutoAssign=False, iDummyPropMaterialID=0, crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0)
        ```
        
        """
        message = "Analysis.Nastran.NormalModes('{}','{}',{},'{}',{},{},{},'{}',{},{})".format(strName, strDescription, crlTarget, nastranAnalysis, bDummyPropAutoAssign, iDummyPropMaterialID, crEdit, strPath, iModelCheckAnswer, iDeleteSlaveNodesAnswer)
        return JPT_RUN_LINE(message)

class Analysis_Permas:
    def Job(self, strName, strDescription, iType, crEdit, crlTarget, bElStress, bElStressMis, bElStrain, bNodeStess, bGZip, bIdeas, bNLResult, iNLStepType, dEquiStart, dEquiStep, dEquiEnd, strNLStepList, bTimeStep, iTimeStepKind, dTimeStart, dTimeStep, dTimeEnd, iLCId):
        r"""
        ## Description
        
        permas output
        
        ## Syntax
        
        ```python
        Analysis.Permas.Job(strName, strDescription, iType, crEdit, crlTarget, bElStress, bElStressMis, bElStrain, bNodeStess, bGZip, bIdeas, bNLResult, iNLStepType, dEquiStart, dEquiStep, dEquiEnd, strNLStepList, bTimeStep, iTimeStepKind, dTimeStart, dTimeStep, dTimeEnd, iLCId)
        ```
        
        Macro: {ref}`Macro-Analysis-PermasJob`
        
        Ribbon: {menuselection}`Analysis --> Permas --> Job`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`strDescription`**
        : A _String_ specifying the description. This is a required input.
        
        **`iType`**
        : An _Integer_ specifying the type. This is a required input.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. This is a required input.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. This is a required input.
        
        **`bElStress`**
        : A _Boolean_ specifying the el stress. This is a required input.
        
        **`bElStressMis`**
        : A _Boolean_ specifying the el stress mis. This is a required input.
        
        **`bElStrain`**
        : A _Boolean_ specifying the el strain. This is a required input.
        
        **`bNodeStess`**
        : A _Boolean_ specifying the node stess. This is a required input.
        
        **`bGZip`**
        : A _Boolean_ specifying the G zip. This is a required input.
        
        **`bIdeas`**
        : A _Boolean_ specifying the ideas. This is a required input.
        
        **`bNLResult`**
        : A _Boolean_ specifying the n l result. This is a required input.
        
        **`iNLStepType`**
        : An _Integer_ specifying the n l step type. This is a required input.
        
        **`dEquiStart`**
        : A _Double_ specifying the equi start. This is a required input.
        
        **`dEquiStep`**
        : A _Double_ specifying the equi step. This is a required input.
        
        **`dEquiEnd`**
        : A _Double_ specifying the equi end. This is a required input.
        
        **`strNLStepList`**
        : A _String_ specifying the n l step list. This is a required input.
        
        **`bTimeStep`**
        : A _Boolean_ specifying the time step. This is a required input.
        
        **`iTimeStepKind`**
        : An _Integer_ specifying the time step kind. This is a required input.
        
        **`dTimeStart`**
        : A _Double_ specifying the time start. This is a required input.
        
        **`dTimeStep`**
        : A _Double_ specifying the time step. This is a required input.
        
        **`dTimeEnd`**
        : A _Double_ specifying the time end. This is a required input.
        
        **`iLCId`**
        : An _Integer_ specifying the LC ID. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.Permas.Job(strName, strDescription, iType, crEdit, crlTarget, bElStress, bElStressMis, bElStrain, bNodeStess, bGZip, bIdeas, bNLResult, iNLStepType, dEquiStart, dEquiStep, dEquiEnd, strNLStepList, bTimeStep, iTimeStepKind, dTimeStart, dTimeStep, dTimeEnd, iLCId)
        ```
        
        """
        message = "Analysis.Permas.Job('{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{},{},{},{},{},{})".format(strName, strDescription, iType, crEdit, crlTarget, bElStress, bElStressMis, bElStrain, bNodeStess, bGZip, bIdeas, bNLResult, iNLStepType, dEquiStart, dEquiStep, dEquiEnd, strNLStepList, bTimeStep, iTimeStepKind, dTimeStart, dTimeStep, dTimeEnd, iLCId)
        return JPT_RUN_LINE(message)

class Analysis_TSSolver:
    def ExportDynamisBdf(self, strPath, crJob):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Analysis.TSSolver.ExportDynamisBdf(strPath, crJob)
        ```
        
        Macro: {ref}`Macro-Analysis-ExportDynamisBdf`
        
        Ribbon: {menuselection}`Analysis --> TSSolver --> ExportDynamisBdf`
        
        ## Inputs
        
        **`strPath`**
        : A _String_ specifying the path. This is a required input.
        
        **`crJob`**
        : A _Cursor_ specifying the job. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.TSSolver.ExportDynamisBdf(strPath, crJob)
        ```
        
        """
        message = "Analysis.TSSolver.ExportDynamisBdf('{}',{})".format(strPath, crJob)
        return JPT_RUN_LINE(message)

    def Job(self, strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None):
        r"""
        ## Description
        
        Create TS-Solver Job
        
        ## Syntax
        
        ```python
        Analysis.TSSolver.Job(strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None)
        ```
        
        Macro: {ref}`Macro-Analysis-DynamisJob`
        
        Ribbon: {menuselection}`Analysis --> TSSolver --> Job`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`nastranAnalysis`**
        : A _NASTRAN_ANALYSIS_ specifying the nastran analysis data structure. The default value is NASTRAN_ANALYSIS().
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.TSSolver.Job(strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None)
        ```
        
        """
        message = "Analysis.TSSolver.Job('{}','{}',{},'{}',{})".format(strName, strDescription, crlTarget, nastranAnalysis, crEdit)
        return JPT_RUN_LINE(message)

    def LinearBucking(self, strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath=""):
        r"""
        ## Description
        
        Export TS-Solver Linear Bucking
        
        ## Syntax
        
        ```python
        Analysis.TSSolver.LinearBucking(strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath="")
        ```
        
        Macro: {ref}`Macro-Analysis-TSSolver_LinearBuckling`
        
        Ribbon: {menuselection}`Analysis --> TSSolver --> LinearBucking`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`nastranAnalysis`**
        : A _NASTRAN_ANALYSIS_ specifying the nastran analysis data structure. The default value is NASTRAN_ANALYSIS().
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.TSSolver.LinearBucking(strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath="")
        ```
        
        """
        message = "Analysis.TSSolver.LinearBucking('{}','{}',{},'{}',{},'{}')".format(strName, strDescription, crlTarget, nastranAnalysis, crEdit, strPath)
        return JPT_RUN_LINE(message)

    def LinearStatic(self, strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath=""):
        r"""
        ## Description
        
        Export TS-Solver Linear Static
        
        ## Syntax
        
        ```python
        Analysis.TSSolver.LinearStatic(strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath="")
        ```
        
        Macro: {ref}`Macro-Analysis-TSSolverLinearStatic`
        
        Ribbon: {menuselection}`Analysis --> TSSolver --> LinearStatic`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`nastranAnalysis`**
        : A _NASTRAN_ANALYSIS_ specifying the nastran analysis data structure. The default value is NASTRAN_ANALYSIS().
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.TSSolver.LinearStatic(strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath="")
        ```
        
        """
        message = "Analysis.TSSolver.LinearStatic('{}','{}',{},'{}',{},'{}')".format(strName, strDescription, crlTarget, nastranAnalysis, crEdit, strPath)
        return JPT_RUN_LINE(message)

    def NonlinearStatic(self, strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath=""):
        r"""
        ## Description
        
        Export TS-Solver Nonlinear Static
        
        ## Syntax
        
        ```python
        Analysis.TSSolver.NonlinearStatic(strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath="")
        ```
        
        Macro: {ref}`Macro-Analysis-TSSolverNonlinearStatic`
        
        Ribbon: {menuselection}`Analysis --> TSSolver --> NonlinearStatic`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`nastranAnalysis`**
        : A _NASTRAN_ANALYSIS_ specifying the nastran analysis data structure. The default value is NASTRAN_ANALYSIS().
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.TSSolver.NonlinearStatic(strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath="")
        ```
        
        """
        message = "Analysis.TSSolver.NonlinearStatic('{}','{}',{},'{}',{},'{}')".format(strName, strDescription, crlTarget, nastranAnalysis, crEdit, strPath)
        return JPT_RUN_LINE(message)

    def NormalModes(self, strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath=""):
        r"""
        ## Description
        
        Export TS-Solver Normal Modes
        
        ## Syntax
        
        ```python
        Analysis.TSSolver.NormalModes(strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath="")
        ```
        
        Macro: {ref}`Macro-Analysis-TSSolverNormalModes`
        
        Ribbon: {menuselection}`Analysis --> TSSolver --> NormalModes`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`nastranAnalysis`**
        : A _NASTRAN_ANALYSIS_ specifying the nastran analysis data structure. The default value is NASTRAN_ANALYSIS().
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.TSSolver.NormalModes(strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath="")
        ```
        
        """
        message = "Analysis.TSSolver.NormalModes('{}','{}',{},'{}',{},'{}')".format(strName, strDescription, crlTarget, nastranAnalysis, crEdit, strPath)
        return JPT_RUN_LINE(message)

    def NonlinearFrequency(self, strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath=""):
        r"""
        ## Description
        
        Export TS-Solver Nonlinear Frequency
        
        ## Syntax
        
        ```python
        Analysis.TSSolver.NonlinearFrequency(strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath="")
        ```
        
        Macro: {ref}`Macro-Analysis-TSSolverNonlinearFrequency`
        
        Ribbon: {menuselection}`Analysis --> TSSolver --> NonlinearFrequency`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`nastranAnalysis`**
        : A _NASTRAN_ANALYSIS_ specifying the nastran analysis data structure. The default value is NASTRAN_ANALYSIS().
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.TSSolver.NonlinearFrequency(strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath="")
        ```
        
        """
        message = "Analysis.TSSolver.NonlinearFrequency('{}','{}',{},'{}',{},'{}')".format(strName, strDescription, crlTarget, nastranAnalysis, crEdit, strPath)
        return JPT_RUN_LINE(message)

    def ModalTransientResponse(self, strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath=""):
        r"""
        ## Description
        
        Export TS-Solver Modal Transient Response
        
        ## Syntax
        
        ```python
        Analysis.TSSolver.ModalTransientResponse(strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath="")
        ```
        
        Macro: {ref}`Macro-Analysis-TSSolverModalTransientResponse`
        
        Ribbon: {menuselection}`Analysis --> TSSolver --> ModalTransientResponse`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`nastranAnalysis`**
        : A _NASTRAN_ANALYSIS_ specifying the nastran analysis data structure. The default value is NASTRAN_ANALYSIS().
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.TSSolver.ModalTransientResponse(strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath="")
        ```
        
        """
        message = "Analysis.TSSolver.ModalTransientResponse('{}','{}',{},'{}',{},'{}')".format(strName, strDescription, crlTarget, nastranAnalysis, crEdit, strPath)
        return JPT_RUN_LINE(message)

    def TransientHeatTransfer(self, strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath=""):
        r"""
        ## Description
        
        Export TS-Solver Transient Heat Transfer
        
        ## Syntax
        
        ```python
        Analysis.TSSolver.TransientHeatTransfer(strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath="")
        ```
        
        Macro: {ref}`Macro-Analysis-TSSolverTransientHeatTransfer`
        
        Ribbon: {menuselection}`Analysis --> TSSolver --> TransientHeatTransfer`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`nastranAnalysis`**
        : A _NASTRAN_ANALYSIS_ specifying the nastran analysis data structure. The default value is NASTRAN_ANALYSIS().
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.TSSolver.TransientHeatTransfer(strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath="")
        ```
        
        """
        message = "Analysis.TSSolver.TransientHeatTransfer('{}','{}',{},'{}',{},'{}')".format(strName, strDescription, crlTarget, nastranAnalysis, crEdit, strPath)
        return JPT_RUN_LINE(message)

    def ModalFrequencyResponse(self, strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath=""):
        r"""
        ## Description
        
        Export TS-Solver Modal Frequency Response
        
        ## Syntax
        
        ```python
        Analysis.TSSolver.ModalFrequencyResponse(strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath="")
        ```
        
        Macro: {ref}`Macro-Analysis-TSSolver_ModalFrequencyResponse`
        
        Ribbon: {menuselection}`Analysis --> TSSolver --> ModalFrequencyResponse`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`nastranAnalysis`**
        : A _NASTRAN_ANALYSIS_ specifying the nastran analysis data structure. The default value is NASTRAN_ANALYSIS().
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.TSSolver.ModalFrequencyResponse(strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath="")
        ```
        
        """
        message = "Analysis.TSSolver.ModalFrequencyResponse('{}','{}',{},'{}',{},'{}')".format(strName, strDescription, crlTarget, nastranAnalysis, crEdit, strPath)
        return JPT_RUN_LINE(message)

    def SteadyStateHeatTransfer(self, strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath=""):
        r"""
        ## Description
        
        Export TS-Solver Steady State Heat Transfer
        
        ## Syntax
        
        ```python
        Analysis.TSSolver.SteadyStateHeatTransfer(strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath="")
        ```
        
        Macro: {ref}`Macro-Analysis-TSSolver_SteadyStateHeatTransfer`
        
        Ribbon: {menuselection}`Analysis --> TSSolver --> SteadyStateHeatTransfer`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`nastranAnalysis`**
        : A _NASTRAN_ANALYSIS_ specifying the nastran analysis data structure. The default value is NASTRAN_ANALYSIS().
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.TSSolver.SteadyStateHeatTransfer(strName="", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), crEdit=None, strPath="")
        ```
        
        """
        message = "Analysis.TSSolver.SteadyStateHeatTransfer('{}','{}',{},'{}',{},'{}')".format(strName, strDescription, crlTarget, nastranAnalysis, crEdit, strPath)
        return JPT_RUN_LINE(message)

class Analysis_TSSS:
    def TransientHeatTransfer(self, strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), iRadialReturn=0, listNastranNonlinear=[], crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0):
        r"""
        ## Description
        
        Export TS-SS Transient Heat Transfer
        
        ## Syntax
        
        ```python
        Analysis.TSSS.TransientHeatTransfer(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), iRadialReturn=0, listNastranNonlinear=[], crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0)
        ```
        
        Macro: {ref}`Macro-Analysis-TSSS_TransientHeatTransfer`
        
        Ribbon: {menuselection}`Analysis --> TSSS --> TransientHeatTransfer`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "Job_1".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`nastranAnalysis`**
        : A _NASTRAN_ANALYSIS_ specifying the nastran analysis data structure. The default value is NASTRAN_ANALYSIS().
        
        **`iRadialReturn`**
        : An _Integer_ specifying the radial return. The default value is 0.
        
        **`listNastranNonlinear`**
        : A _NASTRAN_NONLINEAR List_ specifying the nastran nonlinear. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        **`iModelCheckAnswer`**
        : An _Integer_ specifying the model check answer. The default value is 0.
        
        **`iDeleteSlaveNodesAnswer`**
        : An _Integer_ specifying the delete slave nodes answer. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.TSSS.TransientHeatTransfer(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), iRadialReturn=0, listNastranNonlinear=[], crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0)
        ```
        
        """
        message = "Analysis.TSSS.TransientHeatTransfer('{}','{}',{},'{}',{},'{}',{},'{}',{},{})".format(strName, strDescription, crlTarget, nastranAnalysis, iRadialReturn, listNastranNonlinear, crEdit, strPath, iModelCheckAnswer, iDeleteSlaveNodesAnswer)
        return JPT_RUN_LINE(message)

    def LinearStatic(self, strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), iRadialReturn=0, listNastranNonlinear=[], crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0, iNitTempType=0):
        r"""
        ## Description
        
        Export TS-SS Linear Static
        
        ## Syntax
        
        ```python
        Analysis.TSSS.LinearStatic(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), iRadialReturn=0, listNastranNonlinear=[], crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0, iNitTempType=0)
        ```
        
        Macro: {ref}`Macro-Analysis-TSSS_LinearStatic`
        
        Ribbon: {menuselection}`Analysis --> TSSS --> LinearStatic`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "Job_1".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`nastranAnalysis`**
        : A _NASTRAN_ANALYSIS_ specifying the nastran analysis data structure. The default value is NASTRAN_ANALYSIS().
        
        **`iRadialReturn`**
        : An _Integer_ specifying the radial return. The default value is 0.
        
        **`listNastranNonlinear`**
        : A _NASTRAN_NONLINEAR List_ specifying the nastran nonlinear. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        **`iModelCheckAnswer`**
        : An _Integer_ specifying the model check answer. The default value is 0.
        
        **`iDeleteSlaveNodesAnswer`**
        : An _Integer_ specifying the delete slave nodes answer. The default value is 0.
        
        **`iNitTempType`**
        : An _Integer_ specifying the nit temperature type. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.TSSS.LinearStatic(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), iRadialReturn=0, listNastranNonlinear=[], crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0, iNitTempType=0)
        ```
        
        """
        message = "Analysis.TSSS.LinearStatic('{}','{}',{},'{}',{},'{}',{},'{}',{},{},{})".format(strName, strDescription, crlTarget, nastranAnalysis, iRadialReturn, listNastranNonlinear, crEdit, strPath, iModelCheckAnswer, iDeleteSlaveNodesAnswer, iNitTempType)
        return JPT_RUN_LINE(message)

    def NonlinearStatic(self, strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), iRadialReturn=0, listNastranNonlinear=[], crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0):
        r"""
        ## Description
        
        Export TS-SS Nonlinear Static
        
        ## Syntax
        
        ```python
        Analysis.TSSS.NonlinearStatic(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), iRadialReturn=0, listNastranNonlinear=[], crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0)
        ```
        
        Macro: {ref}`Macro-Analysis-TSSS_NonlinearStatic`
        
        Ribbon: {menuselection}`Analysis --> TSSS --> NonlinearStatic`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "Job_1".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`nastranAnalysis`**
        : A _NASTRAN_ANALYSIS_ specifying the nastran analysis data structure. The default value is NASTRAN_ANALYSIS().
        
        **`iRadialReturn`**
        : An _Integer_ specifying the radial return. The default value is 0.
        
        **`listNastranNonlinear`**
        : A _NASTRAN_NONLINEAR List_ specifying the nastran nonlinear. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        **`iModelCheckAnswer`**
        : An _Integer_ specifying the model check answer. The default value is 0.
        
        **`iDeleteSlaveNodesAnswer`**
        : An _Integer_ specifying the delete slave nodes answer. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.TSSS.NonlinearStatic(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), iRadialReturn=0, listNastranNonlinear=[], crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0)
        ```
        
        """
        message = "Analysis.TSSS.NonlinearStatic('{}','{}',{},'{}',{},'{}',{},'{}',{},{})".format(strName, strDescription, crlTarget, nastranAnalysis, iRadialReturn, listNastranNonlinear, crEdit, strPath, iModelCheckAnswer, iDeleteSlaveNodesAnswer)
        return JPT_RUN_LINE(message)

    def NormalModes(self, strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), iRadialReturn=0, listNastranNonlinear=[], crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0):
        r"""
        ## Description
        
        Export TS-SS Normal Modes
        
        ## Syntax
        
        ```python
        Analysis.TSSS.NormalModes(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), iRadialReturn=0, listNastranNonlinear=[], crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0)
        ```
        
        Macro: {ref}`Macro-Analysis-TSSS_NormalModes`
        
        Ribbon: {menuselection}`Analysis --> TSSS --> NormalModes`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "Job_1".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`nastranAnalysis`**
        : A _NASTRAN_ANALYSIS_ specifying the nastran analysis data structure. The default value is NASTRAN_ANALYSIS().
        
        **`iRadialReturn`**
        : An _Integer_ specifying the radial return. The default value is 0.
        
        **`listNastranNonlinear`**
        : A _NASTRAN_NONLINEAR List_ specifying the nastran nonlinear. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        **`iModelCheckAnswer`**
        : An _Integer_ specifying the model check answer. The default value is 0.
        
        **`iDeleteSlaveNodesAnswer`**
        : An _Integer_ specifying the delete slave nodes answer. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.TSSS.NormalModes(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), iRadialReturn=0, listNastranNonlinear=[], crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0)
        ```
        
        """
        message = "Analysis.TSSS.NormalModes('{}','{}',{},'{}',{},'{}',{},'{}',{},{})".format(strName, strDescription, crlTarget, nastranAnalysis, iRadialReturn, listNastranNonlinear, crEdit, strPath, iModelCheckAnswer, iDeleteSlaveNodesAnswer)
        return JPT_RUN_LINE(message)

    def LinearBuckling(self, strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), iRadialReturn=0, listNastranNonlinear=[], crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0):
        r"""
        ## Description
        
        Export TS-SS Linear Buckling
        
        ## Syntax
        
        ```python
        Analysis.TSSS.LinearBuckling(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), iRadialReturn=0, listNastranNonlinear=[], crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0)
        ```
        
        Macro: {ref}`Macro-Analysis-TSSS_LinearBuckling`
        
        Ribbon: {menuselection}`Analysis --> TSSS --> LinearBuckling`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "Job_1".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`nastranAnalysis`**
        : A _NASTRAN_ANALYSIS_ specifying the nastran analysis data structure. The default value is NASTRAN_ANALYSIS().
        
        **`iRadialReturn`**
        : An _Integer_ specifying the radial return. The default value is 0.
        
        **`listNastranNonlinear`**
        : A _NASTRAN_NONLINEAR List_ specifying the nastran nonlinear. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        **`iModelCheckAnswer`**
        : An _Integer_ specifying the model check answer. The default value is 0.
        
        **`iDeleteSlaveNodesAnswer`**
        : An _Integer_ specifying the delete slave nodes answer. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.TSSS.LinearBuckling(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), iRadialReturn=0, listNastranNonlinear=[], crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0)
        ```
        
        """
        message = "Analysis.TSSS.LinearBuckling('{}','{}',{},'{}',{},'{}',{},'{}',{},{})".format(strName, strDescription, crlTarget, nastranAnalysis, iRadialReturn, listNastranNonlinear, crEdit, strPath, iModelCheckAnswer, iDeleteSlaveNodesAnswer)
        return JPT_RUN_LINE(message)

    def ModalFrequencyResponse(self, strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), iRadialReturn=0, listNastranNonlinear=[], crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0):
        r"""
        ## Description
        
        Export TS-SS Modal Frequency Response
        
        ## Syntax
        
        ```python
        Analysis.TSSS.ModalFrequencyResponse(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), iRadialReturn=0, listNastranNonlinear=[], crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0)
        ```
        
        Macro: {ref}`Macro-Analysis-TSSS_ModalFrequencyResponse`
        
        Ribbon: {menuselection}`Analysis --> TSSS --> ModalFrequencyResponse`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "Job_1".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`nastranAnalysis`**
        : A _NASTRAN_ANALYSIS_ specifying the nastran analysis data structure. The default value is NASTRAN_ANALYSIS().
        
        **`iRadialReturn`**
        : An _Integer_ specifying the radial return. The default value is 0.
        
        **`listNastranNonlinear`**
        : A _NASTRAN_NONLINEAR List_ specifying the nastran nonlinear. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        **`iModelCheckAnswer`**
        : An _Integer_ specifying the model check answer. The default value is 0.
        
        **`iDeleteSlaveNodesAnswer`**
        : An _Integer_ specifying the delete slave nodes answer. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.TSSS.ModalFrequencyResponse(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), iRadialReturn=0, listNastranNonlinear=[], crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0)
        ```
        
        """
        message = "Analysis.TSSS.ModalFrequencyResponse('{}','{}',{},'{}',{},'{}',{},'{}',{},{})".format(strName, strDescription, crlTarget, nastranAnalysis, iRadialReturn, listNastranNonlinear, crEdit, strPath, iModelCheckAnswer, iDeleteSlaveNodesAnswer)
        return JPT_RUN_LINE(message)

    def SteadyStateHeatTransfer(self, strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), iRadialReturn=0, listNastranNonlinear=[], crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0):
        r"""
        ## Description
        
        Export TS-SS Steady State Heat Transfer
        
        ## Syntax
        
        ```python
        Analysis.TSSS.SteadyStateHeatTransfer(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), iRadialReturn=0, listNastranNonlinear=[], crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0)
        ```
        
        Macro: {ref}`Macro-Analysis-TSSS_SteadyStateHeatTransfer`
        
        Ribbon: {menuselection}`Analysis --> TSSS --> SteadyStateHeatTransfer`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "Job_1".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`nastranAnalysis`**
        : A _NASTRAN_ANALYSIS_ specifying the nastran analysis data structure. The default value is NASTRAN_ANALYSIS().
        
        **`iRadialReturn`**
        : An _Integer_ specifying the radial return. The default value is 0.
        
        **`listNastranNonlinear`**
        : A _NASTRAN_NONLINEAR List_ specifying the nastran nonlinear. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        **`iModelCheckAnswer`**
        : An _Integer_ specifying the model check answer. The default value is 0.
        
        **`iDeleteSlaveNodesAnswer`**
        : An _Integer_ specifying the delete slave nodes answer. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.TSSS.SteadyStateHeatTransfer(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), iRadialReturn=0, listNastranNonlinear=[], crEdit=None, strPath="", iModelCheckAnswer=0, iDeleteSlaveNodesAnswer=0)
        ```
        
        """
        message = "Analysis.TSSS.SteadyStateHeatTransfer('{}','{}',{},'{}',{},'{}',{},'{}',{},{})".format(strName, strDescription, crlTarget, nastranAnalysis, iRadialReturn, listNastranNonlinear, crEdit, strPath, iModelCheckAnswer, iDeleteSlaveNodesAnswer)
        return JPT_RUN_LINE(message)

class Analysis_ADVC:
    MakeProcess = ADVC_MakeProcess()

    def Structure(self, strName="", strDescription="", iEJobType=0, crlProcessSequence=[], crlElemLocationGroup=[], crlNodeLocationGroup=[], bWriteGroup=False, crEdit=None, bResultReference=False, iSeparateFile=0, bExportRelatedAllLBCs=False, bUseEntityName=False, bMatrixSloverParam=False, iPreconditionType=0, iMatrixStructure=0, crlTarget=[], iLoadType=1, bSameOutputOnAllProcess=True, bDeleteFloatingNode=True, bBC=True, bCheckBCDuplicate=False, bAutoAssignDummyProp=False, crDummyPropMaterial=None, bReferenceRestartData=False, strReferenceRestartDataPath="", iReferenceRestartDataProcessNum=DFLT_INT, iReferenceRestartDataStepNum=DFLT_INT, iReferenceRestartDataCoordType=0, iReferenceRestartDataUpdateContactSearch=1, listLoadNodeContact=[], iHeatConvection=1, iCreateProcessForBoltFixedLength=0, strPath="", iNumType=0, iUiWidth=10, iUiPrecision=1):
        r"""
        ## Description
        
        create advc job
        
        ## Syntax
        
        ```python
        Analysis.ADVC.Structure(strName="", strDescription="", iEJobType=0, crlProcessSequence=[], crlElemLocationGroup=[], crlNodeLocationGroup=[], bWriteGroup=False, crEdit=None, bResultReference=False, iSeparateFile=0, bExportRelatedAllLBCs=False, bUseEntityName=False, bMatrixSloverParam=False, iPreconditionType=0, iMatrixStructure=0, crlTarget=[], iLoadType=1, bSameOutputOnAllProcess=True, bDeleteFloatingNode=True, bBC=True, bCheckBCDuplicate=False, bAutoAssignDummyProp=False, crDummyPropMaterial=None, bReferenceRestartData=False, strReferenceRestartDataPath="", iReferenceRestartDataProcessNum=DFLT_INT, iReferenceRestartDataStepNum=DFLT_INT, iReferenceRestartDataCoordType=0, iReferenceRestartDataUpdateContactSearch=1, listLoadNodeContact=[], iHeatConvection=1, iCreateProcessForBoltFixedLength=0, strPath="", iNumType=0, iUiWidth=10, iUiPrecision=1)
        ```
        
        Macro: {ref}`Macro-Analysis-ADVC_Structure`
        
        Ribbon: {menuselection}`Analysis --> ADVC --> Structure`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`iEJobType`**
        : An _Integer_ specifying the e job type. The default value is 0.
        
        **`crlProcessSequence`**
        : A _Cursor List_ specifying the process sequence. The default value is [].
        
        **`crlElemLocationGroup`**
        : A _Cursor List_ specifying the element location group. The default value is [].
        
        **`crlNodeLocationGroup`**
        : A _Cursor List_ specifying the node location group. The default value is [].
        
        **`bWriteGroup`**
        : A _Boolean_ specifying the write group. The default value is False.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`bResultReference`**
        : A _Boolean_ specifying the result reference. The default value is False.
        
        **`iSeparateFile`**
        : An _Integer_ specifying the separate file. The default value is 0.
        
        **`bExportRelatedAllLBCs`**
        : A _Boolean_ specifying the export related all l cs. The default value is False.
        
        **`bUseEntityName`**
        : A _Boolean_ specifying the use entity name. The default value is False.
        
        **`bMatrixSloverParam`**
        : A _Boolean_ specifying the matrix slover param. The default value is False.
        
        **`iPreconditionType`**
        : An _Integer_ specifying the precondition type. The default value is 0.
        
        **`iMatrixStructure`**
        : An _Integer_ specifying the matrix structure. The default value is 0.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`iLoadType`**
        : An _Integer_ specifying the load type. The default value is 1.
        
        **`bSameOutputOnAllProcess`**
        : A _Boolean_ specifying the same output on all process. The default value is True.
        
        **`bDeleteFloatingNode`**
        : A _Boolean_ specifying the delete floating node. The default value is True.
        
        **`bBC`**
        : A _Boolean_ specifying the boundary condition. The default value is True.
        
        **`bCheckBCDuplicate`**
        : A _Boolean_ specifying the check boundary condition duplicate. The default value is False.
        
        **`bAutoAssignDummyProp`**
        : A _Boolean_ specifying the auto assign dummy property. The default value is False.
        
        **`crDummyPropMaterial`**
        : A _Cursor_ specifying the dummy property material. The default value is None.
        
        **`bReferenceRestartData`**
        : A _Boolean_ specifying the reference restart data. The default value is False.
        
        **`strReferenceRestartDataPath`**
        : A _String_ specifying the reference restart data path. The default value is "".
        
        **`iReferenceRestartDataProcessNum`**
        : An _Integer_ specifying the reference restart data process number. The default value is DFLT_INT.
        
        **`iReferenceRestartDataStepNum`**
        : An _Integer_ specifying the reference restart data step number. The default value is DFLT_INT.
        
        **`iReferenceRestartDataCoordType`**
        : An _Integer_ specifying the reference restart data coordinate type. The default value is 0.
        
        **`iReferenceRestartDataUpdateContactSearch`**
        : An _Integer_ specifying the reference restart data update contact search. The default value is 1.
        
        **`listLoadNodeContact`**
        : A _LOAD_NODE_CONTACT List_ specifying the load node contact. The default value is [].
        
        **`iHeatConvection`**
        : An _Integer_ specifying the heat convection. The default value is 1.
        
        **`iCreateProcessForBoltFixedLength`**
        : An _Integer_ specifying the create process for bolt fixed length. The default value is 0.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        **`iNumType`**
        : An _Integer_ specifying the number type. The default value is 0.
        
        **`iUiWidth`**
        : An _Integer_ specifying the UI width. The default value is 10.
        
        **`iUiPrecision`**
        : An _Integer_ specifying the UI precision. The default value is 1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.ADVC.Structure(strName="", strDescription="", iEJobType=0, crlProcessSequence=[], crlElemLocationGroup=[], crlNodeLocationGroup=[], bWriteGroup=False, crEdit=None, bResultReference=False, iSeparateFile=0, bExportRelatedAllLBCs=False, bUseEntityName=False, bMatrixSloverParam=False, iPreconditionType=0, iMatrixStructure=0, crlTarget=[], iLoadType=1, bSameOutputOnAllProcess=True, bDeleteFloatingNode=True, bBC=True, bCheckBCDuplicate=False, bAutoAssignDummyProp=False, crDummyPropMaterial=None, bReferenceRestartData=False, strReferenceRestartDataPath="", iReferenceRestartDataProcessNum=DFLT_INT, iReferenceRestartDataStepNum=DFLT_INT, iReferenceRestartDataCoordType=0, iReferenceRestartDataUpdateContactSearch=1, listLoadNodeContact=[], iHeatConvection=1, iCreateProcessForBoltFixedLength=0, strPath="", iNumType=0, iUiWidth=10, iUiPrecision=1)
        ```
        
        """
        message = "Analysis.ADVC.Structure('{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{},{},{},{},{},{},{},'{}',{},{},{})".format(strName, strDescription, iEJobType, crlProcessSequence, crlElemLocationGroup, crlNodeLocationGroup, bWriteGroup, crEdit, bResultReference, iSeparateFile, bExportRelatedAllLBCs, bUseEntityName, bMatrixSloverParam, iPreconditionType, iMatrixStructure, crlTarget, iLoadType, bSameOutputOnAllProcess, bDeleteFloatingNode, bBC, bCheckBCDuplicate, bAutoAssignDummyProp, crDummyPropMaterial, bReferenceRestartData, strReferenceRestartDataPath, iReferenceRestartDataProcessNum, iReferenceRestartDataStepNum, iReferenceRestartDataCoordType, iReferenceRestartDataUpdateContactSearch, listLoadNodeContact, iHeatConvection, iCreateProcessForBoltFixedLength, strPath, iNumType, iUiWidth, iUiPrecision)
        return JPT_RUN_LINE(message)

    def HeatTransfer(self, strName="", strDescription="", iEJobType=0, crlProcessSequence=[], crlElemLocationGroup=[], crlNodeLocationGroup=[], bWriteGroup=False, crEdit=None, bResultReference=False, iSeparateFile=0, bExportRelatedAllLBCs=False, bUseEntityName=False, bMatrixSloverParam=False, iPreconditionType=0, iMatrixStructure=0, crlTarget=[], iLoadType=1, bSameOutputOnAllProcess=True, bDeleteFloatingNode=True, bBC=True, bCheckBCDuplicate=False, bAutoAssignDummyProp=False, crDummyPropMaterial=None, bReferenceRestartData=False, strReferenceRestartDataPath="", iReferenceRestartDataProcessNum=DFLT_INT, iReferenceRestartDataStepNum=DFLT_INT, iReferenceRestartDataCoordType=0, iReferenceRestartDataUpdateContactSearch=1, listLoadNodeContact=[], iHeatConvection=1, strPath="", iNumType=0, iUiWidth=10, iUiPrecision=1):
        r"""
        ## Description
        
        create advc job
        
        ## Syntax
        
        ```python
        Analysis.ADVC.HeatTransfer(strName="", strDescription="", iEJobType=0, crlProcessSequence=[], crlElemLocationGroup=[], crlNodeLocationGroup=[], bWriteGroup=False, crEdit=None, bResultReference=False, iSeparateFile=0, bExportRelatedAllLBCs=False, bUseEntityName=False, bMatrixSloverParam=False, iPreconditionType=0, iMatrixStructure=0, crlTarget=[], iLoadType=1, bSameOutputOnAllProcess=True, bDeleteFloatingNode=True, bBC=True, bCheckBCDuplicate=False, bAutoAssignDummyProp=False, crDummyPropMaterial=None, bReferenceRestartData=False, strReferenceRestartDataPath="", iReferenceRestartDataProcessNum=DFLT_INT, iReferenceRestartDataStepNum=DFLT_INT, iReferenceRestartDataCoordType=0, iReferenceRestartDataUpdateContactSearch=1, listLoadNodeContact=[], iHeatConvection=1, strPath="", iNumType=0, iUiWidth=10, iUiPrecision=1)
        ```
        
        Macro: {ref}`Macro-Analysis-ADVC_HeatTransfer`
        
        Ribbon: {menuselection}`Analysis --> ADVC --> HeatTransfer`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`iEJobType`**
        : An _Integer_ specifying the e job type. The default value is 0.
        
        **`crlProcessSequence`**
        : A _Cursor List_ specifying the process sequence. The default value is [].
        
        **`crlElemLocationGroup`**
        : A _Cursor List_ specifying the element location group. The default value is [].
        
        **`crlNodeLocationGroup`**
        : A _Cursor List_ specifying the node location group. The default value is [].
        
        **`bWriteGroup`**
        : A _Boolean_ specifying the write group. The default value is False.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`bResultReference`**
        : A _Boolean_ specifying the result reference. The default value is False.
        
        **`iSeparateFile`**
        : An _Integer_ specifying the separate file. The default value is 0.
        
        **`bExportRelatedAllLBCs`**
        : A _Boolean_ specifying the export related all l cs. The default value is False.
        
        **`bUseEntityName`**
        : A _Boolean_ specifying the use entity name. The default value is False.
        
        **`bMatrixSloverParam`**
        : A _Boolean_ specifying the matrix slover param. The default value is False.
        
        **`iPreconditionType`**
        : An _Integer_ specifying the precondition type. The default value is 0.
        
        **`iMatrixStructure`**
        : An _Integer_ specifying the matrix structure. The default value is 0.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`iLoadType`**
        : An _Integer_ specifying the load type. The default value is 1.
        
        **`bSameOutputOnAllProcess`**
        : A _Boolean_ specifying the same output on all process. The default value is True.
        
        **`bDeleteFloatingNode`**
        : A _Boolean_ specifying the delete floating node. The default value is True.
        
        **`bBC`**
        : A _Boolean_ specifying the boundary condition. The default value is True.
        
        **`bCheckBCDuplicate`**
        : A _Boolean_ specifying the check boundary conditionduplicate. The default value is False.
        
        **`bAutoAssignDummyProp`**
        : A _Boolean_ specifying the auto assign dummy property. The default value is False.
        
        **`crDummyPropMaterial`**
        : A _Cursor_ specifying the dummy property material. The default value is None.
        
        **`bReferenceRestartData`**
        : A _Boolean_ specifying the reference restart data. The default value is False.
        
        **`strReferenceRestartDataPath`**
        : A _String_ specifying the reference restart data path. The default value is "".
        
        **`iReferenceRestartDataProcessNum`**
        : An _Integer_ specifying the reference restart data process number. The default value is DFLT_INT.
        
        **`iReferenceRestartDataStepNum`**
        : An _Integer_ specifying the reference restart data step number. The default value is DFLT_INT.
        
        **`iReferenceRestartDataCoordType`**
        : An _Integer_ specifying the reference restart data coordinate type. The default value is 0.
        
        **`iReferenceRestartDataUpdateContactSearch`**
        : An _Integer_ specifying the reference restart data update contact search. The default value is 1.
        
        **`listLoadNodeContact`**
        : A _LOAD_NODE_CONTACT List_ specifying the load node contact. The default value is [].
        
        **`iHeatConvection`**
        : An _Integer_ specifying the heat convection. The default value is 1.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        **`iNumType`**
        : An _Integer_ specifying the number type. The default value is 0.
        
        **`iUiWidth`**
        : An _Integer_ specifying the UI width. The default value is 10.
        
        **`iUiPrecision`**
        : An _Integer_ specifying the UI precision. The default value is 1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.ADVC.HeatTransfer(strName="", strDescription="", iEJobType=0, crlProcessSequence=[], crlElemLocationGroup=[], crlNodeLocationGroup=[], bWriteGroup=False, crEdit=None, bResultReference=False, iSeparateFile=0, bExportRelatedAllLBCs=False, bUseEntityName=False, bMatrixSloverParam=False, iPreconditionType=0, iMatrixStructure=0, crlTarget=[], iLoadType=1, bSameOutputOnAllProcess=True, bDeleteFloatingNode=True, bBC=True, bCheckBCDuplicate=False, bAutoAssignDummyProp=False, crDummyPropMaterial=None, bReferenceRestartData=False, strReferenceRestartDataPath="", iReferenceRestartDataProcessNum=DFLT_INT, iReferenceRestartDataStepNum=DFLT_INT, iReferenceRestartDataCoordType=0, iReferenceRestartDataUpdateContactSearch=1, listLoadNodeContact=[], iHeatConvection=1, strPath="", iNumType=0, iUiWidth=10, iUiPrecision=1)
        ```
        
        """
        message = "Analysis.ADVC.HeatTransfer('{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{},{},{},{},{},{},'{}',{},{},{})".format(strName, strDescription, iEJobType, crlProcessSequence, crlElemLocationGroup, crlNodeLocationGroup, bWriteGroup, crEdit, bResultReference, iSeparateFile, bExportRelatedAllLBCs, bUseEntityName, bMatrixSloverParam, iPreconditionType, iMatrixStructure, crlTarget, iLoadType, bSameOutputOnAllProcess, bDeleteFloatingNode, bBC, bCheckBCDuplicate, bAutoAssignDummyProp, crDummyPropMaterial, bReferenceRestartData, strReferenceRestartDataPath, iReferenceRestartDataProcessNum, iReferenceRestartDataStepNum, iReferenceRestartDataCoordType, iReferenceRestartDataUpdateContactSearch, listLoadNodeContact, iHeatConvection, strPath, iNumType, iUiWidth, iUiPrecision)
        return JPT_RUN_LINE(message)

class Assemble_SeparateFaces:
    def AllSharedNodes(self, ):
        r"""
        ## Description
        
        create by all shared nodes
        
        ## Syntax
        
        ```python
        Assemble.SeparateFaces.AllSharedNodes()
        ```
        
        Macro: {ref}`Macro-Assemble-ASMSeparateAll2`
        
        Ribbon: {menuselection}`Assemble --> SeparateFaces --> AllSharedNodes`
        
        ## Inputs
        
        None
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Assemble.SeparateFaces.AllSharedNodes()
        ```
        
        """
        message = "Assemble.SeparateFaces.AllSharedNodes({})".format('')
        return JPT_RUN_LINE(message)

    def Shell(self, iType=0, crlEntity=[], bCreateGroup=False):
        r"""
        ## Description
        
        Separate Faces for Shell
        
        ## Syntax
        
        ```python
        Assemble.SeparateFaces.Shell(iType=0, crlEntity=[], bCreateGroup=False)
        ```
        
        Macro: {ref}`Macro-Assemble-ASMSeparateShellCr`
        
        Ribbon: {menuselection}`Assemble --> SeparateFaces --> Shell`
        
        ## Inputs
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 0.
        
        **`crlEntity`**
        : A _Cursor List_ specifying the entity. The default value is [].
        
        **`bCreateGroup`**
        : A _Boolean_ specifying the create group. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Assemble.SeparateFaces.Shell(iType=0, crlEntity=[], bCreateGroup=False)
        ```
        
        """
        message = "Assemble.SeparateFaces.Shell({},{},{})".format(iType, crlEntity, bCreateGroup)
        return JPT_RUN_LINE(message)

    def Solid(self, crlPart=[], crlFace=[], bCreateGroup=False):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Assemble.SeparateFaces.Solid(crlPart=[], crlFace=[], bCreateGroup=False)
        ```
        
        Macro: {ref}`Macro-Assemble-ASMSeparateSolidCr`
        
        Ribbon: {menuselection}`Assemble --> SeparateFaces --> Solid`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`bCreateGroup`**
        : A _Boolean_ specifying the create group. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Assemble.SeparateFaces.Solid(crlPart=[], crlFace=[], bCreateGroup=False)
        ```
        
        """
        message = "Assemble.SeparateFaces.Solid({},{},{})".format(crlPart, crlFace, bCreateGroup)
        return JPT_RUN_LINE(message)

class Assembly_RightClick:
    def AddToReference(self, crSrcPart, crDestPart):
        r"""
        ## Description
        
        Add Reference to Body
        
        ## Syntax
        
        ```python
        Assembly.RightClick.AddToReference(crSrcPart, crDestPart)
        ```
        
        Macro: {ref}`Macro-Assembly-AddReference`
        
        Ribbon: {menuselection}`Assembly --> RightClick --> AddToReference`
        
        ## Inputs
        
        **`crSrcPart`**
        : A _Cursor_ specifying the source part. This is a required input.
        
        **`crDestPart`**
        : A _Cursor_ specifying the dest part. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Assembly.RightClick.AddToReference(crSrcPart, crDestPart)
        ```
        
        """
        message = "Assembly.RightClick.AddToReference({},{})".format(crSrcPart, crDestPart)
        return JPT_RUN_LINE(message)

    def Suppress(self, crlPart=[]):
        r"""
        ## Description
        
        Suppress/ Unsuppress part on Tree Assembly
        
        ## Syntax
        
        ```python
        Assembly.RightClick.Suppress(crlPart=[])
        ```
        
        Macro: {ref}`Macro-Assembly-Suppress`
        
        Ribbon: {menuselection}`Assembly --> RightClick --> Suppress`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Assembly.RightClick.Suppress(crlPart=[])
        ```
        
        """
        message = "Assembly.RightClick.Suppress({})".format(crlPart)
        return JPT_RUN_LINE(message)

    def UnSuppress(self, crlPart=[]):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Assembly.RightClick.UnSuppress(crlPart=[])
        ```
        
        Macro: {ref}`Macro-Assembly-Suppress`
        
        Ribbon: {menuselection}`Assembly --> RightClick --> UnSuppress`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Assembly.RightClick.UnSuppress(crlPart=[])
        ```
        
        """
        message = "Assembly.RightClick.UnSuppress({})".format(crlPart)
        return JPT_RUN_LINE(message)

    def RestoreOriginalPart(self, crlBodies=[], bKeepShareFace=False):
        r"""
        ## Description
        
        Restore body
        
        ## Syntax
        
        ```python
        Assembly.RightClick.RestoreOriginalPart(crlBodies=[], bKeepShareFace=False)
        ```
        
        Macro: {ref}`Macro-Assembly-RestoreBody`
        
        Ribbon: {menuselection}`Assembly --> RightClick --> RestoreOriginalPart`
        
        ## Inputs
        
        **`crlBodies`**
        : A _Cursor List_ specifying the bodies. The default value is [].
        
        **`bKeepShareFace`**
        : A _Boolean_ specifying the keep share face. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Assembly.RightClick.RestoreOriginalPart(crlBodies=[], bKeepShareFace=False)
        ```
        
        """
        message = "Assembly.RightClick.RestoreOriginalPart({},{})".format(crlBodies, bKeepShareFace)
        return JPT_RUN_LINE(message)

    def Rename(self, strNewName="New name", crItem=None):
        r"""
        ## Description
        
        Rename item
        
        ## Syntax
        
        ```python
        Assembly.RightClick.Rename(strNewName="New name", crItem=None)
        ```
        
        Macro: {ref}`Macro-Assembly-RenameItem`
        
        Ribbon: {menuselection}`Assembly --> RightClick --> Rename`
        
        ## Inputs
        
        **`strNewName`**
        : A _String_ specifying the new name. The default value is "New name".
        
        **`crItem`**
        : A _Cursor_ specifying the item. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Assembly.RightClick.Rename(strNewName="New name", crItem=None)
        ```
        
        """
        message = "Assembly.RightClick.Rename('{}',{})".format(strNewName, crItem)
        return JPT_RUN_LINE(message)

    def ChangeEntityColor(self, crlEntity, iColor=0):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Assembly.RightClick.ChangeEntityColor(crlEntity, iColor=0)
        ```
        
        Macro: {ref}`Macro-Assembly-ChangeEntityColor`
        
        Ribbon: {menuselection}`Assembly --> RightClick --> ChangeEntityColor`
        
        ## Inputs
        
        **`crlEntity`**
        : A _Cursor List_ specifying the entity. This is a required input.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Assembly.RightClick.ChangeEntityColor(crlEntity, iColor=0)
        ```
        
        """
        message = "Assembly.RightClick.ChangeEntityColor({},{})".format(crlEntity, iColor)
        return JPT_RUN_LINE(message)

    def AddSubAssembly(self, crInst=None):
        r"""
        ## Description
        
        Add sub assembly
        
        ## Syntax
        
        ```python
        Assembly.RightClick.AddSubAssembly(crInst=None)
        ```
        
        Macro: {ref}`Macro-Assembly-AddSubAssembly`
        
        Ribbon: {menuselection}`Assembly --> RightClick --> AddSubAssembly`
        
        ## Inputs
        
        **`crInst`**
        : A _Cursor_ specifying the inst. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Assembly.RightClick.AddSubAssembly(crInst=None)
        ```
        
        """
        message = "Assembly.RightClick.AddSubAssembly({})".format(crInst)
        return JPT_RUN_LINE(message)

    def ChangeBodyColor(self, listPartColorPair=[], bResetFaceColor=False):
        r"""
        ## Description
        
        Change Body Color
        
        ## Syntax
        
        ```python
        Assembly.RightClick.ChangeBodyColor(listPartColorPair=[], bResetFaceColor=False)
        ```
        
        Macro: {ref}`Macro-Assembly-ChangeBodyColor`
        
        Ribbon: {menuselection}`Assembly --> RightClick --> ChangeBodyColor`
        
        ## Inputs
        
        **`listPartColorPair`**
        : A _PART_COLOR_PAIR List_ specifying the part color pair. The default value is [].
        
        **`bResetFaceColor`**
        : A _Boolean_ specifying the reset face color. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Assembly.RightClick.ChangeBodyColor(listPartColorPair=[], bResetFaceColor=False)
        ```
        
        """
        message = "Assembly.RightClick.ChangeBodyColor({},{})".format(listPartColorPair, bResetFaceColor)
        return JPT_RUN_LINE(message)

    def ChangeMeshLineColor(self, crlFace, iColor=0):
        r"""
        ## Description
        
        Change Entity color
        
        ## Syntax
        
        ```python
        Assembly.RightClick.ChangeMeshLineColor(crlFace, iColor=0)
        ```
        
        Macro: {ref}`Macro-Assembly-ChangeFaceMeshLineColor`
        
        Ribbon: {menuselection}`Assembly --> RightClick --> ChangeMeshLineColor`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. This is a required input.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Assembly.RightClick.ChangeMeshLineColor(crlFace, iColor=0)
        ```
        
        """
        message = "Assembly.RightClick.ChangeMeshLineColor({},{})".format(crlFace, iColor)
        return JPT_RUN_LINE(message)

class BodyLoads_CentrifugalForce:
    def CoordinateSystems(self, strName="CentrifugalForce1", dFVelocity=DFLT_DBL, dFAcceleration=DFLT_DBL, iAxisDirection=0, iVelocityUnit=0, iAccelerationUnit=0, crCurCoord=None, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        create centrifugal force by coordinate system
        
        ## Syntax
        
        ```python
        BoundaryConditions.BodyLoads.CentrifugalForce.CoordinateSystems(strName="CentrifugalForce1", dFVelocity=DFLT_DBL, dFAcceleration=DFLT_DBL, iAxisDirection=0, iVelocityUnit=0, iAccelerationUnit=0, crCurCoord=None, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-CentrifugalForceCoordinateSystem`
        
        Ribbon: {menuselection}`BoundaryConditions --> BodyLoads --> CentrifugalForce --> CoordinateSystems`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "CentrifugalForce1".
        
        **`dFVelocity`**
        : A _Double_ specifying the velocity. The default value is DFLT_DBL.
        
        **`dFAcceleration`**
        : A _Double_ specifying the acceleration. The default value is DFLT_DBL.
        
        **`iAxisDirection`**
        : An _Integer_ specifying the axis direction. The default value is 0.
        
        **`iVelocityUnit`**
        : An _Integer_ specifying the velocity unit. The default value is 0.
        
        **`iAccelerationUnit`**
        : An _Integer_ specifying the acceleration unit. The default value is 0.
        
        **`crCurCoord`**
        : A _Cursor_ specifying the cur coordinate. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.BodyLoads.CentrifugalForce.CoordinateSystems(strName="CentrifugalForce1", dFVelocity=DFLT_DBL, dFAcceleration=DFLT_DBL, iAxisDirection=0, iVelocityUnit=0, iAccelerationUnit=0, crCurCoord=None, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.BodyLoads.CentrifugalForce.CoordinateSystems('{}',{},{},{},{},{},{},{},{})".format(strName, dFVelocity, dFAcceleration, iAxisDirection, iVelocityUnit, iAccelerationUnit, crCurCoord, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def TwoPositions(self, strName="CentrifugalForce1", dFBasePoint1=0.0, dFBasePoint2=0.0, dFBasePoint3=0.0, dFTipPoint1=0.0, dFTipPoint2=0.0, dFTipPoint3=0.0, dFVelocity=0.0, dFAcceleration=0.0, iVelocityUnit=0, iAccelerationUnit=0, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        create centrifugal force
        
        ## Syntax
        
        ```python
        BoundaryConditions.BodyLoads.CentrifugalForce.TwoPositions(strName="CentrifugalForce1", dFBasePoint1=0.0, dFBasePoint2=0.0, dFBasePoint3=0.0, dFTipPoint1=0.0, dFTipPoint2=0.0, dFTipPoint3=0.0, dFVelocity=0.0, dFAcceleration=0.0, iVelocityUnit=0, iAccelerationUnit=0, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-CentrifugalForce2Positions`
        
        Ribbon: {menuselection}`BoundaryConditions --> BodyLoads --> CentrifugalForce --> TwoPositions`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "CentrifugalForce1".
        
        **`dFBasePoint1`**
        : A _Double_ specifying the base point1. The default value is 0.0.
        
        **`dFBasePoint2`**
        : A _Double_ specifying the base point2. The default value is 0.0.
        
        **`dFBasePoint3`**
        : A _Double_ specifying the base point3. The default value is 0.0.
        
        **`dFTipPoint1`**
        : A _Double_ specifying the tip point1. The default value is 0.0.
        
        **`dFTipPoint2`**
        : A _Double_ specifying the tip point2. The default value is 0.0.
        
        **`dFTipPoint3`**
        : A _Double_ specifying the tip point3. The default value is 0.0.
        
        **`dFVelocity`**
        : A _Double_ specifying the velocity. The default value is 0.0.
        
        **`dFAcceleration`**
        : A _Double_ specifying the acceleration. The default value is 0.0.
        
        **`iVelocityUnit`**
        : An _Integer_ specifying the velocity unit. The default value is 0.
        
        **`iAccelerationUnit`**
        : An _Integer_ specifying the acceleration unit. The default value is 0.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.BodyLoads.CentrifugalForce.TwoPositions(strName="CentrifugalForce1", dFBasePoint1=0.0, dFBasePoint2=0.0, dFBasePoint3=0.0, dFTipPoint1=0.0, dFTipPoint2=0.0, dFTipPoint3=0.0, dFVelocity=0.0, dFAcceleration=0.0, iVelocityUnit=0, iAccelerationUnit=0, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.BodyLoads.CentrifugalForce.TwoPositions('{}',{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, dFBasePoint1, dFBasePoint2, dFBasePoint3, dFTipPoint1, dFTipPoint2, dFTipPoint3, dFVelocity, dFAcceleration, iVelocityUnit, iAccelerationUnit, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

class Force_FunctionLoadCylinder:
    def Quadratic(self, strName="ForceQuadratic1", dFTotalForce=0.0, dA=0.0, dB=0.0, crCoord=None, iAngleBase=0, dAngleRange=0.0, iEnArrowDir=0, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Create Force (Quadratic) y = a\*x^2 +
        
        ## Syntax
        
        ```python
        BoundaryConditions.Force.FunctionLoadCylinder.Quadratic(strName="ForceQuadratic1", dFTotalForce=0.0, dA=0.0, dB=0.0, crCoord=None, iAngleBase=0, dAngleRange=0.0, iEnArrowDir=0, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-ForceQuadratic`
        
        Ribbon: {menuselection}`BoundaryConditions --> Force --> FunctionLoadCylinder --> Quadratic`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ForceQuadratic1".
        
        **`dFTotalForce`**
        : A _Double_ specifying the total force. The default value is 0.0.
        
        **`dA`**
        : A _Double_ specifying the a. The default value is 0.0.
        
        **`dB`**
        : A _Double_ specifying the . The default value is 0.0.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`iAngleBase`**
        : An _Integer_ specifying the angle base. The default value is 0.
        
        **`dAngleRange`**
        : A _Double_ specifying the angle range. The default value is 0.0.
        
        **`iEnArrowDir`**
        : An _Integer_ specifying the en arrow direction. The default value is 0.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.Force.FunctionLoadCylinder.Quadratic(strName="ForceQuadratic1", dFTotalForce=0.0, dA=0.0, dB=0.0, crCoord=None, iAngleBase=0, dAngleRange=0.0, iEnArrowDir=0, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.Force.FunctionLoadCylinder.Quadratic('{}',{},{},{},{},{},{},{},{},{})".format(strName, dFTotalForce, dA, dB, crCoord, iAngleBase, dAngleRange, iEnArrowDir, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def Sine(self, strName="ForceSine1", dFTotalForce=0.0, dA=0.0, crCoord=None, iAngleBase=0, dAngleRange=0.0, iEnArrowDir=0, bDistributeInAxis=False, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Define the force load on selected entity based on the distribution of the sine function.
        
        ## Syntax
        
        ```python
        BoundaryConditions.Force.FunctionLoadCylinder.Sine(strName="ForceSine1", dFTotalForce=0.0, dA=0.0, crCoord=None, iAngleBase=0, dAngleRange=0.0, iEnArrowDir=0, bDistributeInAxis=False, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-ForceSine`
        
        Ribbon: {menuselection}`BoundaryConditions --> Force --> FunctionLoadCylinder --> Sine`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ForceSine1".
        
        **`dFTotalForce`**
        : A _Double_ specifying the total force. The default value is 0.0.
        
        **`dA`**
        : A _Double_ specifying the a. The default value is 0.0.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`iAngleBase`**
        : An _Integer_ specifying the angle base. The default value is 0.
        
        **`dAngleRange`**
        : A _Double_ specifying the angle range. The default value is 0.0.
        
        **`iEnArrowDir`**
        : An _Integer_ specifying the en arrow direction. The default value is 0.
        
        **`bDistributeInAxis`**
        : A _Boolean_ specifying the distribute in axis. The default value is False.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.Force.FunctionLoadCylinder.Sine(strName="ForceSine1", dFTotalForce=0.0, dA=0.0, crCoord=None, iAngleBase=0, dAngleRange=0.0, iEnArrowDir=0, bDistributeInAxis=False, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.Force.FunctionLoadCylinder.Sine('{}',{},{},{},{},{},{},'{}',{},{})".format(strName, dFTotalForce, dA, crCoord, iAngleBase, dAngleRange, iEnArrowDir, bDistributeInAxis, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def Vector(self, strName="ForceVector1", dFTotalForce=DFLT_DBL, dA=DFLT_DBL, dX=DFLT_DBL, dY=DFLT_DBL, crCoord=None, iEnDirection=0, dAngleRange=0.0, iArrowDir=0, bDistributeInAxis=False, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Define the force load on selected entity based on the distribution of the vector function.
        
        ## Syntax
        
        ```python
        BoundaryConditions.Force.FunctionLoadCylinder.Vector(strName="ForceVector1", dFTotalForce=DFLT_DBL, dA=DFLT_DBL, dX=DFLT_DBL, dY=DFLT_DBL, crCoord=None, iEnDirection=0, dAngleRange=0.0, iArrowDir=0, bDistributeInAxis=False, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-ForceVector`
        
        Ribbon: {menuselection}`BoundaryConditions --> Force --> FunctionLoadCylinder --> Vector`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ForceVector1".
        
        **`dFTotalForce`**
        : A _Double_ specifying the total force. The default value is DFLT_DBL.
        
        **`dA`**
        : A _Double_ specifying the a. The default value is DFLT_DBL.
        
        **`dX`**
        : A _Double_ specifying the x. The default value is DFLT_DBL.
        
        **`dY`**
        : A _Double_ specifying the y. The default value is DFLT_DBL.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`iEnDirection`**
        : An _Integer_ specifying the en direction. The default value is 0.
        
        **`dAngleRange`**
        : A _Double_ specifying the angle range. The default value is 0.0.
        
        **`iArrowDir`**
        : An _Integer_ specifying the arrow direction. The default value is 0.
        
        **`bDistributeInAxis`**
        : A _Boolean_ specifying the distribute in axis. The default value is False.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.Force.FunctionLoadCylinder.Vector(strName="ForceVector1", dFTotalForce=DFLT_DBL, dA=DFLT_DBL, dX=DFLT_DBL, dY=DFLT_DBL, crCoord=None, iEnDirection=0, dAngleRange=0.0, iArrowDir=0, bDistributeInAxis=False, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.Force.FunctionLoadCylinder.Vector('{}',{},{},{},{},{},{},{},{},'{}',{},{})".format(strName, dFTotalForce, dA, dX, dY, crCoord, iEnDirection, dAngleRange, iArrowDir, bDistributeInAxis, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

class Force_NonlinearForce:
    def NOLIN3(self, strName, dForceScale=0.0, dMomentScale=0.0, dForcePowerA=0.0, dMomentPowerA=0.0, iForcDir=0, iForceDepends=0, iMomentDir=0, iMomentDepends=0, crCurCoord=None, crlMasterTarget=[], crlSlaveTarget=[], crEdit=None):
        r"""
        ## Description
        
        create nonlinear force NOLIN3
        
        ## Syntax
        
        ```python
        BoundaryConditions.Force.NonlinearForce.NOLIN3(strName, dForceScale=0.0, dMomentScale=0.0, dForcePowerA=0.0, dMomentPowerA=0.0, iForcDir=0, iForceDepends=0, iMomentDir=0, iMomentDepends=0, crCurCoord=None, crlMasterTarget=[], crlSlaveTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-LbcNolin3Exp`
        
        Ribbon: {menuselection}`BoundaryConditions --> Force --> NonlinearForce --> NOLIN3`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`dForceScale`**
        : A _Double_ specifying the force scale. The default value is 0.0.
        
        **`dMomentScale`**
        : A _Double_ specifying the moment scale. The default value is 0.0.
        
        **`dForcePowerA`**
        : A _Double_ specifying the force power a. The default value is 0.0.
        
        **`dMomentPowerA`**
        : A _Double_ specifying the moment power a. The default value is 0.0.
        
        **`iForcDir`**
        : An _Integer_ specifying the forc direction. The default value is 0.
        
        **`iForceDepends`**
        : An _Integer_ specifying the force depends. The default value is 0.
        
        **`iMomentDir`**
        : An _Integer_ specifying the moment direction. The default value is 0.
        
        **`iMomentDepends`**
        : An _Integer_ specifying the moment depends. The default value is 0.
        
        **`crCurCoord`**
        : A _Cursor_ specifying the cur coordinate. The default value is None.
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. The default value is [].
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.Force.NonlinearForce.NOLIN3(strName, dForceScale=0.0, dMomentScale=0.0, dForcePowerA=0.0, dMomentPowerA=0.0, iForcDir=0, iForceDepends=0, iMomentDir=0, iMomentDepends=0, crCurCoord=None, crlMasterTarget=[], crlSlaveTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.Force.NonlinearForce.NOLIN3('{}',{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, dForceScale, dMomentScale, dForcePowerA, dMomentPowerA, iForcDir, iForceDepends, iMomentDir, iMomentDepends, crCurCoord, crlMasterTarget, crlSlaveTarget, crEdit)
        return JPT_RUN_LINE(message)

    def NOLIN4(self, strName, dForceScale=0.0, dMomentScale=0.0, dForcePowerA=0.0, dMomentPowerA=0.0, iForcDir=0, iForceDepends=0, iMomentDir=0, iMomentDepends=0, crCurCoord=None, crlMasterTarget=[], crlSlaveTarget=[], crEdit=None):
        r"""
        ## Description
        
        create NOLIN4 nonlinear force
        
        ## Syntax
        
        ```python
        BoundaryConditions.Force.NonlinearForce.NOLIN4(strName, dForceScale=0.0, dMomentScale=0.0, dForcePowerA=0.0, dMomentPowerA=0.0, iForcDir=0, iForceDepends=0, iMomentDir=0, iMomentDepends=0, crCurCoord=None, crlMasterTarget=[], crlSlaveTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-LbcNolin4Exp`
        
        Ribbon: {menuselection}`BoundaryConditions --> Force --> NonlinearForce --> NOLIN4`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`dForceScale`**
        : A _Double_ specifying the force scale. The default value is 0.0.
        
        **`dMomentScale`**
        : A _Double_ specifying the moment scale. The default value is 0.0.
        
        **`dForcePowerA`**
        : A _Double_ specifying the force power a. The default value is 0.0.
        
        **`dMomentPowerA`**
        : A _Double_ specifying the moment power a. The default value is 0.0.
        
        **`iForcDir`**
        : An _Integer_ specifying the forc direction. The default value is 0.
        
        **`iForceDepends`**
        : An _Integer_ specifying the force depends. The default value is 0.
        
        **`iMomentDir`**
        : An _Integer_ specifying the moment direction. The default value is 0.
        
        **`iMomentDepends`**
        : An _Integer_ specifying the moment depends. The default value is 0.
        
        **`crCurCoord`**
        : A _Cursor_ specifying the cur coordinate. The default value is None.
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. The default value is [].
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.Force.NonlinearForce.NOLIN4(strName, dForceScale=0.0, dMomentScale=0.0, dForcePowerA=0.0, dMomentPowerA=0.0, iForcDir=0, iForceDepends=0, iMomentDir=0, iMomentDepends=0, crCurCoord=None, crlMasterTarget=[], crlSlaveTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.Force.NonlinearForce.NOLIN4('{}',{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, dForceScale, dMomentScale, dForcePowerA, dMomentPowerA, iForcDir, iForceDepends, iMomentDir, iMomentDepends, crCurCoord, crlMasterTarget, crlSlaveTarget, crEdit)
        return JPT_RUN_LINE(message)

    def NOLIN1(self, strName="NonlinearForce1_1", dForceScale=0.0, dMomentScale=0.0, iForcDir=0, iForceDepends=0, iMomentDir=0, iMomentDepends=0, crCoord=None, crForceTable=None, crMomentTable=None, crlMaster=[], crlSlave=[], crEdit=None):
        r"""
        ## Description
        
        Create Nonlinear Force of NOLIN1(Table)
        
        ## Syntax
        
        ```python
        BoundaryConditions.Force.NonlinearForce.NOLIN1(strName="NonlinearForce1_1", dForceScale=0.0, dMomentScale=0.0, iForcDir=0, iForceDepends=0, iMomentDir=0, iMomentDepends=0, crCoord=None, crForceTable=None, crMomentTable=None, crlMaster=[], crlSlave=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-LbcNolin1Table`
        
        Ribbon: {menuselection}`BoundaryConditions --> Force --> NonlinearForce --> NOLIN1`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "NonlinearForce1_1".
        
        **`dForceScale`**
        : A _Double_ specifying the force scale. The default value is 0.0.
        
        **`dMomentScale`**
        : A _Double_ specifying the moment scale. The default value is 0.0.
        
        **`iForcDir`**
        : An _Integer_ specifying the forc direction. The default value is 0.
        
        **`iForceDepends`**
        : An _Integer_ specifying the force depends. The default value is 0.
        
        **`iMomentDir`**
        : An _Integer_ specifying the moment direction. The default value is 0.
        
        **`iMomentDepends`**
        : An _Integer_ specifying the moment depends. The default value is 0.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`crForceTable`**
        : A _Cursor_ specifying the force table. The default value is None.
        
        **`crMomentTable`**
        : A _Cursor_ specifying the moment table. The default value is None.
        
        **`crlMaster`**
        : A _Cursor List_ specifying the master. The default value is [].
        
        **`crlSlave`**
        : A _Cursor List_ specifying the slave. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.Force.NonlinearForce.NOLIN1(strName="NonlinearForce1_1", dForceScale=0.0, dMomentScale=0.0, iForcDir=0, iForceDepends=0, iMomentDir=0, iMomentDepends=0, crCoord=None, crForceTable=None, crMomentTable=None, crlMaster=[], crlSlave=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.Force.NonlinearForce.NOLIN1('{}',{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, dForceScale, dMomentScale, iForcDir, iForceDepends, iMomentDir, iMomentDepends, crCoord, crForceTable, crMomentTable, crlMaster, crlSlave, crEdit)
        return JPT_RUN_LINE(message)

class InitialNodalValue_InitialAngularVelocity:
    def Abaqus(self, strName="InitialAngularVelocityAbaqus1", dVelocity=DFLT_DBL, strFirstCoord="", strSecondCoord="", crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Create load boundary condition of initial angular velocity for abaqus
        
        ## Syntax
        
        ```python
        BoundaryConditions.InitialNodalValue.InitialAngularVelocity.Abaqus(strName="InitialAngularVelocityAbaqus1", dVelocity=DFLT_DBL, strFirstCoord="", strSecondCoord="", crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-InitialAngularVelAbaqus`
        
        Ribbon: {menuselection}`BoundaryConditions --> InitialNodalValue --> InitialAngularVelocity --> Abaqus`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "InitialAngularVelocityAbaqus1".
        
        **`dVelocity`**
        : A _Double_ specifying the velocity. The default value is DFLT_DBL.
        
        **`strFirstCoord`**
        : A _String_ specifying the first coordinate. The default value is "".
        
        **`strSecondCoord`**
        : A _String_ specifying the second coordinate. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.InitialNodalValue.InitialAngularVelocity.Abaqus(strName="InitialAngularVelocityAbaqus1", dVelocity=DFLT_DBL, strFirstCoord="", strSecondCoord="", crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.InitialNodalValue.InitialAngularVelocity.Abaqus('{}',{},'{}','{}',{},{})".format(strName, dVelocity, strFirstCoord, strSecondCoord, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def General(self, strName="InitialAngularVelocity1", stData=LBC_DYNAMIC_INITIAL_CONDITION_DATA(), crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        BoundaryConditions.InitialNodalValue.InitialAngularVelocity.General(strName="InitialAngularVelocity1", stData=LBC_DYNAMIC_INITIAL_CONDITION_DATA(), crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-InitialDynamic`
        
        Ribbon: {menuselection}`BoundaryConditions --> InitialNodalValue --> InitialAngularVelocity --> General`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "InitialAngularVelocity1".
        
        **`stData`**
        : A _ST_DATA_ specifying the data. The default value is LBC_DYNAMIC_INITIAL_CONDITION_DATA().
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.InitialNodalValue.InitialAngularVelocity.General(strName="InitialAngularVelocity1", stData=LBC_DYNAMIC_INITIAL_CONDITION_DATA(), crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.InitialNodalValue.InitialAngularVelocity.General('{}',{},{},{})".format(strName, stData, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

class BoundaryConditions_BoundaryTemperature:
    def Constant(self, strName="BoundaryTemperature_1", dFTemp=0.0, crTable=None, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Create boundary temperature
        
        ## Syntax
        
        ```python
        BoundaryConditions.BoundaryTemperature.Constant(strName="BoundaryTemperature_1", dFTemp=0.0, crTable=None, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-BoundaryTemperature`
        
        Ribbon: {menuselection}`BoundaryConditions --> BoundaryTemperature --> Constant`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "BoundaryTemperature_1".
        
        **`dFTemp`**
        : A _Double_ specifying the temperature. The default value is 0.0.
        
        **`crTable`**
        : A _Cursor_ specifying the table. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.BoundaryTemperature.Constant(strName="BoundaryTemperature_1", dFTemp=0.0, crTable=None, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.BoundaryTemperature.Constant('{}',{},{},{},{})".format(strName, dFTemp, crTable, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def SurfaceMapping(self, strName="MappingTemperature", crlTarget=[], iMAPPos=0, iViewCp=0, iCp=1, iSrcType=0, iMappedCpIndexArr0=0, iMappedCpIndexArr1=0, dScaleFactor=1, posOffset=[0,0,0], posRotate=[0,0,0], dCorScale=1, dSearchRange=0, iUnit=0, strPath="", crEdit=None, iMappingMethod=0, iSubmodeLBCMappingType=3, iMappingFromStepNo=0, bSetADVCFile=False, strADVCResultFile="", bSetDetATol=False, dDetATol=DFLT_DBL, bSetElementSet=False, strElementSet="all"):
        r"""
        ## Description
        
        Create mapping boundary temperature
        
        ## Syntax
        
        ```python
        BoundaryConditions.BoundaryTemperature.SurfaceMapping(strName="MappingTemperature", crlTarget=[], iMAPPos=0, iViewCp=0, iCp=1, iSrcType=0, iMappedCpIndexArr0=0, iMappedCpIndexArr1=0, dScaleFactor=1, posOffset=[0,0,0], posRotate=[0,0,0], dCorScale=1, dSearchRange=0, iUnit=0, strPath="", crEdit=None, iMappingMethod=0, iSubmodeLBCMappingType=3, iMappingFromStepNo=0, bSetADVCFile=False, strADVCResultFile="", bSetDetATol=False, dDetATol=DFLT_DBL, bSetElementSet=False, strElementSet="all")
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-MappingForcedTemperature`
        
        Ribbon: {menuselection}`BoundaryConditions --> BoundaryTemperature --> SurfaceMapping`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "MappingTemperature".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`iMAPPos`**
        : An _Integer_ specifying the map position. The default value is 0.
        
        **`iViewCp`**
        : An _Integer_ specifying the component index that to be previewed. The default value is 0.
        
        **`iCp`**
        : An _Integer_ specifying the component. The default value is 1.
        
        **`iSrcType`**
        : An _Integer_ specifying the source type. The default value is 0.
        
        **`iMappedCpIndexArr0`**
        : An _Integer_ specifying the mapped component index arr0. The default value is 0.
        
        **`iMappedCpIndexArr1`**
        : An _Integer_ specifying the mapped component index arr1. The default value is 0.
        
        **`dScaleFactor`**
        : A _Double_ specifying the scale factor. The default value is 1.
        
        **`posOffset`**
        : A _Position_ specifying the offset. The default value is [0,0,0].
        
        **`posRotate`**
        : A _Position_ specifying the rotate. The default value is [0,0,0].
        
        **`dCorScale`**
        : A _Double_ specifying the cor scale. The default value is 1.
        
        **`dSearchRange`**
        : A _Double_ specifying the search range. The default value is 0.
        
        **`iUnit`**
        : An _Integer_ specifying the unit. The default value is 0.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iMappingMethod`**
        : An _Integer_ specifying the mapping method. The default value is 0.
        
        **`iSubmodeLBCMappingType`**
        : An _Integer_ specifying the submode load boundary condition mapping type. The default value is 3.
        
        **`iMappingFromStepNo`**
        : An _Integer_ specifying the mapping from step no. The default value is 0.
        
        **`bSetADVCFile`**
        : A _Boolean_ specifying the set ADVC file. The default value is False.
        
        **`strADVCResultFile`**
        : A _String_ specifying the ADVC result file. The default value is "".
        
        **`bSetDetATol`**
        : A _Boolean_ specifying the set det a tolerance. The default value is False.
        
        **`dDetATol`**
        : A _Double_ specifying the det a tolerance. The default value is DFLT_DBL.
        
        **`bSetElementSet`**
        : A _Boolean_ specifying the set element set. The default value is False.
        
        **`strElementSet`**
        : A _String_ specifying the element set. The default value is "all".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.BoundaryTemperature.SurfaceMapping(strName="MappingTemperature", crlTarget=[], iMAPPos=0, iViewCp=0, iCp=1, iSrcType=0, iMappedCpIndexArr0=0, iMappedCpIndexArr1=0, dScaleFactor=1, posOffset=[0,0,0], posRotate=[0,0,0], dCorScale=1, dSearchRange=0, iUnit=0, strPath="", crEdit=None, iMappingMethod=0, iSubmodeLBCMappingType=3, iMappingFromStepNo=0, bSetADVCFile=False, strADVCResultFile="", bSetDetATol=False, dDetATol=DFLT_DBL, bSetElementSet=False, strElementSet="all")
        ```
        
        """
        message = "BoundaryConditions.BoundaryTemperature.SurfaceMapping('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{},{},{},{},{},'{}',{},{},{},'{}')".format(strName, crlTarget, iMAPPos, iViewCp, iCp, iSrcType, iMappedCpIndexArr0, iMappedCpIndexArr1, dScaleFactor, posOffset, posRotate, dCorScale, dSearchRange, iUnit, strPath, crEdit, iMappingMethod, iSubmodeLBCMappingType, iMappingFromStepNo, bSetADVCFile, strADVCResultFile, bSetDetATol, dDetATol, bSetElementSet, strElementSet)
        return JPT_RUN_LINE(message)

class BoundaryConditions_Convection:
    def Constant(self, strName="Convection_1", dExtTemp=DFLT_DBL, crTableTimeTemp=None, dDcoef=DFLT_DBL, crTableTimeCoeff=None, crTableTempCoeff=None, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Create load boundary condition of convection
        
        ## Syntax
        
        ```python
        BoundaryConditions.Convection.Constant(strName="Convection_1", dExtTemp=DFLT_DBL, crTableTimeTemp=None, dDcoef=DFLT_DBL, crTableTimeCoeff=None, crTableTempCoeff=None, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-Convection`
        
        Ribbon: {menuselection}`BoundaryConditions --> Convection --> Constant`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "Convection_1".
        
        **`dExtTemp`**
        : A _Double_ specifying the extend temperature. The default value is DFLT_DBL.
        
        **`crTableTimeTemp`**
        : A _Cursor_ specifying the table time temperature. The default value is None.
        
        **`dDcoef`**
        : A _Double_ specifying the coefficient. The default value is DFLT_DBL.
        
        **`crTableTimeCoeff`**
        : A _Cursor_ specifying the table time coeff. The default value is None.
        
        **`crTableTempCoeff`**
        : A _Cursor_ specifying the table temperature coeff. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.Convection.Constant(strName="Convection_1", dExtTemp=DFLT_DBL, crTableTimeTemp=None, dDcoef=DFLT_DBL, crTableTimeCoeff=None, crTableTempCoeff=None, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.Convection.Constant('{}',{},{},{},{},{},{},{})".format(strName, dExtTemp, crTableTimeTemp, dDcoef, crTableTimeCoeff, crTableTempCoeff, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def SurfaceMapping(self, strName="MappingConvection1", crlTarget=[], iPos=0, iViewCp=0, iCp=0, iSrcType=0, iMappedCpIndex0=0, iMappedCpIndex1=0, dRScale=1.0, posOffset=[0,0,0], posAxis=[0,0,0], dTScale=1.0, dSearchRange=1.0, iHTCUnit=0, iTempUnit=0, strPath="", crEdit=None):
        r"""
        ## Description
        
        Create load boundary condition of convection Surface Mapping
        
        ## Syntax
        
        ```python
        BoundaryConditions.Convection.SurfaceMapping(strName="MappingConvection1", crlTarget=[], iPos=0, iViewCp=0, iCp=0, iSrcType=0, iMappedCpIndex0=0, iMappedCpIndex1=0, dRScale=1.0, posOffset=[0,0,0], posAxis=[0,0,0], dTScale=1.0, dSearchRange=1.0, iHTCUnit=0, iTempUnit=0, strPath="", crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-MappingConvection`
        
        Ribbon: {menuselection}`BoundaryConditions --> Convection --> SurfaceMapping`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "MappingConvection1".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`iPos`**
        : An _Integer_ specifying the position. The default value is 0.
        
        **`iViewCp`**
        : An _Integer_ specifying the component index that to be previewed. The default value is 0.
        
        **`iCp`**
        : An _Integer_ specifying the component. The default value is 0.
        
        **`iSrcType`**
        : An _Integer_ specifying the source type. The default value is 0.
        
        **`iMappedCpIndex0`**
        : An _Integer_ specifying the mapped component index0. The default value is 0.
        
        **`iMappedCpIndex1`**
        : An _Integer_ specifying the mapped component index1. The default value is 0.
        
        **`dRScale`**
        : A _Double_ specifying the rotation scale. The default value is 1.0.
        
        **`posOffset`**
        : A _Position_ specifying the offset. The default value is [0,0,0].
        
        **`posAxis`**
        : A _Position_ specifying the axis. The default value is [0,0,0].
        
        **`dTScale`**
        : A _Double_ specifying the translation scale. The default value is 1.0.
        
        **`dSearchRange`**
        : A _Double_ specifying the search range. The default value is 1.0.
        
        **`iHTCUnit`**
        : An _Integer_ specifying the HTC unit. The default value is 0.
        
        **`iTempUnit`**
        : An _Integer_ specifying the temperature unit. The default value is 0.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.Convection.SurfaceMapping(strName="MappingConvection1", crlTarget=[], iPos=0, iViewCp=0, iCp=0, iSrcType=0, iMappedCpIndex0=0, iMappedCpIndex1=0, dRScale=1.0, posOffset=[0,0,0], posAxis=[0,0,0], dTScale=1.0, dSearchRange=1.0, iHTCUnit=0, iTempUnit=0, strPath="", crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.Convection.SurfaceMapping('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{})".format(strName, crlTarget, iPos, iViewCp, iCp, iSrcType, iMappedCpIndex0, iMappedCpIndex1, dRScale, posOffset, posAxis, dTScale, dSearchRange, iHTCUnit, iTempUnit, strPath, crEdit)
        return JPT_RUN_LINE(message)

class BoundaryConditions_EnforcedLoads:
    def Acceleration(self, strName="EnforcedAcceleration1", iDwDof=0, dFVel1=DFLT_DBL, dFVel2=DFLT_DBL, dFVel3=DFLT_DBL, dFVel4=DFLT_DBL, dFVel5=DFLT_DBL, dFVel6=DFLT_DBL, crCurCoord=None, iEnArrowDir=0, crTable=None, crNodeSet=None, dFPhase=DFLT_DBL, dFDelay=DFLT_DBL, crPhaseTable=None, bExport=False, crMEExport1=None, crMEExport2=None, crMEExport3=None, crMEExport4=None, crMEExport5=None, crMEExport6=None, iAcUnit=0, iRotUnit=0, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Set enforced acceleration
        
        ## Syntax
        
        ```python
        BoundaryConditions.EnforcedLoads.Acceleration(strName="EnforcedAcceleration1", iDwDof=0, dFVel1=DFLT_DBL, dFVel2=DFLT_DBL, dFVel3=DFLT_DBL, dFVel4=DFLT_DBL, dFVel5=DFLT_DBL, dFVel6=DFLT_DBL, crCurCoord=None, iEnArrowDir=0, crTable=None, crNodeSet=None, dFPhase=DFLT_DBL, dFDelay=DFLT_DBL, crPhaseTable=None, bExport=False, crMEExport1=None, crMEExport2=None, crMEExport3=None, crMEExport4=None, crMEExport5=None, crMEExport6=None, iAcUnit=0, iRotUnit=0, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-EnforcedAcceleration`
        
        Ribbon: {menuselection}`BoundaryConditions --> EnforcedLoads --> Acceleration`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "EnforcedAcceleration1".
        
        **`iDwDof`**
        : An _Integer_ specifying the dw dof. The default value is 0.
        
        **`dFVel1`**
        : A _Double_ specifying the vel1. The default value is DFLT_DBL.
        
        **`dFVel2`**
        : A _Double_ specifying the vel2. The default value is DFLT_DBL.
        
        **`dFVel3`**
        : A _Double_ specifying the vel3. The default value is DFLT_DBL.
        
        **`dFVel4`**
        : A _Double_ specifying the vel4. The default value is DFLT_DBL.
        
        **`dFVel5`**
        : A _Double_ specifying the vel5. The default value is DFLT_DBL.
        
        **`dFVel6`**
        : A _Double_ specifying the vel6. The default value is DFLT_DBL.
        
        **`crCurCoord`**
        : A _Cursor_ specifying the cur coordinate. The default value is None.
        
        **`iEnArrowDir`**
        : An _Integer_ specifying the en arrow direction. The default value is 0.
        
        **`crTable`**
        : A _Cursor_ specifying the table. The default value is None.
        
        **`crNodeSet`**
        : A _Cursor_ specifying the node set. The default value is None.
        
        **`dFPhase`**
        : A _Double_ specifying the phase. The default value is DFLT_DBL.
        
        **`dFDelay`**
        : A _Double_ specifying the delay. The default value is DFLT_DBL.
        
        **`crPhaseTable`**
        : A _Cursor_ specifying the phase table. The default value is None.
        
        **`bExport`**
        : A _Boolean_ specifying the export. The default value is False.
        
        **`crMEExport1`**
        : A _Cursor_ specifying the m e export1. The default value is None.
        
        **`crMEExport2`**
        : A _Cursor_ specifying the m e export2. The default value is None.
        
        **`crMEExport3`**
        : A _Cursor_ specifying the m e export3. The default value is None.
        
        **`crMEExport4`**
        : A _Cursor_ specifying the m e export4. The default value is None.
        
        **`crMEExport5`**
        : A _Cursor_ specifying the m e export5. The default value is None.
        
        **`crMEExport6`**
        : A _Cursor_ specifying the m e export6. The default value is None.
        
        **`iAcUnit`**
        : An _Integer_ specifying the ac unit. The default value is 0.
        
        **`iRotUnit`**
        : An _Integer_ specifying the rotation unit. The default value is 0.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.EnforcedLoads.Acceleration(strName="EnforcedAcceleration1", iDwDof=0, dFVel1=DFLT_DBL, dFVel2=DFLT_DBL, dFVel3=DFLT_DBL, dFVel4=DFLT_DBL, dFVel5=DFLT_DBL, dFVel6=DFLT_DBL, crCurCoord=None, iEnArrowDir=0, crTable=None, crNodeSet=None, dFPhase=DFLT_DBL, dFDelay=DFLT_DBL, crPhaseTable=None, bExport=False, crMEExport1=None, crMEExport2=None, crMEExport3=None, crMEExport4=None, crMEExport5=None, crMEExport6=None, iAcUnit=0, iRotUnit=0, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.EnforcedLoads.Acceleration('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, iDwDof, dFVel1, dFVel2, dFVel3, dFVel4, dFVel5, dFVel6, crCurCoord, iEnArrowDir, crTable, crNodeSet, dFPhase, dFDelay, crPhaseTable, bExport, crMEExport1, crMEExport2, crMEExport3, crMEExport4, crMEExport5, crMEExport6, iAcUnit, iRotUnit, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def Velocity(self, strName="EnforcedVelocity1", iDwDof=0, dFVel0=DFLT_DBL, dFVel1=DFLT_DBL, dFVel2=DFLT_DBL, dFVel3=DFLT_DBL, dFVel4=DFLT_DBL, dFVel5=DFLT_DBL, crCurCoord=None, iEnArrowDir=0, crTable=None, crNodeSet=None, dFPhase=DFLT_DBL, dFDelay=DFLT_DBL, crPhaseTable=None, iVelUnit=0, iRotUnit=0, bExport=False, crExportData0=None, crExportData1=None, crExportData2=None, crExportData3=None, crExportData4=None, crExportData5=None, crlTarget=[], crEdit=None, bADVCStatic=False):
        r"""
        ## Description
        
        create enforced velocity
        
        ## Syntax
        
        ```python
        BoundaryConditions.EnforcedLoads.Velocity(strName="EnforcedVelocity1", iDwDof=0, dFVel0=DFLT_DBL, dFVel1=DFLT_DBL, dFVel2=DFLT_DBL, dFVel3=DFLT_DBL, dFVel4=DFLT_DBL, dFVel5=DFLT_DBL, crCurCoord=None, iEnArrowDir=0, crTable=None, crNodeSet=None, dFPhase=DFLT_DBL, dFDelay=DFLT_DBL, crPhaseTable=None, iVelUnit=0, iRotUnit=0, bExport=False, crExportData0=None, crExportData1=None, crExportData2=None, crExportData3=None, crExportData4=None, crExportData5=None, crlTarget=[], crEdit=None, bADVCStatic=False)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-EnforcedVelocity`
        
        Ribbon: {menuselection}`BoundaryConditions --> EnforcedLoads --> Velocity`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "EnforcedVelocity1".
        
        **`iDwDof`**
        : An _Integer_ specifying the dw dof. The default value is 0.
        
        **`dFVel0`**
        : A _Double_ specifying the vel0. The default value is DFLT_DBL.
        
        **`dFVel1`**
        : A _Double_ specifying the vel1. The default value is DFLT_DBL.
        
        **`dFVel2`**
        : A _Double_ specifying the vel2. The default value is DFLT_DBL.
        
        **`dFVel3`**
        : A _Double_ specifying the vel3. The default value is DFLT_DBL.
        
        **`dFVel4`**
        : A _Double_ specifying the vel4. The default value is DFLT_DBL.
        
        **`dFVel5`**
        : A _Double_ specifying the vel5. The default value is DFLT_DBL.
        
        **`crCurCoord`**
        : A _Cursor_ specifying the cur coordinate. The default value is None.
        
        **`iEnArrowDir`**
        : An _Integer_ specifying the en arrow direction. The default value is 0.
        
        **`crTable`**
        : A _Cursor_ specifying the table. The default value is None.
        
        **`crNodeSet`**
        : A _Cursor_ specifying the node set. The default value is None.
        
        **`dFPhase`**
        : A _Double_ specifying the phase. The default value is DFLT_DBL.
        
        **`dFDelay`**
        : A _Double_ specifying the delay. The default value is DFLT_DBL.
        
        **`crPhaseTable`**
        : A _Cursor_ specifying the phase table. The default value is None.
        
        **`iVelUnit`**
        : An _Integer_ specifying the vel unit. The default value is 0.
        
        **`iRotUnit`**
        : An _Integer_ specifying the rotation unit. The default value is 0.
        
        **`bExport`**
        : A _Boolean_ specifying the export. The default value is False.
        
        **`crExportData0`**
        : A _Cursor_ specifying the export data0. The default value is None.
        
        **`crExportData1`**
        : A _Cursor_ specifying the export data1. The default value is None.
        
        **`crExportData2`**
        : A _Cursor_ specifying the export data2. The default value is None.
        
        **`crExportData3`**
        : A _Cursor_ specifying the export data3. The default value is None.
        
        **`crExportData4`**
        : A _Cursor_ specifying the export data4. The default value is None.
        
        **`crExportData5`**
        : A _Cursor_ specifying the export data5. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`bADVCStatic`**
        : A _Boolean_ specifying the ADVC static. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.EnforcedLoads.Velocity(strName="EnforcedVelocity1", iDwDof=0, dFVel0=DFLT_DBL, dFVel1=DFLT_DBL, dFVel2=DFLT_DBL, dFVel3=DFLT_DBL, dFVel4=DFLT_DBL, dFVel5=DFLT_DBL, crCurCoord=None, iEnArrowDir=0, crTable=None, crNodeSet=None, dFPhase=DFLT_DBL, dFDelay=DFLT_DBL, crPhaseTable=None, iVelUnit=0, iRotUnit=0, bExport=False, crExportData0=None, crExportData1=None, crExportData2=None, crExportData3=None, crExportData4=None, crExportData5=None, crlTarget=[], crEdit=None, bADVCStatic=False)
        ```
        
        """
        message = "BoundaryConditions.EnforcedLoads.Velocity('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, iDwDof, dFVel0, dFVel1, dFVel2, dFVel3, dFVel4, dFVel5, crCurCoord, iEnArrowDir, crTable, crNodeSet, dFPhase, dFDelay, crPhaseTable, iVelUnit, iRotUnit, bExport, crExportData0, crExportData1, crExportData2, crExportData3, crExportData4, crExportData5, crlTarget, crEdit, bADVCStatic)
        return JPT_RUN_LINE(message)

    def Displacement(self, strName="", iDwDof=0, dFDisp0=DFLT_DBL, dFDisp1=DFLT_DBL, dFDisp2=DFLT_DBL, dFDisp3=DFLT_DBL, dFDisp4=DFLT_DBL, dFDisp5=DFLT_DBL, crCurCoord=None, iEnArrowDir=0, crTable=None, crNodeSet=None, dFPhase=DFLT_DBL, dFDelay=DFLT_DBL, crPhaseTable=None, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        create enforced displacement
        
        ## Syntax
        
        ```python
        BoundaryConditions.EnforcedLoads.Displacement(strName="", iDwDof=0, dFDisp0=DFLT_DBL, dFDisp1=DFLT_DBL, dFDisp2=DFLT_DBL, dFDisp3=DFLT_DBL, dFDisp4=DFLT_DBL, dFDisp5=DFLT_DBL, crCurCoord=None, iEnArrowDir=0, crTable=None, crNodeSet=None, dFPhase=DFLT_DBL, dFDelay=DFLT_DBL, crPhaseTable=None, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-EnforcedDisplacement`
        
        Ribbon: {menuselection}`BoundaryConditions --> EnforcedLoads --> Displacement`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`iDwDof`**
        : An _Integer_ specifying the dw dof. The default value is 0.
        
        **`dFDisp0`**
        : A _Double_ specifying the disp0. The default value is DFLT_DBL.
        
        **`dFDisp1`**
        : A _Double_ specifying the disp1. The default value is DFLT_DBL.
        
        **`dFDisp2`**
        : A _Double_ specifying the disp2. The default value is DFLT_DBL.
        
        **`dFDisp3`**
        : A _Double_ specifying the disp3. The default value is DFLT_DBL.
        
        **`dFDisp4`**
        : A _Double_ specifying the disp4. The default value is DFLT_DBL.
        
        **`dFDisp5`**
        : A _Double_ specifying the disp5. The default value is DFLT_DBL.
        
        **`crCurCoord`**
        : A _Cursor_ specifying the cur coordinate. The default value is None.
        
        **`iEnArrowDir`**
        : An _Integer_ specifying the en arrow direction. The default value is 0.
        
        **`crTable`**
        : A _Cursor_ specifying the table. The default value is None.
        
        **`crNodeSet`**
        : A _Cursor_ specifying the node set. The default value is None.
        
        **`dFPhase`**
        : A _Double_ specifying the phase. The default value is DFLT_DBL.
        
        **`dFDelay`**
        : A _Double_ specifying the delay. The default value is DFLT_DBL.
        
        **`crPhaseTable`**
        : A _Cursor_ specifying the phase table. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.EnforcedLoads.Displacement(strName="", iDwDof=0, dFDisp0=DFLT_DBL, dFDisp1=DFLT_DBL, dFDisp2=DFLT_DBL, dFDisp3=DFLT_DBL, dFDisp4=DFLT_DBL, dFDisp5=DFLT_DBL, crCurCoord=None, iEnArrowDir=0, crTable=None, crNodeSet=None, dFPhase=DFLT_DBL, dFDelay=DFLT_DBL, crPhaseTable=None, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.EnforcedLoads.Displacement('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, iDwDof, dFDisp0, dFDisp1, dFDisp2, dFDisp3, dFDisp4, dFDisp5, crCurCoord, iEnArrowDir, crTable, crNodeSet, dFPhase, dFDelay, crPhaseTable, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

class BoundaryConditions_HeatFlux:
    def SurfaceFlux(self, strName, dFflux, iDistributionMethod, crTable, crlTarget, crEdit=None):
        r"""
        ## Description
        
        create surface flux
        
        ## Syntax
        
        ```python
        BoundaryConditions.HeatFlux.SurfaceFlux(strName, dFflux, iDistributionMethod, crTable, crlTarget, crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-SurfaceFlux`
        
        Ribbon: {menuselection}`BoundaryConditions --> HeatFlux --> SurfaceFlux`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`dFflux`**
        : A _Double_ specifying the fflux. This is a required input.
        
        **`iDistributionMethod`**
        : An _Integer_ specifying the distribution method. This is a required input.
        
        **`crTable`**
        : A _Cursor_ specifying the table. This is a required input.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. This is a required input.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.HeatFlux.SurfaceFlux(strName, dFflux, iDistributionMethod, crTable, crlTarget, crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.HeatFlux.SurfaceFlux('{}',{},'{}',{},{},{})".format(strName, dFflux, iDistributionMethod, crTable, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def SurfaceMapping(self, strName="MappingHeatFlux", crlTarget=[], iMAPPos=0, iViewCp=0, iCp=1, iSrcType=0, iMappedCpIndexArr0=0, dScaleFactor=1, posOffset=[0,0,0], posRotate=[0,0,0], dCorScale=1, dSearchRange=0, iUnit=0, strStrpath="", crEdit=None, iMappingMethod=0, iSubmodeLBCMappingType=4, iMappingFromStepNo=0, bSetADVCFile=False, strADVCResultFile="", bSetDetATol=False, dDetATol=DFLT_DBL, bSetElementSet=False, strElementSet="all"):
        r"""
        ## Description
        
        Create mapping heat flux
        
        ## Syntax
        
        ```python
        BoundaryConditions.HeatFlux.SurfaceMapping(strName="MappingHeatFlux", crlTarget=[], iMAPPos=0, iViewCp=0, iCp=1, iSrcType=0, iMappedCpIndexArr0=0, dScaleFactor=1, posOffset=[0,0,0], posRotate=[0,0,0], dCorScale=1, dSearchRange=0, iUnit=0, strStrpath="", crEdit=None, iMappingMethod=0, iSubmodeLBCMappingType=4, iMappingFromStepNo=0, bSetADVCFile=False, strADVCResultFile="", bSetDetATol=False, dDetATol=DFLT_DBL, bSetElementSet=False, strElementSet="all")
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-MappingHeatFlux`
        
        Ribbon: {menuselection}`BoundaryConditions --> HeatFlux --> SurfaceMapping`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "MappingHeatFlux".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`iMAPPos`**
        : An _Integer_ specifying the m a p position. The default value is 0.
        
        **`iViewCp`**
        : An _Integer_ specifying the view component. The default value is 0.
        
        **`iCp`**
        : An _Integer_ specifying the component. The default value is 1.
        
        **`iSrcType`**
        : An _Integer_ specifying the source type. The default value is 0.
        
        **`iMappedCpIndexArr0`**
        : An _Integer_ specifying the mapped component index arr0. The default value is 0.
        
        **`dScaleFactor`**
        : A _Double_ specifying the scale factor. The default value is 1.
        
        **`posOffset`**
        : A _Position_ specifying the offset. The default value is [0,0,0].
        
        **`posRotate`**
        : A _Position_ specifying the rotate. The default value is [0,0,0].
        
        **`dCorScale`**
        : A _Double_ specifying the cor scale. The default value is 1.
        
        **`dSearchRange`**
        : A _Double_ specifying the search range. The default value is 0.
        
        **`iUnit`**
        : An _Integer_ specifying the unit. The default value is 0.
        
        **`strStrpath`**
        : A _String_ specifying the strpath. The default value is "".
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iMappingMethod`**
        : An _Integer_ specifying the mapping method. The default value is 0.
        
        **`iSubmodeLBCMappingType`**
        : An _Integer_ specifying the submode load boundary condition mapping type. The default value is 4.
        
        **`iMappingFromStepNo`**
        : An _Integer_ specifying the mapping from step no. The default value is 0.
        
        **`bSetADVCFile`**
        : A _Boolean_ specifying the set ADVC file. The default value is False.
        
        **`strADVCResultFile`**
        : A _String_ specifying the ADVC result file. The default value is "".
        
        **`bSetDetATol`**
        : A _Boolean_ specifying the set det a tolerance. The default value is False.
        
        **`dDetATol`**
        : A _Double_ specifying the det a tolerance. The default value is DFLT_DBL.
        
        **`bSetElementSet`**
        : A _Boolean_ specifying the set element set. The default value is False.
        
        **`strElementSet`**
        : A _String_ specifying the element set. The default value is "all".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.HeatFlux.SurfaceMapping(strName="MappingHeatFlux", crlTarget=[], iMAPPos=0, iViewCp=0, iCp=1, iSrcType=0, iMappedCpIndexArr0=0, dScaleFactor=1, posOffset=[0,0,0], posRotate=[0,0,0], dCorScale=1, dSearchRange=0, iUnit=0, strStrpath="", crEdit=None, iMappingMethod=0, iSubmodeLBCMappingType=4, iMappingFromStepNo=0, bSetADVCFile=False, strADVCResultFile="", bSetDetATol=False, dDetATol=DFLT_DBL, bSetElementSet=False, strElementSet="all")
        ```
        
        """
        message = "BoundaryConditions.HeatFlux.SurfaceMapping('{}',{},{},{},{},{},{},{},{},{},{},{},{},'{}',{},{},{},{},{},'{}',{},{},{},'{}')".format(strName, crlTarget, iMAPPos, iViewCp, iCp, iSrcType, iMappedCpIndexArr0, dScaleFactor, posOffset, posRotate, dCorScale, dSearchRange, iUnit, strStrpath, crEdit, iMappingMethod, iSubmodeLBCMappingType, iMappingFromStepNo, bSetADVCFile, strADVCResultFile, bSetDetATol, dDetATol, bSetElementSet, strElementSet)
        return JPT_RUN_LINE(message)

    def ConcentrateFlux(self, strName = "ConcentrateHeatFlux1", lbcConcentrateFluxData=LBC_CONCENTRATE_FLUX_DATA(), crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        BoundaryConditions.HeatFlux.ConcentrateFlux(strName = "ConcentrateHeatFlux1", lbcConcentrateFluxData=LBC_CONCENTRATE_FLUX_DATA(), crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-ConcentrateFlux`
        
        Ribbon: {menuselection}`BoundaryConditions --> HeatFlux --> ConcentrateFlux`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ConcentrateHeatFlux1".
        
        **`lbcConcentrateFluxData`**
        : A _LBC_CONCENTRATE_FLUX_DATA_ specifying the concentrate flux data. The default value is LBC_CONCENTRATE_FLUX_DATA().
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.HeatFlux.ConcentrateFlux(strName = "ConcentrateHeatFlux1", lbcConcentrateFluxData=LBC_CONCENTRATE_FLUX_DATA(), crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.HeatFlux.ConcentrateFlux('{}',{},{},{})".format(strName , lbcConcentrateFluxData, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

class BoundaryConditions_InitialElementalValue:
    def InitialStress(self, strName="InitialStress1", iDimension=2, iElemCs=0, dSXX=DFLT_DBL, dSYY=DFLT_DBL, dSXY=DFLT_DBL, crTable=None, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        create mapping stress
        
        ## Syntax
        
        ```python
        BoundaryConditions.InitialElementalValue.InitialStress(strName="InitialStress1", iDimension=2, iElemCs=0, dSXX=DFLT_DBL, dSYY=DFLT_DBL, dSXY=DFLT_DBL, crTable=None, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-InitialStressGeneral`
        
        Ribbon: {menuselection}`BoundaryConditions --> InitialElementalValue --> InitialStress`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "InitialStress1".
        
        **`iDimension`**
        : An _Integer_ specifying the dimension. The default value is 2.
        
        **`iElemCs`**
        : An _Integer_ specifying the element cs. The default value is 0.
        
        **`dSXX`**
        : A _Double_ specifying the s x x. The default value is DFLT_DBL.
        
        **`dSYY`**
        : A _Double_ specifying the s y y. The default value is DFLT_DBL.
        
        **`dSXY`**
        : A _Double_ specifying the s x y. The default value is DFLT_DBL.
        
        **`crTable`**
        : A _Cursor_ specifying the table. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.InitialElementalValue.InitialStress(strName="InitialStress1", iDimension=2, iElemCs=0, dSXX=DFLT_DBL, dSYY=DFLT_DBL, dSXY=DFLT_DBL, crTable=None, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.InitialElementalValue.InitialStress('{}',{},{},{},{},{},{},{},{})".format(strName, iDimension, iElemCs, dSXX, dSYY, dSXY, crTable, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

class BoundaryConditions_InitialTemperature:
    def WholeMapping(self, strName="TemperatureInitsWholeMapping1", iMapSourceType=0, strPath="", iMappingMethod=0, iIsubcase=0, crEdit=None):
        r"""
        ## Description
        
        Create initial temperature whole mapping
        
        ## Syntax
        
        ```python
        BoundaryConditions.InitialTemperature.WholeMapping(strName="TemperatureInitsWholeMapping1", iMapSourceType=0, strPath="", iMappingMethod=0, iIsubcase=0, crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-WholeMappingInitTemperature`
        
        Ribbon: {menuselection}`BoundaryConditions --> InitialTemperature --> WholeMapping`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "TemperatureInitsWholeMapping1".
        
        **`iMapSourceType`**
        : An _Integer_ specifying the map source type. The default value is 0.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        **`iMappingMethod`**
        : An _Integer_ specifying the mapping method. The default value is 0.
        
        **`iIsubcase`**
        : An _Integer_ specifying the isubcase. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.InitialTemperature.WholeMapping(strName="TemperatureInitsWholeMapping1", iMapSourceType=0, strPath="", iMappingMethod=0, iIsubcase=0, crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.InitialTemperature.WholeMapping('{}',{},'{}',{},{},{})".format(strName, iMapSourceType, strPath, iMappingMethod, iIsubcase, crEdit)
        return JPT_RUN_LINE(message)

    def Constant(self, strName="InitialTemperature1",dFTemp=0.0, strFilePathName="", bUseDefault=False, crTable=None, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        BoundaryConditions.InitialTemperature.Constant(strName="InitialTemperature1",dFTemp=0.0, strFilePathName="", bUseDefault=False, crTable=None, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-InitialTemperature`
        
        Ribbon: {menuselection}`BoundaryConditions --> InitialTemperature --> Constant`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`strFilePathName`**
        : A _String_ specifying the file path name. The default value is "".
        
        **`bUseDefault`**
        : A _Boolean_ specifying the use default. The default value is False.
        
        **`crTable`**
        : A _Cursor_ specifying the table. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.InitialTemperature.Constant(strName="InitialTemperature1",dFTemp=0.0, strFilePathName="", bUseDefault=False, crTable=None, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.InitialTemperature.Constant('{}',{},'{}',{},{},{},{})".format(strName,dFTemp, strFilePathName, bUseDefault, crTable, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def ADVC(self, strName="InitialTemperature1",dTemperatureValue=0.0, strFilePathName="", bUseDefault=False, crTable=None, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        BoundaryConditions.InitialTemperature.ADVC(strName="InitialTemperature1",dTemperatureValue=0.0, strFilePathName="", bUseDefault=False, crTable=None, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-InitialTemperature`
        
        Ribbon: {menuselection}`BoundaryConditions --> InitialTemperature --> ADVC`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`strFilePathName`**
        : A _String_ specifying the file path name. The default value is "".
        
        **`bUseDefault`**
        : A _Boolean_ specifying the use default. The default value is False.
        
        **`crTable`**
        : A _Cursor_ specifying the table. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.InitialTemperature.ADVC(strName="InitialTemperature1",dTemperatureValue=0.0, strFilePathName="", bUseDefault=False, crTable=None, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.InitialTemperature.ADVC('{}',{},'{}',{},{},{},{})".format(strName,dTemperatureValue, strFilePathName, bUseDefault, crTable, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def NastranPunch(self, strName="InitialTemperature1",dTemperatureValue=0.0, strFilePathName="", bUseDefault=False, crTable=None, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        BoundaryConditions.InitialTemperature.NastranPunch(strName="InitialTemperature1",dTemperatureValue=0.0, strFilePathName="", bUseDefault=False, crTable=None, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-InitialTemperature`
        
        Ribbon: {menuselection}`BoundaryConditions --> InitialTemperature --> NastranPunch`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`strFilePathName`**
        : A _String_ specifying the file path name. The default value is "".
        
        **`bUseDefault`**
        : A _Boolean_ specifying the use default. The default value is False.
        
        **`crTable`**
        : A _Cursor_ specifying the table. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.InitialTemperature.NastranPunch(strName="InitialTemperature1",dTemperatureValue=0.0, strFilePathName="", bUseDefault=False, crTable=None, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.InitialTemperature.NastranPunch('{}',{},'{}',{},{},{},{})".format(strName,dTemperatureValue, strFilePathName, bUseDefault, crTable, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

class BoundaryConditions_LBCCopy:
    def PropertiesCopyTranslate(self, iMethod=0, iMatchMethod=0, posVecTrans=[0,0,0], dMagnitude=1, dTrandataDoffset=0.0, dTol=1, crCoord=None, crlTarget=[]):
        r"""
        ## Description
        
        Copy property translate
        
        ## Syntax
        
        ```python
        BoundaryConditions.LBCCopy.PropertiesCopyTranslate(iMethod=0, iMatchMethod=0, posVecTrans=[0,0,0], dMagnitude=1, dTrandataDoffset=0.0, dTol=1, crCoord=None, crlTarget=[])
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-PropertiesCopyTranslate`
        
        Ribbon: {menuselection}`BoundaryConditions --> LBCCopy --> PropertiesCopyTranslate`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`iMatchMethod`**
        : An _Integer_ specifying the match method. The default value is 0.
        
        **`posVecTrans`**
        : A _Position_ specifying the vector trans. The default value is [0,0,0].
        
        **`dMagnitude`**
        : A _Double_ specifying the magnitude. The default value is 1.
        
        **`dTrandataDoffset`**
        : A _Double_ specifying the trandata offset. The default value is 0.0.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is 1.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.LBCCopy.PropertiesCopyTranslate(iMethod=0, iMatchMethod=0, posVecTrans=[0,0,0], dMagnitude=1, dTrandataDoffset=0.0, dTol=1, crCoord=None, crlTarget=[])
        ```
        
        """
        message = "BoundaryConditions.LBCCopy.PropertiesCopyTranslate({},{},{},{},{},{},{},{})".format(iMethod, iMatchMethod, posVecTrans, dMagnitude, dTrandataDoffset, dTol, crCoord, crlTarget)
        return JPT_RUN_LINE(message)

    def PropertiesCopyRotate(self, iMethod=1, iMatchMethod=0, posAxis=[0,0,0], posCenter=[0,0,0], dAngle=0.0, dTol=1, crCoord=None, crlTarget=[]):
        r"""
        ## Description
        
        Copy property rotate
        
        ## Syntax
        
        ```python
        BoundaryConditions.LBCCopy.PropertiesCopyRotate(iMethod=1, iMatchMethod=0, posAxis=[0,0,0], posCenter=[0,0,0], dAngle=0.0, dTol=1, crCoord=None, crlTarget=[])
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-PropertiesCopyRotate`
        
        Ribbon: {menuselection}`BoundaryConditions --> LBCCopy --> PropertiesCopyRotate`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 1.
        
        **`iMatchMethod`**
        : An _Integer_ specifying the match method. The default value is 0.
        
        **`posAxis`**
        : A _Position_ specifying the axis. The default value is [0,0,0].
        
        **`posCenter`**
        : A _Position_ specifying the center. The default value is [0,0,0].
        
        **`dAngle`**
        : A _Double_ specifying the angle. The default value is 0.0.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is 1.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.LBCCopy.PropertiesCopyRotate(iMethod=1, iMatchMethod=0, posAxis=[0,0,0], posCenter=[0,0,0], dAngle=0.0, dTol=1, crCoord=None, crlTarget=[])
        ```
        
        """
        message = "BoundaryConditions.LBCCopy.PropertiesCopyRotate({},{},{},{},{},{},{},{})".format(iMethod, iMatchMethod, posAxis, posCenter, dAngle, dTol, crCoord, crlTarget)
        return JPT_RUN_LINE(message)

    def PropertiesCopyMirror(self, iMethod=2, iMatchMethod=0, poslPoints=[], dOffset=0, dTol=1, crlTarget=[]):
        r"""
        ## Description
        
        Copy property mirror
        
        ## Syntax
        
        ```python
        BoundaryConditions.LBCCopy.PropertiesCopyMirror(iMethod=2, iMatchMethod=0, poslPoints=[], dOffset=0, dTol=1, crlTarget=[])
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-PropertiesCopyMirror`
        
        Ribbon: {menuselection}`BoundaryConditions --> LBCCopy --> PropertiesCopyMirror`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 2.
        
        **`iMatchMethod`**
        : An _Integer_ specifying the match method. The default value is 0.
        
        **`poslPoints`**
        : A _Position List_ specifying the points. The default value is [].
        
        **`dOffset`**
        : A _Double_ specifying the offset. The default value is 0.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is 1.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.LBCCopy.PropertiesCopyMirror(iMethod=2, iMatchMethod=0, poslPoints=[], dOffset=0, dTol=1, crlTarget=[])
        ```
        
        """
        message = "BoundaryConditions.LBCCopy.PropertiesCopyMirror({},{},{},{},{},{})".format(iMethod, iMatchMethod, poslPoints, dOffset, dTol, crlTarget)
        return JPT_RUN_LINE(message)

    def ConnectionCopyTranslate(self, iMethod=0, iMatchMethod=0, posVecTrans=[0,0,0], dMagnitude=1, dTrandataDoffset=0.0, dTol=1, crCoord=None, crlTarget=[]):
        r"""
        ## Description
        
        Copy connection translate
        
        ## Syntax
        
        ```python
        BoundaryConditions.LBCCopy.ConnectionCopyTranslate(iMethod=0, iMatchMethod=0, posVecTrans=[0,0,0], dMagnitude=1, dTrandataDoffset=0.0, dTol=1, crCoord=None, crlTarget=[])
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-ConnectionCopyTranslate`
        
        Ribbon: {menuselection}`BoundaryConditions --> LBCCopy --> ConnectionCopyTranslate`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`iMatchMethod`**
        : An _Integer_ specifying the match method. The default value is 0.
        
        **`posVecTrans`**
        : A _Position_ specifying the vector trans. The default value is [0,0,0].
        
        **`dMagnitude`**
        : A _Double_ specifying the magnitude. The default value is 1.
        
        **`dTrandataDoffset`**
        : A _Double_ specifying the trandata offset. The default value is 0.0.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is 1.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.LBCCopy.ConnectionCopyTranslate(iMethod=0, iMatchMethod=0, posVecTrans=[0,0,0], dMagnitude=1, dTrandataDoffset=0.0, dTol=1, crCoord=None, crlTarget=[])
        ```
        
        """
        message = "BoundaryConditions.LBCCopy.ConnectionCopyTranslate({},{},{},{},{},{},{},{})".format(iMethod, iMatchMethod, posVecTrans, dMagnitude, dTrandataDoffset, dTol, crCoord, crlTarget)
        return JPT_RUN_LINE(message)

    def ConnectionCopyRotate(self, iMethod=1, iMatchMethod=0, posAxis=[0,0,0], posCenter=[0,0,0], dAngle=0.0, dTol=1, crCoord=None, crlTarget=[]):
        r"""
        ## Description
        
        Copy Connection rotate
        
        ## Syntax
        
        ```python
        BoundaryConditions.LBCCopy.ConnectionCopyRotate(iMethod=1, iMatchMethod=0, posAxis=[0,0,0], posCenter=[0,0,0], dAngle=0.0, dTol=1, crCoord=None, crlTarget=[])
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-ConnectionCopyRotate`
        
        Ribbon: {menuselection}`BoundaryConditions --> LBCCopy --> ConnectionCopyRotate`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 1.
        
        **`iMatchMethod`**
        : An _Integer_ specifying the match method. The default value is 0.
        
        **`posAxis`**
        : A _Position_ specifying the axis. The default value is [0,0,0].
        
        **`posCenter`**
        : A _Position_ specifying the center. The default value is [0,0,0].
        
        **`dAngle`**
        : A _Double_ specifying the angle. The default value is 0.0.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is 1.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.LBCCopy.ConnectionCopyRotate(iMethod=1, iMatchMethod=0, posAxis=[0,0,0], posCenter=[0,0,0], dAngle=0.0, dTol=1, crCoord=None, crlTarget=[])
        ```
        
        """
        message = "BoundaryConditions.LBCCopy.ConnectionCopyRotate({},{},{},{},{},{},{},{})".format(iMethod, iMatchMethod, posAxis, posCenter, dAngle, dTol, crCoord, crlTarget)
        return JPT_RUN_LINE(message)

    def ConnectionCopyMirror(self, iMethod=2, iMatchMethod=0, poslPoints=[], dOffset=0, dTol=1, crlTarget=[]):
        r"""
        ## Description
        
        Copy Connection mirror
        
        ## Syntax
        
        ```python
        BoundaryConditions.LBCCopy.ConnectionCopyMirror(iMethod=2, iMatchMethod=0, poslPoints=[], dOffset=0, dTol=1, crlTarget=[])
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-ConnectionCopyMirror`
        
        Ribbon: {menuselection}`BoundaryConditions --> LBCCopy --> ConnectionCopyMirror`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 2.
        
        **`iMatchMethod`**
        : An _Integer_ specifying the match method. The default value is 0.
        
        **`poslPoints`**
        : A _Position List_ specifying the points. The default value is [].
        
        **`dOffset`**
        : A _Double_ specifying the offset. The default value is 0.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is 1.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.LBCCopy.ConnectionCopyMirror(iMethod=2, iMatchMethod=0, poslPoints=[], dOffset=0, dTol=1, crlTarget=[])
        ```
        
        """
        message = "BoundaryConditions.LBCCopy.ConnectionCopyMirror({},{},{},{},{},{})".format(iMethod, iMatchMethod, poslPoints, dOffset, dTol, crlTarget)
        return JPT_RUN_LINE(message)

    def GroupCopyTranslate(self, iMethod=0, iMatchMethod=0, posVecTrans=[0,0,0], dMagnitude=1, dTrandataDoffset=0.0, dTol=1, crCoord=None, crlTarget=[]):
        r"""
        ## Description
        
        Copy group translate
        
        ## Syntax
        
        ```python
        BoundaryConditions.LBCCopy.GroupCopyTranslate(iMethod=0, iMatchMethod=0, posVecTrans=[0,0,0], dMagnitude=1, dTrandataDoffset=0.0, dTol=1, crCoord=None, crlTarget=[])
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-GroupCopyTranslate`
        
        Ribbon: {menuselection}`BoundaryConditions --> LBCCopy --> GroupCopyTranslate`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`iMatchMethod`**
        : An _Integer_ specifying the match method. The default value is 0.
        
        **`posVecTrans`**
        : A _Position_ specifying the vector trans. The default value is [0,0,0].
        
        **`dMagnitude`**
        : A _Double_ specifying the magnitude. The default value is 1.
        
        **`dTrandataDoffset`**
        : A _Double_ specifying the trandata offset. The default value is 0.0.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is 1.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.LBCCopy.GroupCopyTranslate(iMethod=0, iMatchMethod=0, posVecTrans=[0,0,0], dMagnitude=1, dTrandataDoffset=0.0, dTol=1, crCoord=None, crlTarget=[])
        ```
        
        """
        message = "BoundaryConditions.LBCCopy.GroupCopyTranslate({},{},{},{},{},{},{},{})".format(iMethod, iMatchMethod, posVecTrans, dMagnitude, dTrandataDoffset, dTol, crCoord, crlTarget)
        return JPT_RUN_LINE(message)

    def GroupCopyRotate(self, iMethod=1, iMatchMethod=0, posAxis=[0,0,0], posCenter=[0,0,0], dAngle=0.0, dTol=1, crCoord=None, crlTarget=[]):
        r"""
        ## Description
        
        Copy Group rotate
        
        ## Syntax
        
        ```python
        BoundaryConditions.LBCCopy.GroupCopyRotate(iMethod=1, iMatchMethod=0, posAxis=[0,0,0], posCenter=[0,0,0], dAngle=0.0, dTol=1, crCoord=None, crlTarget=[])
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-GroupCopyRotate`
        
        Ribbon: {menuselection}`BoundaryConditions --> LBCCopy --> GroupCopyRotate`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 1.
        
        **`iMatchMethod`**
        : An _Integer_ specifying the match method. The default value is 0.
        
        **`posAxis`**
        : A _Position_ specifying the axis. The default value is [0,0,0].
        
        **`posCenter`**
        : A _Position_ specifying the center. The default value is [0,0,0].
        
        **`dAngle`**
        : A _Double_ specifying the angle. The default value is 0.0.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is 1.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.LBCCopy.GroupCopyRotate(iMethod=1, iMatchMethod=0, posAxis=[0,0,0], posCenter=[0,0,0], dAngle=0.0, dTol=1, crCoord=None, crlTarget=[])
        ```
        
        """
        message = "BoundaryConditions.LBCCopy.GroupCopyRotate({},{},{},{},{},{},{},{})".format(iMethod, iMatchMethod, posAxis, posCenter, dAngle, dTol, crCoord, crlTarget)
        return JPT_RUN_LINE(message)

    def GroupCopyMirror(self, iMethod=2, iMatchMethod=0, poslPoints=[], dOffset=0, dTol=1, crlTarget=[]):
        r"""
        ## Description
        
        Copy Group mirror
        
        ## Syntax
        
        ```python
        BoundaryConditions.LBCCopy.GroupCopyMirror(iMethod=2, iMatchMethod=0, poslPoints=[], dOffset=0, dTol=1, crlTarget=[])
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-GroupCopyMirror`
        
        Ribbon: {menuselection}`BoundaryConditions --> LBCCopy --> GroupCopyMirror`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 2.
        
        **`iMatchMethod`**
        : An _Integer_ specifying the match method. The default value is 0.
        
        **`poslPoints`**
        : A _Position List_ specifying the points. The default value is [].
        
        **`dOffset`**
        : A _Double_ specifying the offset. The default value is 0.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is 1.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.LBCCopy.GroupCopyMirror(iMethod=2, iMatchMethod=0, poslPoints=[], dOffset=0, dTol=1, crlTarget=[])
        ```
        
        """
        message = "BoundaryConditions.LBCCopy.GroupCopyMirror({},{},{},{},{},{})".format(iMethod, iMatchMethod, poslPoints, dOffset, dTol, crlTarget)
        return JPT_RUN_LINE(message)

    def LBCCopyTranslate(self, iMethod=0, iMatchMethod=0, posVecTrans=[0,0,0], dMagnitude=1, dTrandataDoffset=0.0, dTol=1, crCoord=None, crlTarget=[]):
        r"""
        ## Description
        
        Copy LBC translate
        
        ## Syntax
        
        ```python
        BoundaryConditions.LBCCopy.LBCCopyTranslate(iMethod=0, iMatchMethod=0, posVecTrans=[0,0,0], dMagnitude=1, dTrandataDoffset=0.0, dTol=1, crCoord=None, crlTarget=[])
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-LBCCopyTranslate`
        
        Ribbon: {menuselection}`BoundaryConditions --> LBCCopy --> LBCCopyTranslate`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`iMatchMethod`**
        : An _Integer_ specifying the match method. The default value is 0.
        
        **`posVecTrans`**
        : A _Position_ specifying the vector trans. The default value is [0,0,0].
        
        **`dMagnitude`**
        : A _Double_ specifying the magnitude. The default value is 1.
        
        **`dTrandataDoffset`**
        : A _Double_ specifying the trandata offset. The default value is 0.0.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is 1.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.LBCCopy.LBCCopyTranslate(iMethod=0, iMatchMethod=0, posVecTrans=[0,0,0], dMagnitude=1, dTrandataDoffset=0.0, dTol=1, crCoord=None, crlTarget=[])
        ```
        
        """
        message = "BoundaryConditions.LBCCopy.LBCCopyTranslate({},{},{},{},{},{},{},{})".format(iMethod, iMatchMethod, posVecTrans, dMagnitude, dTrandataDoffset, dTol, crCoord, crlTarget)
        return JPT_RUN_LINE(message)

    def LBCCopyRotate(self, iMethod=1, iMatchMethod=0, posAxis=[0,0,0], posCenter=[0,0,0], dAngle=0.0, dTol=1, crCoord=None, crlTarget=[]):
        r"""
        ## Description
        
        Copy LBC rotate
        
        ## Syntax
        
        ```python
        BoundaryConditions.LBCCopy.LBCCopyRotate(iMethod=1, iMatchMethod=0, posAxis=[0,0,0], posCenter=[0,0,0], dAngle=0.0, dTol=1, crCoord=None, crlTarget=[])
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-LBCCopyRotate`
        
        Ribbon: {menuselection}`BoundaryConditions --> LBCCopy --> LBCCopyRotate`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 1.
        
        **`iMatchMethod`**
        : An _Integer_ specifying the match method. The default value is 0.
        
        **`posAxis`**
        : A _Position_ specifying the axis. The default value is [0,0,0].
        
        **`posCenter`**
        : A _Position_ specifying the center. The default value is [0,0,0].
        
        **`dAngle`**
        : A _Double_ specifying the angle. The default value is 0.0.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is 1.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.LBCCopy.LBCCopyRotate(iMethod=1, iMatchMethod=0, posAxis=[0,0,0], posCenter=[0,0,0], dAngle=0.0, dTol=1, crCoord=None, crlTarget=[])
        ```
        
        """
        message = "BoundaryConditions.LBCCopy.LBCCopyRotate({},{},{},{},{},{},{},{})".format(iMethod, iMatchMethod, posAxis, posCenter, dAngle, dTol, crCoord, crlTarget)
        return JPT_RUN_LINE(message)

    def LBCCopyMirror(self, iMethod=2, iMatchMethod=0, poslPoints=[], dOffset=0, dTol=1, crlTarget=[]):
        r"""
        ## Description
        
        Copy LBC mirror
        
        ## Syntax
        
        ```python
        BoundaryConditions.LBCCopy.LBCCopyMirror(iMethod=2, iMatchMethod=0, poslPoints=[], dOffset=0, dTol=1, crlTarget=[])
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-LBCCopyMirror`
        
        Ribbon: {menuselection}`BoundaryConditions --> LBCCopy --> LBCCopyMirror`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 2.
        
        **`iMatchMethod`**
        : An _Integer_ specifying the match method. The default value is 0.
        
        **`poslPoints`**
        : A _Position List_ specifying the points. The default value is [].
        
        **`dOffset`**
        : A _Double_ specifying the offset. The default value is 0.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is 1.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.LBCCopy.LBCCopyMirror(iMethod=2, iMatchMethod=0, poslPoints=[], dOffset=0, dTol=1, crlTarget=[])
        ```
        
        """
        message = "BoundaryConditions.LBCCopy.LBCCopyMirror({},{},{},{},{},{})".format(iMethod, iMatchMethod, poslPoints, dOffset, dTol, crlTarget)
        return JPT_RUN_LINE(message)

class BoundaryConditions_Pressure:
    def SurfaceLoads(self, strName="SurfaceLoads1", dlPressure=[0,0,0], iArrowdir=0, crCoordinate=None, crlTargetFace=[], crEditCur=None):
        r"""
        ## Description
        
        create distrubited pressure
        
        ## Syntax
        
        ```python
        BoundaryConditions.Pressure.SurfaceLoads(strName="SurfaceLoads1", dlPressure=[0,0,0], iArrowdir=0, crCoordinate=None, crlTargetFace=[], crEditCur=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-SurfaceLoads`
        
        Ribbon: {menuselection}`BoundaryConditions --> Pressure --> SurfaceLoads`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "SurfaceLoads1".
        
        **`dlPressure`**
        : A _Double List_ specifying the pressure. The default value is [0,0,0].
        
        **`iArrowdir`**
        : An _Integer_ specifying the arrowdir. The default value is 0.
        
        **`crCoordinate`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`crlTargetFace`**
        : A _Cursor List_ specifying the target face. The default value is [].
        
        **`crEditCur`**
        : A _Cursor_ specifying the edit cur. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.Pressure.SurfaceLoads(strName="SurfaceLoads1", dlPressure=[0,0,0], iArrowdir=0, crCoordinate=None, crlTargetFace=[], crEditCur=None)
        ```
        
        """
        message = "BoundaryConditions.Pressure.SurfaceLoads('{}',{},{},{},{},{})".format(strName, dlPressure, iArrowdir, crCoordinate, crlTargetFace, crEditCur)
        return JPT_RUN_LINE(message)

    def By2Nodes(self, strName="PressureLinear1", crNodeA=None, dPressureA=0.0, iNodeAUnit=0, crNodeB=None, dPressureB=0.0, iNodeBUnit=0, iDirection=0, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Create load boundary condition of 2nodes pressure
        
        ## Syntax
        
        ```python
        BoundaryConditions.Pressure.By2Nodes(strName="PressureLinear1", crNodeA=None, dPressureA=0.0, iNodeAUnit=0, crNodeB=None, dPressureB=0.0, iNodeBUnit=0, iDirection=0, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-Pressure2Nodes`
        
        Ribbon: {menuselection}`BoundaryConditions --> Pressure --> By2Nodes`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "PressureLinear1".
        
        **`crNodeA`**
        : A _Cursor_ specifying the node a. The default value is None.
        
        **`dPressureA`**
        : A _Double_ specifying the pressure a. The default value is 0.0.
        
        **`iNodeAUnit`**
        : An _Integer_ specifying the node a unit. The default value is 0.
        
        **`crNodeB`**
        : A _Cursor_ specifying the node . The default value is None.
        
        **`dPressureB`**
        : A _Double_ specifying the pressure . The default value is 0.0.
        
        **`iNodeBUnit`**
        : An _Integer_ specifying the node unit. The default value is 0.
        
        **`iDirection`**
        : An _Integer_ specifying the direction. The default value is 0.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.Pressure.By2Nodes(strName="PressureLinear1", crNodeA=None, dPressureA=0.0, iNodeAUnit=0, crNodeB=None, dPressureB=0.0, iNodeBUnit=0, iDirection=0, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.Pressure.By2Nodes('{}',{},{},{},{},{},{},{},{},{})".format(strName, crNodeA, dPressureA, iNodeAUnit, crNodeB, dPressureB, iNodeBUnit, iDirection, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def General(self, strName="Pressure1", dFpressure=0.0, iIdistribute=0, crTable=None, dDphase=0.0, dDdelay=0.0, crPhaseTable=None, strFormularValue="", crCoord=None, dlDirection=[DFLT_DBL,DFLT_DBL,DFLT_DBL], strFormularDirX="", strFormularDirY="", strFormularDirZ="", iArrowDir=1, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Create general pressure boundary condition
        
        ## Syntax
        
        ```python
        BoundaryConditions.Pressure.General(strName="Pressure1", dFpressure=0.0, iIdistribute=0, crTable=None, dDphase=0.0, dDdelay=0.0, crPhaseTable=None, strFormularValue="", crCoord=None, dlDirection=[DFLT_DBL,DFLT_DBL,DFLT_DBL], strFormularDirX="", strFormularDirY="", strFormularDirZ="", iArrowDir=1, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-PressureGeneral`
        
        Ribbon: {menuselection}`BoundaryConditions --> Pressure --> General`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "Pressure1".
        
        **`dFpressure`**
        : A _Double_ specifying the fpressure. The default value is 0.0.
        
        **`iIdistribute`**
        : An _Integer_ specifying the idistribute. The default value is 0.
        
        **`crTable`**
        : A _Cursor_ specifying the table. The default value is None.
        
        **`dDphase`**
        : A _Double_ specifying the dphase. The default value is 0.0.
        
        **`dDdelay`**
        : A _Double_ specifying the ddelay. The default value is 0.0.
        
        **`crPhaseTable`**
        : A _Cursor_ specifying the phase table. The default value is None.
        
        **`strFormularValue`**
        : A _String_ specifying the formular value. The default value is "".
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`dlDirection`**
        : A _Double List_ specifying the direction. The default value is [DFLT_DBL,DFLT_DBL,DFLT_DBL].
        
        **`strFormularDirX`**
        : A _String_ specifying the formular direction x. The default value is "".
        
        **`strFormularDirY`**
        : A _String_ specifying the formular direction y. The default value is "".
        
        **`strFormularDirZ`**
        : A _String_ specifying the formular direction z. The default value is "".
        
        **`iArrowDir`**
        : An _Integer_ specifying the arrow direction. The default value is 1.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.Pressure.General(strName="Pressure1", dFpressure=0.0, iIdistribute=0, crTable=None, dDphase=0.0, dDdelay=0.0, crPhaseTable=None, strFormularValue="", crCoord=None, dlDirection=[DFLT_DBL,DFLT_DBL,DFLT_DBL], strFormularDirX="", strFormularDirY="", strFormularDirZ="", iArrowDir=1, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.Pressure.General('{}',{},'{}',{},{},{},{},'{}',{},{},'{}','{}','{}',{},{},{})".format(strName, dFpressure, iIdistribute, crTable, dDphase, dDdelay, crPhaseTable, strFormularValue, crCoord, dlDirection, strFormularDirX, strFormularDirY, strFormularDirZ, iArrowDir, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def Quadratic(self, strName="PressureQuadratic1", dA=0.0, dB=0.0, crCoordinate=None, dAngleRange=0.0, iPressureDirectionMode=0, dlPressureDirection=[0.0,0.0,0.0], crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Create Pressure quadratic
        
        ## Syntax
        
        ```python
        BoundaryConditions.Pressure.Quadratic(strName="PressureQuadratic1", dA=0.0, dB=0.0, crCoordinate=None, dAngleRange=0.0, iPressureDirectionMode=0, dlPressureDirection=[0.0,0.0,0.0], crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-PressureQuadratic`
        
        Ribbon: {menuselection}`BoundaryConditions --> Pressure --> Quadratic`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "PressureQuadratic1".
        
        **`dA`**
        : A _Double_ specifying the a. The default value is 0.0.
        
        **`dB`**
        : A _Double_ specifying the . The default value is 0.0.
        
        **`crCoordinate`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`dAngleRange`**
        : A _Double_ specifying the angle range. The default value is 0.0.
        
        **`iPressureDirectionMode`**
        : An _Integer_ specifying the pressure direction mode. The default value is 0.
        
        **`dlPressureDirection`**
        : A _Double List_ specifying the pressure direction. The default value is [0.0,0.0,0.0].
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.Pressure.Quadratic(strName="PressureQuadratic1", dA=0.0, dB=0.0, crCoordinate=None, dAngleRange=0.0, iPressureDirectionMode=0, dlPressureDirection=[0.0,0.0,0.0], crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.Pressure.Quadratic('{}',{},{},{},{},{},{},{},{})".format(strName, dA, dB, crCoordinate, dAngleRange, iPressureDirectionMode, dlPressureDirection, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def FunctionLoadToCylinderSine(self, strName="PressureSine1", dA=0.0, crCoordinate=None, dAngleRange=0.0, bDistributionAxis=False, iPressureDirectionMode=0, bIsTotalForceAdjustment=False, dTotalForce=0.0, vecPressureDirection=[0.0,0.0,0.0], crCoordinateSystemForDirection=None, bIsCornerNodesDistribution=False, strFormulaForA="", crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        BoundaryConditions.Pressure.FunctionLoadToCylinderSine(strName="PressureSine1", dA=0.0, crCoordinate=None, dAngleRange=0.0, bDistributionAxis=False, iPressureDirectionMode=0, bIsTotalForceAdjustment=False, dTotalForce=0.0, vecPressureDirection=[0.0,0.0,0.0], crCoordinateSystemForDirection=None, bIsCornerNodesDistribution=False, strFormulaForA="", crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-PressureSine`
        
        Ribbon: {menuselection}`BoundaryConditions --> Pressure --> FunctionLoadToCylinderSine`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "PressureSine1".
        
        **`dA`**
        : A _Double_ specifying the a. The default value is 0.0.
        
        **`crCoordinate`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`dAngleRange`**
        : A _Double_ specifying the angle range. The default value is 0.0.
        
        **`bDistributionAxis`**
        : A _Boolean_ specifying the distribution axis. The default value is False.
        
        **`iPressureDirectionMode`**
        : An _Integer_ specifying the pressure direction mode. The default value is 0.
        
        **`bIsTotalForceAdjustment`**
        : A _Boolean_ specifying the is total force adjustment. The default value is False.
        
        **`dTotalForce`**
        : A _Double_ specifying the total force. The default value is 0.0.
        
        **`vecPressureDirection`**
        : A _Vector_ specifying the pressure direction. The default value is [0.0,0.0,0.0].
        
        **`crCoordinateSystemForDirection`**
        : A _Cursor_ specifying the coordinate system for direction. The default value is None.
        
        **`bIsCornerNodesDistribution`**
        : A _Boolean_ specifying the is corner nodes distribution. The default value is False.
        
        **`strFormulaForA`**
        : A _String_ specifying the formula for a. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.Pressure.FunctionLoadToCylinderSine(strName="PressureSine1", dA=0.0, crCoordinate=None, dAngleRange=0.0, bDistributionAxis=False, iPressureDirectionMode=0, bIsTotalForceAdjustment=False, dTotalForce=0.0, vecPressureDirection=[0.0,0.0,0.0], crCoordinateSystemForDirection=None, bIsCornerNodesDistribution=False, strFormulaForA="", crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.Pressure.FunctionLoadToCylinderSine('{}',{},{},{},'{}',{},{},{},{},{},'{}','{}',{},{})".format(strName, dA, crCoordinate, dAngleRange, bDistributionAxis, iPressureDirectionMode, bIsTotalForceAdjustment, dTotalForce, vecPressureDirection, crCoordinateSystemForDirection, bIsCornerNodesDistribution, strFormulaForA, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def Hydrostatic(self, strName="PressureHydrostatic1", dFHPressure=0.0, dFDensity=0.0, iDensityUnit=0, dFGravity=0.0, iGravityUnit=0, iGravityDir=0, dFWaterSuface=0.0, iSufaceUnit=0, iDistributionMethod=0, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Boundary Conditions HPressure
        
        ## Syntax
        
        ```python
        BoundaryConditions.Pressure.Hydrostatic(strName="PressureHydrostatic1", dFHPressure=0.0, dFDensity=0.0, iDensityUnit=0, dFGravity=0.0, iGravityUnit=0, iGravityDir=0, dFWaterSuface=0.0, iSufaceUnit=0, iDistributionMethod=0, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-PressureHydrostatic`
        
        Ribbon: {menuselection}`BoundaryConditions --> Pressure --> Hydrostatic`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "PressureHydrostatic1".
        
        **`dFHPressure`**
        : A _Double_ specifying the h pressure. The default value is 0.0.
        
        **`dFDensity`**
        : A _Double_ specifying the density. The default value is 0.0.
        
        **`iDensityUnit`**
        : An _Integer_ specifying the density unit. The default value is 0.
        
        **`dFGravity`**
        : A _Double_ specifying the gravity. The default value is 0.0.
        
        **`iGravityUnit`**
        : An _Integer_ specifying the gravity unit. The default value is 0.
        
        **`iGravityDir`**
        : An _Integer_ specifying the gravity direction. The default value is 0.
        
        **`dFWaterSuface`**
        : A _Double_ specifying the water suface. The default value is 0.0.
        
        **`iSufaceUnit`**
        : An _Integer_ specifying the suface unit. The default value is 0.
        
        **`iDistributionMethod`**
        : An _Integer_ specifying the distribution method. The default value is 0.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.Pressure.Hydrostatic(strName="PressureHydrostatic1", dFHPressure=0.0, dFDensity=0.0, iDensityUnit=0, dFGravity=0.0, iGravityUnit=0, iGravityDir=0, dFWaterSuface=0.0, iSufaceUnit=0, iDistributionMethod=0, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.Pressure.Hydrostatic('{}',{},{},{},{},{},{},{},{},'{}',{},{})".format(strName, dFHPressure, dFDensity, iDensityUnit, dFGravity, iGravityUnit, iGravityDir, dFWaterSuface, iSufaceUnit, iDistributionMethod, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def SurfaceMapping(self, strName="MappingPressure", crlTarget=[], iMAPPos=0, iViewCp=0, iCp=1, iSrcType=0, iMappedCpIndexArr=0, dScaleFactor=1, posOffset=[0,0,0], posRotate=[0,0,0], dCorScale=1, dSearchRange=0, iUnit=0, strPath="", crEdit=None):
        r"""
        ## Description
        
        Create mapping pressure
        
        ## Syntax
        
        ```python
        BoundaryConditions.Pressure.SurfaceMapping(strName="MappingPressure", crlTarget=[], iMAPPos=0, iViewCp=0, iCp=1, iSrcType=0, iMappedCpIndexArr=0, dScaleFactor=1, posOffset=[0,0,0], posRotate=[0,0,0], dCorScale=1, dSearchRange=0, iUnit=0, strPath="", crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-MappingPressure`
        
        Ribbon: {menuselection}`BoundaryConditions --> Pressure --> SurfaceMapping`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "MappingPressure".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`iMAPPos`**
        : An _Integer_ specifying the m a p position. The default value is 0.
        
        **`iViewCp`**
        : An _Integer_ specifying the view component. The default value is 0.
        
        **`iCp`**
        : An _Integer_ specifying the component. The default value is 1.
        
        **`iSrcType`**
        : An _Integer_ specifying the source type. The default value is 0.
        
        **`iMappedCpIndexArr`**
        : An _Integer_ specifying the mapped component index arr. The default value is 0.
        
        **`dScaleFactor`**
        : A _Double_ specifying the scale factor. The default value is 1.
        
        **`posOffset`**
        : A _Position_ specifying the offset. The default value is [0,0,0].
        
        **`posRotate`**
        : A _Position_ specifying the rotate. The default value is [0,0,0].
        
        **`dCorScale`**
        : A _Double_ specifying the cor scale. The default value is 1.
        
        **`dSearchRange`**
        : A _Double_ specifying the search range. The default value is 0.
        
        **`iUnit`**
        : An _Integer_ specifying the unit. The default value is 0.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.Pressure.SurfaceMapping(strName="MappingPressure", crlTarget=[], iMAPPos=0, iViewCp=0, iCp=1, iSrcType=0, iMappedCpIndexArr=0, dScaleFactor=1, posOffset=[0,0,0], posRotate=[0,0,0], dCorScale=1, dSearchRange=0, iUnit=0, strPath="", crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.Pressure.SurfaceMapping('{}',{},{},{},{},{},{},{},{},{},{},{},{},'{}',{})".format(strName, crlTarget, iMAPPos, iViewCp, iCp, iSrcType, iMappedCpIndexArr, dScaleFactor, posOffset, posRotate, dCorScale, dSearchRange, iUnit, strPath, crEdit)
        return JPT_RUN_LINE(message)

class BoundaryConditions_Submodel:
    def SubmodelForcedFlux(self, strName, iSolver=0, strFilePathName="/home/", iProcessNo=0, iReferType=-1, dExtensionRange=DFLT_DBL, dExtensionTol=DFLT_DBL, dExtensionLimitTol=DFLT_DBL, strGlobalElementSet="", iUseBucket=-1, iNumBucketMaxX=DFLT_INT, iNumBucketMaxY=DFLT_INT, iNumBucketMaxZ=DFLT_INT, iPrevBc=-1, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        create submodel forced flux
        
        ## Syntax
        
        ```python
        BoundaryConditions.Submodel.SubmodelForcedFlux(strName, iSolver=0, strFilePathName="/home/", iProcessNo=0, iReferType=-1, dExtensionRange=DFLT_DBL, dExtensionTol=DFLT_DBL, dExtensionLimitTol=DFLT_DBL, strGlobalElementSet="", iUseBucket=-1, iNumBucketMaxX=DFLT_INT, iNumBucketMaxY=DFLT_INT, iNumBucketMaxZ=DFLT_INT, iPrevBc=-1, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-SubmodelForcedFlux`
        
        Ribbon: {menuselection}`BoundaryConditions --> Submodel --> SubmodelForcedFlux`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`iSolver`**
        : An _Integer_ specifying the solver. The default value is 0.
        
        **`strFilePathName`**
        : A _String_ specifying the file path name. The default value is "/home/".
        
        **`iProcessNo`**
        : An _Integer_ specifying the process no. The default value is 0.
        
        **`iReferType`**
        : An _Integer_ specifying the refer type. The default value is -1.
        
        **`dExtensionRange`**
        : A _Double_ specifying the extension range. The default value is DFLT_DBL.
        
        **`dExtensionTol`**
        : A _Double_ specifying the extension tolerance. The default value is DFLT_DBL.
        
        **`dExtensionLimitTol`**
        : A _Double_ specifying the extension limit tolerance. The default value is DFLT_DBL.
        
        **`strGlobalElementSet`**
        : A _String_ specifying the global element set. The default value is "".
        
        **`iUseBucket`**
        : An _Integer_ specifying the use bucket. The default value is -1.
        
        **`iNumBucketMaxX`**
        : An _Integer_ specifying the number bucket maximum x. The default value is DFLT_INT.
        
        **`iNumBucketMaxY`**
        : An _Integer_ specifying the number bucket maximum y. The default value is DFLT_INT.
        
        **`iNumBucketMaxZ`**
        : An _Integer_ specifying the number bucket maximum z. The default value is DFLT_INT.
        
        **`iPrevBc`**
        : An _Integer_ specifying the prev bc. The default value is -1.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.Submodel.SubmodelForcedFlux(strName, iSolver=0, strFilePathName="/home/", iProcessNo=0, iReferType=-1, dExtensionRange=DFLT_DBL, dExtensionTol=DFLT_DBL, dExtensionLimitTol=DFLT_DBL, strGlobalElementSet="", iUseBucket=-1, iNumBucketMaxX=DFLT_INT, iNumBucketMaxY=DFLT_INT, iNumBucketMaxZ=DFLT_INT, iPrevBc=-1, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.Submodel.SubmodelForcedFlux('{}',{},'{}',{},{},{},{},{},'{}',{},{},{},{},{},{},{})".format(strName, iSolver, strFilePathName, iProcessNo, iReferType, dExtensionRange, dExtensionTol, dExtensionLimitTol, strGlobalElementSet, iUseBucket, iNumBucketMaxX, iNumBucketMaxY, iNumBucketMaxZ, iPrevBc, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def ForcedTempertature(self, strName="SubmodelForcedTemperature1", iSolver=0, strFilePathName="/home/", iProcessNo=0, iReferType=0, dExtensionRange=DFLT_DBL, dExtensionTol=DFLT_DBL, dExtensionLimitTol=DFLT_DBL, strGlobalElementSet="", iUseBucket=-1, iNumBucketMaxX=DFLT_INT, iNumBucketMaxY=DFLT_INT, iNumBucketMaxZ=DFLT_INT, iPrevBc=-1, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        create sub model forced temperature
        
        ## Syntax
        
        ```python
        BoundaryConditions.Submodel.ForcedTempertature(strName="SubmodelForcedTemperature1", iSolver=0, strFilePathName="/home/", iProcessNo=0, iReferType=0, dExtensionRange=DFLT_DBL, dExtensionTol=DFLT_DBL, dExtensionLimitTol=DFLT_DBL, strGlobalElementSet="", iUseBucket=-1, iNumBucketMaxX=DFLT_INT, iNumBucketMaxY=DFLT_INT, iNumBucketMaxZ=DFLT_INT, iPrevBc=-1, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-SubmodelForcedTemp`
        
        Ribbon: {menuselection}`BoundaryConditions --> Submodel --> ForcedTempertature`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "SubmodelForcedTemperature1".
        
        **`iSolver`**
        : An _Integer_ specifying the solver. The default value is 0.
        
        **`strFilePathName`**
        : A _String_ specifying the file path name. The default value is "/home/".
        
        **`iProcessNo`**
        : An _Integer_ specifying the process no. The default value is 0.
        
        **`iReferType`**
        : An _Integer_ specifying the refer type. The default value is 0.
        
        **`dExtensionRange`**
        : A _Double_ specifying the extension range. The default value is DFLT_DBL.
        
        **`dExtensionTol`**
        : A _Double_ specifying the extension tolerance. The default value is DFLT_DBL.
        
        **`dExtensionLimitTol`**
        : A _Double_ specifying the extension limit tolerance. The default value is DFLT_DBL.
        
        **`strGlobalElementSet`**
        : A _String_ specifying the global element set. The default value is "".
        
        **`iUseBucket`**
        : An _Integer_ specifying the use bucket. The default value is -1.
        
        **`iNumBucketMaxX`**
        : An _Integer_ specifying the number bucket maximum x. The default value is DFLT_INT.
        
        **`iNumBucketMaxY`**
        : An _Integer_ specifying the number bucket maximum y. The default value is DFLT_INT.
        
        **`iNumBucketMaxZ`**
        : An _Integer_ specifying the number bucket maximum z. The default value is DFLT_INT.
        
        **`iPrevBc`**
        : An _Integer_ specifying the prev bc. The default value is -1.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.Submodel.ForcedTempertature(strName="SubmodelForcedTemperature1", iSolver=0, strFilePathName="/home/", iProcessNo=0, iReferType=0, dExtensionRange=DFLT_DBL, dExtensionTol=DFLT_DBL, dExtensionLimitTol=DFLT_DBL, strGlobalElementSet="", iUseBucket=-1, iNumBucketMaxX=DFLT_INT, iNumBucketMaxY=DFLT_INT, iNumBucketMaxZ=DFLT_INT, iPrevBc=-1, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.Submodel.ForcedTempertature('{}',{},'{}',{},{},{},{},{},'{}',{},{},{},{},{},{},{})".format(strName, iSolver, strFilePathName, iProcessNo, iReferType, dExtensionRange, dExtensionTol, dExtensionLimitTol, strGlobalElementSet, iUseBucket, iNumBucketMaxX, iNumBucketMaxY, iNumBucketMaxZ, iPrevBc, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def ForcedDisplacement(self, strName="SubmodelForcedDisplacement1", iSolver=0, strFilePathName="/home/", iProcessNo=0, bTranslationX=True, bTranslationY=True, bTranslationZ=True, iReferType=-1, dExtensionRange=DFLT_DBL, dExtensionTol=DFLT_DBL, dExtensionLimitTol=DFLT_DBL, strGlobalElementSet="", iUseBucket=-1, iNumBucketMaxX=DFLT_INT, iNumBucketMaxY=DFLT_INT, iNumBucketMaxZ=DFLT_INT, iPrevBc=-1, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Boundary Conditions Lbc Submodel Forced Disp
        
        ## Syntax
        
        ```python
        BoundaryConditions.Submodel.ForcedDisplacement(strName="SubmodelForcedDisplacement1", iSolver=0, strFilePathName="/home/", iProcessNo=0, bTranslationX=True, bTranslationY=True, bTranslationZ=True, iReferType=-1, dExtensionRange=DFLT_DBL, dExtensionTol=DFLT_DBL, dExtensionLimitTol=DFLT_DBL, strGlobalElementSet="", iUseBucket=-1, iNumBucketMaxX=DFLT_INT, iNumBucketMaxY=DFLT_INT, iNumBucketMaxZ=DFLT_INT, iPrevBc=-1, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-SubmodelForcedDisp`
        
        Ribbon: {menuselection}`BoundaryConditions --> Submodel --> ForcedDisplacement`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "SubmodelForcedDisplacement1".
        
        **`iSolver`**
        : An _Integer_ specifying the solver. The default value is 0.
        
        **`strFilePathName`**
        : A _String_ specifying the file path name. The default value is "/home/".
        
        **`iProcessNo`**
        : An _Integer_ specifying the process no. The default value is 0.
        
        **`bTranslationX`**
        : A _Boolean_ specifying the translation x. The default value is True.
        
        **`bTranslationY`**
        : A _Boolean_ specifying the translation y. The default value is True.
        
        **`bTranslationZ`**
        : A _Boolean_ specifying the translation z. The default value is True.
        
        **`iReferType`**
        : An _Integer_ specifying the refer type. The default value is -1.
        
        **`dExtensionRange`**
        : A _Double_ specifying the extension range. The default value is DFLT_DBL.
        
        **`dExtensionTol`**
        : A _Double_ specifying the extension tolerance. The default value is DFLT_DBL.
        
        **`dExtensionLimitTol`**
        : A _Double_ specifying the extension limit tolerance. The default value is DFLT_DBL.
        
        **`strGlobalElementSet`**
        : A _String_ specifying the global element set. The default value is "".
        
        **`iUseBucket`**
        : An _Integer_ specifying the use bucket. The default value is -1.
        
        **`iNumBucketMaxX`**
        : An _Integer_ specifying the number bucket maximum x. The default value is DFLT_INT.
        
        **`iNumBucketMaxY`**
        : An _Integer_ specifying the number bucket maximum y. The default value is DFLT_INT.
        
        **`iNumBucketMaxZ`**
        : An _Integer_ specifying the number bucket maximum z. The default value is DFLT_INT.
        
        **`iPrevBc`**
        : An _Integer_ specifying the prev bc. The default value is -1.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.Submodel.ForcedDisplacement(strName="SubmodelForcedDisplacement1", iSolver=0, strFilePathName="/home/", iProcessNo=0, bTranslationX=True, bTranslationY=True, bTranslationZ=True, iReferType=-1, dExtensionRange=DFLT_DBL, dExtensionTol=DFLT_DBL, dExtensionLimitTol=DFLT_DBL, strGlobalElementSet="", iUseBucket=-1, iNumBucketMaxX=DFLT_INT, iNumBucketMaxY=DFLT_INT, iNumBucketMaxZ=DFLT_INT, iPrevBc=-1, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.Submodel.ForcedDisplacement('{}',{},'{}',{},{},{},{},{},{},{},{},'{}',{},{},{},{},{},{},{})".format(strName, iSolver, strFilePathName, iProcessNo, bTranslationX, bTranslationY, bTranslationZ, iReferType, dExtensionRange, dExtensionTol, dExtensionLimitTol, strGlobalElementSet, iUseBucket, iNumBucketMaxX, iNumBucketMaxY, iNumBucketMaxZ, iPrevBc, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

class BoundaryConditions_TemperatureLoads:
    def Constant(self, strName, dTemperature=0.0, crTable=None, crlTarget=[], crEdit=None, bUseDefaultTemp=False):
        r"""
        ## Description
        
        create temperature load constant
        
        ## Syntax
        
        ```python
        BoundaryConditions.TemperatureLoads.Constant(strName, dTemperature=0.0, crTable=None, crlTarget=[], crEdit=None, bUseDefaultTemp=False)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-TemperatureLoadGeneral`
        
        Ribbon: {menuselection}`BoundaryConditions --> TemperatureLoads --> Constant`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`dTemperature`**
        : A _Double_ specifying the temperature. The default value is 0.0.
        
        **`crTable`**
        : A _Cursor_ specifying the table. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`bUseDefaultTemp`**
        : A _Boolean_ specifying the use default temperature. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.TemperatureLoads.Constant(strName, dTemperature=0.0, crTable=None, crlTarget=[], crEdit=None, bUseDefaultTemp=False)
        ```
        
        """
        message = "BoundaryConditions.TemperatureLoads.Constant('{}',{},{},{},{},{})".format(strName, dTemperature, crTable, crlTarget, crEdit, bUseDefaultTemp)
        return JPT_RUN_LINE(message)

    def ADVCFile(self, strName="TemperatureLoadsADVC1", strFilePathName="", crTable=None, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        create temperature load by advc file
        
        ## Syntax
        
        ```python
        BoundaryConditions.TemperatureLoads.ADVCFile(strName="TemperatureLoadsADVC1", strFilePathName="", crTable=None, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-TemperatureLoadADVCFile`
        
        Ribbon: {menuselection}`BoundaryConditions --> TemperatureLoads --> ADVCFile`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "TemperatureLoadsADVC1".
        
        **`strFilePathName`**
        : A _String_ specifying the file path name. The default value is "".
        
        **`crTable`**
        : A _Cursor_ specifying the table. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.TemperatureLoads.ADVCFile(strName="TemperatureLoadsADVC1", strFilePathName="", crTable=None, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.TemperatureLoads.ADVCFile('{}','{}',{},{},{})".format(strName, strFilePathName, crTable, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def NastranPunch(self, strName="TemperatureLoadsPunch1", strFilePathName="", crTable=None, crlTarget=[], crEdit=None, bUseAsMaterialReferenceTemp=False):
        r"""
        ## Description
        
        create temperature load of nastran punch
        
        ## Syntax
        
        ```python
        BoundaryConditions.TemperatureLoads.NastranPunch(strName="TemperatureLoadsPunch1", strFilePathName="", crTable=None, crlTarget=[], crEdit=None, bUseAsMaterialReferenceTemp=False)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-TemperatureLoadNastran`
        
        Ribbon: {menuselection}`BoundaryConditions --> TemperatureLoads --> NastranPunch`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "TemperatureLoadsPunch1".
        
        **`strFilePathName`**
        : A _String_ specifying the file path name. The default value is "".
        
        **`crTable`**
        : A _Cursor_ specifying the table. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`bUseAsMaterialReferenceTemp`**
        : A _Boolean_ specifying the use as material reference temperature. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.TemperatureLoads.NastranPunch(strName="TemperatureLoadsPunch1", strFilePathName="", crTable=None, crlTarget=[], crEdit=None, bUseAsMaterialReferenceTemp=False)
        ```
        
        """
        message = "BoundaryConditions.TemperatureLoads.NastranPunch('{}','{}',{},{},{},{})".format(strName, strFilePathName, crTable, crlTarget, crEdit, bUseAsMaterialReferenceTemp)
        return JPT_RUN_LINE(message)

    def WholeMapping(self, strName="TemperatureLoadsWholeMapping", crlTarget=[], iMAPPos=0, iViewCp=0, iCp=1, iSrcType=0, iMappedCpIndexArr0=0, iMappedCpIndexArr1=0, iDScaleFactor=1, posOffset=[0,0,0], posRotate=[0,0,0], dCorScale=1, dSearchRange=0, strPath="", crEdit=None, iMappingMethod=0, iSubmodelBCMappingType=2, iMappingFromStepNo=0, bSetADVCFile=False, strADVCResultFile="", bSetDetATol=False, dDetATol=DFLT_DBL, bSetElementSet=False, strElementSet=""):
        r"""
        ## Description
        
        Create mapping pressure
        
        ## Syntax
        
        ```python
        BoundaryConditions.TemperatureLoads.WholeMapping(strName="TemperatureLoadsWholeMapping", crlTarget=[], iMAPPos=0, iViewCp=0, iCp=1, iSrcType=0, iMappedCpIndexArr0=0, iMappedCpIndexArr1=0, iDScaleFactor=1, posOffset=[0,0,0], posRotate=[0,0,0], dCorScale=1, dSearchRange=0, strPath="", crEdit=None, iMappingMethod=0, iSubmodelBCMappingType=2, iMappingFromStepNo=0, bSetADVCFile=False, strADVCResultFile="", bSetDetATol=False, dDetATol=DFLT_DBL, bSetElementSet=False, strElementSet="")
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-MappingTemperatureLoad`
        
        Ribbon: {menuselection}`BoundaryConditions --> TemperatureLoads --> WholeMapping`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "TemperatureLoadsWholeMapping".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`iMAPPos`**
        : An _Integer_ specifying the m a p position. The default value is 0.
        
        **`iViewCp`**
        : An _Integer_ specifying the view component. The default value is 0.
        
        **`iCp`**
        : An _Integer_ specifying the component. The default value is 1.
        
        **`iSrcType`**
        : An _Integer_ specifying the source type. The default value is 0.
        
        **`iMappedCpIndexArr0`**
        : An _Integer_ specifying the mapped component index arr0. The default value is 0.
        
        **`iMappedCpIndexArr1`**
        : An _Integer_ specifying the mapped component index arr1. The default value is 0.
        
        **`iDScaleFactor`**
        : An _Integer_ specifying the d scale factor. The default value is 1.
        
        **`posOffset`**
        : A _Position_ specifying the offset. The default value is [0,0,0].
        
        **`posRotate`**
        : A _Position_ specifying the rotate. The default value is [0,0,0].
        
        **`dCorScale`**
        : A _Double_ specifying the cor scale. The default value is 1.
        
        **`dSearchRange`**
        : A _Double_ specifying the search range. The default value is 0.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iMappingMethod`**
        : An _Integer_ specifying the mapping method. The default value is 0.
        
        **`iSubmodelBCMappingType`**
        : An _Integer_ specifying the submodel c mapping type. The default value is 2.
        
        **`iMappingFromStepNo`**
        : An _Integer_ specifying the mapping from step no. The default value is 0.
        
        **`bSetADVCFile`**
        : A _Boolean_ specifying the set ADVC file. The default value is False.
        
        **`strADVCResultFile`**
        : A _String_ specifying the ADVC result file. The default value is "".
        
        **`bSetDetATol`**
        : A _Boolean_ specifying the set det a tolerance. The default value is False.
        
        **`dDetATol`**
        : A _Double_ specifying the det a tolerance. The default value is DFLT_DBL.
        
        **`bSetElementSet`**
        : A _Boolean_ specifying the set element set. The default value is False.
        
        **`strElementSet`**
        : A _String_ specifying the element set. The default value is "".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.TemperatureLoads.WholeMapping(strName="TemperatureLoadsWholeMapping", crlTarget=[], iMAPPos=0, iViewCp=0, iCp=1, iSrcType=0, iMappedCpIndexArr0=0, iMappedCpIndexArr1=0, iDScaleFactor=1, posOffset=[0,0,0], posRotate=[0,0,0], dCorScale=1, dSearchRange=0, strPath="", crEdit=None, iMappingMethod=0, iSubmodelBCMappingType=2, iMappingFromStepNo=0, bSetADVCFile=False, strADVCResultFile="", bSetDetATol=False, dDetATol=DFLT_DBL, bSetElementSet=False, strElementSet="")
        ```
        
        """
        message = "BoundaryConditions.TemperatureLoads.WholeMapping('{}',{},{},{},{},{},{},{},{},{},{},{},{},'{}',{},{},{},{},{},'{}',{},{},{},'{}')".format(strName, crlTarget, iMAPPos, iViewCp, iCp, iSrcType, iMappedCpIndexArr0, iMappedCpIndexArr1, iDScaleFactor, posOffset, posRotate, dCorScale, dSearchRange, strPath, crEdit, iMappingMethod, iSubmodelBCMappingType, iMappingFromStepNo, bSetADVCFile, strADVCResultFile, bSetDetATol, dDetATol, bSetElementSet, strElementSet)
        return JPT_RUN_LINE(message)

    def LbcInitialTemperature(self, strName="InitialTemperature1", iType=0, dFTemp=0.0, strFilePathName="", bUseDefault=False, crTable=None, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Boundary Conditions Lbc Initial Temperature
        
        ## Syntax
        
        ```python
        BoundaryConditions.TemperatureLoads.LbcInitialTemperature(strName="InitialTemperature1", iType=0, dFTemp=0.0, strFilePathName="", bUseDefault=False, crTable=None, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-InitialTemperature`
        
        Ribbon: {menuselection}`BoundaryConditions --> TemperatureLoads --> LbcInitialTemperature`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "InitialTemperature1".
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 0.
        
        **`dFTemp`**
        : A _Double_ specifying the temperature. The default value is 0.0.
        
        **`strFilePathName`**
        : A _String_ specifying the file path name. The default value is "".
        
        **`bUseDefault`**
        : A _Boolean_ specifying the use default. The default value is False.
        
        **`crTable`**
        : A _Cursor_ specifying the table. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.TemperatureLoads.LbcInitialTemperature(strName="InitialTemperature1", iType=0, dFTemp=0.0, strFilePathName="", bUseDefault=False, crTable=None, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.TemperatureLoads.LbcInitialTemperature('{}',{},{},'{}',{},{},{},{})".format(strName, iType, dFTemp, strFilePathName, bUseDefault, crTable, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

class BoundaryConditions_BodyLoads:
    CentrifugalForce = BodyLoads_CentrifugalForce()

    def Gravity(self, strName, dlGravity, crCurCoord=None, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        create gravity
        
        ## Syntax
        
        ```python
        BoundaryConditions.BodyLoads.Gravity(strName, dlGravity, crCurCoord=None, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-Gravity`
        
        Ribbon: {menuselection}`BoundaryConditions --> BodyLoads --> Gravity`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`dlGravity`**
        : A _Double List_ specifying the gravity. This is a required input.
        
        **`crCurCoord`**
        : A _Cursor_ specifying the cur coordinate. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.BodyLoads.Gravity(strName, dlGravity, crCurCoord=None, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.BodyLoads.Gravity('{}',{},{},{},{})".format(strName, dlGravity, crCurCoord, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

class BoundaryConditions_Force:
    FunctionLoadCylinder = Force_FunctionLoadCylinder()

    NonlinearForce = Force_NonlinearForce()

    def General(self, strName, vecForce=[DFLT_DBL, DFLT_DBL, DFLT_DBL], vecMoment=[DFLT_DBL, DFLT_DBL, DFLT_DBL], iEnArrowDir=0, iDistributionMethod=0, crCurCoord=None, crTable=None, crNodeSet=None, dFPhase=0.0, dFDelay=0.0, crPhaseTable=None, strFormula1="", strFormula2="", strFormula3="", strFormula4="", strFormula5="", strFormula6="", crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        create force general
        
        ## Syntax
        
        ```python
        BoundaryConditions.Force.General(strName, vecForce=[DFLT_DBL, DFLT_DBL, DFLT_DBL], vecMoment=[DFLT_DBL, DFLT_DBL, DFLT_DBL], iEnArrowDir=0, iDistributionMethod=0, crCurCoord=None, crTable=None, crNodeSet=None, dFPhase=0.0, dFDelay=0.0, crPhaseTable=None, strFormula1="", strFormula2="", strFormula3="", strFormula4="", strFormula5="", strFormula6="", crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-ForceGeneral`
        
        Ribbon: {menuselection}`BoundaryConditions --> Force --> General`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`vecForce`**
        : A _Vector_ specifying the force. The default value is [DFLT_DBL, DFLT_DBL, DFLT_DBL].
        
        **`vecMoment`**
        : A _Vector_ specifying the moment. The default value is [DFLT_DBL, DFLT_DBL, DFLT_DBL].
        
        **`iEnArrowDir`**
        : An _Integer_ specifying the en arrow direction. The default value is 0.
        
        **`iDistributionMethod`**
        : An _Integer_ specifying the distribution method. The default value is 0.
        
        **`crCurCoord`**
        : A _Cursor_ specifying the cur coordinate. The default value is None.
        
        **`crTable`**
        : A _Cursor_ specifying the table. The default value is None.
        
        **`crNodeSet`**
        : A _Cursor_ specifying the node set. The default value is None.
        
        **`dFPhase`**
        : A _Double_ specifying the phase. The default value is 0.0.
        
        **`dFDelay`**
        : A _Double_ specifying the delay. The default value is 0.0.
        
        **`crPhaseTable`**
        : A _Cursor_ specifying the phase table. The default value is None.
        
        **`strFormula1`**
        : A _String_ specifying the formula1. The default value is "".
        
        **`strFormula2`**
        : A _String_ specifying the formula2. The default value is "".
        
        **`strFormula3`**
        : A _String_ specifying the formula3. The default value is "".
        
        **`strFormula4`**
        : A _String_ specifying the formula4. The default value is "".
        
        **`strFormula5`**
        : A _String_ specifying the formula5. The default value is "".
        
        **`strFormula6`**
        : A _String_ specifying the formula6. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.Force.General(strName, vecForce=[DFLT_DBL, DFLT_DBL, DFLT_DBL], vecMoment=[DFLT_DBL, DFLT_DBL, DFLT_DBL], iEnArrowDir=0, iDistributionMethod=0, crCurCoord=None, crTable=None, crNodeSet=None, dFPhase=0.0, dFDelay=0.0, crPhaseTable=None, strFormula1="", strFormula2="", strFormula3="", strFormula4="", strFormula5="", strFormula6="", crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.Force.General('{}',{},{},{},'{}',{},{},{},{},{},{},'{}','{}','{}','{}','{}','{}',{},{})".format(strName, vecForce, vecMoment, iEnArrowDir, iDistributionMethod, crCurCoord, crTable, crNodeSet, dFPhase, dFDelay, crPhaseTable, strFormula1, strFormula2, strFormula3, strFormula4, strFormula5, strFormula6, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def ForceNormalDirection(self, strName, vecForce=[DFLT_DBL, DFLT_DBL, DFLT_DBL], iEnArrowDir=0, iDistributionMethod=0, crCurCoord=None, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Create Force (normal direction)
        
        ## Syntax
        
        ```python
        BoundaryConditions.Force.ForceNormalDirection(strName, vecForce=[DFLT_DBL, DFLT_DBL, DFLT_DBL], iEnArrowDir=0, iDistributionMethod=0, crCurCoord=None, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-ForceNormalDirection`
        
        Ribbon: {menuselection}`BoundaryConditions --> Force --> ForceNormalDirection`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`vecForce`**
        : A _Vector_ specifying the force. The default value is [DFLT_DBL, DFLT_DBL, DFLT_DBL].
        
        **`iEnArrowDir`**
        : An _Integer_ specifying the en arrow direction. The default value is 0.
        
        **`iDistributionMethod`**
        : An _Integer_ specifying the distribution method. The default value is 0.
        
        **`crCurCoord`**
        : A _Cursor_ specifying the cur coordinate. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.Force.ForceNormalDirection(strName, vecForce=[DFLT_DBL, DFLT_DBL, DFLT_DBL], iEnArrowDir=0, iDistributionMethod=0, crCurCoord=None, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.Force.ForceNormalDirection('{}',{},{},'{}',{},{},{})".format(strName, vecForce, iEnArrowDir, iDistributionMethod, crCurCoord, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

class BoundaryConditions_InitialNodalValue:
    InitialAngularVelocity = InitialNodalValue_InitialAngularVelocity()

    def Displacement(self, strName="InitialDisplacement1", iType=0, vecInit=[DFLT_DBL,DFLT_DBL,DFLT_DBL], bSelNode=False, crNodeSet=None, crTable=None, crCoord=None, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Create Initial Dynamic
        
        ## Syntax
        
        ```python
        BoundaryConditions.InitialNodalValue.Displacement(strName="InitialDisplacement1", iType=0, vecInit=[DFLT_DBL,DFLT_DBL,DFLT_DBL], bSelNode=False, crNodeSet=None, crTable=None, crCoord=None, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-InitialDynamic`
        
        Ribbon: {menuselection}`BoundaryConditions --> InitialNodalValue --> Displacement`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "InitialDisplacement1".
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 0.
        
        **`vecInit`**
        : A _Vector_ specifying the initial. The default value is [DFLT_DBL,DFLT_DBL,DFLT_DBL].
        
        **`bSelNode`**
        : A _Boolean_ specifying the selection node. The default value is False.
        
        **`crNodeSet`**
        : A _Cursor_ specifying the node set. The default value is None.
        
        **`crTable`**
        : A _Cursor_ specifying the table. The default value is None.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.InitialNodalValue.Displacement(strName="InitialDisplacement1", iType=0, vecInit=[DFLT_DBL,DFLT_DBL,DFLT_DBL], bSelNode=False, crNodeSet=None, crTable=None, crCoord=None, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.InitialNodalValue.Displacement('{}',{},{},{},{},{},{},{},{})".format(strName, iType, vecInit, bSelNode, crNodeSet, crTable, crCoord, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def Velocity(self, strName="InitialRotationAngle1", stData=LBC_DYNAMIC_INITIAL_CONDITION_DATA(), crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        BoundaryConditions.InitialNodalValue.Velocity(strName="InitialRotationAngle1", stData=LBC_DYNAMIC_INITIAL_CONDITION_DATA(), crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-InitialDynamic`
        
        Ribbon: {menuselection}`BoundaryConditions --> InitialNodalValue --> Velocity`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "InitialRotationAngle1".
        
        **`stData`**
        : A _ST_DATA_ specifying the data. The default value is LBC_DYNAMIC_INITIAL_CONDITION_DATA().
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.InitialNodalValue.Velocity(strName="InitialRotationAngle1", stData=LBC_DYNAMIC_INITIAL_CONDITION_DATA(), crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.InitialNodalValue.Velocity('{}',{},{},{})".format(strName, stData, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def RotationAngle(self, strName="InitialVelocity1", stData=LBC_DYNAMIC_INITIAL_CONDITION_DATA(), crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        BoundaryConditions.InitialNodalValue.RotationAngle(strName="InitialVelocity1", stData=LBC_DYNAMIC_INITIAL_CONDITION_DATA(), crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-InitialDynamic`
        
        Ribbon: {menuselection}`BoundaryConditions --> InitialNodalValue --> RotationAngle`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "InitialVelocity1".
        
        **`stData`**
        : A _ST_DATA_ specifying the data. The default value is LBC_DYNAMIC_INITIAL_CONDITION_DATA().
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.InitialNodalValue.RotationAngle(strName="InitialVelocity1", stData=LBC_DYNAMIC_INITIAL_CONDITION_DATA(), crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.InitialNodalValue.RotationAngle('{}',{},{},{})".format(strName, stData, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

class BoltConnections_Edge:
    def TypeC(self, crlEdgeCur1, crlEdgeCur2, strRbeName="RBE", dPlaneTol=20.0, dMaxBoltHeight=100.0, iConnectionType=0, iCoincidentNodes=1, dTolerance=0.0, iGround=0, dStiffnessX=0.0, dStiffnessY=0.0, dStiffnessZ=0.0, iLocalStiffUnit=0, dRotateStiffX=0.0, dRotateStiffY=0.0, dRotateStiffZ=0.0, iLocalRotateStiffUnit=0, dDampCoef=0.0, dStressCoef=0.0, crCurCoord=None, iTopRbeType=0, dTopPitch=10, dTopRemoveDepth=0.0, iBotRbeType=0, dBotPitch=10, dBotRemoveDepth=0.0):
        r"""
        ## Description
        
        create bolt connections by TypeC edge.
        
        ## Syntax
        
        ```python
        Connections.BoltConnections.Edge.TypeC(crlEdgeCur1, crlEdgeCur2, strRbeName="RBE", dPlaneTol=20.0, dMaxBoltHeight=100.0, iConnectionType=0, iCoincidentNodes=1, dTolerance=0.0, iGround=0, dStiffnessX=0.0, dStiffnessY=0.0, dStiffnessZ=0.0, iLocalStiffUnit=0, dRotateStiffX=0.0, dRotateStiffY=0.0, dRotateStiffZ=0.0, iLocalRotateStiffUnit=0, dDampCoef=0.0, dStressCoef=0.0, crCurCoord=None, iTopRbeType=0, dTopPitch=10, dTopRemoveDepth=0.0, iBotRbeType=0, dBotPitch=10, dBotRemoveDepth=0.0)
        ```
        
        Macro: {ref}`Macro-Connections-Lbc_Bolt_Modeling_Type_C_Edge`
        
        Ribbon: {menuselection}`Connections --> BoltConnections --> Edge --> TypeC`
        
        ## Inputs
        
        **`crlEdgeCur1`**
        : A _Cursor List_ specifying the edge cur1. This is a required input.
        
        **`crlEdgeCur2`**
        : A _Cursor List_ specifying the edge cur2. This is a required input.
        
        **`strRbeName`**
        : A _String_ specifying the rbe name. The default value is "RBE".
        
        **`dPlaneTol`**
        : A _Double_ specifying the plane tolerance. The default value is 20.0.
        
        **`dMaxBoltHeight`**
        : A _Double_ specifying the maximum bolt height. The default value is 100.0.
        
        **`iConnectionType`**
        : An _Integer_ specifying the connection type. The default value is 0.
        
        **`iCoincidentNodes`**
        : An _Integer_ specifying the coincident nodes. The default value is 1.
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. The default value is 0.0.
        
        **`iGround`**
        : An _Integer_ specifying the ground. The default value is 0.
        
        **`dStiffnessX`**
        : A _Double_ specifying the stiffness x. The default value is 0.0.
        
        **`dStiffnessY`**
        : A _Double_ specifying the stiffness y. The default value is 0.0.
        
        **`dStiffnessZ`**
        : A _Double_ specifying the stiffness z. The default value is 0.0.
        
        **`iLocalStiffUnit`**
        : An _Integer_ specifying the local stiff unit. The default value is 0.
        
        **`dRotateStiffX`**
        : A _Double_ specifying the rotate stiff x. The default value is 0.0.
        
        **`dRotateStiffY`**
        : A _Double_ specifying the rotate stiff y. The default value is 0.0.
        
        **`dRotateStiffZ`**
        : A _Double_ specifying the rotate stiff z. The default value is 0.0.
        
        **`iLocalRotateStiffUnit`**
        : An _Integer_ specifying the local rotate stiff unit. The default value is 0.
        
        **`dDampCoef`**
        : A _Double_ specifying the damp coefficient . The default value is 0.0.
        
        **`dStressCoef`**
        : A _Double_ specifying the stress coefficient . The default value is 0.0.
        
        **`crCurCoord`**
        : A _Cursor_ specifying the cur coordinate. The default value is None.
        
        **`iTopRbeType`**
        : An _Integer_ specifying the top rbe type. The default value is 0.
        
        **`dTopPitch`**
        : A _Double_ specifying the top pitch. The default value is 10.
        
        **`dTopRemoveDepth`**
        : A _Double_ specifying the top remove depth. The default value is 0.0.
        
        **`iBotRbeType`**
        : An _Integer_ specifying the bot rbe type. The default value is 0.
        
        **`dBotPitch`**
        : A _Double_ specifying the bot pitch. The default value is 10.
        
        **`dBotRemoveDepth`**
        : A _Double_ specifying the bot remove depth. The default value is 0.0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.BoltConnections.Edge.TypeC(crlEdgeCur1, crlEdgeCur2, strRbeName="RBE", dPlaneTol=20.0, dMaxBoltHeight=100.0, iConnectionType=0, iCoincidentNodes=1, dTolerance=0.0, iGround=0, dStiffnessX=0.0, dStiffnessY=0.0, dStiffnessZ=0.0, iLocalStiffUnit=0, dRotateStiffX=0.0, dRotateStiffY=0.0, dRotateStiffZ=0.0, iLocalRotateStiffUnit=0, dDampCoef=0.0, dStressCoef=0.0, crCurCoord=None, iTopRbeType=0, dTopPitch=10, dTopRemoveDepth=0.0, iBotRbeType=0, dBotPitch=10, dBotRemoveDepth=0.0)
        ```
        
        """
        message = "Connections.BoltConnections.Edge.TypeC({},{},'{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(crlEdgeCur1, crlEdgeCur2, strRbeName, dPlaneTol, dMaxBoltHeight, iConnectionType, iCoincidentNodes, dTolerance, iGround, dStiffnessX, dStiffnessY, dStiffnessZ, iLocalStiffUnit, dRotateStiffX, dRotateStiffY, dRotateStiffZ, iLocalRotateStiffUnit, dDampCoef, dStressCoef, crCurCoord, iTopRbeType, dTopPitch, dTopRemoveDepth, iBotRbeType, dBotPitch, dBotRemoveDepth)
        return JPT_RUN_LINE(message)

    def TypeB(self, crlEdgeCur1, crlEdgeCur2, strRbeName="RBE", strBarName="", iShaftType=0, crCurBarProperty=None, dPlaneTol=20.0, dMaxBoltHeight=100.0, bPretensionLoad=False, iSolverType=0, dForceValue=0.0, iPreTenDof=0, crCurCoord=None, iBoltFixLength=0, iTopSlot=0, dRBE1=0.0, dRBE2=0.0, dBotDtDia=0.0, dPitch=10.0, iBotRbeConnType=0, bIfCreate2ADVCStaticProcessForBoltFixLength=False):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Connections.BoltConnections.Edge.TypeB(crlEdgeCur1, crlEdgeCur2, strRbeName="RBE", strBarName="", iShaftType=0, crCurBarProperty=None, dPlaneTol=20.0, dMaxBoltHeight=100.0, bPretensionLoad=False, iSolverType=0, dForceValue=0.0, iPreTenDof=0, crCurCoord=None, iBoltFixLength=0, iTopSlot=0, dRBE1=0.0, dRBE2=0.0, dBotDtDia=0.0, dPitch=10.0, iBotRbeConnType=0, bIfCreate2ADVCStaticProcessForBoltFixLength=False)
        ```
        
        Macro: {ref}`Macro-Connections-Lbc_Bolt_Modeling_Type_B_Edge`
        
        Ribbon: {menuselection}`Connections --> BoltConnections --> Edge --> TypeB`
        
        ## Inputs
        
        **`crlEdgeCur1`**
        : A _Cursor List_ specifying the edge cur1. This is a required input.
        
        **`crlEdgeCur2`**
        : A _Cursor List_ specifying the edge cur2. This is a required input.
        
        **`strRbeName`**
        : A _String_ specifying the rbe name. The default value is "RBE".
        
        **`strBarName`**
        : A _String_ specifying the bar name. The default value is "".
        
        **`iShaftType`**
        : An _Integer_ specifying the shaft type. The default value is 0.
        
        **`crCurBarProperty`**
        : A _Cursor_ specifying the cur bar property. The default value is None.
        
        **`dPlaneTol`**
        : A _Double_ specifying the plane tolerance. The default value is 20.0.
        
        **`dMaxBoltHeight`**
        : A _Double_ specifying the maximum bolt height. The default value is 100.0.
        
        **`bPretensionLoad`**
        : A _Boolean_ specifying the pretension load. The default value is False.
        
        **`iSolverType`**
        : An _Integer_ specifying the solver type. The default value is 0.
        
        **`dForceValue`**
        : A _Double_ specifying the force value. The default value is 0.0.
        
        **`iPreTenDof`**
        : An _Integer_ specifying the pre ten dof. The default value is 0.
        
        **`crCurCoord`**
        : A _Cursor_ specifying the cur coordinate. The default value is None.
        
        **`iBoltFixLength`**
        : An _Integer_ specifying the bolt fix length. The default value is 0.
        
        **`iTopSlot`**
        : An _Integer_ specifying the top slot. The default value is 0.
        
        **`dRBE1`**
        : A _Double_ specifying the r e1. The default value is 0.0.
        
        **`dRBE2`**
        : A _Double_ specifying the r e2. The default value is 0.0.
        
        **`dBotDtDia`**
        : A _Double_ specifying the bot data dia. The default value is 0.0.
        
        **`dPitch`**
        : A _Double_ specifying the pitch. The default value is 10.0.
        
        **`iBotRbeConnType`**
        : An _Integer_ specifying the bot rbe conn type. The default value is 0.
        
        **`bIfCreate2ADVCStaticProcessForBoltFixLength`**
        : A _Boolean_ specifying the if create2 ADVC static process for bolt fix length. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.BoltConnections.Edge.TypeB(crlEdgeCur1, crlEdgeCur2, strRbeName="RBE", strBarName="", iShaftType=0, crCurBarProperty=None, dPlaneTol=20.0, dMaxBoltHeight=100.0, bPretensionLoad=False, iSolverType=0, dForceValue=0.0, iPreTenDof=0, crCurCoord=None, iBoltFixLength=0, iTopSlot=0, dRBE1=0.0, dRBE2=0.0, dBotDtDia=0.0, dPitch=10.0, iBotRbeConnType=0, bIfCreate2ADVCStaticProcessForBoltFixLength=False)
        ```
        
        """
        message = "Connections.BoltConnections.Edge.TypeB({},{},'{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(crlEdgeCur1, crlEdgeCur2, strRbeName, strBarName, iShaftType, crCurBarProperty, dPlaneTol, dMaxBoltHeight, bPretensionLoad, iSolverType, dForceValue, iPreTenDof, crCurCoord, iBoltFixLength, iTopSlot, dRBE1, dRBE2, dBotDtDia, dPitch, iBotRbeConnType, bIfCreate2ADVCStaticProcessForBoltFixLength)
        return JPT_RUN_LINE(message)

    def TypeD(self, crlEdgeCur1, crlEdgeCur2, strMpcName="MPC", dConnRadius=0.0, dPlaneTol=20.0):
        r"""
        ## Description
        
        create bolt connection typeD
        
        ## Syntax
        
        ```python
        Connections.BoltConnections.Edge.TypeD(crlEdgeCur1, crlEdgeCur2, strMpcName="MPC", dConnRadius=0.0, dPlaneTol=20.0)
        ```
        
        Macro: {ref}`Macro-Connections-Lbc_Bolt_Modeling_Type_D`
        
        Ribbon: {menuselection}`Connections --> BoltConnections --> Edge --> TypeD`
        
        ## Inputs
        
        **`crlEdgeCur1`**
        : A _Cursor List_ specifying the edge cur1. This is a required input.
        
        **`crlEdgeCur2`**
        : A _Cursor List_ specifying the edge cur2. This is a required input.
        
        **`strMpcName`**
        : A _String_ specifying the mpc name. The default value is "MPC".
        
        **`dConnRadius`**
        : A _Double_ specifying the conn radius. The default value is 0.0.
        
        **`dPlaneTol`**
        : A _Double_ specifying the plane tolerance. The default value is 20.0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.BoltConnections.Edge.TypeD(crlEdgeCur1, crlEdgeCur2, strMpcName="MPC", dConnRadius=0.0, dPlaneTol=20.0)
        ```
        
        """
        message = "Connections.BoltConnections.Edge.TypeD({},{},'{}',{},{})".format(crlEdgeCur1, crlEdgeCur2, strMpcName, dConnRadius, dPlaneTol)
        return JPT_RUN_LINE(message)

    def TypeA(self, crlEdgeCur1, crlEdgeCur2, strRbeName="RBE", strBarName="", iShaftType=0, crCurBarProperty=None, dPlaneTol=20.0, dMaxBoltHeight=100.0, bPretensionLoad=False, iSolverType=0, dForceValue=0.0, iPreTenDof=0, crCurCoord=None, iBoltFixLength=0, iTopSlot=0, dRBE1=0.0, iBotSlot=0, dRBE2=0.0, bIsCreate2ADVCStaticProcessForFixLength=False):
        r"""
        ## Description
        
        Create Lbc TypeA Bolt Edge method
        
        ## Syntax
        
        ```python
        Connections.BoltConnections.Edge.TypeA(crlEdgeCur1, crlEdgeCur2, strRbeName="RBE", strBarName="", iShaftType=0, crCurBarProperty=None, dPlaneTol=20.0, dMaxBoltHeight=100.0, bPretensionLoad=False, iSolverType=0, dForceValue=0.0, iPreTenDof=0, crCurCoord=None, iBoltFixLength=0, iTopSlot=0, dRBE1=0.0, iBotSlot=0, dRBE2=0.0, bIsCreate2ADVCStaticProcessForFixLength=False)
        ```
        
        Macro: {ref}`Macro-Connections-Lbc_Bolt_Modeling_Type_A_Edge`
        
        Ribbon: {menuselection}`Connections --> BoltConnections --> Edge --> TypeA`
        
        ## Inputs
        
        **`crlEdgeCur1`**
        : A _Cursor List_ specifying the edge cur1. This is a required input.
        
        **`crlEdgeCur2`**
        : A _Cursor List_ specifying the edge cur2. This is a required input.
        
        **`strRbeName`**
        : A _String_ specifying the rbe name. The default value is "RBE".
        
        **`strBarName`**
        : A _String_ specifying the bar name. The default value is "".
        
        **`iShaftType`**
        : An _Integer_ specifying the shaft type. The default value is 0.
        
        **`crCurBarProperty`**
        : A _Cursor_ specifying the cur bar property. The default value is None.
        
        **`dPlaneTol`**
        : A _Double_ specifying the plane tolerance. The default value is 20.0.
        
        **`dMaxBoltHeight`**
        : A _Double_ specifying the maximum bolt height. The default value is 100.0.
        
        **`bPretensionLoad`**
        : A _Boolean_ specifying the pretension load. The default value is False.
        
        **`iSolverType`**
        : An _Integer_ specifying the solver type. The default value is 0.
        
        **`dForceValue`**
        : A _Double_ specifying the force value. The default value is 0.0.
        
        **`iPreTenDof`**
        : An _Integer_ specifying the pre ten dof. The default value is 0.
        
        **`crCurCoord`**
        : A _Cursor_ specifying the cur coordinate. The default value is None.
        
        **`iBoltFixLength`**
        : An _Integer_ specifying the bolt fix length. The default value is 0.
        
        **`iTopSlot`**
        : An _Integer_ specifying the top slot. The default value is 0.
        
        **`dRBE1`**
        : A _Double_ specifying the r e1. The default value is 0.0.
        
        **`iBotSlot`**
        : An _Integer_ specifying the bot slot. The default value is 0.
        
        **`dRBE2`**
        : A _Double_ specifying the r e2. The default value is 0.0.
        
        **`bIsCreate2ADVCStaticProcessForFixLength`**
        : A _Boolean_ specifying the is create2 ADVC static process for fix length. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.BoltConnections.Edge.TypeA(crlEdgeCur1, crlEdgeCur2, strRbeName="RBE", strBarName="", iShaftType=0, crCurBarProperty=None, dPlaneTol=20.0, dMaxBoltHeight=100.0, bPretensionLoad=False, iSolverType=0, dForceValue=0.0, iPreTenDof=0, crCurCoord=None, iBoltFixLength=0, iTopSlot=0, dRBE1=0.0, iBotSlot=0, dRBE2=0.0, bIsCreate2ADVCStaticProcessForFixLength=False)
        ```
        
        """
        message = "Connections.BoltConnections.Edge.TypeA({},{},'{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(crlEdgeCur1, crlEdgeCur2, strRbeName, strBarName, iShaftType, crCurBarProperty, dPlaneTol, dMaxBoltHeight, bPretensionLoad, iSolverType, dForceValue, iPreTenDof, crCurCoord, iBoltFixLength, iTopSlot, dRBE1, iBotSlot, dRBE2, bIsCreate2ADVCStaticProcessForFixLength)
        return JPT_RUN_LINE(message)

class BoltConnections_Face:
    def TypeC(self, crlFaceCur1, crlFaceCur2, strRbeName="RBE", dPlaneTol=20, dMaxBoltHeight=100, dMaxDiameter=0, dMinDiameter=0, iConnectionType=0, iCoincidentNodes=1, dTolerance=0.0, iGround=0, dStiffnessX=0.0, dStiffnessY=0.0, dStiffnessZ=0.0, iLocalStiffUnit=0, dRotateStiffX=0.0, dRotateStiffY=0.0, dRotateStiffZ=0.0, iLocalRotateStiffUnit=0, dDampCoef=0.0, dStressCoef=0.0, crCurCoord=None, iTopRbeType=0, dTopPitch=10, dTopRemoveDepth=0.0, iBotRbeType=0, dBotPitch=10, dBotRemoveDepth=0.0):
        r"""
        ## Description
        
        Create Lbc TypeC Bolt Face method
        
        ## Syntax
        
        ```python
        Connections.BoltConnections.Face.TypeC(crlFaceCur1, crlFaceCur2, strRbeName="RBE", dPlaneTol=20, dMaxBoltHeight=100, dMaxDiameter=0, dMinDiameter=0, iConnectionType=0, iCoincidentNodes=1, dTolerance=0.0, iGround=0, dStiffnessX=0.0, dStiffnessY=0.0, dStiffnessZ=0.0, iLocalStiffUnit=0, dRotateStiffX=0.0, dRotateStiffY=0.0, dRotateStiffZ=0.0, iLocalRotateStiffUnit=0, dDampCoef=0.0, dStressCoef=0.0, crCurCoord=None, iTopRbeType=0, dTopPitch=10, dTopRemoveDepth=0.0, iBotRbeType=0, dBotPitch=10, dBotRemoveDepth=0.0)
        ```
        
        Macro: {ref}`Macro-Connections-Lbc_Bolt_Modeling_Type_C_Face`
        
        Ribbon: {menuselection}`Connections --> BoltConnections --> Face --> TypeC`
        
        ## Inputs
        
        **`crlFaceCur1`**
        : A _Cursor List_ specifying the face cur1. This is a required input.
        
        **`crlFaceCur2`**
        : A _Cursor List_ specifying the face cur2. This is a required input.
        
        **`strRbeName`**
        : A _String_ specifying the rbe name. The default value is "RBE".
        
        **`dPlaneTol`**
        : A _Double_ specifying the plane tolerance. The default value is 20.
        
        **`dMaxBoltHeight`**
        : A _Double_ specifying the maximum bolt height. The default value is 100.
        
        **`dMaxDiameter`**
        : A _Double_ specifying the maximum diameter. The default value is 0.
        
        **`dMinDiameter`**
        : A _Double_ specifying the minimum diameter. The default value is 0.
        
        **`iConnectionType`**
        : An _Integer_ specifying the connection type. The default value is 0.
        
        **`iCoincidentNodes`**
        : An _Integer_ specifying the coincident nodes. The default value is 1.
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. The default value is 0.0.
        
        **`iGround`**
        : An _Integer_ specifying the ground. The default value is 0.
        
        **`dStiffnessX`**
        : A _Double_ specifying the stiffness x. The default value is 0.0.
        
        **`dStiffnessY`**
        : A _Double_ specifying the stiffness y. The default value is 0.0.
        
        **`dStiffnessZ`**
        : A _Double_ specifying the stiffness z. The default value is 0.0.
        
        **`iLocalStiffUnit`**
        : An _Integer_ specifying the local stiff unit. The default value is 0.
        
        **`dRotateStiffX`**
        : A _Double_ specifying the rotate stiff x. The default value is 0.0.
        
        **`dRotateStiffY`**
        : A _Double_ specifying the rotate stiff y. The default value is 0.0.
        
        **`dRotateStiffZ`**
        : A _Double_ specifying the rotate stiff z. The default value is 0.0.
        
        **`iLocalRotateStiffUnit`**
        : An _Integer_ specifying the local rotate stiff unit. The default value is 0.
        
        **`dDampCoef`**
        : A _Double_ specifying the damp coefficient . The default value is 0.0.
        
        **`dStressCoef`**
        : A _Double_ specifying the stress coefficient . The default value is 0.0.
        
        **`crCurCoord`**
        : A _Cursor_ specifying the cur coordinate. The default value is None.
        
        **`iTopRbeType`**
        : An _Integer_ specifying the top rbe type. The default value is 0.
        
        **`dTopPitch`**
        : A _Double_ specifying the top pitch. The default value is 10.
        
        **`dTopRemoveDepth`**
        : A _Double_ specifying the top remove depth. The default value is 0.0.
        
        **`iBotRbeType`**
        : An _Integer_ specifying the bot rbe type. The default value is 0.
        
        **`dBotPitch`**
        : A _Double_ specifying the bot pitch. The default value is 10.
        
        **`dBotRemoveDepth`**
        : A _Double_ specifying the bot remove depth. The default value is 0.0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.BoltConnections.Face.TypeC(crlFaceCur1, crlFaceCur2, strRbeName="RBE", dPlaneTol=20, dMaxBoltHeight=100, dMaxDiameter=0, dMinDiameter=0, iConnectionType=0, iCoincidentNodes=1, dTolerance=0.0, iGround=0, dStiffnessX=0.0, dStiffnessY=0.0, dStiffnessZ=0.0, iLocalStiffUnit=0, dRotateStiffX=0.0, dRotateStiffY=0.0, dRotateStiffZ=0.0, iLocalRotateStiffUnit=0, dDampCoef=0.0, dStressCoef=0.0, crCurCoord=None, iTopRbeType=0, dTopPitch=10, dTopRemoveDepth=0.0, iBotRbeType=0, dBotPitch=10, dBotRemoveDepth=0.0)
        ```
        
        """
        message = "Connections.BoltConnections.Face.TypeC({},{},'{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(crlFaceCur1, crlFaceCur2, strRbeName, dPlaneTol, dMaxBoltHeight, dMaxDiameter, dMinDiameter, iConnectionType, iCoincidentNodes, dTolerance, iGround, dStiffnessX, dStiffnessY, dStiffnessZ, iLocalStiffUnit, dRotateStiffX, dRotateStiffY, dRotateStiffZ, iLocalRotateStiffUnit, dDampCoef, dStressCoef, crCurCoord, iTopRbeType, dTopPitch, dTopRemoveDepth, iBotRbeType, dBotPitch, dBotRemoveDepth)
        return JPT_RUN_LINE(message)

    def TypeB(self, crlFaceCur1, crlFaceCur2, strRbeName="RBE", strBarName="", iShaftType=0, crCurBarProperty=None, dPlaneTol=20.0, dMaxBoltHeight=100.0, dMaxDiameter=0.0, dMinDiameter=0.0, bPretensionLoad=False, iSolverType=0, dForceValue=0.0, iPreTenDof=0, crCurCoord=None, iBoltFixLength=0, iTopSlot=0, dRBE1=0.0, dRBE2=0.0, dBotDtDia=0.0, dPitch=10.0, iBotRbeConnType=0, dScale1=1.10, bIsCreate2ADVCStaticProcessForFixLength=False):
        r"""
        ## Description
        
        Create Lbc TypeB Bolt Face method
        
        ## Syntax
        
        ```python
        Connections.BoltConnections.Face.TypeB(crlFaceCur1, crlFaceCur2, strRbeName="RBE", strBarName="", iShaftType=0, crCurBarProperty=None, dPlaneTol=20.0, dMaxBoltHeight=100.0, dMaxDiameter=0.0, dMinDiameter=0.0, bPretensionLoad=False, iSolverType=0, dForceValue=0.0, iPreTenDof=0, crCurCoord=None, iBoltFixLength=0, iTopSlot=0, dRBE1=0.0, dRBE2=0.0, dBotDtDia=0.0, dPitch=10.0, iBotRbeConnType=0, dScale1=1.10, bIsCreate2ADVCStaticProcessForFixLength=False)
        ```
        
        Macro: {ref}`Macro-Connections-Lbc_Bolt_Modeling_Type_B_Face`
        
        Ribbon: {menuselection}`Connections --> BoltConnections --> Face --> TypeB`
        
        ## Inputs
        
        **`crlFaceCur1`**
        : A _Cursor List_ specifying the face cur1. This is a required input.
        
        **`crlFaceCur2`**
        : A _Cursor List_ specifying the face cur2. This is a required input.
        
        **`strRbeName`**
        : A _String_ specifying the rbe name. The default value is "RBE".
        
        **`strBarName`**
        : A _String_ specifying the bar name. The default value is "".
        
        **`iShaftType`**
        : An _Integer_ specifying the shaft type. The default value is 0.
        
        **`crCurBarProperty`**
        : A _Cursor_ specifying the cur bar property. The default value is None.
        
        **`dPlaneTol`**
        : A _Double_ specifying the plane tolerance. The default value is 20.0.
        
        **`dMaxBoltHeight`**
        : A _Double_ specifying the maximum bolt height. The default value is 100.0.
        
        **`dMaxDiameter`**
        : A _Double_ specifying the maximum diameter. The default value is 0.0.
        
        **`dMinDiameter`**
        : A _Double_ specifying the minimum diameter. The default value is 0.0.
        
        **`bPretensionLoad`**
        : A _Boolean_ specifying the pretension load. The default value is False.
        
        **`iSolverType`**
        : An _Integer_ specifying the solver type. The default value is 0.
        
        **`dForceValue`**
        : A _Double_ specifying the force value. The default value is 0.0.
        
        **`iPreTenDof`**
        : An _Integer_ specifying the pre ten dof. The default value is 0.
        
        **`crCurCoord`**
        : A _Cursor_ specifying the cur coordinate. The default value is None.
        
        **`iBoltFixLength`**
        : An _Integer_ specifying the bolt fix length. The default value is 0.
        
        **`iTopSlot`**
        : An _Integer_ specifying the top slot. The default value is 0.
        
        **`dRBE1`**
        : A _Double_ specifying the r e1. The default value is 0.0.
        
        **`dRBE2`**
        : A _Double_ specifying the r e2. The default value is 0.0.
        
        **`dBotDtDia`**
        : A _Double_ specifying the bot data dia. The default value is 0.0.
        
        **`dPitch`**
        : A _Double_ specifying the pitch. The default value is 10.0.
        
        **`iBotRbeConnType`**
        : An _Integer_ specifying the bot rbe conn type. The default value is 0.
        
        **`dScale1`**
        : A _Double_ specifying the scale1. The default value is 1.10.
        
        **`bIsCreate2ADVCStaticProcessForFixLength`**
        : A _Boolean_ specifying the is create2 ADVC static process for fix length. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.BoltConnections.Face.TypeB(crlFaceCur1, crlFaceCur2, strRbeName="RBE", strBarName="", iShaftType=0, crCurBarProperty=None, dPlaneTol=20.0, dMaxBoltHeight=100.0, dMaxDiameter=0.0, dMinDiameter=0.0, bPretensionLoad=False, iSolverType=0, dForceValue=0.0, iPreTenDof=0, crCurCoord=None, iBoltFixLength=0, iTopSlot=0, dRBE1=0.0, dRBE2=0.0, dBotDtDia=0.0, dPitch=10.0, iBotRbeConnType=0, dScale1=1.10, bIsCreate2ADVCStaticProcessForFixLength=False)
        ```
        
        """
        message = "Connections.BoltConnections.Face.TypeB({},{},'{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(crlFaceCur1, crlFaceCur2, strRbeName, strBarName, iShaftType, crCurBarProperty, dPlaneTol, dMaxBoltHeight, dMaxDiameter, dMinDiameter, bPretensionLoad, iSolverType, dForceValue, iPreTenDof, crCurCoord, iBoltFixLength, iTopSlot, dRBE1, dRBE2, dBotDtDia, dPitch, iBotRbeConnType, dScale1, bIsCreate2ADVCStaticProcessForFixLength)
        return JPT_RUN_LINE(message)

    def TypeA(self, crlFaceCur1, crlFaceCur2, strRbeName="RBE", strBarName="", iShaftType=0, crCurBarProperty=None, dPlaneTol=20.0, dMaxBoltHeight=100.0, dMaxDiameter=0.0, dMinDiameter=0.0, bPretensionLoad=False, iSolverType=0, dForceValue=0.0, iPreTenDof=0, crCurCoord=None, iBoltFixLength=0, iTopSlot=0, dRBE1=0.0, iBotSlot=0, dRBE2=0.0, dScale1=1.10, bIfCreate2ADVCStaticProcessForBoltFixLength=False):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Connections.BoltConnections.Face.TypeA(crlFaceCur1, crlFaceCur2, strRbeName="RBE", strBarName="", iShaftType=0, crCurBarProperty=None, dPlaneTol=20.0, dMaxBoltHeight=100.0, dMaxDiameter=0.0, dMinDiameter=0.0, bPretensionLoad=False, iSolverType=0, dForceValue=0.0, iPreTenDof=0, crCurCoord=None, iBoltFixLength=0, iTopSlot=0, dRBE1=0.0, iBotSlot=0, dRBE2=0.0, dScale1=1.10, bIfCreate2ADVCStaticProcessForBoltFixLength=False)
        ```
        
        Macro: {ref}`Macro-Connections-Lbc_Bolt_Modeling_Type_A_Face`
        
        Ribbon: {menuselection}`Connections --> BoltConnections --> Face --> TypeA`
        
        ## Inputs
        
        **`crlFaceCur1`**
        : A _Cursor List_ specifying the face cur1. This is a required input.
        
        **`crlFaceCur2`**
        : A _Cursor List_ specifying the face cur2. This is a required input.
        
        **`strRbeName`**
        : A _String_ specifying the rbe name. The default value is "RBE".
        
        **`strBarName`**
        : A _String_ specifying the bar name. The default value is "".
        
        **`iShaftType`**
        : An _Integer_ specifying the shaft type. The default value is 0.
        
        **`crCurBarProperty`**
        : A _Cursor_ specifying the cur bar property. The default value is None.
        
        **`dPlaneTol`**
        : A _Double_ specifying the plane tolerance. The default value is 20.0.
        
        **`dMaxBoltHeight`**
        : A _Double_ specifying the maximum bolt height. The default value is 100.0.
        
        **`dMaxDiameter`**
        : A _Double_ specifying the maximum diameter. The default value is 0.0.
        
        **`dMinDiameter`**
        : A _Double_ specifying the minimum diameter. The default value is 0.0.
        
        **`bPretensionLoad`**
        : A _Boolean_ specifying the pretension load. The default value is False.
        
        **`iSolverType`**
        : An _Integer_ specifying the solver type. The default value is 0.
        
        **`dForceValue`**
        : A _Double_ specifying the force value. The default value is 0.0.
        
        **`iPreTenDof`**
        : An _Integer_ specifying the pre ten dof. The default value is 0.
        
        **`crCurCoord`**
        : A _Cursor_ specifying the cur coordinate. The default value is None.
        
        **`iBoltFixLength`**
        : An _Integer_ specifying the bolt fix length. The default value is 0.
        
        **`iTopSlot`**
        : An _Integer_ specifying the top slot. The default value is 0.
        
        **`dRBE1`**
        : A _Double_ specifying the r e1. The default value is 0.0.
        
        **`iBotSlot`**
        : An _Integer_ specifying the bot slot. The default value is 0.
        
        **`dRBE2`**
        : A _Double_ specifying the r e2. The default value is 0.0.
        
        **`dScale1`**
        : A _Double_ specifying the scale1. The default value is 1.10.
        
        **`bIfCreate2ADVCStaticProcessForBoltFixLength`**
        : A _Boolean_ specifying the if create2 ADVC static process for bolt fix length. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.BoltConnections.Face.TypeA(crlFaceCur1, crlFaceCur2, strRbeName="RBE", strBarName="", iShaftType=0, crCurBarProperty=None, dPlaneTol=20.0, dMaxBoltHeight=100.0, dMaxDiameter=0.0, dMinDiameter=0.0, bPretensionLoad=False, iSolverType=0, dForceValue=0.0, iPreTenDof=0, crCurCoord=None, iBoltFixLength=0, iTopSlot=0, dRBE1=0.0, iBotSlot=0, dRBE2=0.0, dScale1=1.10, bIfCreate2ADVCStaticProcessForBoltFixLength=False)
        ```
        
        """
        message = "Connections.BoltConnections.Face.TypeA({},{},'{}','{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(crlFaceCur1, crlFaceCur2, strRbeName, strBarName, iShaftType, crCurBarProperty, dPlaneTol, dMaxBoltHeight, dMaxDiameter, dMinDiameter, bPretensionLoad, iSolverType, dForceValue, iPreTenDof, crCurCoord, iBoltFixLength, iTopSlot, dRBE1, iBotSlot, dRBE2, dScale1, bIfCreate2ADVCStaticProcessForBoltFixLength)
        return JPT_RUN_LINE(message)

class Contacts_Abaqus:
    def ContactTable(self, strName="", iContactMethod=0, iContactType=0, iAlg=0, dAdjustVal=0.0, dExtensionZone=0.0, dMaxPenetration=0.0, iSmallSliding=0, dSmooth=0.0, iFrictionType=0, dFrictionCoef1=0.0, dFrictionCoef2=0.0, dShearLimit=0.0, dSlipTol=0.0, dStaticFrictionCoef=0.0, dKineticFrictionCoef=0.0, dDecayCoef=0.0, iAdjust=0, dPositonTol=0.0, iFormula=0, iTie=0, iPOCType=0, iAllowSeparation=0, dSlope=0.0, tshPOCTsheet=[], iClearanceType=0, iClearanceTypeId=0, bTemperatureDependency=False, iDependencies=0, tshCDTsheet=[], iPrsTypeId=0, bPrsTemperatureDependency=False, iPrsDependencies=0, tshPrsDTsheet=[], crplTarget=[], crEdit=None, iColor=0):
        r"""
        ## Description
        
        Create LBC contact abaqus manual face
        
        ## Syntax
        
        ```python
        Connections.Contacts.Abaqus.ContactTable(strName="", iContactMethod=0, iContactType=0, iAlg=0, dAdjustVal=0.0, dExtensionZone=0.0, dMaxPenetration=0.0, iSmallSliding=0, dSmooth=0.0, iFrictionType=0, dFrictionCoef1=0.0, dFrictionCoef2=0.0, dShearLimit=0.0, dSlipTol=0.0, dStaticFrictionCoef=0.0, dKineticFrictionCoef=0.0, dDecayCoef=0.0, iAdjust=0, dPositonTol=0.0, iFormula=0, iTie=0, iPOCType=0, iAllowSeparation=0, dSlope=0.0, tshPOCTsheet=[], iClearanceType=0, iClearanceTypeId=0, bTemperatureDependency=False, iDependencies=0, tshCDTsheet=[], iPrsTypeId=0, bPrsTemperatureDependency=False, iPrsDependencies=0, tshPrsDTsheet=[], crplTarget=[], crEdit=None, iColor=0)
        ```
        
        Macro: {ref}`Macro-Connections-ContactTableAbaqus`
        
        Ribbon: {menuselection}`Connections --> Contacts --> Abaqus --> ContactTable`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`iContactMethod`**
        : An _Integer_ specifying the contact method. The default value is 0.
        
        **`iContactType`**
        : An _Integer_ specifying the contact type. The default value is 0.
        
        **`iAlg`**
        : An _Integer_ specifying the algorithm. The default value is 0.
        
        **`dAdjustVal`**
        : A _Double_ specifying the adjust value. The default value is 0.0.
        
        **`dExtensionZone`**
        : A _Double_ specifying the extension zone. The default value is 0.0.
        
        **`dMaxPenetration`**
        : A _Double_ specifying the maximum penetration. The default value is 0.0.
        
        **`iSmallSliding`**
        : An _Integer_ specifying the small sliding. The default value is 0.
        
        **`dSmooth`**
        : A _Double_ specifying the smooth. The default value is 0.0.
        
        **`iFrictionType`**
        : An _Integer_ specifying the friction type. The default value is 0.
        
        **`dFrictionCoef1`**
        : A _Double_ specifying the friction coefficient 1. The default value is 0.0.
        
        **`dFrictionCoef2`**
        : A _Double_ specifying the friction coefficient 2. The default value is 0.0.
        
        **`dShearLimit`**
        : A _Double_ specifying the shear limit. The default value is 0.0.
        
        **`dSlipTol`**
        : A _Double_ specifying the slip tolerance. The default value is 0.0.
        
        **`dStaticFrictionCoef`**
        : A _Double_ specifying the static friction coefficient . The default value is 0.0.
        
        **`dKineticFrictionCoef`**
        : A _Double_ specifying the kinetic friction coefficient . The default value is 0.0.
        
        **`dDecayCoef`**
        : A _Double_ specifying the decay coefficient . The default value is 0.0.
        
        **`iAdjust`**
        : An _Integer_ specifying the adjust. The default value is 0.
        
        **`dPositonTol`**
        : A _Double_ specifying the positon tolerance. The default value is 0.0.
        
        **`iFormula`**
        : An _Integer_ specifying the formula. The default value is 0.
        
        **`iTie`**
        : An _Integer_ specifying the tie. The default value is 0.
        
        **`iPOCType`**
        : An _Integer_ specifying the POC type. The default value is 0.
        
        **`iAllowSeparation`**
        : An _Integer_ specifying the allow separation. The default value is 0.
        
        **`dSlope`**
        : A _Double_ specifying the slope. The default value is 0.0.
        
        **`tshPOCTsheet`**
        : A _Table Sheet_ specifying the POC table sheet. The default value is [].
        
        **`iClearanceType`**
        : An _Integer_ specifying the clearance type. The default value is 0.
        
        **`iClearanceTypeId`**
        : An _Integer_ specifying the clearance type ID. The default value is 0.
        
        **`bTemperatureDependency`**
        : A _Boolean_ specifying the temperature dependency. The default value is False.
        
        **`iDependencies`**
        : An _Integer_ specifying the dependencies. The default value is 0.
        
        **`tshCDTsheet`**
        : A _Table Sheet_ specifying the CD table sheet. The default value is [].
        
        **`iPrsTypeId`**
        : An _Integer_ specifying the pressure type ID. The default value is 0.
        
        **`bPrsTemperatureDependency`**
        : A _Boolean_ specifying the pressure temperature dependency. The default value is False.
        
        **`iPrsDependencies`**
        : An _Integer_ specifying the pressure dependencies. The default value is 0.
        
        **`tshPrsDTsheet`**
        : A _Table Sheet_ specifying the pressure d table sheet. The default value is [].
        
        **`crplTarget`**
        : A _Cursor Pair List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.Abaqus.ContactTable(strName="", iContactMethod=0, iContactType=0, iAlg=0, dAdjustVal=0.0, dExtensionZone=0.0, dMaxPenetration=0.0, iSmallSliding=0, dSmooth=0.0, iFrictionType=0, dFrictionCoef1=0.0, dFrictionCoef2=0.0, dShearLimit=0.0, dSlipTol=0.0, dStaticFrictionCoef=0.0, dKineticFrictionCoef=0.0, dDecayCoef=0.0, iAdjust=0, dPositonTol=0.0, iFormula=0, iTie=0, iPOCType=0, iAllowSeparation=0, dSlope=0.0, tshPOCTsheet=[], iClearanceType=0, iClearanceTypeId=0, bTemperatureDependency=False, iDependencies=0, tshCDTsheet=[], iPrsTypeId=0, bPrsTemperatureDependency=False, iPrsDependencies=0, tshPrsDTsheet=[], crplTarget=[], crEdit=None, iColor=0)
        ```
        
        """
        message = "Connections.Contacts.Abaqus.ContactTable('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, iContactMethod, iContactType, iAlg, dAdjustVal, dExtensionZone, dMaxPenetration, iSmallSliding, dSmooth, iFrictionType, dFrictionCoef1, dFrictionCoef2, dShearLimit, dSlipTol, dStaticFrictionCoef, dKineticFrictionCoef, dDecayCoef, iAdjust, dPositonTol, iFormula, iTie, iPOCType, iAllowSeparation, dSlope, tshPOCTsheet, iClearanceType, iClearanceTypeId, bTemperatureDependency, iDependencies, tshCDTsheet, iPrsTypeId, bPrsTemperatureDependency, iPrsDependencies, tshPrsDTsheet, crplTarget, crEdit, iColor)
        return JPT_RUN_LINE(message)

    def ManualGroup(self, strName="", iContactMethod=1, iContactType=0, iAlg=0, dAdjustVal=0.0, dExtensionZone=0.0, dMaxPenetration=0.0, iSmallSliding=0, dSmooth=0.0, iFrictionType=0, dFrictionCoef1=0.0, dFrictionCoef2=0.0, dShearLimit=0.0, dSlipTol=0.0, dStaticFrictionCoef=0.0, dKineticFrictionCoef=0.0, dDecayCoef=0.0, iAdjust=0, dPositonTol=0.0, iFormula=0, iTie=0, iPOCType=0, iAllowSeparation=0, dSlope=0.0, tshPOCTsheet=[], iClearanceType=0, iClearanceTypeId=0, bTemperatureDependency=False, iDependencies=0, tshCDTsheet=[], iPrsTypeId=0, bPrsTemperatureDependency=False, iPrsDependencies=0, tshPrsDTsheet=[], crplTarget=[], crEdit=None, iColor=0):
        r"""
        ## Description
        
        Create LBC contact abaqus manual group
        
        ## Syntax
        
        ```python
        Connections.Contacts.Abaqus.ManualGroup(strName="", iContactMethod=1, iContactType=0, iAlg=0, dAdjustVal=0.0, dExtensionZone=0.0, dMaxPenetration=0.0, iSmallSliding=0, dSmooth=0.0, iFrictionType=0, dFrictionCoef1=0.0, dFrictionCoef2=0.0, dShearLimit=0.0, dSlipTol=0.0, dStaticFrictionCoef=0.0, dKineticFrictionCoef=0.0, dDecayCoef=0.0, iAdjust=0, dPositonTol=0.0, iFormula=0, iTie=0, iPOCType=0, iAllowSeparation=0, dSlope=0.0, tshPOCTsheet=[], iClearanceType=0, iClearanceTypeId=0, bTemperatureDependency=False, iDependencies=0, tshCDTsheet=[], iPrsTypeId=0, bPrsTemperatureDependency=False, iPrsDependencies=0, tshPrsDTsheet=[], crplTarget=[], crEdit=None, iColor=0)
        ```
        
        Macro: {ref}`Macro-Connections-ContactAbaqus_ManualGroup`
        
        Ribbon: {menuselection}`Connections --> Contacts --> Abaqus --> ManualGroup`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`iContactMethod`**
        : An _Integer_ specifying the contact method. The default value is 1.
        
        **`iContactType`**
        : An _Integer_ specifying the contact type. The default value is 0.
        
        **`iAlg`**
        : An _Integer_ specifying the algorithm. The default value is 0.
        
        **`dAdjustVal`**
        : A _Double_ specifying the adjust value. The default value is 0.0.
        
        **`dExtensionZone`**
        : A _Double_ specifying the extension zone. The default value is 0.0.
        
        **`dMaxPenetration`**
        : A _Double_ specifying the maximum penetration. The default value is 0.0.
        
        **`iSmallSliding`**
        : An _Integer_ specifying the small sliding. The default value is 0.
        
        **`dSmooth`**
        : A _Double_ specifying the smooth. The default value is 0.0.
        
        **`iFrictionType`**
        : An _Integer_ specifying the friction type. The default value is 0.
        
        **`dFrictionCoef1`**
        : A _Double_ specifying the friction coefficient 1. The default value is 0.0.
        
        **`dFrictionCoef2`**
        : A _Double_ specifying the friction coefficient 2. The default value is 0.0.
        
        **`dShearLimit`**
        : A _Double_ specifying the shear limit. The default value is 0.0.
        
        **`dSlipTol`**
        : A _Double_ specifying the slip tolerance. The default value is 0.0.
        
        **`dStaticFrictionCoef`**
        : A _Double_ specifying the static friction coefficient . The default value is 0.0.
        
        **`dKineticFrictionCoef`**
        : A _Double_ specifying the kinetic friction coefficient . The default value is 0.0.
        
        **`dDecayCoef`**
        : A _Double_ specifying the decay coefficient . The default value is 0.0.
        
        **`iAdjust`**
        : An _Integer_ specifying the adjust. The default value is 0.
        
        **`dPositonTol`**
        : A _Double_ specifying the positon tolerance. The default value is 0.0.
        
        **`iFormula`**
        : An _Integer_ specifying the formula. The default value is 0.
        
        **`iTie`**
        : An _Integer_ specifying the tie. The default value is 0.
        
        **`iPOCType`**
        : An _Integer_ specifying the POC type. The default value is 0.
        
        **`iAllowSeparation`**
        : An _Integer_ specifying the allow separation. The default value is 0.
        
        **`dSlope`**
        : A _Double_ specifying the slope. The default value is 0.0.
        
        **`tshPOCTsheet`**
        : A _Table Sheet_ specifying the POC table sheet. The default value is [].
        
        **`iClearanceType`**
        : An _Integer_ specifying the clearance type. The default value is 0.
        
        **`iClearanceTypeId`**
        : An _Integer_ specifying the clearance type ID. The default value is 0.
        
        **`bTemperatureDependency`**
        : A _Boolean_ specifying the temperature dependency. The default value is False.
        
        **`iDependencies`**
        : An _Integer_ specifying the dependencies. The default value is 0.
        
        **`tshCDTsheet`**
        : A _Table Sheet_ specifying the CD table sheet. The default value is [].
        
        **`iPrsTypeId`**
        : An _Integer_ specifying the pressure type ID. The default value is 0.
        
        **`bPrsTemperatureDependency`**
        : A _Boolean_ specifying the pressure temperature dependency. The default value is False.
        
        **`iPrsDependencies`**
        : An _Integer_ specifying the pressure dependencies. The default value is 0.
        
        **`tshPrsDTsheet`**
        : A _Table Sheet_ specifying the pressure d table sheet. The default value is [].
        
        **`crplTarget`**
        : A _Cursor Pair List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.Abaqus.ManualGroup(strName="", iContactMethod=1, iContactType=0, iAlg=0, dAdjustVal=0.0, dExtensionZone=0.0, dMaxPenetration=0.0, iSmallSliding=0, dSmooth=0.0, iFrictionType=0, dFrictionCoef1=0.0, dFrictionCoef2=0.0, dShearLimit=0.0, dSlipTol=0.0, dStaticFrictionCoef=0.0, dKineticFrictionCoef=0.0, dDecayCoef=0.0, iAdjust=0, dPositonTol=0.0, iFormula=0, iTie=0, iPOCType=0, iAllowSeparation=0, dSlope=0.0, tshPOCTsheet=[], iClearanceType=0, iClearanceTypeId=0, bTemperatureDependency=False, iDependencies=0, tshCDTsheet=[], iPrsTypeId=0, bPrsTemperatureDependency=False, iPrsDependencies=0, tshPrsDTsheet=[], crplTarget=[], crEdit=None, iColor=0)
        ```
        
        """
        message = "Connections.Contacts.Abaqus.ManualGroup('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, iContactMethod, iContactType, iAlg, dAdjustVal, dExtensionZone, dMaxPenetration, iSmallSliding, dSmooth, iFrictionType, dFrictionCoef1, dFrictionCoef2, dShearLimit, dSlipTol, dStaticFrictionCoef, dKineticFrictionCoef, dDecayCoef, iAdjust, dPositonTol, iFormula, iTie, iPOCType, iAllowSeparation, dSlope, tshPOCTsheet, iClearanceType, iClearanceTypeId, bTemperatureDependency, iDependencies, tshCDTsheet, iPrsTypeId, bPrsTemperatureDependency, iPrsDependencies, tshPrsDTsheet, crplTarget, crEdit, iColor)
        return JPT_RUN_LINE(message)

    def ManualFace(self, strName="", iContactMethod=0, iContactType=0, iAlg=0, dAdjustVal=0.0, dExtensionZone=0.0, dMaxPenetration=0.0, iSmallSliding=0, dSmooth=0.0, iFrictionType=0, dFrictionCoef1=0.0, dFrictionCoef2=0.0, dShearLimit=0.0, dSlipTol=0.0, dStaticFrictionCoef=0.0, dKineticFrictionCoef=0.0, dDecayCoef=0.0, iAdjust=0, dPositonTol=0.0, iFormula=0, iTie=0, iPOCType=0, iAllowSeparation=0, dSlope=0.0, tshPOCTsheet=[], iClearanceType=0, iClearanceTypeId=0, bTemperatureDependency=False, iDependencies=0, tshCDTsheet=[], iPrsTypeId=0, bPrsTemperatureDependency=False, iPrsDependencies=0, tshPrsDTsheet=[], crplTarget=[], crEdit=None, iColor=0):
        r"""
        ## Description
        
        Create LBC contact abaqus manual face
        
        ## Syntax
        
        ```python
        Connections.Contacts.Abaqus.ManualFace(strName="", iContactMethod=0, iContactType=0, iAlg=0, dAdjustVal=0.0, dExtensionZone=0.0, dMaxPenetration=0.0, iSmallSliding=0, dSmooth=0.0, iFrictionType=0, dFrictionCoef1=0.0, dFrictionCoef2=0.0, dShearLimit=0.0, dSlipTol=0.0, dStaticFrictionCoef=0.0, dKineticFrictionCoef=0.0, dDecayCoef=0.0, iAdjust=0, dPositonTol=0.0, iFormula=0, iTie=0, iPOCType=0, iAllowSeparation=0, dSlope=0.0, tshPOCTsheet=[], iClearanceType=0, iClearanceTypeId=0, bTemperatureDependency=False, iDependencies=0, tshCDTsheet=[], iPrsTypeId=0, bPrsTemperatureDependency=False, iPrsDependencies=0, tshPrsDTsheet=[], crplTarget=[], crEdit=None, iColor=0)
        ```
        
        Macro: {ref}`Macro-Connections-ContactAbaqus_ManualFace`
        
        Ribbon: {menuselection}`Connections --> Contacts --> Abaqus --> ManualFace`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`iContactMethod`**
        : An _Integer_ specifying the contact method. The default value is 0.
        
        **`iContactType`**
        : An _Integer_ specifying the contact type. The default value is 0.
        
        **`iAlg`**
        : An _Integer_ specifying the algorithm. The default value is 0.
        
        **`dAdjustVal`**
        : A _Double_ specifying the adjust value. The default value is 0.0.
        
        **`dExtensionZone`**
        : A _Double_ specifying the extension zone. The default value is 0.0.
        
        **`dMaxPenetration`**
        : A _Double_ specifying the maximum penetration. The default value is 0.0.
        
        **`iSmallSliding`**
        : An _Integer_ specifying the small sliding. The default value is 0.
        
        **`dSmooth`**
        : A _Double_ specifying the smooth. The default value is 0.0.
        
        **`iFrictionType`**
        : An _Integer_ specifying the friction type. The default value is 0.
        
        **`dFrictionCoef1`**
        : A _Double_ specifying the friction coefficient 1. The default value is 0.0.
        
        **`dFrictionCoef2`**
        : A _Double_ specifying the friction coefficient 2. The default value is 0.0.
        
        **`dShearLimit`**
        : A _Double_ specifying the shear limit. The default value is 0.0.
        
        **`dSlipTol`**
        : A _Double_ specifying the slip tolerance. The default value is 0.0.
        
        **`dStaticFrictionCoef`**
        : A _Double_ specifying the static friction coefficient . The default value is 0.0.
        
        **`dKineticFrictionCoef`**
        : A _Double_ specifying the kinetic friction coefficient . The default value is 0.0.
        
        **`dDecayCoef`**
        : A _Double_ specifying the decay coefficient . The default value is 0.0.
        
        **`iAdjust`**
        : An _Integer_ specifying the adjust. The default value is 0.
        
        **`dPositonTol`**
        : A _Double_ specifying the positon tolerance. The default value is 0.0.
        
        **`iFormula`**
        : An _Integer_ specifying the formula. The default value is 0.
        
        **`iTie`**
        : An _Integer_ specifying the tie. The default value is 0.
        
        **`iPOCType`**
        : An _Integer_ specifying the POC type. The default value is 0.
        
        **`iAllowSeparation`**
        : An _Integer_ specifying the allow separation. The default value is 0.
        
        **`dSlope`**
        : A _Double_ specifying the slope. The default value is 0.0.
        
        **`tshPOCTsheet`**
        : A _Table Sheet_ specifying the POC table sheet. The default value is [].
        
        **`iClearanceType`**
        : An _Integer_ specifying the clearance type. The default value is 0.
        
        **`iClearanceTypeId`**
        : An _Integer_ specifying the clearance type ID. The default value is 0.
        
        **`bTemperatureDependency`**
        : A _Boolean_ specifying the temperature dependency. The default value is False.
        
        **`iDependencies`**
        : An _Integer_ specifying the dependencies. The default value is 0.
        
        **`tshCDTsheet`**
        : A _Table Sheet_ specifying the CD table sheet. The default value is [].
        
        **`iPrsTypeId`**
        : An _Integer_ specifying the pressure type ID. The default value is 0.
        
        **`bPrsTemperatureDependency`**
        : A _Boolean_ specifying the pressure temperature dependency. The default value is False.
        
        **`iPrsDependencies`**
        : An _Integer_ specifying the pressure dependencies. The default value is 0.
        
        **`tshPrsDTsheet`**
        : A _Table Sheet_ specifying the pressure d table sheet. The default value is [].
        
        **`crplTarget`**
        : A _Cursor Pair List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.Abaqus.ManualFace(strName="", iContactMethod=0, iContactType=0, iAlg=0, dAdjustVal=0.0, dExtensionZone=0.0, dMaxPenetration=0.0, iSmallSliding=0, dSmooth=0.0, iFrictionType=0, dFrictionCoef1=0.0, dFrictionCoef2=0.0, dShearLimit=0.0, dSlipTol=0.0, dStaticFrictionCoef=0.0, dKineticFrictionCoef=0.0, dDecayCoef=0.0, iAdjust=0, dPositonTol=0.0, iFormula=0, iTie=0, iPOCType=0, iAllowSeparation=0, dSlope=0.0, tshPOCTsheet=[], iClearanceType=0, iClearanceTypeId=0, bTemperatureDependency=False, iDependencies=0, tshCDTsheet=[], iPrsTypeId=0, bPrsTemperatureDependency=False, iPrsDependencies=0, tshPrsDTsheet=[], crplTarget=[], crEdit=None, iColor=0)
        ```
        
        """
        message = "Connections.Contacts.Abaqus.ManualFace('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, iContactMethod, iContactType, iAlg, dAdjustVal, dExtensionZone, dMaxPenetration, iSmallSliding, dSmooth, iFrictionType, dFrictionCoef1, dFrictionCoef2, dShearLimit, dSlipTol, dStaticFrictionCoef, dKineticFrictionCoef, dDecayCoef, iAdjust, dPositonTol, iFormula, iTie, iPOCType, iAllowSeparation, dSlope, tshPOCTsheet, iClearanceType, iClearanceTypeId, bTemperatureDependency, iDependencies, tshCDTsheet, iPrsTypeId, bPrsTemperatureDependency, iPrsDependencies, tshPrsDTsheet, crplTarget, crEdit, iColor)
        return JPT_RUN_LINE(message)

    def ContactGroupByMatrix(self, strName="", iContactMethod=1, iContactType=0, iAlg=0, dAdjustVal=0.0, dExtensionZone=0.0, dMaxPenetration=0.0, iSmallSliding=0, dSmooth=0.0, iFrictionType=0, dFrictionCoef1=0.0, dFrictionCoef2=0.0, dShearLimit=0.0, dSlipTol=0.0, dStaticFrictionCoef=0.0, dKineticFrictionCoef=0.0, dDecayCoef=0.0, iAdjust=0, dPositonTol=0.0, iFormula=0, iTie=0, iPOCType=0, iAllowSeparation=0, dSlope=0.0, tshPOCTsheet=[], iClearanceType=0, iClearanceTypeId=0, bTemperatureDependency=False, iDependencies=0, tshCDTsheet=[], iPrsTypeId=0, bPrsTemperatureDependency=False, iPrsDependencies=0, tshPrsDTsheet=[], crplTarget=[], crEdit=None, iColor=0):
        r"""
        ## Description
        
        Create LBC contact abaqus group by matrix
        
        ## Syntax
        
        ```python
        Connections.Contacts.Abaqus.ContactGroupByMatrix(strName="", iContactMethod=1, iContactType=0, iAlg=0, dAdjustVal=0.0, dExtensionZone=0.0, dMaxPenetration=0.0, iSmallSliding=0, dSmooth=0.0, iFrictionType=0, dFrictionCoef1=0.0, dFrictionCoef2=0.0, dShearLimit=0.0, dSlipTol=0.0, dStaticFrictionCoef=0.0, dKineticFrictionCoef=0.0, dDecayCoef=0.0, iAdjust=0, dPositonTol=0.0, iFormula=0, iTie=0, iPOCType=0, iAllowSeparation=0, dSlope=0.0, tshPOCTsheet=[], iClearanceType=0, iClearanceTypeId=0, bTemperatureDependency=False, iDependencies=0, tshCDTsheet=[], iPrsTypeId=0, bPrsTemperatureDependency=False, iPrsDependencies=0, tshPrsDTsheet=[], crplTarget=[], crEdit=None, iColor=0)
        ```
        
        Macro: {ref}`Macro-Connections-ContactAbaqus_GroupByMatrix`
        
        Ribbon: {menuselection}`Connections --> Contacts --> Abaqus --> ContactGroupByMatrix`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`iContactMethod`**
        : An _Integer_ specifying the contact method. The default value is 1.
        
        **`iContactType`**
        : An _Integer_ specifying the contact type. The default value is 0.
        
        **`iAlg`**
        : An _Integer_ specifying the algorithm. The default value is 0.
        
        **`dAdjustVal`**
        : A _Double_ specifying the adjust value. The default value is 0.0.
        
        **`dExtensionZone`**
        : A _Double_ specifying the extension zone. The default value is 0.0.
        
        **`dMaxPenetration`**
        : A _Double_ specifying the maximum penetration. The default value is 0.0.
        
        **`iSmallSliding`**
        : An _Integer_ specifying the small sliding. The default value is 0.
        
        **`dSmooth`**
        : A _Double_ specifying the smooth. The default value is 0.0.
        
        **`iFrictionType`**
        : An _Integer_ specifying the friction type. The default value is 0.
        
        **`dFrictionCoef1`**
        : A _Double_ specifying the friction coefficient 1. The default value is 0.0.
        
        **`dFrictionCoef2`**
        : A _Double_ specifying the friction coefficient 2. The default value is 0.0.
        
        **`dShearLimit`**
        : A _Double_ specifying the shear limit. The default value is 0.0.
        
        **`dSlipTol`**
        : A _Double_ specifying the slip tolerance. The default value is 0.0.
        
        **`dStaticFrictionCoef`**
        : A _Double_ specifying the static friction coefficient . The default value is 0.0.
        
        **`dKineticFrictionCoef`**
        : A _Double_ specifying the kinetic friction coefficient . The default value is 0.0.
        
        **`dDecayCoef`**
        : A _Double_ specifying the decay coefficient . The default value is 0.0.
        
        **`iAdjust`**
        : An _Integer_ specifying the adjust. The default value is 0.
        
        **`dPositonTol`**
        : A _Double_ specifying the positon tolerance. The default value is 0.0.
        
        **`iFormula`**
        : An _Integer_ specifying the formula. The default value is 0.
        
        **`iTie`**
        : An _Integer_ specifying the tie. The default value is 0.
        
        **`iPOCType`**
        : An _Integer_ specifying the POC type. The default value is 0.
        
        **`iAllowSeparation`**
        : An _Integer_ specifying the allow separation. The default value is 0.
        
        **`dSlope`**
        : A _Double_ specifying the slope. The default value is 0.0.
        
        **`tshPOCTsheet`**
        : A _Table Sheet_ specifying the POC table sheet. The default value is [].
        
        **`iClearanceType`**
        : An _Integer_ specifying the clearance type. The default value is 0.
        
        **`iClearanceTypeId`**
        : An _Integer_ specifying the clearance type ID. The default value is 0.
        
        **`bTemperatureDependency`**
        : A _Boolean_ specifying the temperature dependency. The default value is False.
        
        **`iDependencies`**
        : An _Integer_ specifying the dependencies. The default value is 0.
        
        **`tshCDTsheet`**
        : A _Table Sheet_ specifying the CD table sheet. The default value is [].
        
        **`iPrsTypeId`**
        : An _Integer_ specifying the pressure type ID. The default value is 0.
        
        **`bPrsTemperatureDependency`**
        : A _Boolean_ specifying the pressure temperature dependency. The default value is False.
        
        **`iPrsDependencies`**
        : An _Integer_ specifying the pressure dependencies. The default value is 0.
        
        **`tshPrsDTsheet`**
        : A _Table Sheet_ specifying the pressure d table sheet. The default value is [].
        
        **`crplTarget`**
        : A _Cursor Pair List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.Abaqus.ContactGroupByMatrix(strName="", iContactMethod=1, iContactType=0, iAlg=0, dAdjustVal=0.0, dExtensionZone=0.0, dMaxPenetration=0.0, iSmallSliding=0, dSmooth=0.0, iFrictionType=0, dFrictionCoef1=0.0, dFrictionCoef2=0.0, dShearLimit=0.0, dSlipTol=0.0, dStaticFrictionCoef=0.0, dKineticFrictionCoef=0.0, dDecayCoef=0.0, iAdjust=0, dPositonTol=0.0, iFormula=0, iTie=0, iPOCType=0, iAllowSeparation=0, dSlope=0.0, tshPOCTsheet=[], iClearanceType=0, iClearanceTypeId=0, bTemperatureDependency=False, iDependencies=0, tshCDTsheet=[], iPrsTypeId=0, bPrsTemperatureDependency=False, iPrsDependencies=0, tshPrsDTsheet=[], crplTarget=[], crEdit=None, iColor=0)
        ```
        
        """
        message = "Connections.Contacts.Abaqus.ContactGroupByMatrix('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, iContactMethod, iContactType, iAlg, dAdjustVal, dExtensionZone, dMaxPenetration, iSmallSliding, dSmooth, iFrictionType, dFrictionCoef1, dFrictionCoef2, dShearLimit, dSlipTol, dStaticFrictionCoef, dKineticFrictionCoef, dDecayCoef, iAdjust, dPositonTol, iFormula, iTie, iPOCType, iAllowSeparation, dSlope, tshPOCTsheet, iClearanceType, iClearanceTypeId, bTemperatureDependency, iDependencies, tshCDTsheet, iPrsTypeId, bPrsTemperatureDependency, iPrsDependencies, tshPrsDTsheet, crplTarget, crEdit, iColor)
        return JPT_RUN_LINE(message)

    def ContactShareFace(self, strName="", iContactMethod=3, iContactType=0, iAlg=0, dAdjustVal=0.0, dExtensionZone=0.0, dMaxPenetration=0.0, iSmallSliding=0, dSmooth=0.0, iFrictionType=0, dFrictionCoef1=0.0, dFrictionCoef2=0.0, dShearLimit=0.0, dSlipTol=0.0, dStaticFrictionCoef=0.0, dKineticFrictionCoef=0.0, dDecayCoef=0.0, iAdjust=0, dPositonTol=0.0, iFormula=0, iTie=0, iPOCType=0, iAllowSeparation=0, dSlope=0.0, tshPOCTsheet=[], iClearanceType=0, iClearanceTypeId=0, bTemperatureDependency=False, iDependencies=0, tshCDTsheet=[], iPrsTypeId=0, bPrsTemperatureDependency=False, iPrsDependencies=0, tshPrsDTsheet=[], crplTarget=[], crEdit=None, iColor=0):
        r"""
        ## Description
        
        Create LBC contact abaqus manual group
        
        ## Syntax
        
        ```python
        Connections.Contacts.Abaqus.ContactShareFace(strName="", iContactMethod=3, iContactType=0, iAlg=0, dAdjustVal=0.0, dExtensionZone=0.0, dMaxPenetration=0.0, iSmallSliding=0, dSmooth=0.0, iFrictionType=0, dFrictionCoef1=0.0, dFrictionCoef2=0.0, dShearLimit=0.0, dSlipTol=0.0, dStaticFrictionCoef=0.0, dKineticFrictionCoef=0.0, dDecayCoef=0.0, iAdjust=0, dPositonTol=0.0, iFormula=0, iTie=0, iPOCType=0, iAllowSeparation=0, dSlope=0.0, tshPOCTsheet=[], iClearanceType=0, iClearanceTypeId=0, bTemperatureDependency=False, iDependencies=0, tshCDTsheet=[], iPrsTypeId=0, bPrsTemperatureDependency=False, iPrsDependencies=0, tshPrsDTsheet=[], crplTarget=[], crEdit=None, iColor=0)
        ```
        
        Macro: {ref}`Macro-Connections-ContactAbaqus_ShareFace`
        
        Ribbon: {menuselection}`Connections --> Contacts --> Abaqus --> ContactShareFace`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`iContactMethod`**
        : An _Integer_ specifying the contact method. The default value is 3.
        
        **`iContactType`**
        : An _Integer_ specifying the contact type. The default value is 0.
        
        **`iAlg`**
        : An _Integer_ specifying the algorithm. The default value is 0.
        
        **`dAdjustVal`**
        : A _Double_ specifying the adjust value. The default value is 0.0.
        
        **`dExtensionZone`**
        : A _Double_ specifying the extension zone. The default value is 0.0.
        
        **`dMaxPenetration`**
        : A _Double_ specifying the maximum penetration. The default value is 0.0.
        
        **`iSmallSliding`**
        : An _Integer_ specifying the small sliding. The default value is 0.
        
        **`dSmooth`**
        : A _Double_ specifying the smooth. The default value is 0.0.
        
        **`iFrictionType`**
        : An _Integer_ specifying the friction type. The default value is 0.
        
        **`dFrictionCoef1`**
        : A _Double_ specifying the friction coefficient 1. The default value is 0.0.
        
        **`dFrictionCoef2`**
        : A _Double_ specifying the friction coefficient 2. The default value is 0.0.
        
        **`dShearLimit`**
        : A _Double_ specifying the shear limit. The default value is 0.0.
        
        **`dSlipTol`**
        : A _Double_ specifying the slip tolerance. The default value is 0.0.
        
        **`dStaticFrictionCoef`**
        : A _Double_ specifying the static friction coefficient . The default value is 0.0.
        
        **`dKineticFrictionCoef`**
        : A _Double_ specifying the kinetic friction coefficient . The default value is 0.0.
        
        **`dDecayCoef`**
        : A _Double_ specifying the decay coefficient . The default value is 0.0.
        
        **`iAdjust`**
        : An _Integer_ specifying the adjust. The default value is 0.
        
        **`dPositonTol`**
        : A _Double_ specifying the positon tolerance. The default value is 0.0.
        
        **`iFormula`**
        : An _Integer_ specifying the formula. The default value is 0.
        
        **`iTie`**
        : An _Integer_ specifying the tie. The default value is 0.
        
        **`iPOCType`**
        : An _Integer_ specifying the POC type. The default value is 0.
        
        **`iAllowSeparation`**
        : An _Integer_ specifying the allow separation. The default value is 0.
        
        **`dSlope`**
        : A _Double_ specifying the slope. The default value is 0.0.
        
        **`tshPOCTsheet`**
        : A _Table Sheet_ specifying the POC table sheet. The default value is [].
        
        **`iClearanceType`**
        : An _Integer_ specifying the clearance type. The default value is 0.
        
        **`iClearanceTypeId`**
        : An _Integer_ specifying the clearance type ID. The default value is 0.
        
        **`bTemperatureDependency`**
        : A _Boolean_ specifying the temperature dependency. The default value is False.
        
        **`iDependencies`**
        : An _Integer_ specifying the dependencies. The default value is 0.
        
        **`tshCDTsheet`**
        : A _Table Sheet_ specifying the CD table sheet. The default value is [].
        
        **`iPrsTypeId`**
        : An _Integer_ specifying the pressure type ID. The default value is 0.
        
        **`bPrsTemperatureDependency`**
        : A _Boolean_ specifying the pressure temperature dependency. The default value is False.
        
        **`iPrsDependencies`**
        : An _Integer_ specifying the pressure dependencies. The default value is 0.
        
        **`tshPrsDTsheet`**
        : A _Table Sheet_ specifying the pressure d table sheet. The default value is [].
        
        **`crplTarget`**
        : A _Cursor Pair List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.Abaqus.ContactShareFace(strName="", iContactMethod=3, iContactType=0, iAlg=0, dAdjustVal=0.0, dExtensionZone=0.0, dMaxPenetration=0.0, iSmallSliding=0, dSmooth=0.0, iFrictionType=0, dFrictionCoef1=0.0, dFrictionCoef2=0.0, dShearLimit=0.0, dSlipTol=0.0, dStaticFrictionCoef=0.0, dKineticFrictionCoef=0.0, dDecayCoef=0.0, iAdjust=0, dPositonTol=0.0, iFormula=0, iTie=0, iPOCType=0, iAllowSeparation=0, dSlope=0.0, tshPOCTsheet=[], iClearanceType=0, iClearanceTypeId=0, bTemperatureDependency=False, iDependencies=0, tshCDTsheet=[], iPrsTypeId=0, bPrsTemperatureDependency=False, iPrsDependencies=0, tshPrsDTsheet=[], crplTarget=[], crEdit=None, iColor=0)
        ```
        
        """
        message = "Connections.Contacts.Abaqus.ContactShareFace('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, iContactMethod, iContactType, iAlg, dAdjustVal, dExtensionZone, dMaxPenetration, iSmallSliding, dSmooth, iFrictionType, dFrictionCoef1, dFrictionCoef2, dShearLimit, dSlipTol, dStaticFrictionCoef, dKineticFrictionCoef, dDecayCoef, iAdjust, dPositonTol, iFormula, iTie, iPOCType, iAllowSeparation, dSlope, tshPOCTsheet, iClearanceType, iClearanceTypeId, bTemperatureDependency, iDependencies, tshCDTsheet, iPrsTypeId, bPrsTemperatureDependency, iPrsDependencies, tshPrsDTsheet, crplTarget, crEdit, iColor)
        return JPT_RUN_LINE(message)

class Contacts_ADVC:
    def ContactClearance(self, strName, dClearanceVal, iLocalUnit, iSolverType, crlTarget, crEdit=None):
        r"""
        ## Description
        
        contact clearance for ADVC contact
        
        ## Syntax
        
        ```python
        Connections.Contacts.ADVC.ContactClearance(strName, dClearanceVal, iLocalUnit, iSolverType, crlTarget, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-ContactClearance`
        
        Ribbon: {menuselection}`Connections --> Contacts --> ADVC --> ContactClearance`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`dClearanceVal`**
        : A _Double_ specifying the clearance value. This is a required input.
        
        **`iLocalUnit`**
        : An _Integer_ specifying the local unit. This is a required input.
        
        **`iSolverType`**
        : An _Integer_ specifying the solver type. This is a required input.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. This is a required input.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.ADVC.ContactClearance(strName, dClearanceVal, iLocalUnit, iSolverType, crlTarget, crEdit=None)
        ```
        
        """
        message = "Connections.Contacts.ADVC.ContactClearance('{}',{},{},{},{},{})".format(strName, dClearanceVal, iLocalUnit, iSolverType, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def ManualGroup(self, strName="ContactADVC", iContactType=0, iSlidingType=0, iInitialState=0, dInitialStateTol=DFLT_DBL, dKineticFrictionCoef=DFLT_DBL, dExponentialCoef=DFLT_DBL, iBehavior=0, dClearance=DFLT_DBL, iAdjust2Clearance=0, dInterference=DFLT_DBL, iAdjust2Interference=0, iAutoShrink=0, iAdvAdjust=0, dAdjustValue=DFLT_DBL, dFrictionCoef=DFLT_DBL, dMaxShear=DFLT_DBL, dElasticSlip=DFLT_DBL, dSlipTolerance=DFLT_DBL, dSearchWidth=DFLT_DBL, dSearchGap=DFLT_DBL, dSearchDepth=DFLT_DBL, dCritialPenetration=DFLT_DBL, iEstimationImpactTime=0, iFormula=0, iConstraintType=0, iDataType=0, iTypeId=0, bTemperatureDependency=False, iNumDependencies=0, tshTableClearance=[], bStabilized=0, iStabilizeType=0, dResidualFactor=DFLT_DBL, dEffectiveDist=DFLT_DBL, dCN=DFLT_DBL, dCT=DFLT_DBL, crlClearance=[], crplTarget=[], crEdit=None, dSearchAngle=DFLT_DBL, iConstraintTypeExplicit=0, dPenaltyFact=DFLT_DBL, dPenaltyFactExplicit=DFLT_DBL, iColor=16711680, iAlg=0, iMethod=0):
        r"""
        ## Description
        
        create ADVC contact Manual Group
        
        ## Syntax
        
        ```python
        Connections.Contacts.ADVC.ManualGroup(strName="ContactADVC", iContactType=0, iSlidingType=0, iInitialState=0, dInitialStateTol=DFLT_DBL, dKineticFrictionCoef=DFLT_DBL, dExponentialCoef=DFLT_DBL, iBehavior=0, dClearance=DFLT_DBL, iAdjust2Clearance=0, dInterference=DFLT_DBL, iAdjust2Interference=0, iAutoShrink=0, iAdvAdjust=0, dAdjustValue=DFLT_DBL, dFrictionCoef=DFLT_DBL, dMaxShear=DFLT_DBL, dElasticSlip=DFLT_DBL, dSlipTolerance=DFLT_DBL, dSearchWidth=DFLT_DBL, dSearchGap=DFLT_DBL, dSearchDepth=DFLT_DBL, dCritialPenetration=DFLT_DBL, iEstimationImpactTime=0, iFormula=0, iConstraintType=0, iDataType=0, iTypeId=0, bTemperatureDependency=False, iNumDependencies=0, tshTableClearance=[], bStabilized=0, iStabilizeType=0, dResidualFactor=DFLT_DBL, dEffectiveDist=DFLT_DBL, dCN=DFLT_DBL, dCT=DFLT_DBL, crlClearance=[], crplTarget=[], crEdit=None, dSearchAngle=DFLT_DBL, iConstraintTypeExplicit=0, dPenaltyFact=DFLT_DBL, dPenaltyFactExplicit=DFLT_DBL, iColor=16711680, iAlg=0, iMethod=0)
        ```
        
        Macro: {ref}`Macro-Connections-ContactADVC`
        
        Ribbon: {menuselection}`Connections --> Contacts --> ADVC --> ManualGroup`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ContactADVC".
        
        **`iContactType`**
        : An _Integer_ specifying the contact type. The default value is 0.
        
        **`iSlidingType`**
        : An _Integer_ specifying the sliding type. The default value is 0.
        
        **`iInitialState`**
        : An _Integer_ specifying the initial state. The default value is 0.
        
        **`dInitialStateTol`**
        : A _Double_ specifying the initial state tolerance. The default value is DFLT_DBL.
        
        **`dKineticFrictionCoef`**
        : A _Double_ specifying the kinetic friction coefficient . The default value is DFLT_DBL.
        
        **`dExponentialCoef`**
        : A _Double_ specifying the exponential coefficient . The default value is DFLT_DBL.
        
        **`iBehavior`**
        : An _Integer_ specifying the behavior. The default value is 0.
        
        **`dClearance`**
        : A _Double_ specifying the clearance. The default value is DFLT_DBL.
        
        **`iAdjust2Clearance`**
        : An _Integer_ specifying the adjust2 clearance. The default value is 0.
        
        **`dInterference`**
        : A _Double_ specifying the interference. The default value is DFLT_DBL.
        
        **`iAdjust2Interference`**
        : An _Integer_ specifying the adjust2 interference. The default value is 0.
        
        **`iAutoShrink`**
        : An _Integer_ specifying the auto shrink. The default value is 0.
        
        **`iAdvAdjust`**
        : An _Integer_ specifying the adv adjust. The default value is 0.
        
        **`dAdjustValue`**
        : A _Double_ specifying the adjust value. The default value is DFLT_DBL.
        
        **`dFrictionCoef`**
        : A _Double_ specifying the friction coefficient . The default value is DFLT_DBL.
        
        **`dMaxShear`**
        : A _Double_ specifying the maximum shear. The default value is DFLT_DBL.
        
        **`dElasticSlip`**
        : A _Double_ specifying the elastic slip. The default value is DFLT_DBL.
        
        **`dSlipTolerance`**
        : A _Double_ specifying the slip tolerance. The default value is DFLT_DBL.
        
        **`dSearchWidth`**
        : A _Double_ specifying the search width. The default value is DFLT_DBL.
        
        **`dSearchGap`**
        : A _Double_ specifying the search gap. The default value is DFLT_DBL.
        
        **`dSearchDepth`**
        : A _Double_ specifying the search depth. The default value is DFLT_DBL.
        
        **`dCritialPenetration`**
        : A _Double_ specifying the critial penetration. The default value is DFLT_DBL.
        
        **`iEstimationImpactTime`**
        : An _Integer_ specifying the estimation impact time. The default value is 0.
        
        **`iFormula`**
        : An _Integer_ specifying the formula. The default value is 0.
        
        **`iConstraintType`**
        : An _Integer_ specifying the constraint type. The default value is 0.
        
        **`iDataType`**
        : An _Integer_ specifying the data type. The default value is 0.
        
        **`iTypeId`**
        : An _Integer_ specifying the type ID. The default value is 0.
        
        **`bTemperatureDependency`**
        : A _Boolean_ specifying the temperature dependency. The default value is False.
        
        **`iNumDependencies`**
        : An _Integer_ specifying the number dependencies. The default value is 0.
        
        **`tshTableClearance`**
        : A _Table Sheet_ specifying the table clearance. The default value is [].
        
        **`bStabilized`**
        : A _Boolean_ specifying the stabilized. The default value is 0.
        
        **`iStabilizeType`**
        : An _Integer_ specifying the stabilize type. The default value is 0.
        
        **`dResidualFactor`**
        : A _Double_ specifying the residual factor. The default value is DFLT_DBL.
        
        **`dEffectiveDist`**
        : A _Double_ specifying the effective dist. The default value is DFLT_DBL.
        
        **`dCN`**
        : A _Double_ specifying the c n. The default value is DFLT_DBL.
        
        **`dCT`**
        : A _Double_ specifying the c t. The default value is DFLT_DBL.
        
        **`crlClearance`**
        : A _Cursor List_ specifying the clearance. The default value is [].
        
        **`crplTarget`**
        : A _Cursor Pair List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`dSearchAngle`**
        : A _Double_ specifying the search angle. The default value is DFLT_DBL.
        
        **`iConstraintTypeExplicit`**
        : An _Integer_ specifying the constraint type explicit. The default value is 0.
        
        **`dPenaltyFact`**
        : A _Double_ specifying the penalty fact. The default value is DFLT_DBL.
        
        **`dPenaltyFactExplicit`**
        : A _Double_ specifying the penalty fact explicit. The default value is DFLT_DBL.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 16711680.
        
        **`iAlg`**
        : An _Integer_ specifying the algorithm. The default value is 0.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.ADVC.ManualGroup(strName="ContactADVC", iContactType=0, iSlidingType=0, iInitialState=0, dInitialStateTol=DFLT_DBL, dKineticFrictionCoef=DFLT_DBL, dExponentialCoef=DFLT_DBL, iBehavior=0, dClearance=DFLT_DBL, iAdjust2Clearance=0, dInterference=DFLT_DBL, iAdjust2Interference=0, iAutoShrink=0, iAdvAdjust=0, dAdjustValue=DFLT_DBL, dFrictionCoef=DFLT_DBL, dMaxShear=DFLT_DBL, dElasticSlip=DFLT_DBL, dSlipTolerance=DFLT_DBL, dSearchWidth=DFLT_DBL, dSearchGap=DFLT_DBL, dSearchDepth=DFLT_DBL, dCritialPenetration=DFLT_DBL, iEstimationImpactTime=0, iFormula=0, iConstraintType=0, iDataType=0, iTypeId=0, bTemperatureDependency=False, iNumDependencies=0, tshTableClearance=[], bStabilized=0, iStabilizeType=0, dResidualFactor=DFLT_DBL, dEffectiveDist=DFLT_DBL, dCN=DFLT_DBL, dCT=DFLT_DBL, crlClearance=[], crplTarget=[], crEdit=None, dSearchAngle=DFLT_DBL, iConstraintTypeExplicit=0, dPenaltyFact=DFLT_DBL, dPenaltyFactExplicit=DFLT_DBL, iColor=16711680, iAlg=0, iMethod=0)
        ```
        
        """
        message = "Connections.Contacts.ADVC.ManualGroup('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{},{},{},{},{})".format(strName, iContactType, iSlidingType, iInitialState, dInitialStateTol, dKineticFrictionCoef, dExponentialCoef, iBehavior, dClearance, iAdjust2Clearance, dInterference, iAdjust2Interference, iAutoShrink, iAdvAdjust, dAdjustValue, dFrictionCoef, dMaxShear, dElasticSlip, dSlipTolerance, dSearchWidth, dSearchGap, dSearchDepth, dCritialPenetration, iEstimationImpactTime, iFormula, iConstraintType, iDataType, iTypeId, bTemperatureDependency, iNumDependencies, tshTableClearance, bStabilized, iStabilizeType, dResidualFactor, dEffectiveDist, dCN, dCT, crlClearance, crplTarget, crEdit, dSearchAngle, iConstraintTypeExplicit, dPenaltyFact, dPenaltyFactExplicit, iColor, iAlg, iMethod)
        return JPT_RUN_LINE(message)

    def ManualFace(self, crlFaceMaster=[], crlFaceSlave=[], strName="ContactADVC", iContactType=0, iSlidingType=0, iInitialState=0, dInitialStateTol=DFLT_DBL, dKineticFrictionCoef=DFLT_DBL, dExponentialCoef=DFLT_DBL, iBehavior=0, dClearance=DFLT_DBL, iAdjust2Clearance=0, dInterference=DFLT_DBL, iAdjust2Interference=0, iAutoShrink=0, iAdvAdjust=0, dAdjustValue=DFLT_DBL, dFrictionCoef=DFLT_DBL, dMaxShear=DFLT_DBL, dElasticSlip=DFLT_DBL, dSlipTolerance=DFLT_DBL, dSearchWidth=DFLT_DBL, dSearchGap=DFLT_DBL, dSearchDepth=DFLT_DBL, dCritialPenetration=DFLT_DBL, iEstimationImpactTime=0, iFormula=0, iConstraintType=0, iDataType=0, iTypeId=0, bTemperatureDependency=False, iNumDependencies=0, tshTableClearance=[], bStabilized=0, iStabilizeType=0, dResidualFactor=DFLT_DBL, dEffectiveDist=DFLT_DBL, dCN=DFLT_DBL, dCT=DFLT_DBL, crlClearance=[], crEdit=None, dSearchAngle=DFLT_DBL, iConstraintTypeExplicit=0, dPenaltyFact=DFLT_DBL, dPenaltyFactExplicit=DFLT_DBL, iColor=16711680, iAlg=0, iMethod=0):
        r"""
        ## Description
        
        create ADVC contact by manual face
        
        ## Syntax
        
        ```python
        Connections.Contacts.ADVC.ManualFace(crlFaceMaster=[], crlFaceSlave=[], strName="ContactADVC", iContactType=0, iSlidingType=0, iInitialState=0, dInitialStateTol=DFLT_DBL, dKineticFrictionCoef=DFLT_DBL, dExponentialCoef=DFLT_DBL, iBehavior=0, dClearance=DFLT_DBL, iAdjust2Clearance=0, dInterference=DFLT_DBL, iAdjust2Interference=0, iAutoShrink=0, iAdvAdjust=0, dAdjustValue=DFLT_DBL, dFrictionCoef=DFLT_DBL, dMaxShear=DFLT_DBL, dElasticSlip=DFLT_DBL, dSlipTolerance=DFLT_DBL, dSearchWidth=DFLT_DBL, dSearchGap=DFLT_DBL, dSearchDepth=DFLT_DBL, dCritialPenetration=DFLT_DBL, iEstimationImpactTime=0, iFormula=0, iConstraintType=0, iDataType=0, iTypeId=0, bTemperatureDependency=False, iNumDependencies=0, tshTableClearance=[], bStabilized=0, iStabilizeType=0, dResidualFactor=DFLT_DBL, dEffectiveDist=DFLT_DBL, dCN=DFLT_DBL, dCT=DFLT_DBL, crlClearance=[], crEdit=None, dSearchAngle=DFLT_DBL, iConstraintTypeExplicit=0, dPenaltyFact=DFLT_DBL, dPenaltyFactExplicit=DFLT_DBL, iColor=16711680, iAlg=0, iMethod=0)
        ```
        
        Macro: {ref}`Macro-Connections-ContactManualFaceADVC`
        
        Ribbon: {menuselection}`Connections --> Contacts --> ADVC --> ManualFace`
        
        ## Inputs
        
        **`crlFaceMaster`**
        : A _Cursor List_ specifying the face master. The default value is [].
        
        **`crlFaceSlave`**
        : A _Cursor List_ specifying the face slave. The default value is [].
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ContactADVC".
        
        **`iContactType`**
        : An _Integer_ specifying the contact type. The default value is 0.
        
        **`iSlidingType`**
        : An _Integer_ specifying the sliding type. The default value is 0.
        
        **`iInitialState`**
        : An _Integer_ specifying the initial state. The default value is 0.
        
        **`dInitialStateTol`**
        : A _Double_ specifying the initial state tolerance. The default value is DFLT_DBL.
        
        **`dKineticFrictionCoef`**
        : A _Double_ specifying the kinetic friction coefficient . The default value is DFLT_DBL.
        
        **`dExponentialCoef`**
        : A _Double_ specifying the exponential coefficient . The default value is DFLT_DBL.
        
        **`iBehavior`**
        : An _Integer_ specifying the behavior. The default value is 0.
        
        **`dClearance`**
        : A _Double_ specifying the clearance. The default value is DFLT_DBL.
        
        **`iAdjust2Clearance`**
        : An _Integer_ specifying the adjust2 clearance. The default value is 0.
        
        **`dInterference`**
        : A _Double_ specifying the interference. The default value is DFLT_DBL.
        
        **`iAdjust2Interference`**
        : An _Integer_ specifying the adjust2 interference. The default value is 0.
        
        **`iAutoShrink`**
        : An _Integer_ specifying the auto shrink. The default value is 0.
        
        **`iAdvAdjust`**
        : An _Integer_ specifying the adv adjust. The default value is 0.
        
        **`dAdjustValue`**
        : A _Double_ specifying the adjust value. The default value is DFLT_DBL.
        
        **`dFrictionCoef`**
        : A _Double_ specifying the friction coefficient . The default value is DFLT_DBL.
        
        **`dMaxShear`**
        : A _Double_ specifying the maximum shear. The default value is DFLT_DBL.
        
        **`dElasticSlip`**
        : A _Double_ specifying the elastic slip. The default value is DFLT_DBL.
        
        **`dSlipTolerance`**
        : A _Double_ specifying the slip tolerance. The default value is DFLT_DBL.
        
        **`dSearchWidth`**
        : A _Double_ specifying the search width. The default value is DFLT_DBL.
        
        **`dSearchGap`**
        : A _Double_ specifying the search gap. The default value is DFLT_DBL.
        
        **`dSearchDepth`**
        : A _Double_ specifying the search depth. The default value is DFLT_DBL.
        
        **`dCritialPenetration`**
        : A _Double_ specifying the critial penetration. The default value is DFLT_DBL.
        
        **`iEstimationImpactTime`**
        : An _Integer_ specifying the estimation impact time. The default value is 0.
        
        **`iFormula`**
        : An _Integer_ specifying the formula. The default value is 0.
        
        **`iConstraintType`**
        : An _Integer_ specifying the constraint type. The default value is 0.
        
        **`iDataType`**
        : An _Integer_ specifying the data type. The default value is 0.
        
        **`iTypeId`**
        : An _Integer_ specifying the type ID. The default value is 0.
        
        **`bTemperatureDependency`**
        : A _Boolean_ specifying the temperature dependency. The default value is False.
        
        **`iNumDependencies`**
        : An _Integer_ specifying the number dependencies. The default value is 0.
        
        **`tshTableClearance`**
        : A _Table Sheet_ specifying the table clearance. The default value is [].
        
        **`bStabilized`**
        : A _Boolean_ specifying the stabilized. The default value is 0.
        
        **`iStabilizeType`**
        : An _Integer_ specifying the stabilize type. The default value is 0.
        
        **`dResidualFactor`**
        : A _Double_ specifying the residual factor. The default value is DFLT_DBL.
        
        **`dEffectiveDist`**
        : A _Double_ specifying the effective dist. The default value is DFLT_DBL.
        
        **`dCN`**
        : A _Double_ specifying the c n. The default value is DFLT_DBL.
        
        **`dCT`**
        : A _Double_ specifying the c t. The default value is DFLT_DBL.
        
        **`crlClearance`**
        : A _Cursor List_ specifying the clearance. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`dSearchAngle`**
        : A _Double_ specifying the search angle. The default value is DFLT_DBL.
        
        **`iConstraintTypeExplicit`**
        : An _Integer_ specifying the constraint type explicit. The default value is 0.
        
        **`dPenaltyFact`**
        : A _Double_ specifying the penalty fact. The default value is DFLT_DBL.
        
        **`dPenaltyFactExplicit`**
        : A _Double_ specifying the penalty fact explicit. The default value is DFLT_DBL.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 16711680.
        
        **`iAlg`**
        : An _Integer_ specifying the algorithm. The default value is 0.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.ADVC.ManualFace(crlFaceMaster=[], crlFaceSlave=[], strName="ContactADVC", iContactType=0, iSlidingType=0, iInitialState=0, dInitialStateTol=DFLT_DBL, dKineticFrictionCoef=DFLT_DBL, dExponentialCoef=DFLT_DBL, iBehavior=0, dClearance=DFLT_DBL, iAdjust2Clearance=0, dInterference=DFLT_DBL, iAdjust2Interference=0, iAutoShrink=0, iAdvAdjust=0, dAdjustValue=DFLT_DBL, dFrictionCoef=DFLT_DBL, dMaxShear=DFLT_DBL, dElasticSlip=DFLT_DBL, dSlipTolerance=DFLT_DBL, dSearchWidth=DFLT_DBL, dSearchGap=DFLT_DBL, dSearchDepth=DFLT_DBL, dCritialPenetration=DFLT_DBL, iEstimationImpactTime=0, iFormula=0, iConstraintType=0, iDataType=0, iTypeId=0, bTemperatureDependency=False, iNumDependencies=0, tshTableClearance=[], bStabilized=0, iStabilizeType=0, dResidualFactor=DFLT_DBL, dEffectiveDist=DFLT_DBL, dCN=DFLT_DBL, dCT=DFLT_DBL, crlClearance=[], crEdit=None, dSearchAngle=DFLT_DBL, iConstraintTypeExplicit=0, dPenaltyFact=DFLT_DBL, dPenaltyFactExplicit=DFLT_DBL, iColor=16711680, iAlg=0, iMethod=0)
        ```
        
        """
        message = "Connections.Contacts.ADVC.ManualFace({},{},'{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{},{},{},{},{})".format(crlFaceMaster, crlFaceSlave, strName, iContactType, iSlidingType, iInitialState, dInitialStateTol, dKineticFrictionCoef, dExponentialCoef, iBehavior, dClearance, iAdjust2Clearance, dInterference, iAdjust2Interference, iAutoShrink, iAdvAdjust, dAdjustValue, dFrictionCoef, dMaxShear, dElasticSlip, dSlipTolerance, dSearchWidth, dSearchGap, dSearchDepth, dCritialPenetration, iEstimationImpactTime, iFormula, iConstraintType, iDataType, iTypeId, bTemperatureDependency, iNumDependencies, tshTableClearance, bStabilized, iStabilizeType, dResidualFactor, dEffectiveDist, dCN, dCT, crlClearance, crEdit, dSearchAngle, iConstraintTypeExplicit, dPenaltyFact, dPenaltyFactExplicit, iColor, iAlg, iMethod)
        return JPT_RUN_LINE(message)

    def ContactShareFace(self, crlShareFace=[], strName="ContactADVC", iContactType=0, iSlidingType=0, iInitialState=0, dInitialStateTol=DFLT_DBL, dKineticFrictionCoef=DFLT_DBL, dExponentialCoef=DFLT_DBL, iBehavior=0, dClearance=DFLT_DBL, iAdjust2Clearance=0, dInterference=DFLT_DBL, iAdjust2Interference=0, iAutoShrink=0, iAdvAdjust=0, dAdjustValue=DFLT_DBL, dFrictionCoef=DFLT_DBL, dMaxShear=DFLT_DBL, dElasticSlip=DFLT_DBL, dSlipTolerance=DFLT_DBL, dSearchWidth=DFLT_DBL, dSearchGap=DFLT_DBL, dSearchDepth=DFLT_DBL, dCritialPenetration=DFLT_DBL, iEstimationImpactTime=0, iFormula=0, iConstraintType=0, iDataType=0, iTypeId=0, bTemperatureDependency=False, iNumDependencies=0, tshTableClearance=[], bStabilized=0, iStabilizeType=0, dResidualFactor=DFLT_DBL, dEffectiveDist=DFLT_DBL, dCN=DFLT_DBL, dCT=DFLT_DBL, crlClearance=[], crEdit=None, dSearchAngle=DFLT_DBL, iConstraintTypeExplicit=0, dPenaltyFact=DFLT_DBL, dPenaltyFactExplicit=DFLT_DBL, iColor=16711680, iAlg=0, iMethod=3):
        r"""
        ## Description
        
        create ADVC Contact Share Face
        
        ## Syntax
        
        ```python
        Connections.Contacts.ADVC.ContactShareFace(crlShareFace=[], strName="ContactADVC", iContactType=0, iSlidingType=0, iInitialState=0, dInitialStateTol=DFLT_DBL, dKineticFrictionCoef=DFLT_DBL, dExponentialCoef=DFLT_DBL, iBehavior=0, dClearance=DFLT_DBL, iAdjust2Clearance=0, dInterference=DFLT_DBL, iAdjust2Interference=0, iAutoShrink=0, iAdvAdjust=0, dAdjustValue=DFLT_DBL, dFrictionCoef=DFLT_DBL, dMaxShear=DFLT_DBL, dElasticSlip=DFLT_DBL, dSlipTolerance=DFLT_DBL, dSearchWidth=DFLT_DBL, dSearchGap=DFLT_DBL, dSearchDepth=DFLT_DBL, dCritialPenetration=DFLT_DBL, iEstimationImpactTime=0, iFormula=0, iConstraintType=0, iDataType=0, iTypeId=0, bTemperatureDependency=False, iNumDependencies=0, tshTableClearance=[], bStabilized=0, iStabilizeType=0, dResidualFactor=DFLT_DBL, dEffectiveDist=DFLT_DBL, dCN=DFLT_DBL, dCT=DFLT_DBL, crlClearance=[], crEdit=None, dSearchAngle=DFLT_DBL, iConstraintTypeExplicit=0, dPenaltyFact=DFLT_DBL, dPenaltyFactExplicit=DFLT_DBL, iColor=16711680, iAlg=0, iMethod=3)
        ```
        
        Macro: {ref}`Macro-Connections-LbcContactShareFaceAdvcCr`
        
        Ribbon: {menuselection}`Connections --> Contacts --> ADVC --> ContactShareFace`
        
        ## Inputs
        
        **`crlShareFace`**
        : A _Cursor List_ specifying the share face. The default value is [].
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ContactADVC".
        
        **`iContactType`**
        : An _Integer_ specifying the contact type. The default value is 0.
        
        **`iSlidingType`**
        : An _Integer_ specifying the sliding type. The default value is 0.
        
        **`iInitialState`**
        : An _Integer_ specifying the initial state. The default value is 0.
        
        **`dInitialStateTol`**
        : A _Double_ specifying the initial state tolerance. The default value is DFLT_DBL.
        
        **`dKineticFrictionCoef`**
        : A _Double_ specifying the kinetic friction coefficient . The default value is DFLT_DBL.
        
        **`dExponentialCoef`**
        : A _Double_ specifying the exponential coefficient . The default value is DFLT_DBL.
        
        **`iBehavior`**
        : An _Integer_ specifying the behavior. The default value is 0.
        
        **`dClearance`**
        : A _Double_ specifying the clearance. The default value is DFLT_DBL.
        
        **`iAdjust2Clearance`**
        : An _Integer_ specifying the adjust2 clearance. The default value is 0.
        
        **`dInterference`**
        : A _Double_ specifying the interference. The default value is DFLT_DBL.
        
        **`iAdjust2Interference`**
        : An _Integer_ specifying the adjust2 interference. The default value is 0.
        
        **`iAutoShrink`**
        : An _Integer_ specifying the auto shrink. The default value is 0.
        
        **`iAdvAdjust`**
        : An _Integer_ specifying the adv adjust. The default value is 0.
        
        **`dAdjustValue`**
        : A _Double_ specifying the adjust value. The default value is DFLT_DBL.
        
        **`dFrictionCoef`**
        : A _Double_ specifying the friction coefficient . The default value is DFLT_DBL.
        
        **`dMaxShear`**
        : A _Double_ specifying the maximum shear. The default value is DFLT_DBL.
        
        **`dElasticSlip`**
        : A _Double_ specifying the elastic slip. The default value is DFLT_DBL.
        
        **`dSlipTolerance`**
        : A _Double_ specifying the slip tolerance. The default value is DFLT_DBL.
        
        **`dSearchWidth`**
        : A _Double_ specifying the search width. The default value is DFLT_DBL.
        
        **`dSearchGap`**
        : A _Double_ specifying the search gap. The default value is DFLT_DBL.
        
        **`dSearchDepth`**
        : A _Double_ specifying the search depth. The default value is DFLT_DBL.
        
        **`dCritialPenetration`**
        : A _Double_ specifying the critial penetration. The default value is DFLT_DBL.
        
        **`iEstimationImpactTime`**
        : An _Integer_ specifying the estimation impact time. The default value is 0.
        
        **`iFormula`**
        : An _Integer_ specifying the formula. The default value is 0.
        
        **`iConstraintType`**
        : An _Integer_ specifying the constraint type. The default value is 0.
        
        **`iDataType`**
        : An _Integer_ specifying the data type. The default value is 0.
        
        **`iTypeId`**
        : An _Integer_ specifying the type ID. The default value is 0.
        
        **`bTemperatureDependency`**
        : A _Boolean_ specifying the temperature dependency. The default value is False.
        
        **`iNumDependencies`**
        : An _Integer_ specifying the number dependencies. The default value is 0.
        
        **`tshTableClearance`**
        : A _Table Sheet_ specifying the table clearance. The default value is [].
        
        **`bStabilized`**
        : A _Boolean_ specifying the stabilized. The default value is 0.
        
        **`iStabilizeType`**
        : An _Integer_ specifying the stabilize type. The default value is 0.
        
        **`dResidualFactor`**
        : A _Double_ specifying the residual factor. The default value is DFLT_DBL.
        
        **`dEffectiveDist`**
        : A _Double_ specifying the effective dist. The default value is DFLT_DBL.
        
        **`dCN`**
        : A _Double_ specifying the c n. The default value is DFLT_DBL.
        
        **`dCT`**
        : A _Double_ specifying the c t. The default value is DFLT_DBL.
        
        **`crlClearance`**
        : A _Cursor List_ specifying the clearance. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`dSearchAngle`**
        : A _Double_ specifying the search angle. The default value is DFLT_DBL.
        
        **`iConstraintTypeExplicit`**
        : An _Integer_ specifying the constraint type explicit. The default value is 0.
        
        **`dPenaltyFact`**
        : A _Double_ specifying the penalty fact. The default value is DFLT_DBL.
        
        **`dPenaltyFactExplicit`**
        : A _Double_ specifying the penalty fact explicit. The default value is DFLT_DBL.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 16711680.
        
        **`iAlg`**
        : An _Integer_ specifying the algorithm. The default value is 0.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 3.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.ADVC.ContactShareFace(crlShareFace=[], strName="ContactADVC", iContactType=0, iSlidingType=0, iInitialState=0, dInitialStateTol=DFLT_DBL, dKineticFrictionCoef=DFLT_DBL, dExponentialCoef=DFLT_DBL, iBehavior=0, dClearance=DFLT_DBL, iAdjust2Clearance=0, dInterference=DFLT_DBL, iAdjust2Interference=0, iAutoShrink=0, iAdvAdjust=0, dAdjustValue=DFLT_DBL, dFrictionCoef=DFLT_DBL, dMaxShear=DFLT_DBL, dElasticSlip=DFLT_DBL, dSlipTolerance=DFLT_DBL, dSearchWidth=DFLT_DBL, dSearchGap=DFLT_DBL, dSearchDepth=DFLT_DBL, dCritialPenetration=DFLT_DBL, iEstimationImpactTime=0, iFormula=0, iConstraintType=0, iDataType=0, iTypeId=0, bTemperatureDependency=False, iNumDependencies=0, tshTableClearance=[], bStabilized=0, iStabilizeType=0, dResidualFactor=DFLT_DBL, dEffectiveDist=DFLT_DBL, dCN=DFLT_DBL, dCT=DFLT_DBL, crlClearance=[], crEdit=None, dSearchAngle=DFLT_DBL, iConstraintTypeExplicit=0, dPenaltyFact=DFLT_DBL, dPenaltyFactExplicit=DFLT_DBL, iColor=16711680, iAlg=0, iMethod=3)
        ```
        
        """
        message = "Connections.Contacts.ADVC.ContactShareFace({},'{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{},{},{},{},{})".format(crlShareFace, strName, iContactType, iSlidingType, iInitialState, dInitialStateTol, dKineticFrictionCoef, dExponentialCoef, iBehavior, dClearance, iAdjust2Clearance, dInterference, iAdjust2Interference, iAutoShrink, iAdvAdjust, dAdjustValue, dFrictionCoef, dMaxShear, dElasticSlip, dSlipTolerance, dSearchWidth, dSearchGap, dSearchDepth, dCritialPenetration, iEstimationImpactTime, iFormula, iConstraintType, iDataType, iTypeId, bTemperatureDependency, iNumDependencies, tshTableClearance, bStabilized, iStabilizeType, dResidualFactor, dEffectiveDist, dCN, dCT, crlClearance, crEdit, dSearchAngle, iConstraintTypeExplicit, dPenaltyFact, dPenaltyFactExplicit, iColor, iAlg, iMethod)
        return JPT_RUN_LINE(message)

    def ContactTable(self, strName="ContactADVC", iContactType=0, iSlidingType=0, iInitialState=0, dInitialStateTol=DFLT_DBL, dKineticFrictionCoef=DFLT_DBL, dExponentialCoef=DFLT_DBL, iBehavior=0, dClearance=DFLT_DBL, iAdjust2Clearance=0, dInterference=DFLT_DBL, iAdjust2Interference=0, iAutoShrink=0, iAdvAdjust=0, dAdjustValue=DFLT_DBL, dFrictionCoef=DFLT_DBL, dMaxShear=DFLT_DBL, dElasticSlip=DFLT_DBL, dSlipTolerance=DFLT_DBL, dSearchWidth=DFLT_DBL, dSearchGap=DFLT_DBL, dSearchDepth=DFLT_DBL, dCritialPenetration=DFLT_DBL, iEstimationImpactTime=0, iFormula=0, iConstraintType=0, iDataType=0, iTypeId=0, bTemperatureDependency=False, iNumDependencies=0, tshTableClearance=[], bStabilized=0, iStabilizeType=0, dResidualFactor=DFLT_DBL, dEffectiveDist=DFLT_DBL, dCN=DFLT_DBL, dCT=DFLT_DBL, crlClearance=[], crplTarget=[], crEdit=None, dSearchAngle=DFLT_DBL, iConstraintTypeExplicit=0, dPenaltyFact=DFLT_DBL, dPenaltyFactExplicit=DFLT_DBL, iColor=16711680, iAlg=0, iMethod=0):
        r"""
        ## Description
        
        create ADVC Contact Table
        
        ## Syntax
        
        ```python
        Connections.Contacts.ADVC.ContactTable(strName="ContactADVC", iContactType=0, iSlidingType=0, iInitialState=0, dInitialStateTol=DFLT_DBL, dKineticFrictionCoef=DFLT_DBL, dExponentialCoef=DFLT_DBL, iBehavior=0, dClearance=DFLT_DBL, iAdjust2Clearance=0, dInterference=DFLT_DBL, iAdjust2Interference=0, iAutoShrink=0, iAdvAdjust=0, dAdjustValue=DFLT_DBL, dFrictionCoef=DFLT_DBL, dMaxShear=DFLT_DBL, dElasticSlip=DFLT_DBL, dSlipTolerance=DFLT_DBL, dSearchWidth=DFLT_DBL, dSearchGap=DFLT_DBL, dSearchDepth=DFLT_DBL, dCritialPenetration=DFLT_DBL, iEstimationImpactTime=0, iFormula=0, iConstraintType=0, iDataType=0, iTypeId=0, bTemperatureDependency=False, iNumDependencies=0, tshTableClearance=[], bStabilized=0, iStabilizeType=0, dResidualFactor=DFLT_DBL, dEffectiveDist=DFLT_DBL, dCN=DFLT_DBL, dCT=DFLT_DBL, crlClearance=[], crplTarget=[], crEdit=None, dSearchAngle=DFLT_DBL, iConstraintTypeExplicit=0, dPenaltyFact=DFLT_DBL, dPenaltyFactExplicit=DFLT_DBL, iColor=16711680, iAlg=0, iMethod=0)
        ```
        
        Macro: {ref}`Macro-Connections-LbcContactTableAdvc`
        
        Ribbon: {menuselection}`Connections --> Contacts --> ADVC --> ContactTable`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ContactADVC".
        
        **`iContactType`**
        : An _Integer_ specifying the contact type. The default value is 0.
        
        **`iSlidingType`**
        : An _Integer_ specifying the sliding type. The default value is 0.
        
        **`iInitialState`**
        : An _Integer_ specifying the initial state. The default value is 0.
        
        **`dInitialStateTol`**
        : A _Double_ specifying the initial state tolerance. The default value is DFLT_DBL.
        
        **`dKineticFrictionCoef`**
        : A _Double_ specifying the kinetic friction coefficient . The default value is DFLT_DBL.
        
        **`dExponentialCoef`**
        : A _Double_ specifying the exponential coefficient . The default value is DFLT_DBL.
        
        **`iBehavior`**
        : An _Integer_ specifying the behavior. The default value is 0.
        
        **`dClearance`**
        : A _Double_ specifying the clearance. The default value is DFLT_DBL.
        
        **`iAdjust2Clearance`**
        : An _Integer_ specifying the adjust2 clearance. The default value is 0.
        
        **`dInterference`**
        : A _Double_ specifying the interference. The default value is DFLT_DBL.
        
        **`iAdjust2Interference`**
        : An _Integer_ specifying the adjust2 interference. The default value is 0.
        
        **`iAutoShrink`**
        : An _Integer_ specifying the auto shrink. The default value is 0.
        
        **`iAdvAdjust`**
        : An _Integer_ specifying the adv adjust. The default value is 0.
        
        **`dAdjustValue`**
        : A _Double_ specifying the adjust value. The default value is DFLT_DBL.
        
        **`dFrictionCoef`**
        : A _Double_ specifying the friction coefficient . The default value is DFLT_DBL.
        
        **`dMaxShear`**
        : A _Double_ specifying the maximum shear. The default value is DFLT_DBL.
        
        **`dElasticSlip`**
        : A _Double_ specifying the elastic slip. The default value is DFLT_DBL.
        
        **`dSlipTolerance`**
        : A _Double_ specifying the slip tolerance. The default value is DFLT_DBL.
        
        **`dSearchWidth`**
        : A _Double_ specifying the search width. The default value is DFLT_DBL.
        
        **`dSearchGap`**
        : A _Double_ specifying the search gap. The default value is DFLT_DBL.
        
        **`dSearchDepth`**
        : A _Double_ specifying the search depth. The default value is DFLT_DBL.
        
        **`dCritialPenetration`**
        : A _Double_ specifying the critial penetration. The default value is DFLT_DBL.
        
        **`iEstimationImpactTime`**
        : An _Integer_ specifying the estimation impact time. The default value is 0.
        
        **`iFormula`**
        : An _Integer_ specifying the formula. The default value is 0.
        
        **`iConstraintType`**
        : An _Integer_ specifying the constraint type. The default value is 0.
        
        **`iDataType`**
        : An _Integer_ specifying the data type. The default value is 0.
        
        **`iTypeId`**
        : An _Integer_ specifying the type ID. The default value is 0.
        
        **`bTemperatureDependency`**
        : A _Boolean_ specifying the temperature dependency. The default value is False.
        
        **`iNumDependencies`**
        : An _Integer_ specifying the number dependencies. The default value is 0.
        
        **`tshTableClearance`**
        : A _Table Sheet_ specifying the table clearance. The default value is [].
        
        **`bStabilized`**
        : A _Boolean_ specifying the stabilized. The default value is 0.
        
        **`iStabilizeType`**
        : An _Integer_ specifying the stabilize type. The default value is 0.
        
        **`dResidualFactor`**
        : A _Double_ specifying the residual factor. The default value is DFLT_DBL.
        
        **`dEffectiveDist`**
        : A _Double_ specifying the effective dist. The default value is DFLT_DBL.
        
        **`dCN`**
        : A _Double_ specifying the c n. The default value is DFLT_DBL.
        
        **`dCT`**
        : A _Double_ specifying the c t. The default value is DFLT_DBL.
        
        **`crlClearance`**
        : A _Cursor List_ specifying the clearance. The default value is [].
        
        **`crplTarget`**
        : A _Cursor Pair List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`dSearchAngle`**
        : A _Double_ specifying the search angle. The default value is DFLT_DBL.
        
        **`iConstraintTypeExplicit`**
        : An _Integer_ specifying the constraint type explicit. The default value is 0.
        
        **`dPenaltyFact`**
        : A _Double_ specifying the penalty fact. The default value is DFLT_DBL.
        
        **`dPenaltyFactExplicit`**
        : A _Double_ specifying the penalty fact explicit. The default value is DFLT_DBL.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 16711680.
        
        **`iAlg`**
        : An _Integer_ specifying the algorithm. The default value is 0.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.ADVC.ContactTable(strName="ContactADVC", iContactType=0, iSlidingType=0, iInitialState=0, dInitialStateTol=DFLT_DBL, dKineticFrictionCoef=DFLT_DBL, dExponentialCoef=DFLT_DBL, iBehavior=0, dClearance=DFLT_DBL, iAdjust2Clearance=0, dInterference=DFLT_DBL, iAdjust2Interference=0, iAutoShrink=0, iAdvAdjust=0, dAdjustValue=DFLT_DBL, dFrictionCoef=DFLT_DBL, dMaxShear=DFLT_DBL, dElasticSlip=DFLT_DBL, dSlipTolerance=DFLT_DBL, dSearchWidth=DFLT_DBL, dSearchGap=DFLT_DBL, dSearchDepth=DFLT_DBL, dCritialPenetration=DFLT_DBL, iEstimationImpactTime=0, iFormula=0, iConstraintType=0, iDataType=0, iTypeId=0, bTemperatureDependency=False, iNumDependencies=0, tshTableClearance=[], bStabilized=0, iStabilizeType=0, dResidualFactor=DFLT_DBL, dEffectiveDist=DFLT_DBL, dCN=DFLT_DBL, dCT=DFLT_DBL, crlClearance=[], crplTarget=[], crEdit=None, dSearchAngle=DFLT_DBL, iConstraintTypeExplicit=0, dPenaltyFact=DFLT_DBL, dPenaltyFactExplicit=DFLT_DBL, iColor=16711680, iAlg=0, iMethod=0)
        ```
        
        """
        message = "Connections.Contacts.ADVC.ContactTable('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{},{},{},{},{})".format(strName, iContactType, iSlidingType, iInitialState, dInitialStateTol, dKineticFrictionCoef, dExponentialCoef, iBehavior, dClearance, iAdjust2Clearance, dInterference, iAdjust2Interference, iAutoShrink, iAdvAdjust, dAdjustValue, dFrictionCoef, dMaxShear, dElasticSlip, dSlipTolerance, dSearchWidth, dSearchGap, dSearchDepth, dCritialPenetration, iEstimationImpactTime, iFormula, iConstraintType, iDataType, iTypeId, bTemperatureDependency, iNumDependencies, tshTableClearance, bStabilized, iStabilizeType, dResidualFactor, dEffectiveDist, dCN, dCT, crlClearance, crplTarget, crEdit, dSearchAngle, iConstraintTypeExplicit, dPenaltyFact, dPenaltyFactExplicit, iColor, iAlg, iMethod)
        return JPT_RUN_LINE(message)

    def ContactGroupByMatrix(self, strName="ContactADVC", iContactType=0, iSlidingType=0, iInitialState=0, dInitialStateTol=DFLT_DBL, dKineticFrictionCoef=DFLT_DBL, dExponentialCoef=DFLT_DBL, iBehavior=0, dClearance=DFLT_DBL, iAdjust2Clearance=0, dInterference=DFLT_DBL, iAdjust2Interference=0, iAutoShrink=0, iAdvAdjust=0, dAdjustValue=DFLT_DBL, dFrictionCoef=DFLT_DBL, dMaxShear=DFLT_DBL, dElasticSlip=DFLT_DBL, dSlipTolerance=DFLT_DBL, dSearchWidth=DFLT_DBL, dSearchGap=DFLT_DBL, dSearchDepth=DFLT_DBL, dCritialPenetration=DFLT_DBL, iEstimationImpactTime=0, iFormula=0, iConstraintType=0, iDataType=0, iTypeId=0, bTemperatureDependency=False, iNumDependencies=0, tshTableClearance=[], bStabilized=0, iStabilizeType=0, dResidualFactor=DFLT_DBL, dEffectiveDist=DFLT_DBL, dCN=DFLT_DBL, dCT=DFLT_DBL, crlClearance=[], crplTarget=[], crEdit=None, dSearchAngle=DFLT_DBL, iConstraintTypeExplicit=0, dPenaltyFact=DFLT_DBL, dPenaltyFactExplicit=DFLT_DBL, iColor=16711680, iAlg=0, iMethod=0):
        r"""
        ## Description
        
        create ADVC contact Group By Matrix
        
        ## Syntax
        
        ```python
        Connections.Contacts.ADVC.ContactGroupByMatrix(strName="ContactADVC", iContactType=0, iSlidingType=0, iInitialState=0, dInitialStateTol=DFLT_DBL, dKineticFrictionCoef=DFLT_DBL, dExponentialCoef=DFLT_DBL, iBehavior=0, dClearance=DFLT_DBL, iAdjust2Clearance=0, dInterference=DFLT_DBL, iAdjust2Interference=0, iAutoShrink=0, iAdvAdjust=0, dAdjustValue=DFLT_DBL, dFrictionCoef=DFLT_DBL, dMaxShear=DFLT_DBL, dElasticSlip=DFLT_DBL, dSlipTolerance=DFLT_DBL, dSearchWidth=DFLT_DBL, dSearchGap=DFLT_DBL, dSearchDepth=DFLT_DBL, dCritialPenetration=DFLT_DBL, iEstimationImpactTime=0, iFormula=0, iConstraintType=0, iDataType=0, iTypeId=0, bTemperatureDependency=False, iNumDependencies=0, tshTableClearance=[], bStabilized=0, iStabilizeType=0, dResidualFactor=DFLT_DBL, dEffectiveDist=DFLT_DBL, dCN=DFLT_DBL, dCT=DFLT_DBL, crlClearance=[], crplTarget=[], crEdit=None, dSearchAngle=DFLT_DBL, iConstraintTypeExplicit=0, dPenaltyFact=DFLT_DBL, dPenaltyFactExplicit=DFLT_DBL, iColor=16711680, iAlg=0, iMethod=0)
        ```
        
        Macro: {ref}`Macro-Connections-LbcContactAdvc_ContactGroupByMatrix`
        
        Ribbon: {menuselection}`Connections --> Contacts --> ADVC --> ContactGroupByMatrix`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ContactADVC".
        
        **`iContactType`**
        : An _Integer_ specifying the contact type. The default value is 0.
        
        **`iSlidingType`**
        : An _Integer_ specifying the sliding type. The default value is 0.
        
        **`iInitialState`**
        : An _Integer_ specifying the initial state. The default value is 0.
        
        **`dInitialStateTol`**
        : A _Double_ specifying the initial state tolerance. The default value is DFLT_DBL.
        
        **`dKineticFrictionCoef`**
        : A _Double_ specifying the kinetic friction coefficient . The default value is DFLT_DBL.
        
        **`dExponentialCoef`**
        : A _Double_ specifying the exponential coefficient . The default value is DFLT_DBL.
        
        **`iBehavior`**
        : An _Integer_ specifying the behavior. The default value is 0.
        
        **`dClearance`**
        : A _Double_ specifying the clearance. The default value is DFLT_DBL.
        
        **`iAdjust2Clearance`**
        : An _Integer_ specifying the adjust2 clearance. The default value is 0.
        
        **`dInterference`**
        : A _Double_ specifying the interference. The default value is DFLT_DBL.
        
        **`iAdjust2Interference`**
        : An _Integer_ specifying the adjust2 interference. The default value is 0.
        
        **`iAutoShrink`**
        : An _Integer_ specifying the auto shrink. The default value is 0.
        
        **`iAdvAdjust`**
        : An _Integer_ specifying the adv adjust. The default value is 0.
        
        **`dAdjustValue`**
        : A _Double_ specifying the adjust value. The default value is DFLT_DBL.
        
        **`dFrictionCoef`**
        : A _Double_ specifying the friction coefficient . The default value is DFLT_DBL.
        
        **`dMaxShear`**
        : A _Double_ specifying the maximum shear. The default value is DFLT_DBL.
        
        **`dElasticSlip`**
        : A _Double_ specifying the elastic slip. The default value is DFLT_DBL.
        
        **`dSlipTolerance`**
        : A _Double_ specifying the slip tolerance. The default value is DFLT_DBL.
        
        **`dSearchWidth`**
        : A _Double_ specifying the search width. The default value is DFLT_DBL.
        
        **`dSearchGap`**
        : A _Double_ specifying the search gap. The default value is DFLT_DBL.
        
        **`dSearchDepth`**
        : A _Double_ specifying the search depth. The default value is DFLT_DBL.
        
        **`dCritialPenetration`**
        : A _Double_ specifying the critial penetration. The default value is DFLT_DBL.
        
        **`iEstimationImpactTime`**
        : An _Integer_ specifying the estimation impact time. The default value is 0.
        
        **`iFormula`**
        : An _Integer_ specifying the formula. The default value is 0.
        
        **`iConstraintType`**
        : An _Integer_ specifying the constraint type. The default value is 0.
        
        **`iDataType`**
        : An _Integer_ specifying the data type. The default value is 0.
        
        **`iTypeId`**
        : An _Integer_ specifying the type ID. The default value is 0.
        
        **`bTemperatureDependency`**
        : A _Boolean_ specifying the temperature dependency. The default value is False.
        
        **`iNumDependencies`**
        : An _Integer_ specifying the number dependencies. The default value is 0.
        
        **`tshTableClearance`**
        : A _Table Sheet_ specifying the table clearance. The default value is [].
        
        **`bStabilized`**
        : A _Boolean_ specifying the stabilized. The default value is 0.
        
        **`iStabilizeType`**
        : An _Integer_ specifying the stabilize type. The default value is 0.
        
        **`dResidualFactor`**
        : A _Double_ specifying the residual factor. The default value is DFLT_DBL.
        
        **`dEffectiveDist`**
        : A _Double_ specifying the effective dist. The default value is DFLT_DBL.
        
        **`dCN`**
        : A _Double_ specifying the c n. The default value is DFLT_DBL.
        
        **`dCT`**
        : A _Double_ specifying the c t. The default value is DFLT_DBL.
        
        **`crlClearance`**
        : A _Cursor List_ specifying the clearance. The default value is [].
        
        **`crplTarget`**
        : A _Cursor Pair List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`dSearchAngle`**
        : A _Double_ specifying the search angle. The default value is DFLT_DBL.
        
        **`iConstraintTypeExplicit`**
        : An _Integer_ specifying the constraint type explicit. The default value is 0.
        
        **`dPenaltyFact`**
        : A _Double_ specifying the penalty fact. The default value is DFLT_DBL.
        
        **`dPenaltyFactExplicit`**
        : A _Double_ specifying the penalty fact explicit. The default value is DFLT_DBL.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 16711680.
        
        **`iAlg`**
        : An _Integer_ specifying the algorithm. The default value is 0.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.ADVC.ContactGroupByMatrix(strName="ContactADVC", iContactType=0, iSlidingType=0, iInitialState=0, dInitialStateTol=DFLT_DBL, dKineticFrictionCoef=DFLT_DBL, dExponentialCoef=DFLT_DBL, iBehavior=0, dClearance=DFLT_DBL, iAdjust2Clearance=0, dInterference=DFLT_DBL, iAdjust2Interference=0, iAutoShrink=0, iAdvAdjust=0, dAdjustValue=DFLT_DBL, dFrictionCoef=DFLT_DBL, dMaxShear=DFLT_DBL, dElasticSlip=DFLT_DBL, dSlipTolerance=DFLT_DBL, dSearchWidth=DFLT_DBL, dSearchGap=DFLT_DBL, dSearchDepth=DFLT_DBL, dCritialPenetration=DFLT_DBL, iEstimationImpactTime=0, iFormula=0, iConstraintType=0, iDataType=0, iTypeId=0, bTemperatureDependency=False, iNumDependencies=0, tshTableClearance=[], bStabilized=0, iStabilizeType=0, dResidualFactor=DFLT_DBL, dEffectiveDist=DFLT_DBL, dCN=DFLT_DBL, dCT=DFLT_DBL, crlClearance=[], crplTarget=[], crEdit=None, dSearchAngle=DFLT_DBL, iConstraintTypeExplicit=0, dPenaltyFact=DFLT_DBL, dPenaltyFactExplicit=DFLT_DBL, iColor=16711680, iAlg=0, iMethod=0)
        ```
        
        """
        message = "Connections.Contacts.ADVC.ContactGroupByMatrix('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{},{},{},{},{})".format(strName, iContactType, iSlidingType, iInitialState, dInitialStateTol, dKineticFrictionCoef, dExponentialCoef, iBehavior, dClearance, iAdjust2Clearance, dInterference, iAdjust2Interference, iAutoShrink, iAdvAdjust, dAdjustValue, dFrictionCoef, dMaxShear, dElasticSlip, dSlipTolerance, dSearchWidth, dSearchGap, dSearchDepth, dCritialPenetration, iEstimationImpactTime, iFormula, iConstraintType, iDataType, iTypeId, bTemperatureDependency, iNumDependencies, tshTableClearance, bStabilized, iStabilizeType, dResidualFactor, dEffectiveDist, dCN, dCT, crlClearance, crplTarget, crEdit, dSearchAngle, iConstraintTypeExplicit, dPenaltyFact, dPenaltyFactExplicit, iColor, iAlg, iMethod)
        return JPT_RUN_LINE(message)

class Contacts_Ansys:
    def ManualGroup(self, strName="ContactAnsys_1", iMethod=1, iType=0, iContactAlgorithm=0, ansysContact=ANSYS_CONTACT(), crplTarget=[], crEdit=None, iColor=16711680):
        r"""
        ## Description
        
        create contact ansys Manual Group
        
        ## Syntax
        
        ```python
        Connections.Contacts.Ansys.ManualGroup(strName="ContactAnsys_1", iMethod=1, iType=0, iContactAlgorithm=0, ansysContact=ANSYS_CONTACT(), crplTarget=[], crEdit=None, iColor=16711680)
        ```
        
        Macro: {ref}`Macro-Connections-ContactAnsys`
        
        Ribbon: {menuselection}`Connections --> Contacts --> Ansys --> ManualGroup`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ContactAnsys_1".
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 1.
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 0.
        
        **`iContactAlgorithm`**
        : An _Integer_ specifying the contact algorithm. The default value is 0.
        
        **`ansysContact`**
        : A _ANSYS_CONTACT_ specifying the contact. The default value is ANSYS_CONTACT().
        
        **`crplTarget`**
        : A _Cursor Pair List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 16711680.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.Ansys.ManualGroup(strName="ContactAnsys_1", iMethod=1, iType=0, iContactAlgorithm=0, ansysContact=ANSYS_CONTACT(), crplTarget=[], crEdit=None, iColor=16711680)
        ```
        
        """
        message = "Connections.Contacts.Ansys.ManualGroup('{}',{},{},{},{},{},{},{})".format(strName, iMethod, iType, iContactAlgorithm, ansysContact, crplTarget, crEdit, iColor)
        return JPT_RUN_LINE(message)

    def ManualFace(self, crlFaceMaster=[], crlFaceSlave=[], strName="ContactAnsys_1", iMethod=1, iType=0, iContactAlgorithm=0, ansysContact=ANSYS_CONTACT(), crEdit=None, iColor=16711680):
        r"""
        ## Description
        
        create contacts of Ansys Manual Face
        
        ## Syntax
        
        ```python
        Connections.Contacts.Ansys.ManualFace(crlFaceMaster=[], crlFaceSlave=[], strName="ContactAnsys_1", iMethod=1, iType=0, iContactAlgorithm=0, ansysContact=ANSYS_CONTACT(), crEdit=None, iColor=16711680)
        ```
        
        Macro: {ref}`Macro-Connections-LbcContactManualFaceAnsys`
        
        Ribbon: {menuselection}`Connections --> Contacts --> Ansys --> ManualFace`
        
        ## Inputs
        
        **`crlFaceMaster`**
        : A _Cursor List_ specifying the face master. The default value is [].
        
        **`crlFaceSlave`**
        : A _Cursor List_ specifying the face slave. The default value is [].
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ContactAnsys_1".
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 1.
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 0.
        
        **`iContactAlgorithm`**
        : An _Integer_ specifying the contact algorithm. The default value is 0.
        
        **`ansysContact`**
        : A _ANSYS_CONTACT_ specifying the contact. The default value is ANSYS_CONTACT().
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 16711680.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.Ansys.ManualFace(crlFaceMaster=[], crlFaceSlave=[], strName="ContactAnsys_1", iMethod=1, iType=0, iContactAlgorithm=0, ansysContact=ANSYS_CONTACT(), crEdit=None, iColor=16711680)
        ```
        
        """
        message = "Connections.Contacts.Ansys.ManualFace({},{},'{}',{},{},{},{},{},{})".format(crlFaceMaster, crlFaceSlave, strName, iMethod, iType, iContactAlgorithm, ansysContact, crEdit, iColor)
        return JPT_RUN_LINE(message)

    def ContactGroupByMatrix(self, strName="ContactAnsys_1", iMethod=1, iType=0, iContactAlgorithm=0, ansysContact=ANSYS_CONTACT(), crplTarget=[], crEdit=None, iColor=16711680):
        r"""
        ## Description
        
        create contact ansys Group By Matrix
        
        ## Syntax
        
        ```python
        Connections.Contacts.Ansys.ContactGroupByMatrix(strName="ContactAnsys_1", iMethod=1, iType=0, iContactAlgorithm=0, ansysContact=ANSYS_CONTACT(), crplTarget=[], crEdit=None, iColor=16711680)
        ```
        
        Macro: {ref}`Macro-Connections-LbcContactByGroupMatrixANSYS`
        
        Ribbon: {menuselection}`Connections --> Contacts --> Ansys --> ContactGroupByMatrix`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ContactAnsys_1".
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 1.
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 0.
        
        **`iContactAlgorithm`**
        : An _Integer_ specifying the contact algorithm. The default value is 0.
        
        **`ansysContact`**
        : A _ANSYS_CONTACT_ specifying the contact. The default value is ANSYS_CONTACT().
        
        **`crplTarget`**
        : A _Cursor Pair List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 16711680.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.Ansys.ContactGroupByMatrix(strName="ContactAnsys_1", iMethod=1, iType=0, iContactAlgorithm=0, ansysContact=ANSYS_CONTACT(), crplTarget=[], crEdit=None, iColor=16711680)
        ```
        
        """
        message = "Connections.Contacts.Ansys.ContactGroupByMatrix('{}',{},{},{},{},{},{},{})".format(strName, iMethod, iType, iContactAlgorithm, ansysContact, crplTarget, crEdit, iColor)
        return JPT_RUN_LINE(message)

    def ContactShareFace(self, crlShareFace=[], strName="ContactAnsys_1", iMethod=3, iType=0, iContactAlgorithm=0, ansysContact=ANSYS_CONTACT(), crEdit=None, iColor=16711680):
        r"""
        ## Description
        
        create contact ansys Share Face
        
        ## Syntax
        
        ```python
        Connections.Contacts.Ansys.ContactShareFace(crlShareFace=[], strName="ContactAnsys_1", iMethod=3, iType=0, iContactAlgorithm=0, ansysContact=ANSYS_CONTACT(), crEdit=None, iColor=16711680)
        ```
        
        Macro: {ref}`Macro-Connections-LbcContactShareFaceANSYSCr`
        
        Ribbon: {menuselection}`Connections --> Contacts --> Ansys --> ContactShareFace`
        
        ## Inputs
        
        **`crlShareFace`**
        : A _Cursor List_ specifying the share face. The default value is [].
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ContactAnsys_1".
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 3.
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 0.
        
        **`iContactAlgorithm`**
        : An _Integer_ specifying the contact algorithm. The default value is 0.
        
        **`ansysContact`**
        : A _ANSYS_CONTACT_ specifying the contact. The default value is ANSYS_CONTACT().
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 16711680.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.Ansys.ContactShareFace(crlShareFace=[], strName="ContactAnsys_1", iMethod=3, iType=0, iContactAlgorithm=0, ansysContact=ANSYS_CONTACT(), crEdit=None, iColor=16711680)
        ```
        
        """
        message = "Connections.Contacts.Ansys.ContactShareFace({},'{}',{},{},{},{},{},{})".format(crlShareFace, strName, iMethod, iType, iContactAlgorithm, ansysContact, crEdit, iColor)
        return JPT_RUN_LINE(message)

    def ContactTable(self, strName="ContactAnsys_1", iMethod=1, iType=0, iContactAlgorithm=0, ansysContact=ANSYS_CONTACT(), crplTarget=[], crEdit=None, iColor=16711680):
        r"""
        ## Description
        
        create contact ansys Contact Table
        
        ## Syntax
        
        ```python
        Connections.Contacts.Ansys.ContactTable(strName="ContactAnsys_1", iMethod=1, iType=0, iContactAlgorithm=0, ansysContact=ANSYS_CONTACT(), crplTarget=[], crEdit=None, iColor=16711680)
        ```
        
        Macro: {ref}`Macro-Connections-LbcContactTableANSYS`
        
        Ribbon: {menuselection}`Connections --> Contacts --> Ansys --> ContactTable`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ContactAnsys_1".
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 1.
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 0.
        
        **`iContactAlgorithm`**
        : An _Integer_ specifying the contact algorithm. The default value is 0.
        
        **`ansysContact`**
        : A _ANSYS_CONTACT_ specifying the contact. The default value is ANSYS_CONTACT().
        
        **`crplTarget`**
        : A _Cursor Pair List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 16711680.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.Ansys.ContactTable(strName="ContactAnsys_1", iMethod=1, iType=0, iContactAlgorithm=0, ansysContact=ANSYS_CONTACT(), crplTarget=[], crEdit=None, iColor=16711680)
        ```
        
        """
        message = "Connections.Contacts.Ansys.ContactTable('{}',{},{},{},{},{},{},{})".format(strName, iMethod, iType, iContactAlgorithm, ansysContact, crplTarget, crEdit, iColor)
        return JPT_RUN_LINE(message)

class Contacts_MSCNastran:
    def ManualGroup(self, strName="", nastranContact=NASTRAN_CONTACT(), crplTarget=[], crEdit=None, iColor=65280, iMethod=1):
        r"""
        ## Description
        
        create contacts of MSC Nastran
        
        ## Syntax
        
        ```python
        Connections.Contacts.MSCNastran.ManualGroup(strName="", nastranContact=NASTRAN_CONTACT(), crplTarget=[], crEdit=None, iColor=65280, iMethod=1)
        ```
        
        Macro: {ref}`Macro-Connections-ContactMSCNastran`
        
        Ribbon: {menuselection}`Connections --> Contacts --> MSCNastran --> ManualGroup`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`nastranContact`**
        : A _NASTRAN_CONTACT_ specifying the contact. The default value is NASTRAN_CONTACT().
        
        **`crplTarget`**
        : A _Cursor Pair List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 65280.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.MSCNastran.ManualGroup(strName="", nastranContact=NASTRAN_CONTACT(), crplTarget=[], crEdit=None, iColor=65280, iMethod=1)
        ```
        
        """
        message = "Connections.Contacts.MSCNastran.ManualGroup('{}','{}',{},{},{},{})".format(strName, nastranContact, crplTarget, crEdit, iColor, iMethod)
        return JPT_RUN_LINE(message)

    def ContactGroupByMatrix(self, strName="", nastranContact=NASTRAN_CONTACT(), crplTarget=[], crEdit=None, iColor=65280, iMethod=1):
        r"""
        ## Description
        
        create contacts of MSC Nastran Contact Group By Matrix
        
        ## Syntax
        
        ```python
        Connections.Contacts.MSCNastran.ContactGroupByMatrix(strName="", nastranContact=NASTRAN_CONTACT(), crplTarget=[], crEdit=None, iColor=65280, iMethod=1)
        ```
        
        Macro: {ref}`Macro-Connections-LbcContactByGroupMatrixMSCNastran`
        
        Ribbon: {menuselection}`Connections --> Contacts --> MSCNastran --> ContactGroupByMatrix`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`nastranContact`**
        : A _NASTRAN_CONTACT_ specifying the contact. The default value is NASTRAN_CONTACT().
        
        **`crplTarget`**
        : A _Cursor Pair List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 65280.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.MSCNastran.ContactGroupByMatrix(strName="", nastranContact=NASTRAN_CONTACT(), crplTarget=[], crEdit=None, iColor=65280, iMethod=1)
        ```
        
        """
        message = "Connections.Contacts.MSCNastran.ContactGroupByMatrix('{}','{}',{},{},{},{})".format(strName, nastranContact, crplTarget, crEdit, iColor, iMethod)
        return JPT_RUN_LINE(message)

    def ManualFace(self, crlFaceMaster=[], crlFaceSlave=[], strName="ContactMSCNastran", nastranContact=NASTRAN_CONTACT(), crEdit=None, iColor=65280, iMethod=0):
        r"""
        ## Description
        
        create contacts of MSC Nastran Manual Face
        
        ## Syntax
        
        ```python
        Connections.Contacts.MSCNastran.ManualFace(crlFaceMaster=[], crlFaceSlave=[], strName="ContactMSCNastran", nastranContact=NASTRAN_CONTACT(), crEdit=None, iColor=65280, iMethod=0)
        ```
        
        Macro: {ref}`Macro-Connections-LbcContactManualFaceMSCNastran`
        
        Ribbon: {menuselection}`Connections --> Contacts --> MSCNastran --> ManualFace`
        
        ## Inputs
        
        **`crlFaceMaster`**
        : A _Cursor List_ specifying the face master. The default value is [].
        
        **`crlFaceSlave`**
        : A _Cursor List_ specifying the face slave. The default value is [].
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ContactMSCNastran".
        
        **`nastranContact`**
        : A _NASTRAN_CONTACT_ specifying the contact. The default value is NASTRAN_CONTACT().
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 65280.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.MSCNastran.ManualFace(crlFaceMaster=[], crlFaceSlave=[], strName="ContactMSCNastran", nastranContact=NASTRAN_CONTACT(), crEdit=None, iColor=65280, iMethod=0)
        ```
        
        """
        message = "Connections.Contacts.MSCNastran.ManualFace({},{},'{}','{}',{},{},{})".format(crlFaceMaster, crlFaceSlave, strName, nastranContact, crEdit, iColor, iMethod)
        return JPT_RUN_LINE(message)

    def ContactShareFace(self, crlShareFace=[], strName="", nastranContact=NASTRAN_CONTACT(), crEdit=None, iColor=65280, iMethod=3):
        r"""
        ## Description
        
        create contacts of MSC Nastran Contact Share Face
        
        ## Syntax
        
        ```python
        Connections.Contacts.MSCNastran.ContactShareFace(crlShareFace=[], strName="", nastranContact=NASTRAN_CONTACT(), crEdit=None, iColor=65280, iMethod=3)
        ```
        
        Macro: {ref}`Macro-Connections-LbcContactShareFaceMSCNastranCr`
        
        Ribbon: {menuselection}`Connections --> Contacts --> MSCNastran --> ContactShareFace`
        
        ## Inputs
        
        **`crlShareFace`**
        : A _Cursor List_ specifying the share face. The default value is [].
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`nastranContact`**
        : A _NASTRAN_CONTACT_ specifying the contact. The default value is NASTRAN_CONTACT().
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 65280.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 3.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.MSCNastran.ContactShareFace(crlShareFace=[], strName="", nastranContact=NASTRAN_CONTACT(), crEdit=None, iColor=65280, iMethod=3)
        ```
        
        """
        message = "Connections.Contacts.MSCNastran.ContactShareFace({},'{}','{}',{},{},{})".format(crlShareFace, strName, nastranContact, crEdit, iColor, iMethod)
        return JPT_RUN_LINE(message)

    def ContactTable(self, strName="", nastranContact=NASTRAN_CONTACT(), crplTarget=[], crEdit=None, iColor=65280, iMethod=1):
        r"""
        ## Description
        
        create contacts of MSC Nastran Contact Table
        
        ## Syntax
        
        ```python
        Connections.Contacts.MSCNastran.ContactTable(strName="", nastranContact=NASTRAN_CONTACT(), crplTarget=[], crEdit=None, iColor=65280, iMethod=1)
        ```
        
        Macro: {ref}`Macro-Connections-LbcContactTableMSCNastran`
        
        Ribbon: {menuselection}`Connections --> Contacts --> MSCNastran --> ContactTable`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`nastranContact`**
        : A _NASTRAN_CONTACT_ specifying the contact. The default value is NASTRAN_CONTACT().
        
        **`crplTarget`**
        : A _Cursor Pair List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 65280.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.MSCNastran.ContactTable(strName="", nastranContact=NASTRAN_CONTACT(), crplTarget=[], crEdit=None, iColor=65280, iMethod=1)
        ```
        
        """
        message = "Connections.Contacts.MSCNastran.ContactTable('{}','{}',{},{},{},{})".format(strName, nastranContact, crplTarget, crEdit, iColor, iMethod)
        return JPT_RUN_LINE(message)

class Contacts_NXNastran:
    def ManualFace(self, crlFaceMaster=[], crlFaceSlave=[], strName="ContactNXNastran_1", iContactType=0, iContactAlg=0, dNorPenFactor=10, dTanPenFactor=1, dForceConTol=0.01, dMaxForceIter=10, dMaxStaIter=20, dChangeNum=0.02, dMinContactPer=100, iShellThickness=0, iContactStatus=0, iInitGapPenetra=0, iRegionRefine=0, iEvaluPts=1, dMinSearDist=0, dMaxSearDist=0.01, dFricCoef=0, dSearchDist=0, dPenatlyFactor=0, iShellOffset=0, iColor=0, iMethod=0, crEdit=None):
        r"""
        ## Description
        
        Create Contact NXNastran Manual Face
        
        ## Syntax
        
        ```python
        Connections.Contacts.NXNastran.ManualFace(crlFaceMaster=[], crlFaceSlave=[], strName="ContactNXNastran_1", iContactType=0, iContactAlg=0, dNorPenFactor=10, dTanPenFactor=1, dForceConTol=0.01, dMaxForceIter=10, dMaxStaIter=20, dChangeNum=0.02, dMinContactPer=100, iShellThickness=0, iContactStatus=0, iInitGapPenetra=0, iRegionRefine=0, iEvaluPts=1, dMinSearDist=0, dMaxSearDist=0.01, dFricCoef=0, dSearchDist=0, dPenatlyFactor=0, iShellOffset=0, iColor=0, iMethod=0, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-LbcContactManualFaceNXNastran`
        
        Ribbon: {menuselection}`Connections --> Contacts --> NXNastran --> ManualFace`
        
        ## Inputs
        
        **`crlFaceMaster`**
        : A _Cursor List_ specifying the face master. The default value is [].
        
        **`crlFaceSlave`**
        : A _Cursor List_ specifying the face slave. The default value is [].
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ContactNXNastran_1".
        
        **`iContactType`**
        : An _Integer_ specifying the contact type. The default value is 0.
        
        **`iContactAlg`**
        : An _Integer_ specifying the contact algorithm. The default value is 0.
        
        **`dNorPenFactor`**
        : A _Double_ specifying the nor pen factor. The default value is 10.
        
        **`dTanPenFactor`**
        : A _Double_ specifying the tan pen factor. The default value is 1.
        
        **`dForceConTol`**
        : A _Double_ specifying the force con tolerance. The default value is 0.01.
        
        **`dMaxForceIter`**
        : A _Double_ specifying the maximum force iterator. The default value is 10.
        
        **`dMaxStaIter`**
        : A _Double_ specifying the maximum sta iterator. The default value is 20.
        
        **`dChangeNum`**
        : A _Double_ specifying the change number. The default value is 0.02.
        
        **`dMinContactPer`**
        : A _Double_ specifying the minimum contact per. The default value is 100.
        
        **`iShellThickness`**
        : An _Integer_ specifying the shell thickness. The default value is 0.
        
        **`iContactStatus`**
        : An _Integer_ specifying the contact status. The default value is 0.
        
        **`iInitGapPenetra`**
        : An _Integer_ specifying the initial gap penetra. The default value is 0.
        
        **`iRegionRefine`**
        : An _Integer_ specifying the region refine. The default value is 0.
        
        **`iEvaluPts`**
        : An _Integer_ specifying the evalu pts. The default value is 1.
        
        **`dMinSearDist`**
        : A _Double_ specifying the minimum sear dist. The default value is 0.
        
        **`dMaxSearDist`**
        : A _Double_ specifying the maximum sear dist. The default value is 0.01.
        
        **`dFricCoef`**
        : A _Double_ specifying the fric coefficient . The default value is 0.
        
        **`dSearchDist`**
        : A _Double_ specifying the search dist. The default value is 0.
        
        **`dPenatlyFactor`**
        : A _Double_ specifying the penatly factor. The default value is 0.
        
        **`iShellOffset`**
        : An _Integer_ specifying the shell offset. The default value is 0.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 0.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.NXNastran.ManualFace(crlFaceMaster=[], crlFaceSlave=[], strName="ContactNXNastran_1", iContactType=0, iContactAlg=0, dNorPenFactor=10, dTanPenFactor=1, dForceConTol=0.01, dMaxForceIter=10, dMaxStaIter=20, dChangeNum=0.02, dMinContactPer=100, iShellThickness=0, iContactStatus=0, iInitGapPenetra=0, iRegionRefine=0, iEvaluPts=1, dMinSearDist=0, dMaxSearDist=0.01, dFricCoef=0, dSearchDist=0, dPenatlyFactor=0, iShellOffset=0, iColor=0, iMethod=0, crEdit=None)
        ```
        
        """
        message = "Connections.Contacts.NXNastran.ManualFace({},{},'{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(crlFaceMaster, crlFaceSlave, strName, iContactType, iContactAlg, dNorPenFactor, dTanPenFactor, dForceConTol, dMaxForceIter, dMaxStaIter, dChangeNum, dMinContactPer, iShellThickness, iContactStatus, iInitGapPenetra, iRegionRefine, iEvaluPts, dMinSearDist, dMaxSearDist, dFricCoef, dSearchDist, dPenatlyFactor, iShellOffset, iColor, iMethod, crEdit)
        return JPT_RUN_LINE(message)

    def ContactShareFace(self, crlShareFace=[], strName="ContactNXNastran_1", iContactType=0, iContactAlg=0, dNorPenFactor=10, dTanPenFactor=1, dForceConTol=0.01, dMaxForceIter=10, dMaxStaIter=20, dChangeNum=0.02, dMinContactPer=100, iShellThickness=0, iContactStatus=0, iInitGapPenetra=0, iRegionRefine=0, iEvaluPts=1, dMinSearDist=0, dMaxSearDist=0.01, dFricCoef=0, dSearchDist=0, dPenatlyFactor=0, iShellOffset=0, iColor=0, iMethod=3, crEdit=None):
        r"""
        ## Description
        
        Create Contact NXNastran Contact Share Face
        
        ## Syntax
        
        ```python
        Connections.Contacts.NXNastran.ContactShareFace(crlShareFace=[], strName="ContactNXNastran_1", iContactType=0, iContactAlg=0, dNorPenFactor=10, dTanPenFactor=1, dForceConTol=0.01, dMaxForceIter=10, dMaxStaIter=20, dChangeNum=0.02, dMinContactPer=100, iShellThickness=0, iContactStatus=0, iInitGapPenetra=0, iRegionRefine=0, iEvaluPts=1, dMinSearDist=0, dMaxSearDist=0.01, dFricCoef=0, dSearchDist=0, dPenatlyFactor=0, iShellOffset=0, iColor=0, iMethod=3, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-LbcContactShareFaceNxNastran`
        
        Ribbon: {menuselection}`Connections --> Contacts --> NXNastran --> ContactShareFace`
        
        ## Inputs
        
        **`crlShareFace`**
        : A _Cursor List_ specifying the share face. The default value is [].
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ContactNXNastran_1".
        
        **`iContactType`**
        : An _Integer_ specifying the contact type. The default value is 0.
        
        **`iContactAlg`**
        : An _Integer_ specifying the contact algorithm. The default value is 0.
        
        **`dNorPenFactor`**
        : A _Double_ specifying the nor pen factor. The default value is 10.
        
        **`dTanPenFactor`**
        : A _Double_ specifying the tan pen factor. The default value is 1.
        
        **`dForceConTol`**
        : A _Double_ specifying the force con tolerance. The default value is 0.01.
        
        **`dMaxForceIter`**
        : A _Double_ specifying the maximum force iterator. The default value is 10.
        
        **`dMaxStaIter`**
        : A _Double_ specifying the maximum sta iterator. The default value is 20.
        
        **`dChangeNum`**
        : A _Double_ specifying the change number. The default value is 0.02.
        
        **`dMinContactPer`**
        : A _Double_ specifying the minimum contact per. The default value is 100.
        
        **`iShellThickness`**
        : An _Integer_ specifying the shell thickness. The default value is 0.
        
        **`iContactStatus`**
        : An _Integer_ specifying the contact status. The default value is 0.
        
        **`iInitGapPenetra`**
        : An _Integer_ specifying the initial gap penetra. The default value is 0.
        
        **`iRegionRefine`**
        : An _Integer_ specifying the region refine. The default value is 0.
        
        **`iEvaluPts`**
        : An _Integer_ specifying the evalu pts. The default value is 1.
        
        **`dMinSearDist`**
        : A _Double_ specifying the minimum sear dist. The default value is 0.
        
        **`dMaxSearDist`**
        : A _Double_ specifying the maximum sear dist. The default value is 0.01.
        
        **`dFricCoef`**
        : A _Double_ specifying the fric coefficient . The default value is 0.
        
        **`dSearchDist`**
        : A _Double_ specifying the search dist. The default value is 0.
        
        **`dPenatlyFactor`**
        : A _Double_ specifying the penatly factor. The default value is 0.
        
        **`iShellOffset`**
        : An _Integer_ specifying the shell offset. The default value is 0.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 0.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 3.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.NXNastran.ContactShareFace(crlShareFace=[], strName="ContactNXNastran_1", iContactType=0, iContactAlg=0, dNorPenFactor=10, dTanPenFactor=1, dForceConTol=0.01, dMaxForceIter=10, dMaxStaIter=20, dChangeNum=0.02, dMinContactPer=100, iShellThickness=0, iContactStatus=0, iInitGapPenetra=0, iRegionRefine=0, iEvaluPts=1, dMinSearDist=0, dMaxSearDist=0.01, dFricCoef=0, dSearchDist=0, dPenatlyFactor=0, iShellOffset=0, iColor=0, iMethod=3, crEdit=None)
        ```
        
        """
        message = "Connections.Contacts.NXNastran.ContactShareFace({},'{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(crlShareFace, strName, iContactType, iContactAlg, dNorPenFactor, dTanPenFactor, dForceConTol, dMaxForceIter, dMaxStaIter, dChangeNum, dMinContactPer, iShellThickness, iContactStatus, iInitGapPenetra, iRegionRefine, iEvaluPts, dMinSearDist, dMaxSearDist, dFricCoef, dSearchDist, dPenatlyFactor, iShellOffset, iColor, iMethod, crEdit)
        return JPT_RUN_LINE(message)

    def ContactTable(self, strName="", iType=0, iAlg=0, dNorPenFactor=0, dTanPenFactor=0, dForceConTol=0, dMaxForceIter=0, dMaxStaIter=0, dChangeNum=0, dMinContactPer=0, iShellThickness=0, iContactStatus=0, iInitGapPenetra=0, iRegionRefine=0, iEvaluPts=0, dMinSearDist=0, dMaxSearDist=0, dFricCoef=0, dSearchDist=0, dPenatlyFactor=0, iShellOffset=0, crplTargetPair=[], crEdit=None, iColor=0, iMethod=1):
        r"""
        ## Description
        
        Create Contact NXNastran Contact Table
        
        ## Syntax
        
        ```python
        Connections.Contacts.NXNastran.ContactTable(strName="", iType=0, iAlg=0, dNorPenFactor=0, dTanPenFactor=0, dForceConTol=0, dMaxForceIter=0, dMaxStaIter=0, dChangeNum=0, dMinContactPer=0, iShellThickness=0, iContactStatus=0, iInitGapPenetra=0, iRegionRefine=0, iEvaluPts=0, dMinSearDist=0, dMaxSearDist=0, dFricCoef=0, dSearchDist=0, dPenatlyFactor=0, iShellOffset=0, crplTargetPair=[], crEdit=None, iColor=0, iMethod=1)
        ```
        
        Macro: {ref}`Macro-Connections-LbcContactTableNXNastran`
        
        Ribbon: {menuselection}`Connections --> Contacts --> NXNastran --> ContactTable`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 0.
        
        **`iAlg`**
        : An _Integer_ specifying the algorithm. The default value is 0.
        
        **`dNorPenFactor`**
        : A _Double_ specifying the nor pen factor. The default value is 0.
        
        **`dTanPenFactor`**
        : A _Double_ specifying the tan pen factor. The default value is 0.
        
        **`dForceConTol`**
        : A _Double_ specifying the force con tolerance. The default value is 0.
        
        **`dMaxForceIter`**
        : A _Double_ specifying the maximum force iterator. The default value is 0.
        
        **`dMaxStaIter`**
        : A _Double_ specifying the maximum sta iterator. The default value is 0.
        
        **`dChangeNum`**
        : A _Double_ specifying the change number. The default value is 0.
        
        **`dMinContactPer`**
        : A _Double_ specifying the minimum contact per. The default value is 0.
        
        **`iShellThickness`**
        : An _Integer_ specifying the shell thickness. The default value is 0.
        
        **`iContactStatus`**
        : An _Integer_ specifying the contact status. The default value is 0.
        
        **`iInitGapPenetra`**
        : An _Integer_ specifying the initial gap penetra. The default value is 0.
        
        **`iRegionRefine`**
        : An _Integer_ specifying the region refine. The default value is 0.
        
        **`iEvaluPts`**
        : An _Integer_ specifying the evalu pts. The default value is 0.
        
        **`dMinSearDist`**
        : A _Double_ specifying the minimum sear dist. The default value is 0.
        
        **`dMaxSearDist`**
        : A _Double_ specifying the maximum sear dist. The default value is 0.
        
        **`dFricCoef`**
        : A _Double_ specifying the fric coefficient . The default value is 0.
        
        **`dSearchDist`**
        : A _Double_ specifying the search dist. The default value is 0.
        
        **`dPenatlyFactor`**
        : A _Double_ specifying the penatly factor. The default value is 0.
        
        **`iShellOffset`**
        : An _Integer_ specifying the shell offset. The default value is 0.
        
        **`crplTargetPair`**
        : A _Cursor Pair List_ specifying the target pair. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 0.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.NXNastran.ContactTable(strName="", iType=0, iAlg=0, dNorPenFactor=0, dTanPenFactor=0, dForceConTol=0, dMaxForceIter=0, dMaxStaIter=0, dChangeNum=0, dMinContactPer=0, iShellThickness=0, iContactStatus=0, iInitGapPenetra=0, iRegionRefine=0, iEvaluPts=0, dMinSearDist=0, dMaxSearDist=0, dFricCoef=0, dSearchDist=0, dPenatlyFactor=0, iShellOffset=0, crplTargetPair=[], crEdit=None, iColor=0, iMethod=1)
        ```
        
        """
        message = "Connections.Contacts.NXNastran.ContactTable('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, iType, iAlg, dNorPenFactor, dTanPenFactor, dForceConTol, dMaxForceIter, dMaxStaIter, dChangeNum, dMinContactPer, iShellThickness, iContactStatus, iInitGapPenetra, iRegionRefine, iEvaluPts, dMinSearDist, dMaxSearDist, dFricCoef, dSearchDist, dPenatlyFactor, iShellOffset, crplTargetPair, crEdit, iColor, iMethod)
        return JPT_RUN_LINE(message)

    def ManualGroup(self, crFaceMaster=None, crFaceSlave=None, strName="ContactNXNastran_1", iContactType=0, iContactAlg=0, dNorPenFactor=10, dTanPenFactor=1, dForceConTol=0.01, dMaxForceIter=10, dMaxStaIter=20, dChangeNum=0.02, dMinContactPer=100, iShellThickness=0, iContactStatus=0, iInitGapPenetra=0, iRegionRefine=0, iEvaluPts=1, dMinSearDist=0, dMaxSearDist=0.01, dFricCoef=0, dSearchDist=0, dPenatlyFactor=0, iShellOffset=0, iColor=0, iMethod=0, crEdit=None):
        r"""
        ## Description
        
        Create Contact NXNastran Manual Group
        
        ## Syntax
        
        ```python
        Connections.Contacts.NXNastran.ManualGroup(crFaceMaster=None, crFaceSlave=None, strName="ContactNXNastran_1", iContactType=0, iContactAlg=0, dNorPenFactor=10, dTanPenFactor=1, dForceConTol=0.01, dMaxForceIter=10, dMaxStaIter=20, dChangeNum=0.02, dMinContactPer=100, iShellThickness=0, iContactStatus=0, iInitGapPenetra=0, iRegionRefine=0, iEvaluPts=1, dMinSearDist=0, dMaxSearDist=0.01, dFricCoef=0, dSearchDist=0, dPenatlyFactor=0, iShellOffset=0, iColor=0, iMethod=0, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-LbcContactManualGroupNXNastran`
        
        Ribbon: {menuselection}`Connections --> Contacts --> NXNastran --> ManualGroup`
        
        ## Inputs
        
        **`crFaceMaster`**
        : A _Cursor_ specifying the face master. The default value is None.
        
        **`crFaceSlave`**
        : A _Cursor_ specifying the face slave. The default value is None.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ContactNXNastran_1".
        
        **`iContactType`**
        : An _Integer_ specifying the contact type. The default value is 0.
        
        **`iContactAlg`**
        : An _Integer_ specifying the contact algorithm. The default value is 0.
        
        **`dNorPenFactor`**
        : A _Double_ specifying the nor pen factor. The default value is 10.
        
        **`dTanPenFactor`**
        : A _Double_ specifying the tan pen factor. The default value is 1.
        
        **`dForceConTol`**
        : A _Double_ specifying the force con tolerance. The default value is 0.01.
        
        **`dMaxForceIter`**
        : A _Double_ specifying the maximum force iterator. The default value is 10.
        
        **`dMaxStaIter`**
        : A _Double_ specifying the maximum sta iterator. The default value is 20.
        
        **`dChangeNum`**
        : A _Double_ specifying the change number. The default value is 0.02.
        
        **`dMinContactPer`**
        : A _Double_ specifying the minimum contact per. The default value is 100.
        
        **`iShellThickness`**
        : An _Integer_ specifying the shell thickness. The default value is 0.
        
        **`iContactStatus`**
        : An _Integer_ specifying the contact status. The default value is 0.
        
        **`iInitGapPenetra`**
        : An _Integer_ specifying the initial gap penetra. The default value is 0.
        
        **`iRegionRefine`**
        : An _Integer_ specifying the region refine. The default value is 0.
        
        **`iEvaluPts`**
        : An _Integer_ specifying the evalu pts. The default value is 1.
        
        **`dMinSearDist`**
        : A _Double_ specifying the minimum sear dist. The default value is 0.
        
        **`dMaxSearDist`**
        : A _Double_ specifying the maximum sear dist. The default value is 0.01.
        
        **`dFricCoef`**
        : A _Double_ specifying the fric coefficient . The default value is 0.
        
        **`dSearchDist`**
        : A _Double_ specifying the search dist. The default value is 0.
        
        **`dPenatlyFactor`**
        : A _Double_ specifying the penatly factor. The default value is 0.
        
        **`iShellOffset`**
        : An _Integer_ specifying the shell offset. The default value is 0.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 0.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.NXNastran.ManualGroup(crFaceMaster=None, crFaceSlave=None, strName="ContactNXNastran_1", iContactType=0, iContactAlg=0, dNorPenFactor=10, dTanPenFactor=1, dForceConTol=0.01, dMaxForceIter=10, dMaxStaIter=20, dChangeNum=0.02, dMinContactPer=100, iShellThickness=0, iContactStatus=0, iInitGapPenetra=0, iRegionRefine=0, iEvaluPts=1, dMinSearDist=0, dMaxSearDist=0.01, dFricCoef=0, dSearchDist=0, dPenatlyFactor=0, iShellOffset=0, iColor=0, iMethod=0, crEdit=None)
        ```
        
        """
        message = "Connections.Contacts.NXNastran.ManualGroup({},{},'{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(crFaceMaster, crFaceSlave, strName, iContactType, iContactAlg, dNorPenFactor, dTanPenFactor, dForceConTol, dMaxForceIter, dMaxStaIter, dChangeNum, dMinContactPer, iShellThickness, iContactStatus, iInitGapPenetra, iRegionRefine, iEvaluPts, dMinSearDist, dMaxSearDist, dFricCoef, dSearchDist, dPenatlyFactor, iShellOffset, iColor, iMethod, crEdit)
        return JPT_RUN_LINE(message)

    def ContactGroupByMatrix(self, crFaceMaster=None, crFaceSlave=None, strName="ContactNXNastran_1", iContactType=0, iContactAlg=0, dNorPenFactor=10, dTanPenFactor=1, dForceConTol=0.01, dMaxForceIter=10, dMaxStaIter=20, dChangeNum=0.02, dMinContactPer=100, iShellThickness=0, iContactStatus=0, iInitGapPenetra=0, iRegionRefine=0, iEvaluPts=1, dMinSearDist=0, dMaxSearDist=0.01, dFricCoef=0, dSearchDist=0, dPenatlyFactor=0, iShellOffset=0, iColor=0, iMethod=0, crEdit=None):
        r"""
        ## Description
        
        Create Contact NXNastran Contact Group By Matrix
        
        ## Syntax
        
        ```python
        Connections.Contacts.NXNastran.ContactGroupByMatrix(crFaceMaster=None, crFaceSlave=None, strName="ContactNXNastran_1", iContactType=0, iContactAlg=0, dNorPenFactor=10, dTanPenFactor=1, dForceConTol=0.01, dMaxForceIter=10, dMaxStaIter=20, dChangeNum=0.02, dMinContactPer=100, iShellThickness=0, iContactStatus=0, iInitGapPenetra=0, iRegionRefine=0, iEvaluPts=1, dMinSearDist=0, dMaxSearDist=0.01, dFricCoef=0, dSearchDist=0, dPenatlyFactor=0, iShellOffset=0, iColor=0, iMethod=0, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-LbcContactContactGroupByMatrixNXNastran`
        
        Ribbon: {menuselection}`Connections --> Contacts --> NXNastran --> ContactGroupByMatrix`
        
        ## Inputs
        
        **`crFaceMaster`**
        : A _Cursor_ specifying the face master. The default value is None.
        
        **`crFaceSlave`**
        : A _Cursor_ specifying the face slave. The default value is None.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ContactNXNastran_1".
        
        **`iContactType`**
        : An _Integer_ specifying the contact type. The default value is 0.
        
        **`iContactAlg`**
        : An _Integer_ specifying the contact algorithm. The default value is 0.
        
        **`dNorPenFactor`**
        : A _Double_ specifying the nor pen factor. The default value is 10.
        
        **`dTanPenFactor`**
        : A _Double_ specifying the tan pen factor. The default value is 1.
        
        **`dForceConTol`**
        : A _Double_ specifying the force con tolerance. The default value is 0.01.
        
        **`dMaxForceIter`**
        : A _Double_ specifying the maximum force iterator. The default value is 10.
        
        **`dMaxStaIter`**
        : A _Double_ specifying the maximum sta iterator. The default value is 20.
        
        **`dChangeNum`**
        : A _Double_ specifying the change number. The default value is 0.02.
        
        **`dMinContactPer`**
        : A _Double_ specifying the minimum contact per. The default value is 100.
        
        **`iShellThickness`**
        : An _Integer_ specifying the shell thickness. The default value is 0.
        
        **`iContactStatus`**
        : An _Integer_ specifying the contact status. The default value is 0.
        
        **`iInitGapPenetra`**
        : An _Integer_ specifying the initial gap penetra. The default value is 0.
        
        **`iRegionRefine`**
        : An _Integer_ specifying the region refine. The default value is 0.
        
        **`iEvaluPts`**
        : An _Integer_ specifying the evalu pts. The default value is 1.
        
        **`dMinSearDist`**
        : A _Double_ specifying the minimum sear dist. The default value is 0.
        
        **`dMaxSearDist`**
        : A _Double_ specifying the maximum sear dist. The default value is 0.01.
        
        **`dFricCoef`**
        : A _Double_ specifying the fric coefficient . The default value is 0.
        
        **`dSearchDist`**
        : A _Double_ specifying the search dist. The default value is 0.
        
        **`dPenatlyFactor`**
        : A _Double_ specifying the penatly factor. The default value is 0.
        
        **`iShellOffset`**
        : An _Integer_ specifying the shell offset. The default value is 0.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 0.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.NXNastran.ContactGroupByMatrix(crFaceMaster=None, crFaceSlave=None, strName="ContactNXNastran_1", iContactType=0, iContactAlg=0, dNorPenFactor=10, dTanPenFactor=1, dForceConTol=0.01, dMaxForceIter=10, dMaxStaIter=20, dChangeNum=0.02, dMinContactPer=100, iShellThickness=0, iContactStatus=0, iInitGapPenetra=0, iRegionRefine=0, iEvaluPts=1, dMinSearDist=0, dMaxSearDist=0.01, dFricCoef=0, dSearchDist=0, dPenatlyFactor=0, iShellOffset=0, iColor=0, iMethod=0, crEdit=None)
        ```
        
        """
        message = "Connections.Contacts.NXNastran.ContactGroupByMatrix({},{},'{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(crFaceMaster, crFaceSlave, strName, iContactType, iContactAlg, dNorPenFactor, dTanPenFactor, dForceConTol, dMaxForceIter, dMaxStaIter, dChangeNum, dMinContactPer, iShellThickness, iContactStatus, iInitGapPenetra, iRegionRefine, iEvaluPts, dMinSearDist, dMaxSearDist, dFricCoef, dSearchDist, dPenatlyFactor, iShellOffset, iColor, iMethod, crEdit)
        return JPT_RUN_LINE(message)

class Contacts_TSSolver:
    def ManualFace(self, strName="ContactTSSolver_1", nastranContact=TSSOLVER_CONTACT(), crplTarget=[], crEdit=None, iColor=16711680, iMethod=0):
        r"""
        ## Description
        
        Create TSSolver Contact
        
        ## Syntax
        
        ```python
        Connections.Contacts.TSSolver.ManualFace(strName="ContactTSSolver_1", nastranContact=TSSOLVER_CONTACT(), crplTarget=[], crEdit=None, iColor=16711680, iMethod=0)
        ```
        
        Macro: {ref}`Macro-Connections-ContactTSSolver`
        
        Ribbon: {menuselection}`Connections --> Contacts --> TSSolver --> ManualFace`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ContactTSSolver_1".
        
        **`nastranContact`**
        : A _NASTRAN_CONTACT_ specifying the contact. The default value is TSSOLVER_CONTACT().
        
        **`crplTarget`**
        : A _Cursor Pair List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 16711680.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.TSSolver.ManualFace(strName="ContactTSSolver_1", nastranContact=TSSOLVER_CONTACT(), crplTarget=[], crEdit=None, iColor=16711680, iMethod=0)
        ```
        
        """
        message = "Connections.Contacts.TSSolver.ManualFace('{}','{}',{},{},{},{})".format(strName, nastranContact, crplTarget, crEdit, iColor, iMethod)
        return JPT_RUN_LINE(message)

    def Auto(self, strlNames, crllMasterFaceTargets, crllSlaveFaceTargets, crlContactTypes=[1], dlInterferenceClosures=[1.0], dlFrictionCoefficients=[DFLT_DBL], blInitialAdjustments=[False], crlColors=[65280], crlEdit=[], crlMasterGroup=[], crlSlaveGroup=[]):
        r"""
        ## Description
        
        find contact
        
        ## Syntax
        
        ```python
        Connections.Contacts.TSSolver.Auto(strlNames, crllMasterFaceTargets, crllSlaveFaceTargets, crlContactTypes=[1], dlInterferenceClosures=[1.0], dlFrictionCoefficients=[DFLT_DBL], blInitialAdjustments=[False], crlColors=[65280], crlEdit=[], crlMasterGroup=[], crlSlaveGroup=[])
        ```
        
        Macro: {ref}`Macro-Connections-FindContact`
        
        Ribbon: {menuselection}`Connections --> Contacts --> TSSolver --> Auto`
        
        ## Inputs
        
        **`strlNames`**
        : A _String List_ specifying the names. This is a required input.
        
        **`crllMasterFaceTargets`**
        : A _Cursor List List_ specifying the master face targets. This is a required input.
        
        **`crllSlaveFaceTargets`**
        : A _Cursor List List_ specifying the slave face targets. This is a required input.
        
        **`crlContactTypes`**
        : A _Cursor List_ specifying the contact types. The default value is [1].
        
        **`dlInterferenceClosures`**
        : A _Double List_ specifying the interference closures. The default value is [1.0].
        
        **`dlFrictionCoefficients`**
        : A _Double List_ specifying the friction coefficients. The default value is [DFLT_DBL].
        
        **`blInitialAdjustments`**
        : A _Boolean List_ specifying the initial adjustments. The default value is [False].
        
        **`crlColors`**
        : A _Cursor List_ specifying the colors. The default value is [65280].
        
        **`crlEdit`**
        : A _Cursor List_ specifying the edit. The default value is [].
        
        **`crlMasterGroup`**
        : A _Cursor List_ specifying the master group. The default value is [].
        
        **`crlSlaveGroup`**
        : A _Cursor List_ specifying the slave group. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.TSSolver.Auto(strlNames, crllMasterFaceTargets, crllSlaveFaceTargets, crlContactTypes=[1], dlInterferenceClosures=[1.0], dlFrictionCoefficients=[DFLT_DBL], blInitialAdjustments=[False], crlColors=[65280], crlEdit=[], crlMasterGroup=[], crlSlaveGroup=[])
        ```
        
        """
        message = "Connections.Contacts.TSSolver.Auto('{}',{},{},{},{},{},{},{},{},{},{})".format(strlNames, crllMasterFaceTargets, crllSlaveFaceTargets, crlContactTypes, dlInterferenceClosures, dlFrictionCoefficients, blInitialAdjustments, crlColors, crlEdit, crlMasterGroup, crlSlaveGroup)
        return JPT_RUN_LINE(message)

    def ManualGroup(self, strName="ContactTSSolver_1", tssolverContact=TSSOLVER_CONTACT(), crplTarget=[], crEdit=None, iColor=16711680, iMethod=0):
        r"""
        ## Description
        
        Create TSSolver Contact
        
        ## Syntax
        
        ```python
        Connections.Contacts.TSSolver.ManualGroup(strName="ContactTSSolver_1", tssolverContact=TSSOLVER_CONTACT(), crplTarget=[], crEdit=None, iColor=16711680, iMethod=0)
        ```
        
        Macro: {ref}`Macro-Connections-LbcContactTSSolver_ManualGroup`
        
        Ribbon: {menuselection}`Connections --> Contacts --> TSSolver --> ManualGroup`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ContactTSSolver_1".
        
        **`tssolverContact`**
        : A _TSSOLVER_CONTACT_ specifying the contact. The default value is TSSOLVER_CONTACT().
        
        **`crplTarget`**
        : A _Cursor Pair List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 16711680.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.TSSolver.ManualGroup(strName="ContactTSSolver_1", tssolverContact=TSSOLVER_CONTACT(), crplTarget=[], crEdit=None, iColor=16711680, iMethod=0)
        ```
        
        """
        message = "Connections.Contacts.TSSolver.ManualGroup('{}',{},{},{},{},{})".format(strName, tssolverContact, crplTarget, crEdit, iColor, iMethod)
        return JPT_RUN_LINE(message)

class Contacts_TSSS:
    def ManualFace(self, crlFaceMaster=[], crlFaceSlave=[], strName="ContactTS_SS_1", nastranContact=SUNSHINE_CONTACT(), crEdit=None, iColor=0, iMethod=0):
        r"""
        ## Description
        
        Create Contact TSSS Manual Face
        
        ## Syntax
        
        ```python
        Connections.Contacts.TSSS.ManualFace(crlFaceMaster=[], crlFaceSlave=[], strName="ContactTS_SS_1", nastranContact=SUNSHINE_CONTACT(), crEdit=None, iColor=0, iMethod=0)
        ```
        
        Macro: {ref}`Macro-Connections-ContactManualFaceTSSS`
        
        Ribbon: {menuselection}`Connections --> Contacts --> TSSS --> ManualFace`
        
        ## Inputs
        
        **`crlFaceMaster`**
        : A _Cursor List_ specifying the face master. The default value is [].
        
        **`crlFaceSlave`**
        : A _Cursor List_ specifying the face slave. The default value is [].
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ContactTS_SS_1".
        
        **`nastranContact`**
        : A _NASTRAN_CONTACT_ specifying the contact. The default value is SUNSHINE_CONTACT().
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 0.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.TSSS.ManualFace(crlFaceMaster=[], crlFaceSlave=[], strName="ContactTS_SS_1", nastranContact=SUNSHINE_CONTACT(), crEdit=None, iColor=0, iMethod=0)
        ```
        
        """
        message = "Connections.Contacts.TSSS.ManualFace({},{},'{}','{}',{},{},{})".format(crlFaceMaster, crlFaceSlave, strName, nastranContact, crEdit, iColor, iMethod)
        return JPT_RUN_LINE(message)

    def ManualGroup(self, strName="ContactTS_SS_1", tssolverContact=SUNSHINE_CONTACT(), crplTarget=[], crEdit=None, iColor=0, iMethod=1):
        r"""
        ## Description
        
        Create Contact TSSS Manual FaceGroup
        
        ## Syntax
        
        ```python
        Connections.Contacts.TSSS.ManualGroup(strName="ContactTS_SS_1", tssolverContact=SUNSHINE_CONTACT(), crplTarget=[], crEdit=None, iColor=0, iMethod=1)
        ```
        
        Macro: {ref}`Macro-Connections-ContactTSSS`
        
        Ribbon: {menuselection}`Connections --> Contacts --> TSSS --> ManualGroup`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ContactTS_SS_1".
        
        **`tssolverContact`**
        : A _TSSOLVER_CONTACT_ specifying the contact. The default value is SUNSHINE_CONTACT().
        
        **`crplTarget`**
        : A _Cursor Pair List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 0.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.TSSS.ManualGroup(strName="ContactTS_SS_1", tssolverContact=SUNSHINE_CONTACT(), crplTarget=[], crEdit=None, iColor=0, iMethod=1)
        ```
        
        """
        message = "Connections.Contacts.TSSS.ManualGroup('{}',{},{},{},{},{})".format(strName, tssolverContact, crplTarget, crEdit, iColor, iMethod)
        return JPT_RUN_LINE(message)

    def ContactTable(self, strName="ContactTS_SS_1", nastranContact=SUNSHINE_CONTACT(), crplTarget=[], crEdit=None, iColor=0, iMethod=1):
        r"""
        ## Description
        
        Create Contact TSSS Manual FaceGroup
        
        ## Syntax
        
        ```python
        Connections.Contacts.TSSS.ContactTable(strName="ContactTS_SS_1", nastranContact=SUNSHINE_CONTACT(), crplTarget=[], crEdit=None, iColor=0, iMethod=1)
        ```
        
        Macro: {ref}`Macro-Connections-ContactTSSS_ContactTable`
        
        Ribbon: {menuselection}`Connections --> Contacts --> TSSS --> ContactTable`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ContactTS_SS_1".
        
        **`nastranContact`**
        : A _NASTRAN_CONTACT_ specifying the contact. The default value is SUNSHINE_CONTACT().
        
        **`crplTarget`**
        : A _Cursor Pair List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 0.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.TSSS.ContactTable(strName="ContactTS_SS_1", nastranContact=SUNSHINE_CONTACT(), crplTarget=[], crEdit=None, iColor=0, iMethod=1)
        ```
        
        """
        message = "Connections.Contacts.TSSS.ContactTable('{}','{}',{},{},{},{})".format(strName, nastranContact, crplTarget, crEdit, iColor, iMethod)
        return JPT_RUN_LINE(message)

class MPC_Equation:
    def MultiNodes(self, strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Connections.MPC.Equation.MultiNodes(strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-Mpc`
        
        Ribbon: {menuselection}`Connections --> MPC --> Equation --> MultiNodes`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "MPC_1".
        
        **`crlMaster`**
        : A _Cursor List_ specifying the master. The default value is [].
        
        **`crlSlave`**
        : A _Cursor List_ specifying the slave. The default value is [].
        
        **`listMpcConnection`**
        : A _MPC_CONNECTION List_ specifying the mpc connection. The default value is [].
        
        **`dSearchTol`**
        : A _Double_ specifying the search tolerance. The default value is 0.0.
        
        **`dValue`**
        : A _Double_ specifying the value. The default value is 0.0.
        
        **`iMPCType`**
        : An _Integer_ specifying the MPC type. The default value is 0.
        
        **`iSearchType`**
        : An _Integer_ specifying the search type. The default value is 1.
        
        **`iCoordSys`**
        : An _Integer_ specifying the coordinate system. The default value is 0.
        
        **`bUpdateDispCS`**
        : A _Boolean_ specifying the update displacement coordinate system. The default value is True.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.MPC.Equation.MultiNodes(strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None)
        ```
        
        """
        message = "Connections.MPC.Equation.MultiNodes('{}',{},{},{},{},{},{},{},{},{},{})".format(strName, crlMaster, crlSlave, listMpcConnection, dSearchTol, dValue, iMPCType, iSearchType, iCoordSys, bUpdateDispCS, crEdit)
        return JPT_RUN_LINE(message)

    def TwoFace(self, strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Connections.MPC.Equation.TwoFace(strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-Mpc`
        
        Ribbon: {menuselection}`Connections --> MPC --> Equation --> TwoFace`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "MPC_1".
        
        **`crlMaster`**
        : A _Cursor List_ specifying the master. The default value is [].
        
        **`crlSlave`**
        : A _Cursor List_ specifying the slave. The default value is [].
        
        **`listMpcConnection`**
        : A _MPC_CONNECTION List_ specifying the mpc connection. The default value is [].
        
        **`dSearchTol`**
        : A _Double_ specifying the search tolerance. The default value is 0.0.
        
        **`dValue`**
        : A _Double_ specifying the value. The default value is 0.0.
        
        **`iMPCType`**
        : An _Integer_ specifying the MPC type. The default value is 0.
        
        **`iSearchType`**
        : An _Integer_ specifying the search type. The default value is 1.
        
        **`iCoordSys`**
        : An _Integer_ specifying the coordinate system. The default value is 0.
        
        **`bUpdateDispCS`**
        : A _Boolean_ specifying the update displacement coordinate system. The default value is True.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.MPC.Equation.TwoFace(strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None)
        ```
        
        """
        message = "Connections.MPC.Equation.TwoFace('{}',{},{},{},{},{},{},{},{},{},{})".format(strName, crlMaster, crlSlave, listMpcConnection, dSearchTol, dValue, iMPCType, iSearchType, iCoordSys, bUpdateDispCS, crEdit)
        return JPT_RUN_LINE(message)

    def SemiAuto(self, strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Connections.MPC.Equation.SemiAuto(strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-Mpc`
        
        Ribbon: {menuselection}`Connections --> MPC --> Equation --> SemiAuto`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "MPC_1".
        
        **`crlMaster`**
        : A _Cursor List_ specifying the master. The default value is [].
        
        **`crlSlave`**
        : A _Cursor List_ specifying the slave. The default value is [].
        
        **`listMpcConnection`**
        : A _MPC_CONNECTION List_ specifying the mpc connection. The default value is [].
        
        **`dSearchTol`**
        : A _Double_ specifying the search tolerance. The default value is 0.0.
        
        **`dValue`**
        : A _Double_ specifying the value. The default value is 0.0.
        
        **`iMPCType`**
        : An _Integer_ specifying the MPC type. The default value is 0.
        
        **`iSearchType`**
        : An _Integer_ specifying the search type. The default value is 1.
        
        **`iCoordSys`**
        : An _Integer_ specifying the coordinate system. The default value is 0.
        
        **`bUpdateDispCS`**
        : A _Boolean_ specifying the update displacement coordinate system. The default value is True.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.MPC.Equation.SemiAuto(strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None)
        ```
        
        """
        message = "Connections.MPC.Equation.SemiAuto('{}',{},{},{},{},{},{},{},{},{},{})".format(strName, crlMaster, crlSlave, listMpcConnection, dSearchTol, dValue, iMPCType, iSearchType, iCoordSys, bUpdateDispCS, crEdit)
        return JPT_RUN_LINE(message)

class MPC_General:
    def NodeToNode(self, strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Connections.MPC.General.NodeToNode(strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-Mpc`
        
        Ribbon: {menuselection}`Connections --> MPC --> General --> NodeToNode`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "MPC_1".
        
        **`crlMaster`**
        : A _Cursor List_ specifying the master. The default value is [].
        
        **`crlSlave`**
        : A _Cursor List_ specifying the slave. The default value is [].
        
        **`listMpcConnection`**
        : A _MPC_CONNECTION List_ specifying the mpc connection. The default value is [].
        
        **`dSearchTol`**
        : A _Double_ specifying the search tolerance. The default value is 0.0.
        
        **`dValue`**
        : A _Double_ specifying the value. The default value is 0.0.
        
        **`iMPCType`**
        : An _Integer_ specifying the MPC type. The default value is 0.
        
        **`iSearchType`**
        : An _Integer_ specifying the search type. The default value is 1.
        
        **`iCoordSys`**
        : An _Integer_ specifying the coordinate system. The default value is 0.
        
        **`bUpdateDispCS`**
        : A _Boolean_ specifying the update displacement coordinate system. The default value is True.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.MPC.General.NodeToNode(strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None)
        ```
        
        """
        message = "Connections.MPC.General.NodeToNode('{}',{},{},{},{},{},{},{},{},{},{})".format(strName, crlMaster, crlSlave, listMpcConnection, dSearchTol, dValue, iMPCType, iSearchType, iCoordSys, bUpdateDispCS, crEdit)
        return JPT_RUN_LINE(message)

    def NodeToEdges(self, strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Connections.MPC.General.NodeToEdges(strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-Mpc`
        
        Ribbon: {menuselection}`Connections --> MPC --> General --> NodeToEdges`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "MPC_1".
        
        **`crlMaster`**
        : A _Cursor List_ specifying the master. The default value is [].
        
        **`crlSlave`**
        : A _Cursor List_ specifying the slave. The default value is [].
        
        **`listMpcConnection`**
        : A _MPC_CONNECTION List_ specifying the mpc connection. The default value is [].
        
        **`dSearchTol`**
        : A _Double_ specifying the search tolerance. The default value is 0.0.
        
        **`dValue`**
        : A _Double_ specifying the value. The default value is 0.0.
        
        **`iMPCType`**
        : An _Integer_ specifying the MPC type. The default value is 0.
        
        **`iSearchType`**
        : An _Integer_ specifying the search type. The default value is 1.
        
        **`iCoordSys`**
        : An _Integer_ specifying the coordinate system. The default value is 0.
        
        **`bUpdateDispCS`**
        : A _Boolean_ specifying the update displacement coordinate system. The default value is True.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.MPC.General.NodeToEdges(strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None)
        ```
        
        """
        message = "Connections.MPC.General.NodeToEdges('{}',{},{},{},{},{},{},{},{},{},{})".format(strName, crlMaster, crlSlave, listMpcConnection, dSearchTol, dValue, iMPCType, iSearchType, iCoordSys, bUpdateDispCS, crEdit)
        return JPT_RUN_LINE(message)

    def NodeToFaces(self, strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Connections.MPC.General.NodeToFaces(strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-Mpc`
        
        Ribbon: {menuselection}`Connections --> MPC --> General --> NodeToFaces`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "MPC_1".
        
        **`crlMaster`**
        : A _Cursor List_ specifying the master. The default value is [].
        
        **`crlSlave`**
        : A _Cursor List_ specifying the slave. The default value is [].
        
        **`listMpcConnection`**
        : A _MPC_CONNECTION List_ specifying the mpc connection. The default value is [].
        
        **`dSearchTol`**
        : A _Double_ specifying the search tolerance. The default value is 0.0.
        
        **`dValue`**
        : A _Double_ specifying the value. The default value is 0.0.
        
        **`iMPCType`**
        : An _Integer_ specifying the MPC type. The default value is 0.
        
        **`iSearchType`**
        : An _Integer_ specifying the search type. The default value is 1.
        
        **`iCoordSys`**
        : An _Integer_ specifying the coordinate system. The default value is 0.
        
        **`bUpdateDispCS`**
        : A _Boolean_ specifying the update displacement coordinate system. The default value is True.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.MPC.General.NodeToFaces(strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None)
        ```
        
        """
        message = "Connections.MPC.General.NodeToFaces('{}',{},{},{},{},{},{},{},{},{},{})".format(strName, crlMaster, crlSlave, listMpcConnection, dSearchTol, dValue, iMPCType, iSearchType, iCoordSys, bUpdateDispCS, crEdit)
        return JPT_RUN_LINE(message)

    def TwoEdges(self, strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Connections.MPC.General.TwoEdges(strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-Mpc`
        
        Ribbon: {menuselection}`Connections --> MPC --> General --> TwoEdges`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "MPC_1".
        
        **`crlMaster`**
        : A _Cursor List_ specifying the master. The default value is [].
        
        **`crlSlave`**
        : A _Cursor List_ specifying the slave. The default value is [].
        
        **`listMpcConnection`**
        : A _MPC_CONNECTION List_ specifying the mpc connection. The default value is [].
        
        **`dSearchTol`**
        : A _Double_ specifying the search tolerance. The default value is 0.0.
        
        **`dValue`**
        : A _Double_ specifying the value. The default value is 0.0.
        
        **`iMPCType`**
        : An _Integer_ specifying the MPC type. The default value is 0.
        
        **`iSearchType`**
        : An _Integer_ specifying the search type. The default value is 1.
        
        **`iCoordSys`**
        : An _Integer_ specifying the coordinate system. The default value is 0.
        
        **`bUpdateDispCS`**
        : A _Boolean_ specifying the update displacement coordinate system. The default value is True.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.MPC.General.TwoEdges(strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None)
        ```
        
        """
        message = "Connections.MPC.General.TwoEdges('{}',{},{},{},{},{},{},{},{},{},{})".format(strName, crlMaster, crlSlave, listMpcConnection, dSearchTol, dValue, iMPCType, iSearchType, iCoordSys, bUpdateDispCS, crEdit)
        return JPT_RUN_LINE(message)

    def FacesToFaces(self, strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Connections.MPC.General.FacesToFaces(strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-Mpc`
        
        Ribbon: {menuselection}`Connections --> MPC --> General --> FacesToFaces`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "MPC_1".
        
        **`crlMaster`**
        : A _Cursor List_ specifying the master. The default value is [].
        
        **`crlSlave`**
        : A _Cursor List_ specifying the slave. The default value is [].
        
        **`listMpcConnection`**
        : A _MPC_CONNECTION List_ specifying the mpc connection. The default value is [].
        
        **`dSearchTol`**
        : A _Double_ specifying the search tolerance. The default value is 0.0.
        
        **`dValue`**
        : A _Double_ specifying the value. The default value is 0.0.
        
        **`iMPCType`**
        : An _Integer_ specifying the MPC type. The default value is 0.
        
        **`iSearchType`**
        : An _Integer_ specifying the search type. The default value is 1.
        
        **`iCoordSys`**
        : An _Integer_ specifying the coordinate system. The default value is 0.
        
        **`bUpdateDispCS`**
        : A _Boolean_ specifying the update displacement coordinate system. The default value is True.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.MPC.General.FacesToFaces(strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None)
        ```
        
        """
        message = "Connections.MPC.General.FacesToFaces('{}',{},{},{},{},{},{},{},{},{},{})".format(strName, crlMaster, crlSlave, listMpcConnection, dSearchTol, dValue, iMPCType, iSearchType, iCoordSys, bUpdateDispCS, crEdit)
        return JPT_RUN_LINE(message)

    def NodesToNodes(self, strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Connections.MPC.General.NodesToNodes(strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-Mpc`
        
        Ribbon: {menuselection}`Connections --> MPC --> General --> NodesToNodes`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "MPC_1".
        
        **`crlMaster`**
        : A _Cursor List_ specifying the master. The default value is [].
        
        **`crlSlave`**
        : A _Cursor List_ specifying the slave. The default value is [].
        
        **`listMpcConnection`**
        : A _MPC_CONNECTION List_ specifying the mpc connection. The default value is [].
        
        **`dSearchTol`**
        : A _Double_ specifying the search tolerance. The default value is 0.0.
        
        **`dValue`**
        : A _Double_ specifying the value. The default value is 0.0.
        
        **`iMPCType`**
        : An _Integer_ specifying the MPC type. The default value is 0.
        
        **`iSearchType`**
        : An _Integer_ specifying the search type. The default value is 1.
        
        **`iCoordSys`**
        : An _Integer_ specifying the coordinate system. The default value is 0.
        
        **`bUpdateDispCS`**
        : A _Boolean_ specifying the update displacement coordinate system. The default value is True.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.MPC.General.NodesToNodes(strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None)
        ```
        
        """
        message = "Connections.MPC.General.NodesToNodes('{}',{},{},{},{},{},{},{},{},{},{})".format(strName, crlMaster, crlSlave, listMpcConnection, dSearchTol, dValue, iMPCType, iSearchType, iCoordSys, bUpdateDispCS, crEdit)
        return JPT_RUN_LINE(message)

    def TwoFaces(self, strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Connections.MPC.General.TwoFaces(strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-Mpc`
        
        Ribbon: {menuselection}`Connections --> MPC --> General --> TwoFaces`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "MPC_1".
        
        **`crlMaster`**
        : A _Cursor List_ specifying the master. The default value is [].
        
        **`crlSlave`**
        : A _Cursor List_ specifying the slave. The default value is [].
        
        **`listMpcConnection`**
        : A _MPC_CONNECTION List_ specifying the mpc connection. The default value is [].
        
        **`dSearchTol`**
        : A _Double_ specifying the search tolerance. The default value is 0.0.
        
        **`dValue`**
        : A _Double_ specifying the value. The default value is 0.0.
        
        **`iMPCType`**
        : An _Integer_ specifying the MPC type. The default value is 0.
        
        **`iSearchType`**
        : An _Integer_ specifying the search type. The default value is 1.
        
        **`iCoordSys`**
        : An _Integer_ specifying the coordinate system. The default value is 0.
        
        **`bUpdateDispCS`**
        : A _Boolean_ specifying the update displacement coordinate system. The default value is True.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.MPC.General.TwoFaces(strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None)
        ```
        
        """
        message = "Connections.MPC.General.TwoFaces('{}',{},{},{},{},{},{},{},{},{},{})".format(strName, crlMaster, crlSlave, listMpcConnection, dSearchTol, dValue, iMPCType, iSearchType, iCoordSys, bUpdateDispCS, crEdit)
        return JPT_RUN_LINE(message)

    def NodeToAny(self, strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Connections.MPC.General.NodeToAny(strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-Mpc`
        
        Ribbon: {menuselection}`Connections --> MPC --> General --> NodeToAny`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "MPC_1".
        
        **`crlMaster`**
        : A _Cursor List_ specifying the master. The default value is [].
        
        **`crlSlave`**
        : A _Cursor List_ specifying the slave. The default value is [].
        
        **`listMpcConnection`**
        : A _MPC_CONNECTION List_ specifying the mpc connection. The default value is [].
        
        **`dSearchTol`**
        : A _Double_ specifying the search tolerance. The default value is 0.0.
        
        **`dValue`**
        : A _Double_ specifying the value. The default value is 0.0.
        
        **`iMPCType`**
        : An _Integer_ specifying the MPC type. The default value is 0.
        
        **`iSearchType`**
        : An _Integer_ specifying the search type. The default value is 1.
        
        **`iCoordSys`**
        : An _Integer_ specifying the coordinate system. The default value is 0.
        
        **`bUpdateDispCS`**
        : A _Boolean_ specifying the update displacement coordinate system. The default value is True.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.MPC.General.NodeToAny(strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None)
        ```
        
        """
        message = "Connections.MPC.General.NodeToAny('{}',{},{},{},{},{},{},{},{},{},{})".format(strName, crlMaster, crlSlave, listMpcConnection, dSearchTol, dValue, iMPCType, iSearchType, iCoordSys, bUpdateDispCS, crEdit)
        return JPT_RUN_LINE(message)

    def NodesWithTolerance(self, strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Connections.MPC.General.NodesWithTolerance(strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-Mpc`
        
        Ribbon: {menuselection}`Connections --> MPC --> General --> NodesWithTolerance`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "MPC_1".
        
        **`crlMaster`**
        : A _Cursor List_ specifying the master. The default value is [].
        
        **`crlSlave`**
        : A _Cursor List_ specifying the slave. The default value is [].
        
        **`listMpcConnection`**
        : A _MPC_CONNECTION List_ specifying the mpc connection. The default value is [].
        
        **`dSearchTol`**
        : A _Double_ specifying the search tolerance. The default value is 0.0.
        
        **`dValue`**
        : A _Double_ specifying the value. The default value is 0.0.
        
        **`iMPCType`**
        : An _Integer_ specifying the MPC type. The default value is 0.
        
        **`iSearchType`**
        : An _Integer_ specifying the search type. The default value is 1.
        
        **`iCoordSys`**
        : An _Integer_ specifying the coordinate system. The default value is 0.
        
        **`bUpdateDispCS`**
        : A _Boolean_ specifying the update displacement coordinate system. The default value is True.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.MPC.General.NodesWithTolerance(strName="MPC_1", crlMaster=[], crlSlave=[], listMpcConnection=[], dSearchTol=0.0, dValue=0.0, iMPCType=0, iSearchType=1, iCoordSys=0, bUpdateDispCS=True, crEdit=None)
        ```
        
        """
        message = "Connections.MPC.General.NodesWithTolerance('{}',{},{},{},{},{},{},{},{},{},{})".format(strName, crlMaster, crlSlave, listMpcConnection, dSearchTol, dValue, iMPCType, iSearchType, iCoordSys, bUpdateDispCS, crEdit)
        return JPT_RUN_LINE(message)

class RigidElements_RBar:
    def OneToOne(self, strName="RBAR_1", crlMasterTarget=[], crlSlaveTarget=[], iMethod=17, iUlDOFs=0, dTol=DFLT_DBL, crCoord=None, crEdit=None):
        r"""
        ## Description
        
        create RBar
        
        ## Syntax
        
        ```python
        Connections.RigidElements.RBar.OneToOne(strName="RBAR_1", crlMasterTarget=[], crlSlaveTarget=[], iMethod=17, iUlDOFs=0, dTol=DFLT_DBL, crCoord=None, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-RBarOneToOne`
        
        Ribbon: {menuselection}`Connections --> RigidElements --> RBar --> OneToOne`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "RBAR_1".
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. The default value is [].
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. The default value is [].
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 17.
        
        **`iUlDOFs`**
        : An _Integer_ specifying the ul d o fs. The default value is 0.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is DFLT_DBL.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.RigidElements.RBar.OneToOne(strName="RBAR_1", crlMasterTarget=[], crlSlaveTarget=[], iMethod=17, iUlDOFs=0, dTol=DFLT_DBL, crCoord=None, crEdit=None)
        ```
        
        """
        message = "Connections.RigidElements.RBar.OneToOne('{}',{},{},{},{},{},{},{})".format(strName, crlMasterTarget, crlSlaveTarget, iMethod, iUlDOFs, dTol, crCoord, crEdit)
        return JPT_RUN_LINE(message)

    def OneToMany(self, strName="RBAR_1", crlMasterTarget=[], crlSlaveTarget=[], iMethod=16, iUlDOFs=0, dTol=DFLT_DBL, crCoord=None, crEdit=None):
        r"""
        ## Description
        
        create RBar
        
        ## Syntax
        
        ```python
        Connections.RigidElements.RBar.OneToMany(strName="RBAR_1", crlMasterTarget=[], crlSlaveTarget=[], iMethod=16, iUlDOFs=0, dTol=DFLT_DBL, crCoord=None, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-RBarOneToMany`
        
        Ribbon: {menuselection}`Connections --> RigidElements --> RBar --> OneToMany`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "RBAR_1".
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. The default value is [].
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. The default value is [].
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 16.
        
        **`iUlDOFs`**
        : An _Integer_ specifying the ul d o fs. The default value is 0.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is DFLT_DBL.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.RigidElements.RBar.OneToMany(strName="RBAR_1", crlMasterTarget=[], crlSlaveTarget=[], iMethod=16, iUlDOFs=0, dTol=DFLT_DBL, crCoord=None, crEdit=None)
        ```
        
        """
        message = "Connections.RigidElements.RBar.OneToMany('{}',{},{},{},{},{},{},{})".format(strName, crlMasterTarget, crlSlaveTarget, iMethod, iUlDOFs, dTol, crCoord, crEdit)
        return JPT_RUN_LINE(message)

    def OneToOneNodesWithTolerance(self, strName="RBAR_1", crlMasterTarget=[], crlSlaveTarget=[], iMethod=21, iUlDOFs=0, dTol=DFLT_DBL, crCoord=None, crEdit=None):
        r"""
        ## Description
        
        create RBar
        
        ## Syntax
        
        ```python
        Connections.RigidElements.RBar.OneToOneNodesWithTolerance(strName="RBAR_1", crlMasterTarget=[], crlSlaveTarget=[], iMethod=21, iUlDOFs=0, dTol=DFLT_DBL, crCoord=None, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-RBarOneToOneNodesWithTolerance`
        
        Ribbon: {menuselection}`Connections --> RigidElements --> RBar --> OneToOneNodesWithTolerance`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "RBAR_1".
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. The default value is [].
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. The default value is [].
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 21.
        
        **`iUlDOFs`**
        : An _Integer_ specifying the ul d o fs. The default value is 0.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is DFLT_DBL.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.RigidElements.RBar.OneToOneNodesWithTolerance(strName="RBAR_1", crlMasterTarget=[], crlSlaveTarget=[], iMethod=21, iUlDOFs=0, dTol=DFLT_DBL, crCoord=None, crEdit=None)
        ```
        
        """
        message = "Connections.RigidElements.RBar.OneToOneNodesWithTolerance('{}',{},{},{},{},{},{},{})".format(strName, crlMasterTarget, crlSlaveTarget, iMethod, iUlDOFs, dTol, crCoord, crEdit)
        return JPT_RUN_LINE(message)

class RigidElements_RBE2:
    def OneToMany(self, iMethod=16, crlMasterTarget=[], crlSlaveTarget=[], iEType=2, strName="RBE2_1", crCoordSys=None, dTolerance=0.0, iUlDOFs=63, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=1, iEnableCornerOnly=0, iEnableCheckDulplicate=1, iDuplicateMode=0):
        r"""
        ## Description
        
        create RBE2
        
        ## Syntax
        
        ```python
        Connections.RigidElements.RBE2.OneToMany(iMethod=16, crlMasterTarget=[], crlSlaveTarget=[], iEType=2, strName="RBE2_1", crCoordSys=None, dTolerance=0.0, iUlDOFs=63, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=1, iEnableCornerOnly=0, iEnableCheckDulplicate=1, iDuplicateMode=0)
        ```
        
        Macro: {ref}`Macro-Connections-RBE2OneToMany`
        
        Ribbon: {menuselection}`Connections --> RigidElements --> RBE2 --> OneToMany`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 16.
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. The default value is [].
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. The default value is [].
        
        **`iEType`**
        : An _Integer_ specifying the e type. The default value is 2.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "RBE2_1".
        
        **`crCoordSys`**
        : A _Cursor_ specifying the coordinate system. The default value is None.
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. The default value is 0.0.
        
        **`iUlDOFs`**
        : An _Integer_ specifying the ul d o fs. The default value is 63.
        
        **`dlVirtualNodePos`**
        : A _Double List_ specifying the virtual node position. The default value is [0, 0, 0].
        
        **`iSurfaceDef`**
        : An _Integer_ specifying the surface definition. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iEnableUpdateDispCS`**
        : An _Integer_ specifying the enable update displacement coordinate system. The default value is 1.
        
        **`iEnableCornerOnly`**
        : An _Integer_ specifying the enable corner only. The default value is 0.
        
        **`iEnableCheckDulplicate`**
        : An _Integer_ specifying the enable check dulplicate. The default value is 1.
        
        **`iDuplicateMode`**
        : An _Integer_ specifying the duplicate mode. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.RigidElements.RBE2.OneToMany(iMethod=16, crlMasterTarget=[], crlSlaveTarget=[], iEType=2, strName="RBE2_1", crCoordSys=None, dTolerance=0.0, iUlDOFs=63, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=1, iEnableCornerOnly=0, iEnableCheckDulplicate=1, iDuplicateMode=0)
        ```
        
        """
        message = "Connections.RigidElements.RBE2.OneToMany({},{},{},{},'{}',{},{},{},{},{},{},{},{},{},{})".format(iMethod, crlMasterTarget, crlSlaveTarget, iEType, strName, crCoordSys, dTolerance, iUlDOFs, dlVirtualNodePos, iSurfaceDef, crEdit, iEnableUpdateDispCS, iEnableCornerOnly, iEnableCheckDulplicate, iDuplicateMode)
        return JPT_RUN_LINE(message)

    def OneToOne(self, iMethod=17, crlMasterTarget=[], crlSlaveTarget=[], iEType=2, strName="RBE2_1", crCoordSys=None, dTolerance=0.0, iUlDOFs=63, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=1, iEnableCornerOnly=0, iEnableCheckDulplicate=1, iDuplicateMode=0):
        r"""
        ## Description
        
        create RBE2
        
        ## Syntax
        
        ```python
        Connections.RigidElements.RBE2.OneToOne(iMethod=17, crlMasterTarget=[], crlSlaveTarget=[], iEType=2, strName="RBE2_1", crCoordSys=None, dTolerance=0.0, iUlDOFs=63, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=1, iEnableCornerOnly=0, iEnableCheckDulplicate=1, iDuplicateMode=0)
        ```
        
        Macro: {ref}`Macro-Connections-RBE2OneToOne`
        
        Ribbon: {menuselection}`Connections --> RigidElements --> RBE2 --> OneToOne`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 17.
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. The default value is [].
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. The default value is [].
        
        **`iEType`**
        : An _Integer_ specifying the e type. The default value is 2.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "RBE2_1".
        
        **`crCoordSys`**
        : A _Cursor_ specifying the coordinate system. The default value is None.
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. The default value is 0.0.
        
        **`iUlDOFs`**
        : An _Integer_ specifying the ul d o fs. The default value is 63.
        
        **`dlVirtualNodePos`**
        : A _Double List_ specifying the virtual node position. The default value is [0, 0, 0].
        
        **`iSurfaceDef`**
        : An _Integer_ specifying the surface definition. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iEnableUpdateDispCS`**
        : An _Integer_ specifying the enable update displacement coordinate system. The default value is 1.
        
        **`iEnableCornerOnly`**
        : An _Integer_ specifying the enable corner only. The default value is 0.
        
        **`iEnableCheckDulplicate`**
        : An _Integer_ specifying the enable check dulplicate. The default value is 1.
        
        **`iDuplicateMode`**
        : An _Integer_ specifying the duplicate mode. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.RigidElements.RBE2.OneToOne(iMethod=17, crlMasterTarget=[], crlSlaveTarget=[], iEType=2, strName="RBE2_1", crCoordSys=None, dTolerance=0.0, iUlDOFs=63, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=1, iEnableCornerOnly=0, iEnableCheckDulplicate=1, iDuplicateMode=0)
        ```
        
        """
        message = "Connections.RigidElements.RBE2.OneToOne({},{},{},{},'{}',{},{},{},{},{},{},{},{},{},{})".format(iMethod, crlMasterTarget, crlSlaveTarget, iEType, strName, crCoordSys, dTolerance, iUlDOFs, dlVirtualNodePos, iSurfaceDef, crEdit, iEnableUpdateDispCS, iEnableCornerOnly, iEnableCheckDulplicate, iDuplicateMode)
        return JPT_RUN_LINE(message)

    def OneToOneNodesWithTolerance(self, iMethod=21, crlMasterTarget=[], crlSlaveTarget=[], iEType=2, strName="RBE2_1", crCoordSys=None, dTolerance=0.0, iUlDOFs=63, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=1, iEnableCornerOnly=0, iEnableCheckDulplicate=1, iDuplicateMode=0):
        r"""
        ## Description
        
        create RBE2
        
        ## Syntax
        
        ```python
        Connections.RigidElements.RBE2.OneToOneNodesWithTolerance(iMethod=21, crlMasterTarget=[], crlSlaveTarget=[], iEType=2, strName="RBE2_1", crCoordSys=None, dTolerance=0.0, iUlDOFs=63, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=1, iEnableCornerOnly=0, iEnableCheckDulplicate=1, iDuplicateMode=0)
        ```
        
        Macro: {ref}`Macro-Connections-RBE2OneToOneNodesWithTolerance`
        
        Ribbon: {menuselection}`Connections --> RigidElements --> RBE2 --> OneToOneNodesWithTolerance`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 21.
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. The default value is [].
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. The default value is [].
        
        **`iEType`**
        : An _Integer_ specifying the e type. The default value is 2.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "RBE2_1".
        
        **`crCoordSys`**
        : A _Cursor_ specifying the coordinate system. The default value is None.
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. The default value is 0.0.
        
        **`iUlDOFs`**
        : An _Integer_ specifying the ul d o fs. The default value is 63.
        
        **`dlVirtualNodePos`**
        : A _Double List_ specifying the virtual node position. The default value is [0, 0, 0].
        
        **`iSurfaceDef`**
        : An _Integer_ specifying the surface definition. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iEnableUpdateDispCS`**
        : An _Integer_ specifying the enable update displacement coordinate system. The default value is 1.
        
        **`iEnableCornerOnly`**
        : An _Integer_ specifying the enable corner only. The default value is 0.
        
        **`iEnableCheckDulplicate`**
        : An _Integer_ specifying the enable check dulplicate. The default value is 1.
        
        **`iDuplicateMode`**
        : An _Integer_ specifying the duplicate mode. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.RigidElements.RBE2.OneToOneNodesWithTolerance(iMethod=21, crlMasterTarget=[], crlSlaveTarget=[], iEType=2, strName="RBE2_1", crCoordSys=None, dTolerance=0.0, iUlDOFs=63, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=1, iEnableCornerOnly=0, iEnableCheckDulplicate=1, iDuplicateMode=0)
        ```
        
        """
        message = "Connections.RigidElements.RBE2.OneToOneNodesWithTolerance({},{},{},{},'{}',{},{},{},{},{},{},{},{},{},{})".format(iMethod, crlMasterTarget, crlSlaveTarget, iEType, strName, crCoordSys, dTolerance, iUlDOFs, dlVirtualNodePos, iSurfaceDef, crEdit, iEnableUpdateDispCS, iEnableCornerOnly, iEnableCheckDulplicate, iDuplicateMode)
        return JPT_RUN_LINE(message)

    def ToCenter(self, iMethod=18, crlMasterTarget=[], crlSlaveTarget=[], iEType=2, strName="RBE2_1", crCoordSys=None, dTolerance=0.0, iUlDOFs=63, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=1, iEnableCornerOnly=0, iEnableCheckDulplicate=1, iDuplicateMode=0):
        r"""
        ## Description
        
        create RBE2
        
        ## Syntax
        
        ```python
        Connections.RigidElements.RBE2.ToCenter(iMethod=18, crlMasterTarget=[], crlSlaveTarget=[], iEType=2, strName="RBE2_1", crCoordSys=None, dTolerance=0.0, iUlDOFs=63, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=1, iEnableCornerOnly=0, iEnableCheckDulplicate=1, iDuplicateMode=0)
        ```
        
        Macro: {ref}`Macro-Connections-RBE2ToCenter`
        
        Ribbon: {menuselection}`Connections --> RigidElements --> RBE2 --> ToCenter`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 18.
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. The default value is [].
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. The default value is [].
        
        **`iEType`**
        : An _Integer_ specifying the e type. The default value is 2.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "RBE2_1".
        
        **`crCoordSys`**
        : A _Cursor_ specifying the coordinate system. The default value is None.
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. The default value is 0.0.
        
        **`iUlDOFs`**
        : An _Integer_ specifying the ul d o fs. The default value is 63.
        
        **`dlVirtualNodePos`**
        : A _Double List_ specifying the virtual node position. The default value is [0, 0, 0].
        
        **`iSurfaceDef`**
        : An _Integer_ specifying the surface definition. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iEnableUpdateDispCS`**
        : An _Integer_ specifying the enable update displacement coordinate system. The default value is 1.
        
        **`iEnableCornerOnly`**
        : An _Integer_ specifying the enable corner only. The default value is 0.
        
        **`iEnableCheckDulplicate`**
        : An _Integer_ specifying the enable check dulplicate. The default value is 1.
        
        **`iDuplicateMode`**
        : An _Integer_ specifying the duplicate mode. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.RigidElements.RBE2.ToCenter(iMethod=18, crlMasterTarget=[], crlSlaveTarget=[], iEType=2, strName="RBE2_1", crCoordSys=None, dTolerance=0.0, iUlDOFs=63, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=1, iEnableCornerOnly=0, iEnableCheckDulplicate=1, iDuplicateMode=0)
        ```
        
        """
        message = "Connections.RigidElements.RBE2.ToCenter({},{},{},{},'{}',{},{},{},{},{},{},{},{},{},{})".format(iMethod, crlMasterTarget, crlSlaveTarget, iEType, strName, crCoordSys, dTolerance, iUlDOFs, dlVirtualNodePos, iSurfaceDef, crEdit, iEnableUpdateDispCS, iEnableCornerOnly, iEnableCheckDulplicate, iDuplicateMode)
        return JPT_RUN_LINE(message)

    def ToCircleCenter(self, iMethod=19, crlMasterTarget=[], crlSlaveTarget=[], iEType=2, strName="RBE2_1", crCoordSys=None, dTolerance=0.0, iUlDOFs=63, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=1, iEnableCornerOnly=0, iEnableCheckDulplicate=1, iDuplicateMode=0):
        r"""
        ## Description
        
        create RBE2
        
        ## Syntax
        
        ```python
        Connections.RigidElements.RBE2.ToCircleCenter(iMethod=19, crlMasterTarget=[], crlSlaveTarget=[], iEType=2, strName="RBE2_1", crCoordSys=None, dTolerance=0.0, iUlDOFs=63, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=1, iEnableCornerOnly=0, iEnableCheckDulplicate=1, iDuplicateMode=0)
        ```
        
        Macro: {ref}`Macro-Connections-RBE2ToCircleCenter`
        
        Ribbon: {menuselection}`Connections --> RigidElements --> RBE2 --> ToCircleCenter`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 19.
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. The default value is [].
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. The default value is [].
        
        **`iEType`**
        : An _Integer_ specifying the e type. The default value is 2.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "RBE2_1".
        
        **`crCoordSys`**
        : A _Cursor_ specifying the coordinate system. The default value is None.
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. The default value is 0.0.
        
        **`iUlDOFs`**
        : An _Integer_ specifying the ul d o fs. The default value is 63.
        
        **`dlVirtualNodePos`**
        : A _Double List_ specifying the virtual node position. The default value is [0, 0, 0].
        
        **`iSurfaceDef`**
        : An _Integer_ specifying the surface definition. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iEnableUpdateDispCS`**
        : An _Integer_ specifying the enable update displacement coordinate system. The default value is 1.
        
        **`iEnableCornerOnly`**
        : An _Integer_ specifying the enable corner only. The default value is 0.
        
        **`iEnableCheckDulplicate`**
        : An _Integer_ specifying the enable check dulplicate. The default value is 1.
        
        **`iDuplicateMode`**
        : An _Integer_ specifying the duplicate mode. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.RigidElements.RBE2.ToCircleCenter(iMethod=19, crlMasterTarget=[], crlSlaveTarget=[], iEType=2, strName="RBE2_1", crCoordSys=None, dTolerance=0.0, iUlDOFs=63, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=1, iEnableCornerOnly=0, iEnableCheckDulplicate=1, iDuplicateMode=0)
        ```
        
        """
        message = "Connections.RigidElements.RBE2.ToCircleCenter({},{},{},{},'{}',{},{},{},{},{},{},{},{},{},{})".format(iMethod, crlMasterTarget, crlSlaveTarget, iEType, strName, crCoordSys, dTolerance, iUlDOFs, dlVirtualNodePos, iSurfaceDef, crEdit, iEnableUpdateDispCS, iEnableCornerOnly, iEnableCheckDulplicate, iDuplicateMode)
        return JPT_RUN_LINE(message)

class RigidElements_RBE3:
    def OneToMany(self, iMethod=16, crlMasterTarget=[], crlSlaveTarget=[], listRbe3TermConnection=[], iTypeRBE3=3, strName="", crCoordSys=None, dTolerance=0.0, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=True, iEnableCornerOnly=False):
        r"""
        ## Description
        
        Create RBE3
        
        ## Syntax
        
        ```python
        Connections.RigidElements.RBE3.OneToMany(iMethod=16, crlMasterTarget=[], crlSlaveTarget=[], listRbe3TermConnection=[], iTypeRBE3=3, strName="", crCoordSys=None, dTolerance=0.0, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=True, iEnableCornerOnly=False)
        ```
        
        Macro: {ref}`Macro-Connections-RBE3OneToMany`
        
        Ribbon: {menuselection}`Connections --> RigidElements --> RBE3 --> OneToMany`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 16.
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. The default value is [].
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. The default value is [].
        
        **`listRbe3TermConnection`**
        : A _RBE3TERM_CONNECTION List_ specifying the rbe3 term connection. The default value is [].
        
        **`iTypeRBE3`**
        : An _Integer_ specifying the type r e3. The default value is 3.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`crCoordSys`**
        : A _Cursor_ specifying the coordinate system. The default value is None.
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. The default value is 0.0.
        
        **`dlVirtualNodePos`**
        : A _Double List_ specifying the virtual node position. The default value is [0, 0, 0].
        
        **`iSurfaceDef`**
        : An _Integer_ specifying the surface definition. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iEnableUpdateDispCS`**
        : An _Integer_ specifying the enable update displacement coordinate system. The default value is True.
        
        **`iEnableCornerOnly`**
        : An _Integer_ specifying the enable corner only. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.RigidElements.RBE3.OneToMany(iMethod=16, crlMasterTarget=[], crlSlaveTarget=[], listRbe3TermConnection=[], iTypeRBE3=3, strName="", crCoordSys=None, dTolerance=0.0, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=True, iEnableCornerOnly=False)
        ```
        
        """
        message = "Connections.RigidElements.RBE3.OneToMany({},{},{},{},{},'{}',{},{},{},{},{},{},{})".format(iMethod, crlMasterTarget, crlSlaveTarget, listRbe3TermConnection, iTypeRBE3, strName, crCoordSys, dTolerance, dlVirtualNodePos, iSurfaceDef, crEdit, iEnableUpdateDispCS, iEnableCornerOnly)
        return JPT_RUN_LINE(message)

    def OneToOne(self, iMethod=17, crlMasterTarget=[], crlSlaveTarget=[], listRbe3TermConnection=[], iTypeRBE3=3, strName="", crCoordSys=None, dTolerance=0.0, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=True, iEnableCornerOnly=False):
        r"""
        ## Description
        
        Create RBE3
        
        ## Syntax
        
        ```python
        Connections.RigidElements.RBE3.OneToOne(iMethod=17, crlMasterTarget=[], crlSlaveTarget=[], listRbe3TermConnection=[], iTypeRBE3=3, strName="", crCoordSys=None, dTolerance=0.0, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=True, iEnableCornerOnly=False)
        ```
        
        Macro: {ref}`Macro-Connections-RBE3OneToOne`
        
        Ribbon: {menuselection}`Connections --> RigidElements --> RBE3 --> OneToOne`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 17.
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. The default value is [].
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. The default value is [].
        
        **`listRbe3TermConnection`**
        : A _RBE3TERM_CONNECTION List_ specifying the rbe3 term connection. The default value is [].
        
        **`iTypeRBE3`**
        : An _Integer_ specifying the type r e3. The default value is 3.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`crCoordSys`**
        : A _Cursor_ specifying the coordinate system. The default value is None.
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. The default value is 0.0.
        
        **`dlVirtualNodePos`**
        : A _Double List_ specifying the virtual node position. The default value is [0, 0, 0].
        
        **`iSurfaceDef`**
        : An _Integer_ specifying the surface definition. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iEnableUpdateDispCS`**
        : An _Integer_ specifying the enable update displacement coordinate system. The default value is True.
        
        **`iEnableCornerOnly`**
        : An _Integer_ specifying the enable corner only. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.RigidElements.RBE3.OneToOne(iMethod=17, crlMasterTarget=[], crlSlaveTarget=[], listRbe3TermConnection=[], iTypeRBE3=3, strName="", crCoordSys=None, dTolerance=0.0, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=True, iEnableCornerOnly=False)
        ```
        
        """
        message = "Connections.RigidElements.RBE3.OneToOne({},{},{},{},{},'{}',{},{},{},{},{},{},{})".format(iMethod, crlMasterTarget, crlSlaveTarget, listRbe3TermConnection, iTypeRBE3, strName, crCoordSys, dTolerance, dlVirtualNodePos, iSurfaceDef, crEdit, iEnableUpdateDispCS, iEnableCornerOnly)
        return JPT_RUN_LINE(message)

    def ToCenter(self, iMethod=18, crlMasterTarget=[], crlSlaveTarget=[], listRbe3TermConnection=[], iTypeRBE3=3, strName="", crCoordSys=None, dTolerance=0.0, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=True, iEnableCornerOnly=False):
        r"""
        ## Description
        
        Create RBE3
        
        ## Syntax
        
        ```python
        Connections.RigidElements.RBE3.ToCenter(iMethod=18, crlMasterTarget=[], crlSlaveTarget=[], listRbe3TermConnection=[], iTypeRBE3=3, strName="", crCoordSys=None, dTolerance=0.0, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=True, iEnableCornerOnly=False)
        ```
        
        Macro: {ref}`Macro-Connections-RBE3ToCenter`
        
        Ribbon: {menuselection}`Connections --> RigidElements --> RBE3 --> ToCenter`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 18.
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. The default value is [].
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. The default value is [].
        
        **`listRbe3TermConnection`**
        : A _RBE3TERM_CONNECTION List_ specifying the rbe3 term connection. The default value is [].
        
        **`iTypeRBE3`**
        : An _Integer_ specifying the type r e3. The default value is 3.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`crCoordSys`**
        : A _Cursor_ specifying the coordinate system. The default value is None.
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. The default value is 0.0.
        
        **`dlVirtualNodePos`**
        : A _Double List_ specifying the virtual node position. The default value is [0, 0, 0].
        
        **`iSurfaceDef`**
        : An _Integer_ specifying the surface definition. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iEnableUpdateDispCS`**
        : An _Integer_ specifying the enable update displacement coordinate system. The default value is True.
        
        **`iEnableCornerOnly`**
        : An _Integer_ specifying the enable corner only. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.RigidElements.RBE3.ToCenter(iMethod=18, crlMasterTarget=[], crlSlaveTarget=[], listRbe3TermConnection=[], iTypeRBE3=3, strName="", crCoordSys=None, dTolerance=0.0, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=True, iEnableCornerOnly=False)
        ```
        
        """
        message = "Connections.RigidElements.RBE3.ToCenter({},{},{},{},{},'{}',{},{},{},{},{},{},{})".format(iMethod, crlMasterTarget, crlSlaveTarget, listRbe3TermConnection, iTypeRBE3, strName, crCoordSys, dTolerance, dlVirtualNodePos, iSurfaceDef, crEdit, iEnableUpdateDispCS, iEnableCornerOnly)
        return JPT_RUN_LINE(message)

    def ToCircleCenter(self, iMethod=19, crlMasterTarget=[], crlSlaveTarget=[], listRbe3TermConnection=[], iTypeRBE3=3, strName="", crCoordSys=None, dTolerance=0.0, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=True, iEnableCornerOnly=False):
        r"""
        ## Description
        
        Create RBE3
        
        ## Syntax
        
        ```python
        Connections.RigidElements.RBE3.ToCircleCenter(iMethod=19, crlMasterTarget=[], crlSlaveTarget=[], listRbe3TermConnection=[], iTypeRBE3=3, strName="", crCoordSys=None, dTolerance=0.0, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=True, iEnableCornerOnly=False)
        ```
        
        Macro: {ref}`Macro-Connections-RBE3ToCircleCenter`
        
        Ribbon: {menuselection}`Connections --> RigidElements --> RBE3 --> ToCircleCenter`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 19.
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. The default value is [].
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. The default value is [].
        
        **`listRbe3TermConnection`**
        : A _RBE3TERM_CONNECTION List_ specifying the rbe3 term connection. The default value is [].
        
        **`iTypeRBE3`**
        : An _Integer_ specifying the type r e3. The default value is 3.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`crCoordSys`**
        : A _Cursor_ specifying the coordinate system. The default value is None.
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. The default value is 0.0.
        
        **`dlVirtualNodePos`**
        : A _Double List_ specifying the virtual node position. The default value is [0, 0, 0].
        
        **`iSurfaceDef`**
        : An _Integer_ specifying the surface definition. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iEnableUpdateDispCS`**
        : An _Integer_ specifying the enable update displacement coordinate system. The default value is True.
        
        **`iEnableCornerOnly`**
        : An _Integer_ specifying the enable corner only. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.RigidElements.RBE3.ToCircleCenter(iMethod=19, crlMasterTarget=[], crlSlaveTarget=[], listRbe3TermConnection=[], iTypeRBE3=3, strName="", crCoordSys=None, dTolerance=0.0, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=True, iEnableCornerOnly=False)
        ```
        
        """
        message = "Connections.RigidElements.RBE3.ToCircleCenter({},{},{},{},{},'{}',{},{},{},{},{},{},{})".format(iMethod, crlMasterTarget, crlSlaveTarget, listRbe3TermConnection, iTypeRBE3, strName, crCoordSys, dTolerance, dlVirtualNodePos, iSurfaceDef, crEdit, iEnableUpdateDispCS, iEnableCornerOnly)
        return JPT_RUN_LINE(message)

class Spring_Nodeswithtolerance:
    def sameDoFs(self, iMethod=0, strName="SPRING", crlMasterTarget=[], crlSlaveTarget=[], crCoordSys=None, iSpringType=0, iGround=0, dTolerance=0.0, iDirection=0, iDistributeMode=0, iDof1=0, iDof2=0, dDampCoef=DFLT_DBL, dStressCoef=DFLT_DBL, posTStiffness=[0,0,0], posRStiffness=[0,0,0], bUpdateDispCS=True, crEdit=None):
        r"""
        ## Description
        
        Spring connection Nodes with tolerance same DOFs
        
        ## Syntax
        
        ```python
        Connections.SpringsDampers.Spring.Nodeswithtolerance.sameDoFs(iMethod=0, strName="SPRING", crlMasterTarget=[], crlSlaveTarget=[], crCoordSys=None, iSpringType=0, iGround=0, dTolerance=0.0, iDirection=0, iDistributeMode=0, iDof1=0, iDof2=0, dDampCoef=DFLT_DBL, dStressCoef=DFLT_DBL, posTStiffness=[0,0,0], posRStiffness=[0,0,0], bUpdateDispCS=True, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-SpringNodesUniformDOFs`
        
        Ribbon: {menuselection}`Connections --> SpringsDampers --> Spring --> Nodeswithtolerance --> sameDoFs`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "SPRING".
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. The default value is [].
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. The default value is [].
        
        **`crCoordSys`**
        : A _Cursor_ specifying the coordinate system. The default value is None.
        
        **`iSpringType`**
        : An _Integer_ specifying the spring type. The default value is 0.
        
        **`iGround`**
        : An _Integer_ specifying the ground. The default value is 0.
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. The default value is 0.0.
        
        **`iDirection`**
        : An _Integer_ specifying the direction. The default value is 0.
        
        **`iDistributeMode`**
        : An _Integer_ specifying the distribute mode. The default value is 0.
        
        **`iDof1`**
        : An _Integer_ specifying the dof1. The default value is 0.
        
        **`iDof2`**
        : An _Integer_ specifying the dof2. The default value is 0.
        
        **`dDampCoef`**
        : A _Double_ specifying the damp coefficient . The default value is DFLT_DBL.
        
        **`dStressCoef`**
        : A _Double_ specifying the stress coefficient . The default value is DFLT_DBL.
        
        **`posTStiffness`**
        : A _Position_ specifying the t stiffness. The default value is [0,0,0].
        
        **`posRStiffness`**
        : A _Position_ specifying the r stiffness. The default value is [0,0,0].
        
        **`bUpdateDispCS`**
        : A _Boolean_ specifying the update displacement coordinate system. The default value is True.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.SpringsDampers.Spring.Nodeswithtolerance.sameDoFs(iMethod=0, strName="SPRING", crlMasterTarget=[], crlSlaveTarget=[], crCoordSys=None, iSpringType=0, iGround=0, dTolerance=0.0, iDirection=0, iDistributeMode=0, iDof1=0, iDof2=0, dDampCoef=DFLT_DBL, dStressCoef=DFLT_DBL, posTStiffness=[0,0,0], posRStiffness=[0,0,0], bUpdateDispCS=True, crEdit=None)
        ```
        
        """
        message = "Connections.SpringsDampers.Spring.Nodeswithtolerance.sameDoFs({},'{}',{},{},{},{},{},{},{},'{}',{},{},{},{},{},{},{},{})".format(iMethod, strName, crlMasterTarget, crlSlaveTarget, crCoordSys, iSpringType, iGround, dTolerance, iDirection, iDistributeMode, iDof1, iDof2, dDampCoef, dStressCoef, posTStiffness, posRStiffness, bUpdateDispCS, crEdit)
        return JPT_RUN_LINE(message)

    def differentDoFs(self, iMethod=0, strName="SPRING", crlMasterTarget=[], crlSlaveTarget=[], crCoordSys=None, iSpringType=0, iGround=0, dTolerance=0.0, iDirection=0, iDistributeMode=0, iDof1=0, iDof2=0, dDampCoef=DFLT_DBL, dStressCoef=DFLT_DBL, posTStiffness=[0,0,0], posRStiffness=[0,0,0], bUpdateDispCS=True, crEdit=None):
        r"""
        ## Description
        
        Spring connection Nodes with tolerance different DOFs
        
        ## Syntax
        
        ```python
        Connections.SpringsDampers.Spring.Nodeswithtolerance.differentDoFs(iMethod=0, strName="SPRING", crlMasterTarget=[], crlSlaveTarget=[], crCoordSys=None, iSpringType=0, iGround=0, dTolerance=0.0, iDirection=0, iDistributeMode=0, iDof1=0, iDof2=0, dDampCoef=DFLT_DBL, dStressCoef=DFLT_DBL, posTStiffness=[0,0,0], posRStiffness=[0,0,0], bUpdateDispCS=True, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-SpringNodesDOFs`
        
        Ribbon: {menuselection}`Connections --> SpringsDampers --> Spring --> Nodeswithtolerance --> differentDoFs`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "SPRING".
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. The default value is [].
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. The default value is [].
        
        **`crCoordSys`**
        : A _Cursor_ specifying the coordinate system. The default value is None.
        
        **`iSpringType`**
        : An _Integer_ specifying the spring type. The default value is 0.
        
        **`iGround`**
        : An _Integer_ specifying the ground. The default value is 0.
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. The default value is 0.0.
        
        **`iDirection`**
        : An _Integer_ specifying the direction. The default value is 0.
        
        **`iDistributeMode`**
        : An _Integer_ specifying the distribute mode. The default value is 0.
        
        **`iDof1`**
        : An _Integer_ specifying the dof1. The default value is 0.
        
        **`iDof2`**
        : An _Integer_ specifying the dof2. The default value is 0.
        
        **`dDampCoef`**
        : A _Double_ specifying the damp coefficient . The default value is DFLT_DBL.
        
        **`dStressCoef`**
        : A _Double_ specifying the stress coefficient . The default value is DFLT_DBL.
        
        **`posTStiffness`**
        : A _Position_ specifying the t stiffness. The default value is [0,0,0].
        
        **`posRStiffness`**
        : A _Position_ specifying the r stiffness. The default value is [0,0,0].
        
        **`bUpdateDispCS`**
        : A _Boolean_ specifying the update displacement coordinate system. The default value is True.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.SpringsDampers.Spring.Nodeswithtolerance.differentDoFs(iMethod=0, strName="SPRING", crlMasterTarget=[], crlSlaveTarget=[], crCoordSys=None, iSpringType=0, iGround=0, dTolerance=0.0, iDirection=0, iDistributeMode=0, iDof1=0, iDof2=0, dDampCoef=DFLT_DBL, dStressCoef=DFLT_DBL, posTStiffness=[0,0,0], posRStiffness=[0,0,0], bUpdateDispCS=True, crEdit=None)
        ```
        
        """
        message = "Connections.SpringsDampers.Spring.Nodeswithtolerance.differentDoFs({},'{}',{},{},{},{},{},{},{},'{}',{},{},{},{},{},{},{},{})".format(iMethod, strName, crlMasterTarget, crlSlaveTarget, crCoordSys, iSpringType, iGround, dTolerance, iDirection, iDistributeMode, iDof1, iDof2, dDampCoef, dStressCoef, posTStiffness, posRStiffness, bUpdateDispCS, crEdit)
        return JPT_RUN_LINE(message)

class Spring_OneToOne:
    def sameDoFs(self, iMethod=0, strName="SPRING", crlMasterTarget=[], crlSlaveTarget=[], crCoordSys=None, iSpringType=0, iGround=0, dTolerance=0.0, iDirection=0, iDistributeMode=0, iDof1=0, iDof2=0, dDampCoef=DFLT_DBL, dStressCoef=DFLT_DBL, posTStiffness=[0,0,0], posRStiffness=[0,0,0], bUpdateDispCS=True, crEdit=None):
        r"""
        ## Description
        
        Spring connection One to One same DOFs
        
        ## Syntax
        
        ```python
        Connections.SpringsDampers.Spring.OneToOne.sameDoFs(iMethod=0, strName="SPRING", crlMasterTarget=[], crlSlaveTarget=[], crCoordSys=None, iSpringType=0, iGround=0, dTolerance=0.0, iDirection=0, iDistributeMode=0, iDof1=0, iDof2=0, dDampCoef=DFLT_DBL, dStressCoef=DFLT_DBL, posTStiffness=[0,0,0], posRStiffness=[0,0,0], bUpdateDispCS=True, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-SpringOneToOneUniformDOFs`
        
        Ribbon: {menuselection}`Connections --> SpringsDampers --> Spring --> OneToOne --> sameDoFs`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "SPRING".
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. The default value is [].
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. The default value is [].
        
        **`crCoordSys`**
        : A _Cursor_ specifying the coordinate system. The default value is None.
        
        **`iSpringType`**
        : An _Integer_ specifying the spring type. The default value is 0.
        
        **`iGround`**
        : An _Integer_ specifying the ground. The default value is 0.
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. The default value is 0.0.
        
        **`iDirection`**
        : An _Integer_ specifying the direction. The default value is 0.
        
        **`iDistributeMode`**
        : An _Integer_ specifying the distribute mode. The default value is 0.
        
        **`iDof1`**
        : An _Integer_ specifying the DOF 1. The default value is 0.
        
        **`iDof2`**
        : An _Integer_ specifying the DOF 2. The default value is 0.
        
        **`dDampCoef`**
        : A _Double_ specifying the damp coefficient . The default value is DFLT_DBL.
        
        **`dStressCoef`**
        : A _Double_ specifying the stress coefficient . The default value is DFLT_DBL.
        
        **`posTStiffness`**
        : A _Position_ specifying the t stiffness. The default value is [0,0,0].
        
        **`posRStiffness`**
        : A _Position_ specifying the r stiffness. The default value is [0,0,0].
        
        **`bUpdateDispCS`**
        : A _Boolean_ specifying the update displacement coordinate system. The default value is True.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.SpringsDampers.Spring.OneToOne.sameDoFs(iMethod=0, strName="SPRING", crlMasterTarget=[], crlSlaveTarget=[], crCoordSys=None, iSpringType=0, iGround=0, dTolerance=0.0, iDirection=0, iDistributeMode=0, iDof1=0, iDof2=0, dDampCoef=DFLT_DBL, dStressCoef=DFLT_DBL, posTStiffness=[0,0,0], posRStiffness=[0,0,0], bUpdateDispCS=True, crEdit=None)
        ```
        
        """
        message = "Connections.SpringsDampers.Spring.OneToOne.sameDoFs({},'{}',{},{},{},{},{},{},{},'{}',{},{},{},{},{},{},{},{})".format(iMethod, strName, crlMasterTarget, crlSlaveTarget, crCoordSys, iSpringType, iGround, dTolerance, iDirection, iDistributeMode, iDof1, iDof2, dDampCoef, dStressCoef, posTStiffness, posRStiffness, bUpdateDispCS, crEdit)
        return JPT_RUN_LINE(message)

    def differentDoFs(self, iMethod=0, strName="SPRING", crlMasterTarget=[], crlSlaveTarget=[], crCoordSys=None, iSpringType=0, iGround=0, dTolerance=0.0, iDirection=0, iDistributeMode=0, iDof1=0, iDof2=0, dDampCoef=DFLT_DBL, dStressCoef=DFLT_DBL, posTStiffness=[0,0,0], posRStiffness=[0,0,0], bUpdateDispCS=True, crEdit=None):
        r"""
        ## Description
        
        Spring connection One to One different DOFs
        
        ## Syntax
        
        ```python
        Connections.SpringsDampers.Spring.OneToOne.differentDoFs(iMethod=0, strName="SPRING", crlMasterTarget=[], crlSlaveTarget=[], crCoordSys=None, iSpringType=0, iGround=0, dTolerance=0.0, iDirection=0, iDistributeMode=0, iDof1=0, iDof2=0, dDampCoef=DFLT_DBL, dStressCoef=DFLT_DBL, posTStiffness=[0,0,0], posRStiffness=[0,0,0], bUpdateDispCS=True, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-SpringOneToOneDOFs`
        
        Ribbon: {menuselection}`Connections --> SpringsDampers --> Spring --> OneToOne --> differentDoFs`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "SPRING".
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. The default value is [].
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. The default value is [].
        
        **`crCoordSys`**
        : A _Cursor_ specifying the coordinate system. The default value is None.
        
        **`iSpringType`**
        : An _Integer_ specifying the spring type. The default value is 0.
        
        **`iGround`**
        : An _Integer_ specifying the ground. The default value is 0.
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. The default value is 0.0.
        
        **`iDirection`**
        : An _Integer_ specifying the direction. The default value is 0.
        
        **`iDistributeMode`**
        : An _Integer_ specifying the distribute mode. The default value is 0.
        
        **`iDof1`**
        : An _Integer_ specifying the dof1. The default value is 0.
        
        **`iDof2`**
        : An _Integer_ specifying the dof2. The default value is 0.
        
        **`dDampCoef`**
        : A _Double_ specifying the damp coefficient . The default value is DFLT_DBL.
        
        **`dStressCoef`**
        : A _Double_ specifying the stress coefficient . The default value is DFLT_DBL.
        
        **`posTStiffness`**
        : A _Position_ specifying the t stiffness. The default value is [0,0,0].
        
        **`posRStiffness`**
        : A _Position_ specifying the r stiffness. The default value is [0,0,0].
        
        **`bUpdateDispCS`**
        : A _Boolean_ specifying the update displacement coordinate system. The default value is True.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.SpringsDampers.Spring.OneToOne.differentDoFs(iMethod=0, strName="SPRING", crlMasterTarget=[], crlSlaveTarget=[], crCoordSys=None, iSpringType=0, iGround=0, dTolerance=0.0, iDirection=0, iDistributeMode=0, iDof1=0, iDof2=0, dDampCoef=DFLT_DBL, dStressCoef=DFLT_DBL, posTStiffness=[0,0,0], posRStiffness=[0,0,0], bUpdateDispCS=True, crEdit=None)
        ```
        
        """
        message = "Connections.SpringsDampers.Spring.OneToOne.differentDoFs({},'{}',{},{},{},{},{},{},{},'{}',{},{},{},{},{},{},{},{})".format(iMethod, strName, crlMasterTarget, crlSlaveTarget, crCoordSys, iSpringType, iGround, dTolerance, iDirection, iDistributeMode, iDof1, iDof2, dDampCoef, dStressCoef, posTStiffness, posRStiffness, bUpdateDispCS, crEdit)
        return JPT_RUN_LINE(message)

class SpringsDampers_Damper:
    def AnyEntities11DoFS(self, iMethod, strName, crlMasterTarget, crlSlaveTarget, crCoordSys=None, iGround=0, dTolerance=0.0, vecTDamper=[0, 0, 0], vecRDamper=[0, 0, 0], crEdit=None, bUpdateDispCS=True):
        r"""
        ## Description
        
        Create Damper Connection
        
        ## Syntax
        
        ```python
        Connections.SpringsDampers.Damper.AnyEntities11DoFS(iMethod, strName, crlMasterTarget, crlSlaveTarget, crCoordSys=None, iGround=0, dTolerance=0.0, vecTDamper=[0, 0, 0], vecRDamper=[0, 0, 0], crEdit=None, bUpdateDispCS=True)
        ```
        
        Macro: {ref}`Macro-Connections-Damper`
        
        Ribbon: {menuselection}`Connections --> SpringsDampers --> Damper --> AnyEntities11DoFS`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. This is a required input.
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. This is a required input.
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. This is a required input.
        
        **`crCoordSys`**
        : A _Cursor_ specifying the coordinate system. The default value is None.
        
        **`iGround`**
        : An _Integer_ specifying the ground. The default value is 0.
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. The default value is 0.0.
        
        **`vecTDamper`**
        : A _Vector_ specifying the t damper. The default value is [0, 0, 0].
        
        **`vecRDamper`**
        : A _Vector_ specifying the r damper. The default value is [0, 0, 0].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`bUpdateDispCS`**
        : A _Boolean_ specifying the update displacement coordinate system. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.SpringsDampers.Damper.AnyEntities11DoFS(iMethod, strName, crlMasterTarget, crlSlaveTarget, crCoordSys=None, iGround=0, dTolerance=0.0, vecTDamper=[0, 0, 0], vecRDamper=[0, 0, 0], crEdit=None, bUpdateDispCS=True)
        ```
        
        """
        message = "Connections.SpringsDampers.Damper.AnyEntities11DoFS({},'{}',{},{},{},{},{},{},{},{},{})".format(iMethod, strName, crlMasterTarget, crlSlaveTarget, crCoordSys, iGround, dTolerance, vecTDamper, vecRDamper, crEdit, bUpdateDispCS)
        return JPT_RUN_LINE(message)

class SpringsDampers_Bush:
    def TwoNodes(self, iMethod=1, strName="BUSH_1", crlMaster=[], crlSlave=[], crCoord=None, dTol=DFLT_DBL, iGround=0, iOriMode=0, iEqual=1, poslVector=[], dlStiffness=[], dlDampCoef=[], dlDampConst=[], dRotStrain=DFLT_DBL, dTransStrain=DFLT_DBL, dRotStress=DFLT_DBL, dTransStress=DFLT_DBL, crEditObj=None):
        r"""
        ## Description
        
        Create bush connection
        
        ## Syntax
        
        ```python
        Connections.SpringsDampers.Bush.TwoNodes(iMethod=1, strName="BUSH_1", crlMaster=[], crlSlave=[], crCoord=None, dTol=DFLT_DBL, iGround=0, iOriMode=0, iEqual=1, poslVector=[], dlStiffness=[], dlDampCoef=[], dlDampConst=[], dRotStrain=DFLT_DBL, dTransStrain=DFLT_DBL, dRotStress=DFLT_DBL, dTransStress=DFLT_DBL, crEditObj=None)
        ```
        
        Macro: {ref}`Macro-Connections-ConnBush_2Nodes`
        
        Ribbon: {menuselection}`Connections --> SpringsDampers --> Bush --> TwoNodes`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 1.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "BUSH_1".
        
        **`crlMaster`**
        : A _Cursor List_ specifying the master. The default value is [].
        
        **`crlSlave`**
        : A _Cursor List_ specifying the slave. The default value is [].
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is DFLT_DBL.
        
        **`iGround`**
        : An _Integer_ specifying the ground. The default value is 0.
        
        **`iOriMode`**
        : An _Integer_ specifying the ori mode. The default value is 0.
        
        **`iEqual`**
        : An _Integer_ specifying the equal. The default value is 1.
        
        **`poslVector`**
        : A _Position List_ specifying the vector. The default value is [].
        
        **`dlStiffness`**
        : A _Double List_ specifying the stiffness. The default value is [].
        
        **`dlDampCoef`**
        : A _Double List_ specifying the damp coefficient . The default value is [].
        
        **`dlDampConst`**
        : A _Double List_ specifying the damp const. The default value is [].
        
        **`dRotStrain`**
        : A _Double_ specifying the rotation strain. The default value is DFLT_DBL.
        
        **`dTransStrain`**
        : A _Double_ specifying the trans strain. The default value is DFLT_DBL.
        
        **`dRotStress`**
        : A _Double_ specifying the rotation stress. The default value is DFLT_DBL.
        
        **`dTransStress`**
        : A _Double_ specifying the trans stress. The default value is DFLT_DBL.
        
        **`crEditObj`**
        : A _Cursor_ specifying the edit object. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.SpringsDampers.Bush.TwoNodes(iMethod=1, strName="BUSH_1", crlMaster=[], crlSlave=[], crCoord=None, dTol=DFLT_DBL, iGround=0, iOriMode=0, iEqual=1, poslVector=[], dlStiffness=[], dlDampCoef=[], dlDampConst=[], dRotStrain=DFLT_DBL, dTransStrain=DFLT_DBL, dRotStress=DFLT_DBL, dTransStress=DFLT_DBL, crEditObj=None)
        ```
        
        """
        message = "Connections.SpringsDampers.Bush.TwoNodes({},'{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(iMethod, strName, crlMaster, crlSlave, crCoord, dTol, iGround, iOriMode, iEqual, poslVector, dlStiffness, dlDampCoef, dlDampConst, dRotStrain, dTransStrain, dRotStress, dTransStress, crEditObj)
        return JPT_RUN_LINE(message)

    def AnyEntities(self, iMethod=16, strName="BUSH_1", crlMaster=[], crlSlave=[], crCoord=None, dTol=DFLT_DBL, iGround=0, iOriMode=0, iEqual=1, poslVector=[], dlStiffness=[], dlDampCoef=[], dlDampConst=[], dRotStrain=DFLT_DBL, dTransStrain=DFLT_DBL, dRotStress=DFLT_DBL, dTransStress=DFLT_DBL, crEditObj=None):
        r"""
        ## Description
        
        Create bush connection
        
        ## Syntax
        
        ```python
        Connections.SpringsDampers.Bush.AnyEntities(iMethod=16, strName="BUSH_1", crlMaster=[], crlSlave=[], crCoord=None, dTol=DFLT_DBL, iGround=0, iOriMode=0, iEqual=1, poslVector=[], dlStiffness=[], dlDampCoef=[], dlDampConst=[], dRotStrain=DFLT_DBL, dTransStrain=DFLT_DBL, dRotStress=DFLT_DBL, dTransStress=DFLT_DBL, crEditObj=None)
        ```
        
        Macro: {ref}`Macro-Connections-ConnBush_AnyEntity`
        
        Ribbon: {menuselection}`Connections --> SpringsDampers --> Bush --> AnyEntities`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 16.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "BUSH_1".
        
        **`crlMaster`**
        : A _Cursor List_ specifying the master. The default value is [].
        
        **`crlSlave`**
        : A _Cursor List_ specifying the slave. The default value is [].
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is DFLT_DBL.
        
        **`iGround`**
        : An _Integer_ specifying the ground. The default value is 0.
        
        **`iOriMode`**
        : An _Integer_ specifying the ori mode. The default value is 0.
        
        **`iEqual`**
        : An _Integer_ specifying the equal. The default value is 1.
        
        **`poslVector`**
        : A _Position List_ specifying the vector. The default value is [].
        
        **`dlStiffness`**
        : A _Double List_ specifying the stiffness. The default value is [].
        
        **`dlDampCoef`**
        : A _Double List_ specifying the damp coefficient . The default value is [].
        
        **`dlDampConst`**
        : A _Double List_ specifying the damp const. The default value is [].
        
        **`dRotStrain`**
        : A _Double_ specifying the rotation strain. The default value is DFLT_DBL.
        
        **`dTransStrain`**
        : A _Double_ specifying the trans strain. The default value is DFLT_DBL.
        
        **`dRotStress`**
        : A _Double_ specifying the rotation stress. The default value is DFLT_DBL.
        
        **`dTransStress`**
        : A _Double_ specifying the trans stress. The default value is DFLT_DBL.
        
        **`crEditObj`**
        : A _Cursor_ specifying the edit object. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.SpringsDampers.Bush.AnyEntities(iMethod=16, strName="BUSH_1", crlMaster=[], crlSlave=[], crCoord=None, dTol=DFLT_DBL, iGround=0, iOriMode=0, iEqual=1, poslVector=[], dlStiffness=[], dlDampCoef=[], dlDampConst=[], dRotStrain=DFLT_DBL, dTransStrain=DFLT_DBL, dRotStress=DFLT_DBL, dTransStress=DFLT_DBL, crEditObj=None)
        ```
        
        """
        message = "Connections.SpringsDampers.Bush.AnyEntities({},'{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(iMethod, strName, crlMaster, crlSlave, crCoord, dTol, iGround, iOriMode, iEqual, poslVector, dlStiffness, dlDampCoef, dlDampConst, dRotStrain, dTransStrain, dRotStress, dTransStress, crEditObj)
        return JPT_RUN_LINE(message)

    def OnetoOne(self, iMethod=21, strName="BUSH_1", crlMaster=[], crlSlave=[], crCoord=None, dTol=DFLT_DBL, iGround=0, iOriMode=0, iEqual=1, poslVector=[], dlStiffness=[], dlDampCoef=[], dlDampConst=[], dRotStrain=DFLT_DBL, dTransStrain=DFLT_DBL, dRotStress=DFLT_DBL, dTransStress=DFLT_DBL, crEditObj=None):
        r"""
        ## Description
        
        Create bush connection
        
        ## Syntax
        
        ```python
        Connections.SpringsDampers.Bush.OnetoOne(iMethod=21, strName="BUSH_1", crlMaster=[], crlSlave=[], crCoord=None, dTol=DFLT_DBL, iGround=0, iOriMode=0, iEqual=1, poslVector=[], dlStiffness=[], dlDampCoef=[], dlDampConst=[], dRotStrain=DFLT_DBL, dTransStrain=DFLT_DBL, dRotStress=DFLT_DBL, dTransStress=DFLT_DBL, crEditObj=None)
        ```
        
        Macro: {ref}`Macro-Connections-ConnBush_OnetoOne`
        
        Ribbon: {menuselection}`Connections --> SpringsDampers --> Bush --> OnetoOne`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 21.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "BUSH_1".
        
        **`crlMaster`**
        : A _Cursor List_ specifying the master. The default value is [].
        
        **`crlSlave`**
        : A _Cursor List_ specifying the slave. The default value is [].
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is DFLT_DBL.
        
        **`iGround`**
        : An _Integer_ specifying the ground. The default value is 0.
        
        **`iOriMode`**
        : An _Integer_ specifying the ori mode. The default value is 0.
        
        **`iEqual`**
        : An _Integer_ specifying the equal. The default value is 1.
        
        **`poslVector`**
        : A _Position List_ specifying the vector. The default value is [].
        
        **`dlStiffness`**
        : A _Double List_ specifying the stiffness. The default value is [].
        
        **`dlDampCoef`**
        : A _Double List_ specifying the damp coefficient . The default value is [].
        
        **`dlDampConst`**
        : A _Double List_ specifying the damp const. The default value is [].
        
        **`dRotStrain`**
        : A _Double_ specifying the rotation strain. The default value is DFLT_DBL.
        
        **`dTransStrain`**
        : A _Double_ specifying the trans strain. The default value is DFLT_DBL.
        
        **`dRotStress`**
        : A _Double_ specifying the rotation stress. The default value is DFLT_DBL.
        
        **`dTransStress`**
        : A _Double_ specifying the trans stress. The default value is DFLT_DBL.
        
        **`crEditObj`**
        : A _Cursor_ specifying the edit object. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.SpringsDampers.Bush.OnetoOne(iMethod=21, strName="BUSH_1", crlMaster=[], crlSlave=[], crCoord=None, dTol=DFLT_DBL, iGround=0, iOriMode=0, iEqual=1, poslVector=[], dlStiffness=[], dlDampCoef=[], dlDampConst=[], dRotStrain=DFLT_DBL, dTransStrain=DFLT_DBL, dRotStress=DFLT_DBL, dTransStress=DFLT_DBL, crEditObj=None)
        ```
        
        """
        message = "Connections.SpringsDampers.Bush.OnetoOne({},'{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(iMethod, strName, crlMaster, crlSlave, crCoord, dTol, iGround, iOriMode, iEqual, poslVector, dlStiffness, dlDampCoef, dlDampConst, dRotStrain, dTransStrain, dRotStress, dTransStress, crEditObj)
        return JPT_RUN_LINE(message)

class SpringsDampers_Spring:
    def GroundedSpring(self, iMethod=0, strName="SPRING", crlMasterTarget=[], crlSlaveTarget=[], crCoordSys=None, iSpringType=0, iGround=0, dTolerance=0.0, iDirection=0, iDistributeMode=0, iDof1=0, iDof2=0, dDampCoef=DFLT_DBL, dStressCoef=DFLT_DBL, posTStiffness=[0,0,0], posRStiffness=[0,0,0], bUpdateDispCS=True, crEdit=None):
        r"""
        ## Description
        
        Grounded Spring connection
        
        ## Syntax
        
        ```python
        Connections.SpringsDampers.Spring.GroundedSpring(iMethod=0, strName="SPRING", crlMasterTarget=[], crlSlaveTarget=[], crCoordSys=None, iSpringType=0, iGround=0, dTolerance=0.0, iDirection=0, iDistributeMode=0, iDof1=0, iDof2=0, dDampCoef=DFLT_DBL, dStressCoef=DFLT_DBL, posTStiffness=[0,0,0], posRStiffness=[0,0,0], bUpdateDispCS=True, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-SpringGrounded`
        
        Ribbon: {menuselection}`Connections --> SpringsDampers --> Spring --> GroundedSpring`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "SPRING".
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. The default value is [].
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. The default value is [].
        
        **`crCoordSys`**
        : A _Cursor_ specifying the coordinate system. The default value is None.
        
        **`iSpringType`**
        : An _Integer_ specifying the spring type. The default value is 0.
        
        **`iGround`**
        : An _Integer_ specifying the ground. The default value is 0.
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. The default value is 0.0.
        
        **`iDirection`**
        : An _Integer_ specifying the direction. The default value is 0.
        
        **`iDistributeMode`**
        : An _Integer_ specifying the distribute mode. The default value is 0.
        
        **`iDof1`**
        : An _Integer_ specifying the dof1. The default value is 0.
        
        **`iDof2`**
        : An _Integer_ specifying the dof2. The default value is 0.
        
        **`dDampCoef`**
        : A _Double_ specifying the damp coefficient . The default value is DFLT_DBL.
        
        **`dStressCoef`**
        : A _Double_ specifying the stress coefficient . The default value is DFLT_DBL.
        
        **`posTStiffness`**
        : A _Position_ specifying the t stiffness. The default value is [0,0,0].
        
        **`posRStiffness`**
        : A _Position_ specifying the r stiffness. The default value is [0,0,0].
        
        **`bUpdateDispCS`**
        : A _Boolean_ specifying the update displacement coordinate system. The default value is True.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.SpringsDampers.Spring.GroundedSpring(iMethod=0, strName="SPRING", crlMasterTarget=[], crlSlaveTarget=[], crCoordSys=None, iSpringType=0, iGround=0, dTolerance=0.0, iDirection=0, iDistributeMode=0, iDof1=0, iDof2=0, dDampCoef=DFLT_DBL, dStressCoef=DFLT_DBL, posTStiffness=[0,0,0], posRStiffness=[0,0,0], bUpdateDispCS=True, crEdit=None)
        ```
        
        """
        message = "Connections.SpringsDampers.Spring.GroundedSpring({},'{}',{},{},{},{},{},{},{},'{}',{},{},{},{},{},{},{},{})".format(iMethod, strName, crlMasterTarget, crlSlaveTarget, crCoordSys, iSpringType, iGround, dTolerance, iDirection, iDistributeMode, iDof1, iDof2, dDampCoef, dStressCoef, posTStiffness, posRStiffness, bUpdateDispCS, crEdit)
        return JPT_RUN_LINE(message)

    Nodeswithtolerance = Spring_Nodeswithtolerance()

    OneToOne = Spring_OneToOne()

class Connections_Pretension:
    def General(self, strName="BoltLoad001", iDir=0, dValue=DFLT_DBL, bFixLength=False, crTable=None, crCoord=None, iLocalUnit=0, crlTarget=[], crEdit=None, bCreate2ADVCStatic=False):
        r"""
        ## Description
        
        Pretension general
        
        ## Syntax
        
        ```python
        Connections.Pretension.General(strName="BoltLoad001", iDir=0, dValue=DFLT_DBL, bFixLength=False, crTable=None, crCoord=None, iLocalUnit=0, crlTarget=[], crEdit=None, bCreate2ADVCStatic=False)
        ```
        
        Macro: {ref}`Macro-Connections-Pretension`
        
        Ribbon: {menuselection}`Connections --> Pretension --> General`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "BoltLoad001".
        
        **`iDir`**
        : An _Integer_ specifying the direction. The default value is 0.
        
        **`dValue`**
        : A _Double_ specifying the value. The default value is DFLT_DBL.
        
        **`bFixLength`**
        : A _Boolean_ specifying the fix length. The default value is False.
        
        **`crTable`**
        : A _Cursor_ specifying the table. The default value is None.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`iLocalUnit`**
        : An _Integer_ specifying the local unit. The default value is 0.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`bCreate2ADVCStatic`**
        : A _Boolean_ specifying the create2 ADVC static. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Pretension.General(strName="BoltLoad001", iDir=0, dValue=DFLT_DBL, bFixLength=False, crTable=None, crCoord=None, iLocalUnit=0, crlTarget=[], crEdit=None, bCreate2ADVCStatic=False)
        ```
        
        """
        message = "Connections.Pretension.General('{}',{},{},{},{},{},{},{},{},{})".format(strName, iDir, dValue, bFixLength, crTable, crCoord, iLocalUnit, crlTarget, crEdit, bCreate2ADVCStatic)
        return JPT_RUN_LINE(message)

    def Abaqus(self, strName="PreTensionAbaqus1", bFixedLenght=False, crTable=None, dValue=DFLT_DBL, iLocalUnit=0, strNormal="", dlNodePos=[DFLT_DBL,DFLT_DBL,DFLT_DBL], crEdit=None, crlTarget=[]):
        r"""
        ## Description
        
        Create Pretension Abaqus
        
        ## Syntax
        
        ```python
        Connections.Pretension.Abaqus(strName="PreTensionAbaqus1", bFixedLenght=False, crTable=None, dValue=DFLT_DBL, iLocalUnit=0, strNormal="", dlNodePos=[DFLT_DBL,DFLT_DBL,DFLT_DBL], crEdit=None, crlTarget=[])
        ```
        
        Macro: {ref}`Macro-Connections-PretensionAbaqus`
        
        Ribbon: {menuselection}`Connections --> Pretension --> Abaqus`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "PreTensionAbaqus1".
        
        **`bFixedLenght`**
        : A _Boolean_ specifying the fixed length. The default value is False.
        
        **`crTable`**
        : A _Cursor_ specifying the table. The default value is None.
        
        **`dValue`**
        : A _Double_ specifying the value. The default value is DFLT_DBL.
        
        **`iLocalUnit`**
        : An _Integer_ specifying the local unit. The default value is 0.
        
        **`strNormal`**
        : A _String_ specifying the normal. The default value is "".
        
        **`dlNodePos`**
        : A _Double List_ specifying the node position. The default value is [DFLT_DBL,DFLT_DBL,DFLT_DBL].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Pretension.Abaqus(strName="PreTensionAbaqus1", bFixedLenght=False, crTable=None, dValue=DFLT_DBL, iLocalUnit=0, strNormal="", dlNodePos=[DFLT_DBL,DFLT_DBL,DFLT_DBL], crEdit=None, crlTarget=[])
        ```
        
        """
        message = "Connections.Pretension.Abaqus('{}',{},{},{},{},'{}',{},{},{})".format(strName, bFixedLenght, crTable, dValue, iLocalUnit, strNormal, dlNodePos, crEdit, crlTarget)
        return JPT_RUN_LINE(message)

    def Advc(self, strName="PreTensionAdvc1", bFixedLength=False, crEnforcedVelocity=None, dDvalue=0.0, iDirUpdateType=0, dlVnormal=[0,0,0], dlCtrolNodePos=[0,0,0], iRefNodeId=0, crEdit=None, crlTarget=[]):
        r"""
        ## Description
        
        Create ADVC pretension
        
        ## Syntax
        
        ```python
        Connections.Pretension.Advc(strName="PreTensionAdvc1", bFixedLength=False, crEnforcedVelocity=None, dDvalue=0.0, iDirUpdateType=0, dlVnormal=[0,0,0], dlCtrolNodePos=[0,0,0], iRefNodeId=0, crEdit=None, crlTarget=[])
        ```
        
        Macro: {ref}`Macro-Connections-LbcPretensionAdvc`
        
        Ribbon: {menuselection}`Connections --> Pretension --> Advc`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "PreTensionAdvc1".
        
        **`bFixedLength`**
        : A _Boolean_ specifying the fixed length. The default value is False.
        
        **`crEnforcedVelocity`**
        : A _Cursor_ specifying the enforced velocity. The default value is None.
        
        **`dDvalue`**
        : A _Double_ specifying the value. The default value is 0.0.
        
        **`iDirUpdateType`**
        : An _Integer_ specifying the direction update type. The default value is 0.
        
        **`dlVnormal`**
        : A _Double List_ specifying the vnormal. The default value is [0,0,0].
        
        **`dlCtrolNodePos`**
        : A _Double List_ specifying the ctrol node position. The default value is [0,0,0].
        
        **`iRefNodeId`**
        : An _Integer_ specifying the reference node ID. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Pretension.Advc(strName="PreTensionAdvc1", bFixedLength=False, crEnforcedVelocity=None, dDvalue=0.0, iDirUpdateType=0, dlVnormal=[0,0,0], dlCtrolNodePos=[0,0,0], iRefNodeId=0, crEdit=None, crlTarget=[])
        ```
        
        """
        message = "Connections.Pretension.Advc('{}',{},{},{},{},{},{},{},{},{})".format(strName, bFixedLength, crEnforcedVelocity, dDvalue, iDirUpdateType, dlVnormal, dlCtrolNodePos, iRefNodeId, crEdit, crlTarget)
        return JPT_RUN_LINE(message)

class Connections_BoltConnections:
    Edge = BoltConnections_Edge()

    Face = BoltConnections_Face()

class Connections_Contacts:
    Abaqus = Contacts_Abaqus()

    ADVC = Contacts_ADVC()

    Ansys = Contacts_Ansys()

    MSCNastran = Contacts_MSCNastran()

    NXNastran = Contacts_NXNastran()

    TSSolver = Contacts_TSSolver()

    TSSS = Contacts_TSSS()

    def CheckPattern(self, crlPart=[], bShowMismatch=False, bShowMatch=True, dTol=0.01):
        r"""
        ## Description
        
        check contact Pattern
        
        ## Syntax
        
        ```python
        Connections.Contacts.CheckPattern(crlPart=[], bShowMismatch=False, bShowMatch=True, dTol=0.01)
        ```
        
        Macro: {ref}`Macro-Connections-CheckPattern`
        
        Ribbon: {menuselection}`Connections --> Contacts --> CheckPattern`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`bShowMismatch`**
        : A _Boolean_ specifying the show mismatch. The default value is False.
        
        **`bShowMatch`**
        : A _Boolean_ specifying the show match. The default value is True.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is 0.01.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.CheckPattern(crlPart=[], bShowMismatch=False, bShowMatch=True, dTol=0.01)
        ```
        
        """
        message = "Connections.Contacts.CheckPattern({},{},{},{})".format(crlPart, bShowMismatch, bShowMatch, dTol)
        return JPT_RUN_LINE(message)

    def NXNastranGeneral(self, strName="", iPiType=0, iPiAlg=0, dPdNorPenFactor=0, dPdTanPenFactor=0, dPdForceConTol=0, dPdMaxForceIter=0, dPdMaxStaIter=0, dPdChangeNum=0, dPdMinContactPer=0, iPiShellThickness=0, iPiContactStatus=0, iPiInitGapPenetra=0, iPiRegionRefine=0, iPiEvaluPts=0, dPdMinSearDist=0, dPdMaxSearDist=0, dPdFricCoef=0, dPdSearchDist=0, dPdPenatlyFactor=0, iPiShellOffset=0, crlTarget=[], crEdit=None, iColor=0, iMethod=0):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Connections.Contacts.NXNastranGeneral(strName="", iPiType=0, iPiAlg=0, dPdNorPenFactor=0, dPdTanPenFactor=0, dPdForceConTol=0, dPdMaxForceIter=0, dPdMaxStaIter=0, dPdChangeNum=0, dPdMinContactPer=0, iPiShellThickness=0, iPiContactStatus=0, iPiInitGapPenetra=0, iPiRegionRefine=0, iPiEvaluPts=0, dPdMinSearDist=0, dPdMaxSearDist=0, dPdFricCoef=0, dPdSearchDist=0, dPdPenatlyFactor=0, iPiShellOffset=0, crlTarget=[], crEdit=None, iColor=0, iMethod=0)
        ```
        
        Macro: {ref}`Macro-Connections-ContactNXNastran`
        
        Ribbon: {menuselection}`Connections --> Contacts --> NXNastranGeneral`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`iPiType`**
        : An _Integer_ specifying the pi type. The default value is 0.
        
        **`iPiAlg`**
        : An _Integer_ specifying the pi algorithm. The default value is 0.
        
        **`dPdNorPenFactor`**
        : A _Double_ specifying the pd nor pen factor. The default value is 0.
        
        **`dPdTanPenFactor`**
        : A _Double_ specifying the pd tan pen factor. The default value is 0.
        
        **`dPdForceConTol`**
        : A _Double_ specifying the pd force con tolerance. The default value is 0.
        
        **`dPdMaxForceIter`**
        : A _Double_ specifying the pd maximum force iterator. The default value is 0.
        
        **`dPdMaxStaIter`**
        : A _Double_ specifying the pd maximum sta iterator. The default value is 0.
        
        **`dPdChangeNum`**
        : A _Double_ specifying the pd change number. The default value is 0.
        
        **`dPdMinContactPer`**
        : A _Double_ specifying the pd minimum contact per. The default value is 0.
        
        **`iPiShellThickness`**
        : An _Integer_ specifying the pi shell thickness. The default value is 0.
        
        **`iPiContactStatus`**
        : An _Integer_ specifying the pi contact status. The default value is 0.
        
        **`iPiInitGapPenetra`**
        : An _Integer_ specifying the pi initial gap penetra. The default value is 0.
        
        **`iPiRegionRefine`**
        : An _Integer_ specifying the pi region refine. The default value is 0.
        
        **`iPiEvaluPts`**
        : An _Integer_ specifying the pi evalu pts. The default value is 0.
        
        **`dPdMinSearDist`**
        : A _Double_ specifying the pd minimum sear dist. The default value is 0.
        
        **`dPdMaxSearDist`**
        : A _Double_ specifying the pd maximum sear dist. The default value is 0.
        
        **`dPdFricCoef`**
        : A _Double_ specifying the pd fric coefficient . The default value is 0.
        
        **`dPdSearchDist`**
        : A _Double_ specifying the pd search dist. The default value is 0.
        
        **`dPdPenatlyFactor`**
        : A _Double_ specifying the pd penatly factor. The default value is 0.
        
        **`iPiShellOffset`**
        : An _Integer_ specifying the pi shell offset. The default value is 0.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iColor`**
        : An _Integer_ specifying the color. The default value is 0.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.NXNastranGeneral(strName="", iPiType=0, iPiAlg=0, dPdNorPenFactor=0, dPdTanPenFactor=0, dPdForceConTol=0, dPdMaxForceIter=0, dPdMaxStaIter=0, dPdChangeNum=0, dPdMinContactPer=0, iPiShellThickness=0, iPiContactStatus=0, iPiInitGapPenetra=0, iPiRegionRefine=0, iPiEvaluPts=0, dPdMinSearDist=0, dPdMaxSearDist=0, dPdFricCoef=0, dPdSearchDist=0, dPdPenatlyFactor=0, iPiShellOffset=0, crlTarget=[], crEdit=None, iColor=0, iMethod=0)
        ```
        
        """
        message = "Connections.Contacts.NXNastranGeneral('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, iPiType, iPiAlg, dPdNorPenFactor, dPdTanPenFactor, dPdForceConTol, dPdMaxForceIter, dPdMaxStaIter, dPdChangeNum, dPdMinContactPer, iPiShellThickness, iPiContactStatus, iPiInitGapPenetra, iPiRegionRefine, iPiEvaluPts, dPdMinSearDist, dPdMaxSearDist, dPdFricCoef, dPdSearchDist, dPdPenatlyFactor, iPiShellOffset, crlTarget, crEdit, iColor, iMethod)
        return JPT_RUN_LINE(message)

    def ExportCheckReport(self, strFullPath, dZoomFactor=1.2, iFitBy=0, iListBy=0, iListOrder=0, iFormat=0):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Connections.Contacts.ExportCheckReport(strFullPath, dZoomFactor=1.2, iFitBy=0, iListBy=0, iListOrder=0, iFormat=0)
        ```
        
        Macro: {ref}`Macro-Connections-CreateContactReport`
        
        Ribbon: {menuselection}`Connections --> Contacts --> ExportCheckReport`
        
        ## Inputs
        
        **`strFullPath`**
        : A _String_ specifying the full path. This is a required input.
        
        **`dZoomFactor`**
        : A _Double_ specifying the zoom factor. The default value is 1.2.
        
        **`iFitBy`**
        : An _Integer_ specifying the fit by. The default value is 0.
        
        **`iListBy`**
        : An _Integer_ specifying the list by. The default value is 0.
        
        **`iListOrder`**
        : An _Integer_ specifying the list order. The default value is 0.
        
        **`iFormat`**
        : An _Integer_ specifying the format. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Contacts.ExportCheckReport(strFullPath, dZoomFactor=1.2, iFitBy=0, iListBy=0, iListOrder=0, iFormat=0)
        ```
        
        """
        message = "Connections.Contacts.ExportCheckReport('{}',{},{},{},{},{})".format(strFullPath, dZoomFactor, iFitBy, iListBy, iListOrder, iFormat)
        return JPT_RUN_LINE(message)

class Connections_Gaps:
    def TwoNodes(self, crlMaster=[], crlSlave=[], iMethod=1, iOriMode=0, crCoord=None, strName="", dU0=DFLT_DBL, dF0=DFLT_DBL, dKa=DFLT_DBL, dKb=DFLT_DBL, dKt=DFLT_DBL, dMar=DFLT_DBL, dMu1=DFLT_DBL, dMu2=DFLT_DBL, dlOriVec=[], dTmax=DFLT_DBL, dTol=DFLT_DBL, dTrmin=DFLT_DBL, crEditCur=None):
        r"""
        ## Description
        
        create gap connection
        
        ## Syntax
        
        ```python
        Connections.Gaps.TwoNodes(crlMaster=[], crlSlave=[], iMethod=1, iOriMode=0, crCoord=None, strName="", dU0=DFLT_DBL, dF0=DFLT_DBL, dKa=DFLT_DBL, dKb=DFLT_DBL, dKt=DFLT_DBL, dMar=DFLT_DBL, dMu1=DFLT_DBL, dMu2=DFLT_DBL, dlOriVec=[], dTmax=DFLT_DBL, dTol=DFLT_DBL, dTrmin=DFLT_DBL, crEditCur=None)
        ```
        
        Macro: {ref}`Macro-Connections-ConnectGap_2Nodes`
        
        Ribbon: {menuselection}`Connections --> Gaps --> TwoNodes`
        
        ## Inputs
        
        **`crlMaster`**
        : A _Cursor List_ specifying the master. The default value is [].
        
        **`crlSlave`**
        : A _Cursor List_ specifying the slave. The default value is [].
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 1.
        
        **`iOriMode`**
        : An _Integer_ specifying the ori mode. The default value is 0.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`dU0`**
        : A _Double_ specifying the u0. The default value is DFLT_DBL.
        
        **`dF0`**
        : A _Double_ specifying the f0. The default value is DFLT_DBL.
        
        **`dKa`**
        : A _Double_ specifying the ka. The default value is DFLT_DBL.
        
        **`dKb`**
        : A _Double_ specifying the kb. The default value is DFLT_DBL.
        
        **`dKt`**
        : A _Double_ specifying the kt. The default value is DFLT_DBL.
        
        **`dMar`**
        : A _Double_ specifying the mar. The default value is DFLT_DBL.
        
        **`dMu1`**
        : A _Double_ specifying the mu1. The default value is DFLT_DBL.
        
        **`dMu2`**
        : A _Double_ specifying the mu2. The default value is DFLT_DBL.
        
        **`dlOriVec`**
        : A _Double List_ specifying the ori vector. The default value is [].
        
        **`dTmax`**
        : A _Double_ specifying the tmax. The default value is DFLT_DBL.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is DFLT_DBL.
        
        **`dTrmin`**
        : A _Double_ specifying the trmin. The default value is DFLT_DBL.
        
        **`crEditCur`**
        : A _Cursor_ specifying the edit cur. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Gaps.TwoNodes(crlMaster=[], crlSlave=[], iMethod=1, iOriMode=0, crCoord=None, strName="", dU0=DFLT_DBL, dF0=DFLT_DBL, dKa=DFLT_DBL, dKb=DFLT_DBL, dKt=DFLT_DBL, dMar=DFLT_DBL, dMu1=DFLT_DBL, dMu2=DFLT_DBL, dlOriVec=[], dTmax=DFLT_DBL, dTol=DFLT_DBL, dTrmin=DFLT_DBL, crEditCur=None)
        ```
        
        """
        message = "Connections.Gaps.TwoNodes({},{},{},{},{},'{}',{},{},{},{},{},{},{},{},{},{},{},{},{})".format(crlMaster, crlSlave, iMethod, iOriMode, crCoord, strName, dU0, dF0, dKa, dKb, dKt, dMar, dMu1, dMu2, dlOriVec, dTmax, dTol, dTrmin, crEditCur)
        return JPT_RUN_LINE(message)

    def TwoEdges(self, crlMaster=[], crlSlave=[], iMethod=2, iOriMode=0, crCoord=None, strName="", dU0=DFLT_DBL, dF0=DFLT_DBL, dKa=DFLT_DBL, dKb=DFLT_DBL, dKt=DFLT_DBL, dMar=DFLT_DBL, dMu1=DFLT_DBL, dMu2=DFLT_DBL, dlOriVec=[], dTmax=DFLT_DBL, dTol=DFLT_DBL, dTrmin=DFLT_DBL, crEditCur=None):
        r"""
        ## Description
        
        create gap connection
        
        ## Syntax
        
        ```python
        Connections.Gaps.TwoEdges(crlMaster=[], crlSlave=[], iMethod=2, iOriMode=0, crCoord=None, strName="", dU0=DFLT_DBL, dF0=DFLT_DBL, dKa=DFLT_DBL, dKb=DFLT_DBL, dKt=DFLT_DBL, dMar=DFLT_DBL, dMu1=DFLT_DBL, dMu2=DFLT_DBL, dlOriVec=[], dTmax=DFLT_DBL, dTol=DFLT_DBL, dTrmin=DFLT_DBL, crEditCur=None)
        ```
        
        Macro: {ref}`Macro-Connections-ConnectGap_2Edges`
        
        Ribbon: {menuselection}`Connections --> Gaps --> TwoEdges`
        
        ## Inputs
        
        **`crlMaster`**
        : A _Cursor List_ specifying the master. The default value is [].
        
        **`crlSlave`**
        : A _Cursor List_ specifying the slave. The default value is [].
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 2.
        
        **`iOriMode`**
        : An _Integer_ specifying the ori mode. The default value is 0.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`dU0`**
        : A _Double_ specifying the u0. The default value is DFLT_DBL.
        
        **`dF0`**
        : A _Double_ specifying the f0. The default value is DFLT_DBL.
        
        **`dKa`**
        : A _Double_ specifying the ka. The default value is DFLT_DBL.
        
        **`dKb`**
        : A _Double_ specifying the kb. The default value is DFLT_DBL.
        
        **`dKt`**
        : A _Double_ specifying the kt. The default value is DFLT_DBL.
        
        **`dMar`**
        : A _Double_ specifying the mar. The default value is DFLT_DBL.
        
        **`dMu1`**
        : A _Double_ specifying the mu1. The default value is DFLT_DBL.
        
        **`dMu2`**
        : A _Double_ specifying the mu2. The default value is DFLT_DBL.
        
        **`dlOriVec`**
        : A _Double List_ specifying the ori vector. The default value is [].
        
        **`dTmax`**
        : A _Double_ specifying the tmax. The default value is DFLT_DBL.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is DFLT_DBL.
        
        **`dTrmin`**
        : A _Double_ specifying the trmin. The default value is DFLT_DBL.
        
        **`crEditCur`**
        : A _Cursor_ specifying the edit cur. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Gaps.TwoEdges(crlMaster=[], crlSlave=[], iMethod=2, iOriMode=0, crCoord=None, strName="", dU0=DFLT_DBL, dF0=DFLT_DBL, dKa=DFLT_DBL, dKb=DFLT_DBL, dKt=DFLT_DBL, dMar=DFLT_DBL, dMu1=DFLT_DBL, dMu2=DFLT_DBL, dlOriVec=[], dTmax=DFLT_DBL, dTol=DFLT_DBL, dTrmin=DFLT_DBL, crEditCur=None)
        ```
        
        """
        message = "Connections.Gaps.TwoEdges({},{},{},{},{},'{}',{},{},{},{},{},{},{},{},{},{},{},{},{})".format(crlMaster, crlSlave, iMethod, iOriMode, crCoord, strName, dU0, dF0, dKa, dKb, dKt, dMar, dMu1, dMu2, dlOriVec, dTmax, dTol, dTrmin, crEditCur)
        return JPT_RUN_LINE(message)

    def TwoFaces(self, crlMaster=[], crlSlave=[], iMethod=3, iOriMode=0, crCoord=None, strName="", dU0=DFLT_DBL, dF0=DFLT_DBL, dKa=DFLT_DBL, dKb=DFLT_DBL, dKt=DFLT_DBL, dMar=DFLT_DBL, dMu1=DFLT_DBL, dMu2=DFLT_DBL, dlOriVec=[], dTmax=DFLT_DBL, dTol=DFLT_DBL, dTrmin=DFLT_DBL, crEditCur=None):
        r"""
        ## Description
        
        create gap connection
        
        ## Syntax
        
        ```python
        Connections.Gaps.TwoFaces(crlMaster=[], crlSlave=[], iMethod=3, iOriMode=0, crCoord=None, strName="", dU0=DFLT_DBL, dF0=DFLT_DBL, dKa=DFLT_DBL, dKb=DFLT_DBL, dKt=DFLT_DBL, dMar=DFLT_DBL, dMu1=DFLT_DBL, dMu2=DFLT_DBL, dlOriVec=[], dTmax=DFLT_DBL, dTol=DFLT_DBL, dTrmin=DFLT_DBL, crEditCur=None)
        ```
        
        Macro: {ref}`Macro-Connections-ConnectGap_2Faces`
        
        Ribbon: {menuselection}`Connections --> Gaps --> TwoFaces`
        
        ## Inputs
        
        **`crlMaster`**
        : A _Cursor List_ specifying the master. The default value is [].
        
        **`crlSlave`**
        : A _Cursor List_ specifying the slave. The default value is [].
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 3.
        
        **`iOriMode`**
        : An _Integer_ specifying the ori mode. The default value is 0.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`dU0`**
        : A _Double_ specifying the u0. The default value is DFLT_DBL.
        
        **`dF0`**
        : A _Double_ specifying the f0. The default value is DFLT_DBL.
        
        **`dKa`**
        : A _Double_ specifying the ka. The default value is DFLT_DBL.
        
        **`dKb`**
        : A _Double_ specifying the kb. The default value is DFLT_DBL.
        
        **`dKt`**
        : A _Double_ specifying the kt. The default value is DFLT_DBL.
        
        **`dMar`**
        : A _Double_ specifying the mar. The default value is DFLT_DBL.
        
        **`dMu1`**
        : A _Double_ specifying the mu1. The default value is DFLT_DBL.
        
        **`dMu2`**
        : A _Double_ specifying the mu2. The default value is DFLT_DBL.
        
        **`dlOriVec`**
        : A _Double List_ specifying the ori vector. The default value is [].
        
        **`dTmax`**
        : A _Double_ specifying the tmax. The default value is DFLT_DBL.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is DFLT_DBL.
        
        **`dTrmin`**
        : A _Double_ specifying the trmin. The default value is DFLT_DBL.
        
        **`crEditCur`**
        : A _Cursor_ specifying the edit cur. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Gaps.TwoFaces(crlMaster=[], crlSlave=[], iMethod=3, iOriMode=0, crCoord=None, strName="", dU0=DFLT_DBL, dF0=DFLT_DBL, dKa=DFLT_DBL, dKb=DFLT_DBL, dKt=DFLT_DBL, dMar=DFLT_DBL, dMu1=DFLT_DBL, dMu2=DFLT_DBL, dlOriVec=[], dTmax=DFLT_DBL, dTol=DFLT_DBL, dTrmin=DFLT_DBL, crEditCur=None)
        ```
        
        """
        message = "Connections.Gaps.TwoFaces({},{},{},{},{},'{}',{},{},{},{},{},{},{},{},{},{},{},{},{})".format(crlMaster, crlSlave, iMethod, iOriMode, crCoord, strName, dU0, dF0, dKa, dKb, dKt, dMar, dMu1, dMu2, dlOriVec, dTmax, dTol, dTrmin, crEditCur)
        return JPT_RUN_LINE(message)

class Connections_MPC:
    Equation = MPC_Equation()

    General = MPC_General()

class Connections_RigidElements:
    RBar = RigidElements_RBar()

    RBE2 = RigidElements_RBE2()

    RBE3 = RigidElements_RBE3()

    def RBarGeneral(self, rbarConnection=RBAR_CONNECTION(), crlMasterTarget=[], crlSlaveTarget=[], iUlDOFs=0, dTol=DFLT_DBL, crCoord=None, crEdit=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Connections.RigidElements.RBarGeneral(rbarConnection=RBAR_CONNECTION(), crlMasterTarget=[], crlSlaveTarget=[], iUlDOFs=0, dTol=DFLT_DBL, crCoord=None, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-RBar`
        
        Ribbon: {menuselection}`Connections --> RigidElements --> RBarGeneral`
        
        ## Inputs
        
        **`rbarConnection`**
        : A _RBAR_CONNECTION_ specifying the connection. The default value is RBAR_CONNECTION().
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. The default value is [].
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. The default value is [].
        
        **`iUlDOFs`**
        : An _Integer_ specifying the ul d o fs. The default value is 0.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is DFLT_DBL.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.RigidElements.RBarGeneral(rbarConnection=RBAR_CONNECTION(), crlMasterTarget=[], crlSlaveTarget=[], iUlDOFs=0, dTol=DFLT_DBL, crCoord=None, crEdit=None)
        ```
        
        """
        message = "Connections.RigidElements.RBarGeneral({},{},{},{},{},{},{})".format(rbarConnection, crlMasterTarget, crlSlaveTarget, iUlDOFs, dTol, crCoord, crEdit)
        return JPT_RUN_LINE(message)

    def RBE2General(self, iMethod, crlMasterTarget, crlSlaveTarget, iEType=2, strName="RBE2_1", crCoordSys=None, dTolerance=0.0, iUlDOFs=63, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=1, iEnableCornerOnly=0, iDuplicateMode=-1):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Connections.RigidElements.RBE2General(iMethod, crlMasterTarget, crlSlaveTarget, iEType=2, strName="RBE2_1", crCoordSys=None, dTolerance=0.0, iUlDOFs=63, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=1, iEnableCornerOnly=0, iDuplicateMode=-1)
        ```
        
        Macro: {ref}`Macro-Connections-Rbe2`
        
        Ribbon: {menuselection}`Connections --> RigidElements --> RBE2General`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. This is a required input.
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. This is a required input.
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. This is a required input.
        
        **`iEType`**
        : An _Integer_ specifying the e type. The default value is 2.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "RBE2_1".
        
        **`crCoordSys`**
        : A _Cursor_ specifying the coordinate system. The default value is None.
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. The default value is 0.0.
        
        **`iUlDOFs`**
        : An _Integer_ specifying the ul d o fs. The default value is 63.
        
        **`dlVirtualNodePos`**
        : A _Double List_ specifying the virtual node position. The default value is [0, 0, 0].
        
        **`iSurfaceDef`**
        : An _Integer_ specifying the surface definition. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iEnableUpdateDispCS`**
        : An _Integer_ specifying the enable update displacement coordinate system. The default value is 1.
        
        **`iEnableCornerOnly`**
        : An _Integer_ specifying the enable corner only. The default value is 0.
        
        **`iDuplicateMode`**
        : An _Integer_ specifying the duplicate mode. The default value is -1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.RigidElements.RBE2General(iMethod, crlMasterTarget, crlSlaveTarget, iEType=2, strName="RBE2_1", crCoordSys=None, dTolerance=0.0, iUlDOFs=63, dlVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, iEnableUpdateDispCS=1, iEnableCornerOnly=0, iDuplicateMode=-1)
        ```
        
        """
        message = "Connections.RigidElements.RBE2General({},{},{},{},'{}',{},{},{},{},{},{},{},{},{})".format(iMethod, crlMasterTarget, crlSlaveTarget, iEType, strName, crCoordSys, dTolerance, iUlDOFs, dlVirtualNodePos, iSurfaceDef, crEdit, iEnableUpdateDispCS, iEnableCornerOnly, iDuplicateMode)
        return JPT_RUN_LINE(message)

    def RBE3General(self, iMethod=0, crlMasterTarget=[], crlSlaveTarget=[], listRbe3TermConnection=[], iTypeRBE3=3, strName="", crCoordSys=None, dTolerance=0.0, posVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, bUpdateDispCS=True, bCornerOnly=False):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Connections.RigidElements.RBE3General(iMethod=0, crlMasterTarget=[], crlSlaveTarget=[], listRbe3TermConnection=[], iTypeRBE3=3, strName="", crCoordSys=None, dTolerance=0.0, posVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, bUpdateDispCS=True, bCornerOnly=False)
        ```
        
        Macro: {ref}`Macro-Connections-Rbe3`
        
        Ribbon: {menuselection}`Connections --> RigidElements --> RBE3General`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. The default value is [].
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. The default value is [].
        
        **`listRbe3TermConnection`**
        : A _RBE3TERM_CONNECTION List_ specifying the rbe3 term connection. The default value is [].
        
        **`iTypeRBE3`**
        : An _Integer_ specifying the type r e3. The default value is 3.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`crCoordSys`**
        : A _Cursor_ specifying the coordinate system. The default value is None.
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. The default value is 0.0.
        
        **`posVirtualNodePos`**
        : A _Position_ specifying the virtual node position. The default value is [0, 0, 0].
        
        **`iSurfaceDef`**
        : An _Integer_ specifying the surface definition. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`bUpdateDispCS`**
        : A _Boolean_ specifying the update displacement coordinate system. The default value is True.
        
        **`bCornerOnly`**
        : A _Boolean_ specifying the corner only. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.RigidElements.RBE3General(iMethod=0, crlMasterTarget=[], crlSlaveTarget=[], listRbe3TermConnection=[], iTypeRBE3=3, strName="", crCoordSys=None, dTolerance=0.0, posVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, bUpdateDispCS=True, bCornerOnly=False)
        ```
        
        """
        message = "Connections.RigidElements.RBE3General({},{},{},{},{},'{}',{},{},{},{},{},{},{})".format(iMethod, crlMasterTarget, crlSlaveTarget, listRbe3TermConnection, iTypeRBE3, strName, crCoordSys, dTolerance, posVirtualNodePos, iSurfaceDef, crEdit, bUpdateDispCS, bCornerOnly)
        return JPT_RUN_LINE(message)

class Connections_SpringsDampers:
    Damper = SpringsDampers_Damper()

    def BushGeneral(self, iMethod, strName, crlMaster, crlSlave, crCoord, dTol, iGround, iOriMode, iEqual, poslVector, dlStiffness, dlDampCoef, dlDampConst, dRotStrain, dTransStrain, dRotStress, dTransStress, crEditObj):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Connections.SpringsDampers.BushGeneral(iMethod, strName, crlMaster, crlSlave, crCoord, dTol, iGround, iOriMode, iEqual, poslVector, dlStiffness, dlDampCoef, dlDampConst, dRotStrain, dTransStrain, dRotStress, dTransStress, crEditObj)
        ```
        
        Macro: {ref}`Macro-Connections-Bush`
        
        Ribbon: {menuselection}`Connections --> SpringsDampers --> BushGeneral`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. This is a required input.
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`crlMaster`**
        : A _Cursor List_ specifying the master. This is a required input.
        
        **`crlSlave`**
        : A _Cursor List_ specifying the slave. This is a required input.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. This is a required input.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. This is a required input.
        
        **`iGround`**
        : An _Integer_ specifying the ground. This is a required input.
        
        **`iOriMode`**
        : An _Integer_ specifying the ori mode. This is a required input.
        
        **`iEqual`**
        : An _Integer_ specifying the equal. This is a required input.
        
        **`poslVector`**
        : A _Position List_ specifying the vector. This is a required input.
        
        **`dlStiffness`**
        : A _Double List_ specifying the stiffness. This is a required input.
        
        **`dlDampCoef`**
        : A _Double List_ specifying the damp coefficient . This is a required input.
        
        **`dlDampConst`**
        : A _Double List_ specifying the damp const. This is a required input.
        
        **`dRotStrain`**
        : A _Double_ specifying the rotation strain. This is a required input.
        
        **`dTransStrain`**
        : A _Double_ specifying the trans strain. This is a required input.
        
        **`dRotStress`**
        : A _Double_ specifying the rotation stress. This is a required input.
        
        **`dTransStress`**
        : A _Double_ specifying the trans stress. This is a required input.
        
        **`crEditObj`**
        : A _Cursor_ specifying the edit object. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.SpringsDampers.BushGeneral(iMethod, strName, crlMaster, crlSlave, crCoord, dTol, iGround, iOriMode, iEqual, poslVector, dlStiffness, dlDampCoef, dlDampConst, dRotStrain, dTransStrain, dRotStress, dTransStress, crEditObj)
        ```
        
        """
        message = "Connections.SpringsDampers.BushGeneral({},'{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(iMethod, strName, crlMaster, crlSlave, crCoord, dTol, iGround, iOriMode, iEqual, poslVector, dlStiffness, dlDampCoef, dlDampConst, dRotStrain, dTransStrain, dRotStress, dTransStress, crEditObj)
        return JPT_RUN_LINE(message)

    Bush = SpringsDampers_Bush()

    Spring = SpringsDampers_Spring()

class Designer_LBC:
    def TemperatureLoad(self, strName="", iDnType=0, dFTemp=0, strDstrFilePathName="", crDcrTable=None, crlTarget=[], crEdit=None, bDbUseAsMaterialReferenceTemp=False):
        r"""
        ## Description
        
        create temperature load Desiner
        
        ## Syntax
        
        ```python
        Designer.LBC.TemperatureLoad(strName="", iDnType=0, dFTemp=0, strDstrFilePathName="", crDcrTable=None, crlTarget=[], crEdit=None, bDbUseAsMaterialReferenceTemp=False)
        ```
        
        Macro: {ref}`Macro-Designer-TemperatureLoad`
        
        Ribbon: {menuselection}`Designer --> LBC --> TemperatureLoad`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`iDnType`**
        : An _Integer_ specifying the dn type. The default value is 0.
        
        **`dFTemp`**
        : A _Double_ specifying the temperature. The default value is 0.
        
        **`strDstrFilePathName`**
        : A _String_ specifying the dstr file path name. The default value is "".
        
        **`crDcrTable`**
        : A _Cursor_ specifying the dcr table. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`bDbUseAsMaterialReferenceTemp`**
        : A _Boolean_ specifying the db use as material reference temperature. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Designer.LBC.TemperatureLoad(strName="", iDnType=0, dFTemp=0, strDstrFilePathName="", crDcrTable=None, crlTarget=[], crEdit=None, bDbUseAsMaterialReferenceTemp=False)
        ```
        
        """
        message = "Designer.LBC.TemperatureLoad('{}',{},{},'{}',{},{},{},{})".format(strName, iDnType, dFTemp, strDstrFilePathName, crDcrTable, crlTarget, crEdit, bDbUseAsMaterialReferenceTemp)
        return JPT_RUN_LINE(message)

class Designer_Load:
    def Moment(self, strName="", crlFace=[], dlVecMomentXYZ=[0.0,0.0,0.0], crCoord=None, crEdit=None):
        r"""
        ## Description
        
        Create moment
        
        ## Syntax
        
        ```python
        Designer.Load.Moment(strName="", crlFace=[], dlVecMomentXYZ=[0.0,0.0,0.0], crCoord=None, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Designer-Moment`
        
        Ribbon: {menuselection}`Designer --> Load --> Moment`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`dlVecMomentXYZ`**
        : A _Double List_ specifying the vector moment x y z. The default value is [0.0,0.0,0.0].
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Designer.Load.Moment(strName="", crlFace=[], dlVecMomentXYZ=[0.0,0.0,0.0], crCoord=None, crEdit=None)
        ```
        
        """
        message = "Designer.Load.Moment('{}',{},{},{},{})".format(strName, crlFace, dlVecMomentXYZ, crCoord, crEdit)
        return JPT_RUN_LINE(message)

class ExManifoldModeling_SZ:
    def WeldLine2(self, crlFace, crlPart, dLayerWidth, iLayerNumber):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        ExManifoldModeling.SZ.WeldLine2(crlFace, crlPart, dLayerWidth, iLayerNumber)
        ```
        
        Macro: {ref}`Macro-ExManifoldModeling-SZWeldLine2`
        
        Ribbon: {menuselection}`ExManifoldModeling --> SZ --> WeldLine2`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. This is a required input.
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. This is a required input.
        
        **`dLayerWidth`**
        : A _Double_ specifying the layer width. This is a required input.
        
        **`iLayerNumber`**
        : An _Integer_ specifying the layer number. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        ExManifoldModeling.SZ.WeldLine2(crlFace, crlPart, dLayerWidth, iLayerNumber)
        ```
        
        """
        message = "ExManifoldModeling.SZ.WeldLine2({},{},{},{})".format(crlFace, crlPart, dLayerWidth, iLayerNumber)
        return JPT_RUN_LINE(message)

class Geometry_Bar:
    def TwoNodes(self, strPartName="Bar_1", iMeshCount=5, crStartNode=None, crEndNode=None):
        r"""
        ## Description
        
        Create Bar Body
        
        ## Syntax
        
        ```python
        Geometry.Bar.TwoNodes(strPartName="Bar_1", iMeshCount=5, crStartNode=None, crEndNode=None)
        ```
        
        Macro: {ref}`Macro-Geometry-CreateBar`
        
        Ribbon: {menuselection}`Geometry --> Bar --> TwoNodes`
        
        ## Inputs
        
        **`strPartName`**
        : A _String_ specifying the part name. The default value is "Bar_1".
        
        **`iMeshCount`**
        : An _Integer_ specifying the mesh count. The default value is 5.
        
        **`crStartNode`**
        : A _Cursor_ specifying the start node. The default value is None.
        
        **`crEndNode`**
        : A _Cursor_ specifying the end node. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Bar.TwoNodes(strPartName="Bar_1", iMeshCount=5, crStartNode=None, crEndNode=None)
        ```
        
        """
        message = "Geometry.Bar.TwoNodes('{}',{},{},{})".format(strPartName, iMeshCount, crStartNode, crEndNode)
        return JPT_RUN_LINE(message)

    def Arc(self, crlNode, crPart=None, strBarName=""):
        r"""
        ## Description
        
        Create Edge by spline
        
        ## Syntax
        
        ```python
        Geometry.Bar.Arc(crlNode, crPart=None, strBarName="")
        ```
        
        Macro: {ref}`Macro-Geometry-CreateBarArc`
        
        Ribbon: {menuselection}`Geometry --> Bar --> Arc`
        
        ## Inputs
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. This is a required input.
        
        **`crPart`**
        : A _Cursor_ specifying the part. The default value is None.
        
        **`strBarName`**
        : A _String_ specifying the bar name. The default value is "".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Bar.Arc(crlNode, crPart=None, strBarName="")
        ```
        
        """
        message = "Geometry.Bar.Arc({},{},'{}')".format(crlNode, crPart, strBarName)
        return JPT_RUN_LINE(message)

    def Spline(self, crlNode, crPart=None, strBarName=""):
        r"""
        ## Description
        
        Create Edge by spline
        
        ## Syntax
        
        ```python
        Geometry.Bar.Spline(crlNode, crPart=None, strBarName="")
        ```
        
        Macro: {ref}`Macro-Geometry-CreateBarSpline`
        
        Ribbon: {menuselection}`Geometry --> Bar --> Spline`
        
        ## Inputs
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. This is a required input.
        
        **`crPart`**
        : A _Cursor_ specifying the part. The default value is None.
        
        **`strBarName`**
        : A _String_ specifying the bar name. The default value is "".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Bar.Spline(crlNode, crPart=None, strBarName="")
        ```
        
        """
        message = "Geometry.Bar.Spline({},{},'{}')".format(crlNode, crPart, strBarName)
        return JPT_RUN_LINE(message)

class Geometry_BodyCut:
    def XXYYOnOnePoint(self, crPart, posCutPos=[0,0,0], iType=0, dOffset=0.0, bSplit=False, bSectionFace=True, bShateFace=False, crLocalCoor=None):
        r"""
        ## Description
        
        Cut body by one point
        
        ## Syntax
        
        ```python
        Geometry.BodyCut.XXYYOnOnePoint(crPart, posCutPos=[0,0,0], iType=0, dOffset=0.0, bSplit=False, bSectionFace=True, bShateFace=False, crLocalCoor=None)
        ```
        
        Macro: {ref}`Macro-Geometry-CutBodyByPlane`
        
        Ribbon: {menuselection}`Geometry --> BodyCut --> XXYYOnOnePoint`
        
        ## Inputs
        
        **`crPart`**
        : A _Cursor_ specifying the part. This is a required input.
        
        **`posCutPos`**
        : A _Position_ specifying the cut position. The default value is [0,0,0].
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 0.
        
        **`dOffset`**
        : A _Double_ specifying the offset. The default value is 0.0.
        
        **`bSplit`**
        : A _Boolean_ specifying the split. The default value is False.
        
        **`bSectionFace`**
        : A _Boolean_ specifying the section face. The default value is True.
        
        **`bShateFace`**
        : A _Boolean_ specifying the shate face. The default value is False.
        
        **`crLocalCoor`**
        : A _Cursor_ specifying the local coordinate. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.BodyCut.XXYYOnOnePoint(crPart, posCutPos=[0,0,0], iType=0, dOffset=0.0, bSplit=False, bSectionFace=True, bShateFace=False, crLocalCoor=None)
        ```
        
        """
        message = "Geometry.BodyCut.XXYYOnOnePoint({},{},{},{},{},{},{},{})".format(crPart, posCutPos, iType, dOffset, bSplit, bSectionFace, bShateFace, crLocalCoor)
        return JPT_RUN_LINE(message)

    def BySurface(self, crlPart, crCutter, bSplitOnly=False, bMakeSectionFace=True, bShareFace=False, bSeparateFace=False):
        r"""
        ## Description
        
        Cut body by surface
        
        ## Syntax
        
        ```python
        Geometry.BodyCut.BySurface(crlPart, crCutter, bSplitOnly=False, bMakeSectionFace=True, bShareFace=False, bSeparateFace=False)
        ```
        
        Macro: {ref}`Macro-Geometry-BodyCutBySurfaceS`
        
        Ribbon: {menuselection}`Geometry --> BodyCut --> BySurface`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. This is a required input.
        
        **`crCutter`**
        : A _Cursor_ specifying the cutter. This is a required input.
        
        **`bSplitOnly`**
        : A _Boolean_ specifying the split only. The default value is False.
        
        **`bMakeSectionFace`**
        : A _Boolean_ specifying the make section face. The default value is True.
        
        **`bShareFace`**
        : A _Boolean_ specifying the share face. The default value is False.
        
        **`bSeparateFace`**
        : A _Boolean_ specifying the separate face. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.BodyCut.BySurface(crlPart, crCutter, bSplitOnly=False, bMakeSectionFace=True, bShareFace=False, bSeparateFace=False)
        ```
        
        """
        message = "Geometry.BodyCut.BySurface({},{},{},{},{},{})".format(crlPart, crCutter, bSplitOnly, bMakeSectionFace, bShareFace, bSeparateFace)
        return JPT_RUN_LINE(message)

    def By3Points(self, crPart=None, poslPosition=[], dOffset=0.0, bSplitonly=False, bMakesectionface=True, bShareface=False):
        r"""
        ## Description
        
        Body Cut by 3 Points
        
        ## Syntax
        
        ```python
        Geometry.BodyCut.By3Points(crPart=None, poslPosition=[], dOffset=0.0, bSplitonly=False, bMakesectionface=True, bShareface=False)
        ```
        
        Macro: {ref}`Macro-Geometry-BodyCutBy3PointsS`
        
        Ribbon: {menuselection}`Geometry --> BodyCut --> By3Points`
        
        ## Inputs
        
        **`crPart`**
        : A _Cursor_ specifying the part. The default value is None.
        
        **`poslPosition`**
        : A _Position List_ specifying the position. The default value is [].
        
        **`dOffset`**
        : A _Double_ specifying the offset. The default value is 0.0.
        
        **`bSplitonly`**
        : A _Boolean_ specifying the splitonly. The default value is False.
        
        **`bMakesectionface`**
        : A _Boolean_ specifying the makesectionface. The default value is True.
        
        **`bShareface`**
        : A _Boolean_ specifying the shareface. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.BodyCut.By3Points(crPart=None, poslPosition=[], dOffset=0.0, bSplitonly=False, bMakesectionface=True, bShareface=False)
        ```
        
        """
        message = "Geometry.BodyCut.By3Points({},{},{},{},{},{})".format(crPart, poslPosition, dOffset, bSplitonly, bMakesectionface, bShareface)
        return JPT_RUN_LINE(message)

class Geometry_BreakEntity:
    def StlPart(self, crlPart=[], iMinNoOfFaces=0, iMethod=0):
        r"""
        ## Description
        
        break STL part
        
        ## Syntax
        
        ```python
        Geometry.BreakEntity.StlPart(crlPart=[], iMinNoOfFaces=0, iMethod=0)
        ```
        
        Macro: {ref}`Macro-Geometry-SeparateSTLPart`
        
        Ribbon: {menuselection}`Geometry --> BreakEntity --> StlPart`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`iMinNoOfFaces`**
        : An _Integer_ specifying the minimum no of faces. The default value is 0.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.BreakEntity.StlPart(crlPart=[], iMinNoOfFaces=0, iMethod=0)
        ```
        
        """
        message = "Geometry.BreakEntity.StlPart({},{},{})".format(crlPart, iMinNoOfFaces, iMethod)
        return JPT_RUN_LINE(message)

    def Face(self, crlFace):
        r"""
        ## Description
        
        break entity for face
        
        ## Syntax
        
        ```python
        Geometry.BreakEntity.Face(crlFace)
        ```
        
        Macro: {ref}`Macro-Geometry-BreakFace`
        
        Ribbon: {menuselection}`Geometry --> BreakEntity --> Face`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.BreakEntity.Face(crlFace)
        ```
        
        """
        message = "Geometry.BreakEntity.Face({})".format(crlFace)
        return JPT_RUN_LINE(message)

    def Edge(self, crlPart=[], crlFace=[], crlEdge=[], crlNode=[], bAutoByAngle=False, dEdgeAngle=60.0):
        r"""
        ## Description
        
        Break selected edge
        
        ## Syntax
        
        ```python
        Geometry.BreakEntity.Edge(crlPart=[], crlFace=[], crlEdge=[], crlNode=[], bAutoByAngle=False, dEdgeAngle=60.0)
        ```
        
        Macro: {ref}`Macro-Geometry-BreakEdgeCr`
        
        Ribbon: {menuselection}`Geometry --> BreakEntity --> Edge`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`crlEdge`**
        : A _Cursor List_ specifying the edge. The default value is [].
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        **`bAutoByAngle`**
        : A _Boolean_ specifying the auto by angle. The default value is False.
        
        **`dEdgeAngle`**
        : A _Double_ specifying the edge angle. The default value is 60.0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.BreakEntity.Edge(crlPart=[], crlFace=[], crlEdge=[], crlNode=[], bAutoByAngle=False, dEdgeAngle=60.0)
        ```
        
        """
        message = "Geometry.BreakEntity.Edge({},{},{},{},{},{})".format(crlPart, crlFace, crlEdge, crlNode, bAutoByAngle, dEdgeAngle)
        return JPT_RUN_LINE(message)

    def Part(self, crlPart=[]):
        r"""
        ## Description
        
        Separate Part
        
        ## Syntax
        
        ```python
        Geometry.BreakEntity.Part(crlPart=[])
        ```
        
        Macro: {ref}`Macro-Geometry-SeparatePart`
        
        Ribbon: {menuselection}`Geometry --> BreakEntity --> Part`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.BreakEntity.Part(crlPart=[])
        ```
        
        """
        message = "Geometry.BreakEntity.Part({})".format(crlPart)
        return JPT_RUN_LINE(message)

class Geometry_DeleteEntity:
    def Part(self, crlPart):
        r"""
        ## Description
        
        Delete Part
        
        ## Syntax
        
        ```python
        Geometry.DeleteEntity.Part(crlPart)
        ```
        
        Macro: {ref}`Macro-Geometry-DeletePartCr`
        
        Ribbon: {menuselection}`Geometry --> DeleteEntity --> Part`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.DeleteEntity.Part(crlPart)
        ```
        
        """
        message = "Geometry.DeleteEntity.Part({})".format(crlPart)
        return JPT_RUN_LINE(message)

    def Edge(self, crlEdge=[]):
        r"""
        ## Description
        
        Delete Edge
        
        ## Syntax
        
        ```python
        Geometry.DeleteEntity.Edge(crlEdge=[])
        ```
        
        Macro: {ref}`Macro-Geometry-DeleteEdgeCr`
        
        Ribbon: {menuselection}`Geometry --> DeleteEntity --> Edge`
        
        ## Inputs
        
        **`crlEdge`**
        : A _Cursor List_ specifying the edge. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.DeleteEntity.Edge(crlEdge=[])
        ```
        
        """
        message = "Geometry.DeleteEntity.Edge({})".format(crlEdge)
        return JPT_RUN_LINE(message)

    def Vertex(self, crlVertex=[]):
        r"""
        ## Description
        
        delete vertex
        
        ## Syntax
        
        ```python
        Geometry.DeleteEntity.Vertex(crlVertex=[])
        ```
        
        Macro: {ref}`Macro-Geometry-DeleteVertexCr`
        
        Ribbon: {menuselection}`Geometry --> DeleteEntity --> Vertex`
        
        ## Inputs
        
        **`crlVertex`**
        : A _Cursor List_ specifying the vertex. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.DeleteEntity.Vertex(crlVertex=[])
        ```
        
        """
        message = "Geometry.DeleteEntity.Vertex({})".format(crlVertex)
        return JPT_RUN_LINE(message)

    def Face(self, crlFace=[], bKeepSolid=True):
        r"""
        ## Description
        
        Delete Face
        
        ## Syntax
        
        ```python
        Geometry.DeleteEntity.Face(crlFace=[], bKeepSolid=True)
        ```
        
        Macro: {ref}`Macro-Geometry-DeleteFaceCr`
        
        Ribbon: {menuselection}`Geometry --> DeleteEntity --> Face`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`bKeepSolid`**
        : A _Boolean_ specifying the keep solid. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.DeleteEntity.Face(crlFace=[], bKeepSolid=True)
        ```
        
        """
        message = "Geometry.DeleteEntity.Face({},{})".format(crlFace, bKeepSolid)
        return JPT_RUN_LINE(message)

class Geometry_Edge:
    def Line(self, poslPositions, crlTargetFace, bBreakFace=True):
        r"""
        ## Description
        
        Imprint line 2 point
        
        ## Syntax
        
        ```python
        Geometry.Edge.Line(poslPositions, crlTargetFace, bBreakFace=True)
        ```
        
        Macro: {ref}`Macro-Geometry-ImprintLineS`
        
        Ribbon: {menuselection}`Geometry --> Edge --> Line`
        
        ## Inputs
        
        **`poslPositions`**
        : A _Position List_ specifying the positions. This is a required input.
        
        **`crlTargetFace`**
        : A _Cursor List_ specifying the target face. This is a required input.
        
        **`bBreakFace`**
        : A _Boolean_ specifying the break face. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Edge.Line(poslPositions, crlTargetFace, bBreakFace=True)
        ```
        
        """
        message = "Geometry.Edge.Line({},{},{})".format(poslPositions, crlTargetFace, bBreakFace)
        return JPT_RUN_LINE(message)

    def Spline(self, veclAprroxiPositions, crlTargetFace, bBreakFace=True):
        r"""
        ## Description
        
        Imprint a Spline on a face
        
        ## Syntax
        
        ```python
        Geometry.Edge.Spline(veclAprroxiPositions, crlTargetFace, bBreakFace=True)
        ```
        
        Macro: {ref}`Macro-Geometry-GeoImprintSplineS`
        
        Ribbon: {menuselection}`Geometry --> Edge --> Spline`
        
        ## Inputs
        
        **`veclAprroxiPositions`**
        : A _Vector List_ specifying the aprroxi positions. This is a required input.
        
        **`crlTargetFace`**
        : A _Cursor List_ specifying the target face. This is a required input.
        
        **`bBreakFace`**
        : A _Boolean_ specifying the break face. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Edge.Spline(veclAprroxiPositions, crlTargetFace, bBreakFace=True)
        ```
        
        """
        message = "Geometry.Edge.Spline({},{},{})".format(veclAprroxiPositions, crlTargetFace, bBreakFace)
        return JPT_RUN_LINE(message)

    def PlanarLine(self, veclPosition, crlTargetFace, crLocalCoord=None, iType=0, bBreakFace=True):
        r"""
        ## Description
        
        Imprint Planar Line
        
        ## Syntax
        
        ```python
        Geometry.Edge.PlanarLine(veclPosition, crlTargetFace, crLocalCoord=None, iType=0, bBreakFace=True)
        ```
        
        Macro: {ref}`Macro-Geometry-ImprintPlannarLineS`
        
        Ribbon: {menuselection}`Geometry --> Edge --> PlanarLine`
        
        ## Inputs
        
        **`veclPosition`**
        : A _Vector List_ specifying the position. This is a required input.
        
        **`crlTargetFace`**
        : A _Cursor List_ specifying the target face. This is a required input.
        
        **`crLocalCoord`**
        : A _Cursor_ specifying the local coordinate. The default value is None.
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 0.
        
        **`bBreakFace`**
        : A _Boolean_ specifying the break face. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Edge.PlanarLine(veclPosition, crlTargetFace, crLocalCoord=None, iType=0, bBreakFace=True)
        ```
        
        """
        message = "Geometry.Edge.PlanarLine({},{},{},{},{})".format(veclPosition, crlTargetFace, crLocalCoord, iType, bBreakFace)
        return JPT_RUN_LINE(message)

    def Circle(self, veclPositions, crlTargetFace, dInRadius=1, dOutRadius=4, iNoOfLayer=1, iNoOfDiv=30, bBreakFace=True):
        r"""
        ## Description
        
        Imprint Cirlcle Line S
        
        ## Syntax
        
        ```python
        Geometry.Edge.Circle(veclPositions, crlTargetFace, dInRadius=1, dOutRadius=4, iNoOfLayer=1, iNoOfDiv=30, bBreakFace=True)
        ```
        
        Macro: {ref}`Macro-Geometry-ImprintCircleS`
        
        Ribbon: {menuselection}`Geometry --> Edge --> Circle`
        
        ## Inputs
        
        **`veclPositions`**
        : A _Vector List_ specifying the positions. This is a required input.
        
        **`crlTargetFace`**
        : A _Cursor List_ specifying the target face. This is a required input.
        
        **`dInRadius`**
        : A _Double_ specifying the in radius. The default value is 1.
        
        **`dOutRadius`**
        : A _Double_ specifying the out radius. The default value is 4.
        
        **`iNoOfLayer`**
        : An _Integer_ specifying the no of layer. The default value is 1.
        
        **`iNoOfDiv`**
        : An _Integer_ specifying the no of divide. The default value is 30.
        
        **`bBreakFace`**
        : A _Boolean_ specifying the break face. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Edge.Circle(veclPositions, crlTargetFace, dInRadius=1, dOutRadius=4, iNoOfLayer=1, iNoOfDiv=30, bBreakFace=True)
        ```
        
        """
        message = "Geometry.Edge.Circle({},{},{},{},{},{},{})".format(veclPositions, crlTargetFace, dInRadius, dOutRadius, iNoOfLayer, iNoOfDiv, bBreakFace)
        return JPT_RUN_LINE(message)

    def PerpendicularLineOfEdge(self, crlNode, crlFace, dOffset=0, bReakFace=True):
        r"""
        ## Description
        
        Imprint the perpendicular line of edge
        
        ## Syntax
        
        ```python
        Geometry.Edge.PerpendicularLineOfEdge(crlNode, crlFace, dOffset=0, bReakFace=True)
        ```
        
        Macro: {ref}`Macro-Geometry-ImprintPerpendicularLine`
        
        Ribbon: {menuselection}`Geometry --> Edge --> PerpendicularLineOfEdge`
        
        ## Inputs
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. This is a required input.
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. This is a required input.
        
        **`dOffset`**
        : A _Double_ specifying the offset. The default value is 0.
        
        **`bReakFace`**
        : A _Boolean_ specifying the reak face. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Edge.PerpendicularLineOfEdge(crlNode, crlFace, dOffset=0, bReakFace=True)
        ```
        
        """
        message = "Geometry.Edge.PerpendicularLineOfEdge({},{},{},{})".format(crlNode, crlFace, dOffset, bReakFace)
        return JPT_RUN_LINE(message)

    def ExtendLine(self, crlEdge, iMethod=0, iEnd=0, iNoFittingPoints=3, iDiv=2, iEnableBreakFace=1):
        r"""
        ## Description
        
        make edge by extend line
        
        ## Syntax
        
        ```python
        Geometry.Edge.ExtendLine(crlEdge, iMethod=0, iEnd=0, iNoFittingPoints=3, iDiv=2, iEnableBreakFace=1)
        ```
        
        Macro: {ref}`Macro-Geometry-ImprintExtendLine`
        
        Ribbon: {menuselection}`Geometry --> Edge --> ExtendLine`
        
        ## Inputs
        
        **`crlEdge`**
        : A _Cursor List_ specifying the edge. This is a required input.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`iEnd`**
        : An _Integer_ specifying the end. The default value is 0.
        
        **`iNoFittingPoints`**
        : An _Integer_ specifying the no fitting points. The default value is 3.
        
        **`iDiv`**
        : An _Integer_ specifying the divide. The default value is 2.
        
        **`iEnableBreakFace`**
        : An _Integer_ specifying the enable break face. The default value is 1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Edge.ExtendLine(crlEdge, iMethod=0, iEnd=0, iNoFittingPoints=3, iDiv=2, iEnableBreakFace=1)
        ```
        
        """
        message = "Geometry.Edge.ExtendLine({},{},{},{},{},{})".format(crlEdge, iMethod, iEnd, iNoFittingPoints, iDiv, iEnableBreakFace)
        return JPT_RUN_LINE(message)

    def ElementEdges(self, crplElemEdge, bBreakEdge=True):
        r"""
        ## Description
        
        Create Edge by element edges
        
        ## Syntax
        
        ```python
        Geometry.Edge.ElementEdges(crplElemEdge, bBreakEdge=True)
        ```
        
        Macro: {ref}`Macro-Geometry-CreateEdgeByElemEdge`
        
        Ribbon: {menuselection}`Geometry --> Edge --> ElementEdges`
        
        ## Inputs
        
        **`crplElemEdge`**
        : A _Cursor Pair List_ specifying the element edge. This is a required input.
        
        **`bBreakEdge`**
        : A _Boolean_ specifying the break edge. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Edge.ElementEdges(crplElemEdge, bBreakEdge=True)
        ```
        
        """
        message = "Geometry.Edge.ElementEdges({},{})".format(crplElemEdge, bBreakEdge)
        return JPT_RUN_LINE(message)

    def Angle(self, crpPair, dAngle=135.0, bCurvature=False, bBreakFace=True):
        r"""
        ## Description
        
        create new adge by convert angle
        
        ## Syntax
        
        ```python
        Geometry.Edge.Angle(crpPair, dAngle=135.0, bCurvature=False, bBreakFace=True)
        ```
        
        Macro: {ref}`Macro-Geometry-CreateEdgeByElemEdgeAngle`
        
        Ribbon: {menuselection}`Geometry --> Edge --> Angle`
        
        ## Inputs
        
        **`crpPair`**
        : A _Cursor Pair_ specifying the pair. This is a required input.
        
        **`dAngle`**
        : A _Double_ specifying the angle. The default value is 135.0.
        
        **`bCurvature`**
        : A _Boolean_ specifying the curvature. The default value is False.
        
        **`bBreakFace`**
        : A _Boolean_ specifying the break face. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Edge.Angle(crpPair, dAngle=135.0, bCurvature=False, bBreakFace=True)
        ```
        
        """
        message = "Geometry.Edge.Angle({},{},{},{})".format(crpPair, dAngle, bCurvature, bBreakFace)
        return JPT_RUN_LINE(message)

    def NodeShortestPath(self, crFirstNode, crSecondNode, iEnableBreakFace=1):
        r"""
        ## Description
        
        create edge by 2 nodes shortest path
        
        ## Syntax
        
        ```python
        Geometry.Edge.NodeShortestPath(crFirstNode, crSecondNode, iEnableBreakFace=1)
        ```
        
        Macro: {ref}`Macro-Geometry-CreateEdgeBy2NodeShortestPath`
        
        Ribbon: {menuselection}`Geometry --> Edge --> NodeShortestPath`
        
        ## Inputs
        
        **`crFirstNode`**
        : A _Cursor_ specifying the first node. This is a required input.
        
        **`crSecondNode`**
        : A _Cursor_ specifying the second node. This is a required input.
        
        **`iEnableBreakFace`**
        : An _Integer_ specifying the enable break face. The default value is 1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Edge.NodeShortestPath(crFirstNode, crSecondNode, iEnableBreakFace=1)
        ```
        
        """
        message = "Geometry.Edge.NodeShortestPath({},{},{})".format(crFirstNode, crSecondNode, iEnableBreakFace)
        return JPT_RUN_LINE(message)

    def OffsetLine(self, crlFace=[], crlEdge=[], bBreakFace=True, dOffsetDistance=0.0, iNumberLayer=1, bMerge=True, bExtend=True, iLayerMethod=0, dlVlayerOffset=[], bAutoCollapse=False, iRLType=2):
        r"""
        ## Description
        
        Imprint geometry edge offset line
        
        ## Syntax
        
        ```python
        Geometry.Edge.OffsetLine(crlFace=[], crlEdge=[], bBreakFace=True, dOffsetDistance=0.0, iNumberLayer=1, bMerge=True, bExtend=True, iLayerMethod=0, dlVlayerOffset=[], bAutoCollapse=False, iRLType=2)
        ```
        
        Macro: {ref}`Macro-Geometry-ImprintOffsetLineS`
        
        Ribbon: {menuselection}`Geometry --> Edge --> OffsetLine`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`crlEdge`**
        : A _Cursor List_ specifying the edge. The default value is [].
        
        **`bBreakFace`**
        : A _Boolean_ specifying the break face. The default value is True.
        
        **`dOffsetDistance`**
        : A _Double_ specifying the offset distance. The default value is 0.0.
        
        **`iNumberLayer`**
        : An _Integer_ specifying the number layer. The default value is 1.
        
        **`bMerge`**
        : A _Boolean_ specifying the merge. The default value is True.
        
        **`bExtend`**
        : A _Boolean_ specifying the extend. The default value is True.
        
        **`iLayerMethod`**
        : An _Integer_ specifying the layer method. The default value is 0.
        
        **`dlVlayerOffset`**
        : A _Double List_ specifying the vlayer offset. The default value is [].
        
        **`bAutoCollapse`**
        : A _Boolean_ specifying the auto collapse. The default value is False.
        
        **`iRLType`**
        : An _Integer_ specifying the r l type. The default value is 2.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Edge.OffsetLine(crlFace=[], crlEdge=[], bBreakFace=True, dOffsetDistance=0.0, iNumberLayer=1, bMerge=True, bExtend=True, iLayerMethod=0, dlVlayerOffset=[], bAutoCollapse=False, iRLType=2)
        ```
        
        """
        message = "Geometry.Edge.OffsetLine({},{},{},{},{},{},{},{},{},{},{})".format(crlFace, crlEdge, bBreakFace, dOffsetDistance, iNumberLayer, bMerge, bExtend, iLayerMethod, dlVlayerOffset, bAutoCollapse, iRLType)
        return JPT_RUN_LINE(message)

    def SplineFreeEdges(self, crlNode, iEnableArc=0, crPart=None, strBarName=""):
        r"""
        ## Description
        
        Create Edge by spline
        
        ## Syntax
        
        ```python
        Geometry.Edge.SplineFreeEdges(crlNode, iEnableArc=0, crPart=None, strBarName="")
        ```
        
        Macro: {ref}`Macro-Geometry-CreateEdgeSpline`
        
        Ribbon: {menuselection}`Geometry --> Edge --> SplineFreeEdges`
        
        ## Inputs
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. This is a required input.
        
        **`iEnableArc`**
        : An _Integer_ specifying the enable arc. The default value is 0.
        
        **`crPart`**
        : A _Cursor_ specifying the part. The default value is None.
        
        **`strBarName`**
        : A _String_ specifying the bar name. The default value is "".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Edge.SplineFreeEdges(crlNode, iEnableArc=0, crPart=None, strBarName="")
        ```
        
        """
        message = "Geometry.Edge.SplineFreeEdges({},{},{},'{}')".format(crlNode, iEnableArc, crPart, strBarName)
        return JPT_RUN_LINE(message)

    def ClosedLine(self, veclPositions, crlTargetFace, iEnableBreakFace=1):
        r"""
        ## Description
        
        imprint closed line
        
        ## Syntax
        
        ```python
        Geometry.Edge.ClosedLine(veclPositions, crlTargetFace, iEnableBreakFace=1)
        ```
        
        Macro: {ref}`Macro-Geometry-ImprintCloseLineS`
        
        Ribbon: {menuselection}`Geometry --> Edge --> ClosedLine`
        
        ## Inputs
        
        **`veclPositions`**
        : A _Vector List_ specifying the positions. This is a required input.
        
        **`crlTargetFace`**
        : A _Cursor List_ specifying the target face. This is a required input.
        
        **`iEnableBreakFace`**
        : An _Integer_ specifying the enable break face. The default value is 1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Edge.ClosedLine(veclPositions, crlTargetFace, iEnableBreakFace=1)
        ```
        
        """
        message = "Geometry.Edge.ClosedLine({},{},{})".format(veclPositions, crlTargetFace, iEnableBreakFace)
        return JPT_RUN_LINE(message)

    def PerpendicularCylinderLine(self, crlNode=[], crlFace=[], iMethod=0, dOffset=0.0, bOppositeSide=False, bBreakFace=True):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Geometry.Edge.PerpendicularCylinderLine(crlNode=[], crlFace=[], iMethod=0, dOffset=0.0, bOppositeSide=False, bBreakFace=True)
        ```
        
        Macro: {ref}`Macro-Geometry-ImprintPerpendicularCylinderLineS`
        
        Ribbon: {menuselection}`Geometry --> Edge --> PerpendicularCylinderLine`
        
        ## Inputs
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`dOffset`**
        : A _Double_ specifying the offset. The default value is 0.0.
        
        **`bOppositeSide`**
        : A _Boolean_ specifying the opposite side. The default value is False.
        
        **`bBreakFace`**
        : A _Boolean_ specifying the break face. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Edge.PerpendicularCylinderLine(crlNode=[], crlFace=[], iMethod=0, dOffset=0.0, bOppositeSide=False, bBreakFace=True)
        ```
        
        """
        message = "Geometry.Edge.PerpendicularCylinderLine({},{},{},{},{},{})".format(crlNode, crlFace, iMethod, dOffset, bOppositeSide, bBreakFace)
        return JPT_RUN_LINE(message)

    def IntersectionLine(self, crlFaces=[], bBreakFace=True):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Geometry.Edge.IntersectionLine(crlFaces=[], bBreakFace=True)
        ```
        
        Macro: {ref}`Macro-Geometry-Imprint_Intersection_LineS`
        
        Ribbon: {menuselection}`Geometry --> Edge --> IntersectionLine`
        
        ## Inputs
        
        **`crlFaces`**
        : A _Cursor List_ specifying the faces. The default value is [].
        
        **`bBreakFace`**
        : A _Boolean_ specifying the break face. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Edge.IntersectionLine(crlFaces=[], bBreakFace=True)
        ```
        
        """
        message = "Geometry.Edge.IntersectionLine({},{})".format(crlFaces, bBreakFace)
        return JPT_RUN_LINE(message)

    def ProjectLine(self, crlEdge=[], crlFaces=[], crlNode=[], bBreakFace=True, iType=0, bCheckGap=False, dGap=0.0):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Geometry.Edge.ProjectLine(crlEdge=[], crlFaces=[], crlNode=[], bBreakFace=True, iType=0, bCheckGap=False, dGap=0.0)
        ```
        
        Macro: {ref}`Macro-Geometry-Imprint_Projection_LineS`
        
        Ribbon: {menuselection}`Geometry --> Edge --> ProjectLine`
        
        ## Inputs
        
        **`crlEdge`**
        : A _Cursor List_ specifying the edge. The default value is [].
        
        **`crlFaces`**
        : A _Cursor List_ specifying the faces. The default value is [].
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        **`bBreakFace`**
        : A _Boolean_ specifying the break face. The default value is True.
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 0.
        
        **`bCheckGap`**
        : A _Boolean_ specifying the check gap. The default value is False.
        
        **`dGap`**
        : A _Double_ specifying the gap. The default value is 0.0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Edge.ProjectLine(crlEdge=[], crlFaces=[], crlNode=[], bBreakFace=True, iType=0, bCheckGap=False, dGap=0.0)
        ```
        
        """
        message = "Geometry.Edge.ProjectLine({},{},{},{},{},{},{})".format(crlEdge, crlFaces, crlNode, bBreakFace, iType, bCheckGap, dGap)
        return JPT_RUN_LINE(message)

    def PerpendicularLineToEdge(self, crNode=None, crEdge=None, crlFace=[], bBreakFace=True):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Geometry.Edge.PerpendicularLineToEdge(crNode=None, crEdge=None, crlFace=[], bBreakFace=True)
        ```
        
        Macro: {ref}`Macro-Geometry-ImprintPerpendicularLine2`
        
        Ribbon: {menuselection}`Geometry --> Edge --> PerpendicularLineToEdge`
        
        ## Inputs
        
        **`crNode`**
        : A _Cursor_ specifying the node. The default value is None.
        
        **`crEdge`**
        : A _Cursor_ specifying the edge. The default value is None.
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`bBreakFace`**
        : A _Boolean_ specifying the break face. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Edge.PerpendicularLineToEdge(crNode=None, crEdge=None, crlFace=[], bBreakFace=True)
        ```
        
        """
        message = "Geometry.Edge.PerpendicularLineToEdge({},{},{},{})".format(crNode, crEdge, crlFace, bBreakFace)
        return JPT_RUN_LINE(message)

class Geometry_ExtractSurfaces:
    def ExtractRefSurface(self, listFace, dAngle=60.0, strName="ExtractFace_1", isMergePart=False):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Geometry.ExtractSurfaces.ExtractRefSurface(listFace, dAngle=60.0, strName="ExtractFace_1", isMergePart=False)
        ```
        
        Macro: {ref}`Macro-Geometry-MeshEditExtractRefSurfaces`
        
        Ribbon: {menuselection}`Geometry --> ExtractSurfaces --> ExtractRefSurface`
        
        ## Inputs
        
        **`listFace`**
        : A _FACE List_ specifying the face. This is a required input.
        
        **`dAngle`**
        : A _Double_ specifying the angle. The default value is 60.0.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ExtractFace_1".
        
        **`isMergePart`**
        : A _IS_MERGE_PART_ specifying the merge part. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.ExtractSurfaces.ExtractRefSurface(listFace, dAngle=60.0, strName="ExtractFace_1", isMergePart=False)
        ```
        
        """
        message = "Geometry.ExtractSurfaces.ExtractRefSurface({},{},'{}',{})".format(listFace, dAngle, strName, isMergePart)
        return JPT_RUN_LINE(message)

    def ExtractSurfaces(self, crlFace, dAngle=60.0, strName="ExtractFace_1", bMergePart=False):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Geometry.ExtractSurfaces.ExtractSurfaces(crlFace, dAngle=60.0, strName="ExtractFace_1", bMergePart=False)
        ```
        
        Macro: {ref}`Macro-Geometry-MeshEditExtractSurfaces`
        
        Ribbon: {menuselection}`Geometry --> ExtractSurfaces --> ExtractSurfaces`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. This is a required input.
        
        **`dAngle`**
        : A _Double_ specifying the angle. The default value is 60.0.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ExtractFace_1".
        
        **`bMergePart`**
        : A _Boolean_ specifying the merge part. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.ExtractSurfaces.ExtractSurfaces(crlFace, dAngle=60.0, strName="ExtractFace_1", bMergePart=False)
        ```
        
        """
        message = "Geometry.ExtractSurfaces.ExtractSurfaces({},{},'{}',{})".format(crlFace, dAngle, strName, bMergePart)
        return JPT_RUN_LINE(message)

class Geometry_Face:
    def FourEdges(self, crlEdge):
        r"""
        ## Description
        
        Create face by four edges
        
        ## Syntax
        
        ```python
        Geometry.Face.FourEdges(crlEdge)
        ```
        
        Macro: {ref}`Macro-Geometry-CreateFaceFromFourEdges`
        
        Ribbon: {menuselection}`Geometry --> Face --> FourEdges`
        
        ## Inputs
        
        **`crlEdge`**
        : A _Cursor List_ specifying the edge. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Face.FourEdges(crlEdge)
        ```
        
        """
        message = "Geometry.Face.FourEdges({})".format(crlEdge)
        return JPT_RUN_LINE(message)

    def FromMesh(self, crlFace):
        r"""
        ## Description
        
        Create geometry face from mesh face
        
        ## Syntax
        
        ```python
        Geometry.Face.FromMesh(crlFace)
        ```
        
        Macro: {ref}`Macro-Geometry-CreateFaceFromMeshFace`
        
        Ribbon: {menuselection}`Geometry --> Face --> FromMesh`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Face.FromMesh(crlFace)
        ```
        
        """
        message = "Geometry.Face.FromMesh({})".format(crlFace)
        return JPT_RUN_LINE(message)

    def CreateSmoothFace(self, bInterPoration, crlTarget, iElemGeneration, dGradation, iEnableFaceSmooth, crTargetPart):
        r"""
        ## Description
        
        Geometry Face CreateSmoothFace
        
        ## Syntax
        
        ```python
        Geometry.Face.CreateSmoothFace(bInterPoration, crlTarget, iElemGeneration, dGradation, iEnableFaceSmooth, crTargetPart)
        ```
        
        Macro: {ref}`Macro-Geometry-CreateSmoothFace`
        
        Ribbon: {menuselection}`Geometry --> Face --> CreateSmoothFace`
        
        ## Inputs
        
        **`bInterPoration`**
        : A _Boolean_ specifying the inter poration. This is a required input.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. This is a required input.
        
        **`iElemGeneration`**
        : An _Integer_ specifying the element generation. This is a required input.
        
        **`dGradation`**
        : A _Double_ specifying the gradation. This is a required input.
        
        **`iEnableFaceSmooth`**
        : An _Integer_ specifying the enable face smooth. This is a required input.
        
        **`crTargetPart`**
        : A _Cursor_ specifying the target part. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Face.CreateSmoothFace(bInterPoration, crlTarget, iElemGeneration, dGradation, iEnableFaceSmooth, crTargetPart)
        ```
        
        """
        message = "Geometry.Face.CreateSmoothFace({},{},{},{},{},{})".format(bInterPoration, crlTarget, iElemGeneration, dGradation, iEnableFaceSmooth, crTargetPart)
        return JPT_RUN_LINE(message)

    def Edges(self, crlEdge, crlPart=[], crlNode=[], bSharedFace=False, bSmoothFace=False, bCreatePart=False, bImproved=False, bBarsOnly=False, bOnlyOnePart=True, bUseMidNodes=False):
        r"""
        ## Description
        
        Create Face From Edges
        
        ## Syntax
        
        ```python
        Geometry.Face.Edges(crlEdge, crlPart=[], crlNode=[], bSharedFace=False, bSmoothFace=False, bCreatePart=False, bImproved=False, bBarsOnly=False, bOnlyOnePart=True, bUseMidNodes=False)
        ```
        
        Macro: {ref}`Macro-Geometry-CreateFaceFromEdges`
        
        Ribbon: {menuselection}`Geometry --> Face --> Edges`
        
        ## Inputs
        
        **`crlEdge`**
        : A _Cursor List_ specifying the edge. This is a required input.
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        **`bSharedFace`**
        : A _Boolean_ specifying the shared face. The default value is False.
        
        **`bSmoothFace`**
        : A _Boolean_ specifying the smooth face. The default value is False.
        
        **`bCreatePart`**
        : A _Boolean_ specifying the create part. The default value is False.
        
        **`bImproved`**
        : A _Boolean_ specifying the improved. The default value is False.
        
        **`bBarsOnly`**
        : A _Boolean_ specifying the bars only. The default value is False.
        
        **`bOnlyOnePart`**
        : A _Boolean_ specifying the only one part. The default value is True.
        
        **`bUseMidNodes`**
        : A _Boolean_ specifying the use mid nodes. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Face.Edges(crlEdge, crlPart=[], crlNode=[], bSharedFace=False, bSmoothFace=False, bCreatePart=False, bImproved=False, bBarsOnly=False, bOnlyOnePart=True, bUseMidNodes=False)
        ```
        
        """
        message = "Geometry.Face.Edges({},{},{},{},{},{},{},{},{},{})".format(crlEdge, crlPart, crlNode, bSharedFace, bSmoothFace, bCreatePart, bImproved, bBarsOnly, bOnlyOnePart, bUseMidNodes)
        return JPT_RUN_LINE(message)

    def Elements(self, crlElem, bShareFace=False):
        r"""
        ## Description
        
        Create Face By Elements
        
        ## Syntax
        
        ```python
        Geometry.Face.Elements(crlElem, bShareFace=False)
        ```
        
        Macro: {ref}`Macro-Geometry-CreateFaceByElem`
        
        Ribbon: {menuselection}`Geometry --> Face --> Elements`
        
        ## Inputs
        
        **`crlElem`**
        : A _Cursor List_ specifying the element. This is a required input.
        
        **`bShareFace`**
        : A _Boolean_ specifying the share face. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Face.Elements(crlElem, bShareFace=False)
        ```
        
        """
        message = "Geometry.Face.Elements({},{})".format(crlElem, bShareFace)
        return JPT_RUN_LINE(message)

class Geometry_FindFeature:
    def DelCircChamfer(self, crlPart, dMaxThick=0.1, dMinThick=2):
        r"""
        ## Description
        
        Delete Circ Chamfer
        
        ## Syntax
        
        ```python
        Geometry.FindFeature.DelCircChamfer(crlPart, dMaxThick=0.1, dMinThick=2)
        ```
        
        Macro: {ref}`Macro-Geometry-DelCircChamfer`
        
        Ribbon: {menuselection}`Geometry --> FindFeature --> DelCircChamfer`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. This is a required input.
        
        **`dMaxThick`**
        : A _Double_ specifying the maximum thickness. The default value is 0.1.
        
        **`dMinThick`**
        : A _Double_ specifying the minimum thickness. The default value is 2.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.FindFeature.DelCircChamfer(crlPart, dMaxThick=0.1, dMinThick=2)
        ```
        
        """
        message = "Geometry.FindFeature.DelCircChamfer({},{},{})".format(crlPart, dMaxThick, dMinThick)
        return JPT_RUN_LINE(message)

    def Fillet(self, crlPart=[], crlFace=[], dMinAngle=1.0, dMaxAngle=10.0, dMinFaceWidth=1.0, dMaxFaceWidth=10.0, dMinCurveRadius=0.0, dMaxCurveRadius=171, dScale=1.0):
        r"""
        ## Description
        
        Find feature in part by typical description
        
        ## Syntax
        
        ```python
        Geometry.FindFeature.Fillet(crlPart=[], crlFace=[], dMinAngle=1.0, dMaxAngle=10.0, dMinFaceWidth=1.0, dMaxFaceWidth=10.0, dMinCurveRadius=0.0, dMaxCurveRadius=171, dScale=1.0)
        ```
        
        Macro: {ref}`Macro-Geometry-FindFeatureFillet`
        
        Ribbon: {menuselection}`Geometry --> FindFeature --> Fillet`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`dMinAngle`**
        : A _Double_ specifying the minimum angle. The default value is 1.0.
        
        **`dMaxAngle`**
        : A _Double_ specifying the maximum angle. The default value is 10.0.
        
        **`dMinFaceWidth`**
        : A _Double_ specifying the minimum face width. The default value is 1.0.
        
        **`dMaxFaceWidth`**
        : A _Double_ specifying the maximum face width. The default value is 10.0.
        
        **`dMinCurveRadius`**
        : A _Double_ specifying the minimum curve radius. The default value is 0.0.
        
        **`dMaxCurveRadius`**
        : A _Double_ specifying the maximum curve radius. The default value is 171.
        
        **`dScale`**
        : A _Double_ specifying the scale. The default value is 1.0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.FindFeature.Fillet(crlPart=[], crlFace=[], dMinAngle=1.0, dMaxAngle=10.0, dMinFaceWidth=1.0, dMaxFaceWidth=10.0, dMinCurveRadius=0.0, dMaxCurveRadius=171, dScale=1.0)
        ```
        
        """
        message = "Geometry.FindFeature.Fillet({},{},{},{},{},{},{},{},{})".format(crlPart, crlFace, dMinAngle, dMaxAngle, dMinFaceWidth, dMaxFaceWidth, dMinCurveRadius, dMaxCurveRadius, dScale)
        return JPT_RUN_LINE(message)

    def Faces(self, crlPart=[],iOption=0, crlEdge=[], bCylinder=True, bDisc=False, bFourCorners=True, dMinThickness=0.1, dMaxThickness=2.0, dDiameterMin=1.0, dDiameterMax=2.0, crlFace=[]):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Geometry.FindFeature.Faces(crlPart=[],iOption=0, crlEdge=[], bCylinder=True, bDisc=False, bFourCorners=True, dMinThickness=0.1, dMaxThickness=2.0, dDiameterMin=1.0, dDiameterMax=2.0, crlFace=[])
        ```
        
        Macro: {ref}`Macro-Geometry-Geom_FindFeatures`
        
        Ribbon: {menuselection}`Geometry --> FindFeature --> Faces`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. This is a required input.
        
        **`crlEdge`**
        : A _Cursor List_ specifying the edge. The default value is [].
        
        **`bCylinder`**
        : A _Boolean_ specifying the cylinder. The default value is True.
        
        **`bDisc`**
        : A _Boolean_ specifying the disc. The default value is False.
        
        **`bFourCorners`**
        : A _Boolean_ specifying the four corners. The default value is True.
        
        **`dMinThickness`**
        : A _Double_ specifying the minimum thickness. The default value is 0.1.
        
        **`dMaxThickness`**
        : A _Double_ specifying the maximum thickness. The default value is 2.0.
        
        **`dDiameterMin`**
        : A _Double_ specifying the diameter minimum. The default value is 1.0.
        
        **`dDiameterMax`**
        : A _Double_ specifying the diameter maximum. The default value is 2.0.
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.FindFeature.Faces(crlPart=[],iOption=0, crlEdge=[], bCylinder=True, bDisc=False, bFourCorners=True, dMinThickness=0.1, dMaxThickness=2.0, dDiameterMin=1.0, dDiameterMax=2.0, crlFace=[])
        ```
        
        """
        message = "Geometry.FindFeature.Faces({},{},{},{},{},{},{},{},{},{},{})".format(crlPart,iOption, crlEdge, bCylinder, bDisc, bFourCorners, dMinThickness, dMaxThickness, dDiameterMin, dDiameterMax, crlFace)
        return JPT_RUN_LINE(message)

    def Edges(self, crlPart=[],iOption=0, crlEdge=[], bCylinder=True, bDisc=False, bFourCorners=True, dMinThickness=0.1, dMaxThickness=2.0, dDiameterMin=1.0, dDiameterMax=2.0, crlFace=[]):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Geometry.FindFeature.Edges(crlPart=[],iOption=0, crlEdge=[], bCylinder=True, bDisc=False, bFourCorners=True, dMinThickness=0.1, dMaxThickness=2.0, dDiameterMin=1.0, dDiameterMax=2.0, crlFace=[])
        ```
        
        Macro: {ref}`Macro-Geometry-Geom_FindFeatures`
        
        Ribbon: {menuselection}`Geometry --> FindFeature --> Edges`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. This is a required input.
        
        **`crlEdge`**
        : A _Cursor List_ specifying the edge. The default value is [].
        
        **`bCylinder`**
        : A _Boolean_ specifying the cylinder. The default value is True.
        
        **`bDisc`**
        : A _Boolean_ specifying the disc. The default value is False.
        
        **`bFourCorners`**
        : A _Boolean_ specifying the four corners. The default value is True.
        
        **`dMinThickness`**
        : A _Double_ specifying the minimum thickness. The default value is 0.1.
        
        **`dMaxThickness`**
        : A _Double_ specifying the maximum thickness. The default value is 2.0.
        
        **`dDiameterMin`**
        : A _Double_ specifying the diameter minimum. The default value is 1.0.
        
        **`dDiameterMax`**
        : A _Double_ specifying the diameter maximum. The default value is 2.0.
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.FindFeature.Edges(crlPart=[],iOption=0, crlEdge=[], bCylinder=True, bDisc=False, bFourCorners=True, dMinThickness=0.1, dMaxThickness=2.0, dDiameterMin=1.0, dDiameterMax=2.0, crlFace=[])
        ```
        
        """
        message = "Geometry.FindFeature.Edges({},{},{},{},{},{},{},{},{},{},{})".format(crlPart,iOption, crlEdge, bCylinder, bDisc, bFourCorners, dMinThickness, dMaxThickness, dDiameterMin, dDiameterMax, crlFace)
        return JPT_RUN_LINE(message)

class Geometry_MergeEntities:
    def Faces(self, crlFace=[], bMergeEdge=True, bRemoveNonBoundEdge=True):
        r"""
        ## Description
        
        Merge faces
        
        ## Syntax
        
        ```python
        Geometry.MergeEntities.Faces(crlFace=[], bMergeEdge=True, bRemoveNonBoundEdge=True)
        ```
        
        Macro: {ref}`Macro-Geometry-MergeFace_MergeEntities`
        
        Ribbon: {menuselection}`Geometry --> MergeEntities --> Faces`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`bMergeEdge`**
        : A _Boolean_ specifying the merge edge. The default value is True.
        
        **`bRemoveNonBoundEdge`**
        : A _Boolean_ specifying the remove non boundary edge. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.MergeEntities.Faces(crlFace=[], bMergeEdge=True, bRemoveNonBoundEdge=True)
        ```
        
        """
        message = "Geometry.MergeEntities.Faces({},{},{})".format(crlFace, bMergeEdge, bRemoveNonBoundEdge)
        return JPT_RUN_LINE(message)

    def TinyFacesMerge(self, crlPart=[], crlFace=[], dMinFaceWidth=0.0, dMaxFaceWidth=0.001, dFaceAngle=30, bReferLocalSetting=False, bConnectFace=False):
        r"""
        ## Description
        
        merge tiny faces
        
        ## Syntax
        
        ```python
        Geometry.MergeEntities.TinyFacesMerge(crlPart=[], crlFace=[], dMinFaceWidth=0.0, dMaxFaceWidth=0.001, dFaceAngle=30, bReferLocalSetting=False, bConnectFace=False)
        ```
        
        Macro: {ref}`Macro-Geometry-GeometryMergeEntitiesTinyFacesMerge`
        
        Ribbon: {menuselection}`Geometry --> MergeEntities --> TinyFacesMerge`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`dMinFaceWidth`**
        : A _Double_ specifying the minimum face width. The default value is 0.0.
        
        **`dMaxFaceWidth`**
        : A _Double_ specifying the maximum face width. The default value is 0.001.
        
        **`dFaceAngle`**
        : A _Double_ specifying the face angle. The default value is 30.
        
        **`bReferLocalSetting`**
        : A _Boolean_ specifying the refer local setting. The default value is False.
        
        **`bConnectFace`**
        : A _Boolean_ specifying the connect face. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.MergeEntities.TinyFacesMerge(crlPart=[], crlFace=[], dMinFaceWidth=0.0, dMaxFaceWidth=0.001, dFaceAngle=30, bReferLocalSetting=False, bConnectFace=False)
        ```
        
        """
        message = "Geometry.MergeEntities.TinyFacesMerge({},{},{},{},{},{},{})".format(crlPart, crlFace, dMinFaceWidth, dMaxFaceWidth, dFaceAngle, bReferLocalSetting, bConnectFace)
        return JPT_RUN_LINE(message)

    def CBarParts(self, crlCBarPart=[]):
        r"""
        ## Description
        
        Merge CBar Parts
        
        ## Syntax
        
        ```python
        Geometry.MergeEntities.CBarParts(crlCBarPart=[])
        ```
        
        Macro: {ref}`Macro-Geometry-MergeCBarPart`
        
        Ribbon: {menuselection}`Geometry --> MergeEntities --> CBarParts`
        
        ## Inputs
        
        **`crlCBarPart`**
        : A _Cursor List_ specifying the c bar part. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.MergeEntities.CBarParts(crlCBarPart=[])
        ```
        
        """
        message = "Geometry.MergeEntities.CBarParts({})".format(crlCBarPart)
        return JPT_RUN_LINE(message)

    def Edges(self, crlEdge=[]):
        r"""
        ## Description
        
        Merge Edge
        
        ## Syntax
        
        ```python
        Geometry.MergeEntities.Edges(crlEdge=[])
        ```
        
        Macro: {ref}`Macro-Geometry-bMergeEdge`
        
        Ribbon: {menuselection}`Geometry --> MergeEntities --> Edges`
        
        ## Inputs
        
        **`crlEdge`**
        : A _Cursor List_ specifying the edge. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.MergeEntities.Edges(crlEdge=[])
        ```
        
        """
        message = "Geometry.MergeEntities.Edges({})".format(crlEdge)
        return JPT_RUN_LINE(message)

    def Parts(self, dTolerance=1e-5, bRemovesharefaceflag=True, crlPart=[]):
        r"""
        ## Description
        
        Merge Part
        
        ## Syntax
        
        ```python
        Geometry.MergeEntities.Parts(dTolerance=1e-5, bRemovesharefaceflag=True, crlPart=[])
        ```
        
        Macro: {ref}`Macro-Geometry-MergePart`
        
        Ribbon: {menuselection}`Geometry --> MergeEntities --> Parts`
        
        ## Inputs
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. The default value is 1e-5.
        
        **`bRemovesharefaceflag`**
        : A _Boolean_ specifying the removesharefaceflag. The default value is True.
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.MergeEntities.Parts(dTolerance=1e-5, bRemovesharefaceflag=True, crlPart=[])
        ```
        
        """
        message = "Geometry.MergeEntities.Parts({},{},{})".format(dTolerance, bRemovesharefaceflag, crlPart)
        return JPT_RUN_LINE(message)

    def PartFaces(self, crlPart=[], crlFace=[], bAngle=True, dTolAngle=20, bWidth=True, dTolWidth=0.2):
        r"""
        ## Description
        
        Merge by Part Faces
        
        ## Syntax
        
        ```python
        Geometry.MergeEntities.PartFaces(crlPart=[], crlFace=[], bAngle=True, dTolAngle=20, bWidth=True, dTolWidth=0.2)
        ```
        
        Macro: {ref}`Macro-Geometry-MergeBodyFaceCr`
        
        Ribbon: {menuselection}`Geometry --> MergeEntities --> PartFaces`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`bAngle`**
        : A _Boolean_ specifying the angle. The default value is True.
        
        **`dTolAngle`**
        : A _Double_ specifying the tolerance angle. The default value is 20.
        
        **`bWidth`**
        : A _Boolean_ specifying the width. The default value is True.
        
        **`dTolWidth`**
        : A _Double_ specifying the tolerance width. The default value is 0.2.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.MergeEntities.PartFaces(crlPart=[], crlFace=[], bAngle=True, dTolAngle=20, bWidth=True, dTolWidth=0.2)
        ```
        
        """
        message = "Geometry.MergeEntities.PartFaces({},{},{},{},{},{})".format(crlPart, crlFace, bAngle, dTolAngle, bWidth, dTolWidth)
        return JPT_RUN_LINE(message)

class Geometry_Part:
    def Cube(self, dlOrigin=[0, 0, 0], dlLength=[0.01, 0.01, 0.01], ilNodeCnt=[10, 10, 10], strPartName="Cube_1", iColorPart=7105764, crCoord=None):
        r"""
        ## Description
        
        create cube part
        
        ## Syntax
        
        ```python
        Geometry.Part.Cube(dlOrigin=[0, 0, 0], dlLength=[0.01, 0.01, 0.01], ilNodeCnt=[10, 10, 10], strPartName="Cube_1", iColorPart=7105764, crCoord=None)
        ```
        
        Macro: {ref}`Macro-Geometry-CreateCube`
        
        Ribbon: {menuselection}`Geometry --> Part --> Cube`
        
        ## Inputs
        
        **`dlOrigin`**
        : A _Double List_ specifying the original. The default value is [0, 0, 0].
        
        **`dlLength`**
        : A _Double List_ specifying the length. The default value is [0.01, 0.01, 0.01].
        
        **`ilNodeCnt`**
        : A _Integer List_ specifying the node cnt. The default value is [10, 10, 10].
        
        **`strPartName`**
        : A _String_ specifying the part name. The default value is "Cube_1".
        
        **`iColorPart`**
        : An _Integer_ specifying the color part. The default value is 7105764.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Part.Cube(dlOrigin=[0, 0, 0], dlLength=[0.01, 0.01, 0.01], ilNodeCnt=[10, 10, 10], strPartName="Cube_1", iColorPart=7105764, crCoord=None)
        ```
        
        """
        message = "Geometry.Part.Cube({},{},{},'{}',{},{})".format(dlOrigin, dlLength, ilNodeCnt, strPartName, iColorPart, crCoord)
        return JPT_RUN_LINE(message)

    def Wedge(self, vecOrigin=[0.0, 0.0, 0.0], vecLength=[0.01, 0.01, 0.01], vecNodeCount=[10, 10, 10], strPartName="Wedge_1", iPartColor=7105764, crCoordinate=None):
        r"""
        ## Description
        
        Create Wedge Body
        
        ## Syntax
        
        ```python
        Geometry.Part.Wedge(vecOrigin=[0.0, 0.0, 0.0], vecLength=[0.01, 0.01, 0.01], vecNodeCount=[10, 10, 10], strPartName="Wedge_1", iPartColor=7105764, crCoordinate=None)
        ```
        
        Macro: {ref}`Macro-Geometry-CreateWedge`
        
        Ribbon: {menuselection}`Geometry --> Part --> Wedge`
        
        ## Inputs
        
        **`vecOrigin`**
        : A _Vector_ specifying the original. The default value is [0.0, 0.0, 0.0].
        
        **`vecLength`**
        : A _Vector_ specifying the length. The default value is [0.01, 0.01, 0.01].
        
        **`vecNodeCount`**
        : A _Vector_ specifying the node count. The default value is [10, 10, 10].
        
        **`strPartName`**
        : A _String_ specifying the part name. The default value is "Wedge_1".
        
        **`iPartColor`**
        : An _Integer_ specifying the part color. The default value is 7105764.
        
        **`crCoordinate`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Part.Wedge(vecOrigin=[0.0, 0.0, 0.0], vecLength=[0.01, 0.01, 0.01], vecNodeCount=[10, 10, 10], strPartName="Wedge_1", iPartColor=7105764, crCoordinate=None)
        ```
        
        """
        message = "Geometry.Part.Wedge({},{},{},'{}',{},{})".format(vecOrigin, vecLength, vecNodeCount, strPartName, iPartColor, crCoordinate)
        return JPT_RUN_LINE(message)

    def Sphere(self, dlOrigin=[0, 0, 0], dRadius=0.005, iLatitudeNodeCnt=20, iLongitudeNodeCnt=20, strPartName="Sphere_1", iColorPart=7105764, crCoord=None):
        r"""
        ## Description
        
        create Sphere part
        
        ## Syntax
        
        ```python
        Geometry.Part.Sphere(dlOrigin=[0, 0, 0], dRadius=0.005, iLatitudeNodeCnt=20, iLongitudeNodeCnt=20, strPartName="Sphere_1", iColorPart=7105764, crCoord=None)
        ```
        
        Macro: {ref}`Macro-Geometry-CreateSphere`
        
        Ribbon: {menuselection}`Geometry --> Part --> Sphere`
        
        ## Inputs
        
        **`dlOrigin`**
        : A _Double List_ specifying the original. The default value is [0, 0, 0].
        
        **`dRadius`**
        : A _Double_ specifying the radius. The default value is 0.005.
        
        **`iLatitudeNodeCnt`**
        : An _Integer_ specifying the latitude node cnt. The default value is 20.
        
        **`iLongitudeNodeCnt`**
        : An _Integer_ specifying the longitude node cnt. The default value is 20.
        
        **`strPartName`**
        : A _String_ specifying the part name. The default value is "Sphere_1".
        
        **`iColorPart`**
        : An _Integer_ specifying the color part. The default value is 7105764.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Part.Sphere(dlOrigin=[0, 0, 0], dRadius=0.005, iLatitudeNodeCnt=20, iLongitudeNodeCnt=20, strPartName="Sphere_1", iColorPart=7105764, crCoord=None)
        ```
        
        """
        message = "Geometry.Part.Sphere({},{},{},{},'{}',{},{})".format(dlOrigin, dRadius, iLatitudeNodeCnt, iLongitudeNodeCnt, strPartName, iColorPart, crCoord)
        return JPT_RUN_LINE(message)

    def Torus(self, dlOrigin=[0, 0, 0], dInnerRadius=0.015, dRingRadius=0.02, iLatitudeNodeCnt=20, iLongitudeNodeCnt=20, strPartName="Torus_1", iColorPart=7105764, crCoord=None):
        r"""
        ## Description
        
        create Torus part
        
        ## Syntax
        
        ```python
        Geometry.Part.Torus(dlOrigin=[0, 0, 0], dInnerRadius=0.015, dRingRadius=0.02, iLatitudeNodeCnt=20, iLongitudeNodeCnt=20, strPartName="Torus_1", iColorPart=7105764, crCoord=None)
        ```
        
        Macro: {ref}`Macro-Geometry-CreateTorus`
        
        Ribbon: {menuselection}`Geometry --> Part --> Torus`
        
        ## Inputs
        
        **`dlOrigin`**
        : A _Double List_ specifying the original. The default value is [0, 0, 0].
        
        **`dInnerRadius`**
        : A _Double_ specifying the inner radius. The default value is 0.015.
        
        **`dRingRadius`**
        : A _Double_ specifying the ring radius. The default value is 0.02.
        
        **`iLatitudeNodeCnt`**
        : An _Integer_ specifying the latitude node cnt. The default value is 20.
        
        **`iLongitudeNodeCnt`**
        : An _Integer_ specifying the longitude node cnt. The default value is 20.
        
        **`strPartName`**
        : A _String_ specifying the part name. The default value is "Torus_1".
        
        **`iColorPart`**
        : An _Integer_ specifying the color part. The default value is 7105764.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Part.Torus(dlOrigin=[0, 0, 0], dInnerRadius=0.015, dRingRadius=0.02, iLatitudeNodeCnt=20, iLongitudeNodeCnt=20, strPartName="Torus_1", iColorPart=7105764, crCoord=None)
        ```
        
        """
        message = "Geometry.Part.Torus({},{},{},{},{},'{}',{},{})".format(dlOrigin, dInnerRadius, dRingRadius, iLatitudeNodeCnt, iLongitudeNodeCnt, strPartName, iColorPart, crCoord)
        return JPT_RUN_LINE(message)

    def Elems(self, crlElem, strPartName):
        r"""
        ## Description
        
        create part from element
        
        ## Syntax
        
        ```python
        Geometry.Part.Elems(crlElem, strPartName)
        ```
        
        Macro: {ref}`Macro-Geometry-CreatePartFromElems`
        
        Ribbon: {menuselection}`Geometry --> Part --> Elems`
        
        ## Inputs
        
        **`crlElem`**
        : A _Cursor List_ specifying the element. This is a required input.
        
        **`strPartName`**
        : A _String_ specifying the part name. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Part.Elems(crlElem, strPartName)
        ```
        
        """
        message = "Geometry.Part.Elems({},'{}')".format(crlElem, strPartName)
        return JPT_RUN_LINE(message)

    def Cylinder(self, dlOrigin=[0,0,0], dTopRadius=0.01, dBotRadius=0.01, dHeight=0.01, iCircleNodeCnt=36, iAxisNodeCnt=10, strName="Cylinder_1", iPartCol=7105764, crCoord=None):
        r"""
        ## Description
        
        create cylinder part
        
        ## Syntax
        
        ```python
        Geometry.Part.Cylinder(dlOrigin=[0,0,0], dTopRadius=0.01, dBotRadius=0.01, dHeight=0.01, iCircleNodeCnt=36, iAxisNodeCnt=10, strName="Cylinder_1", iPartCol=7105764, crCoord=None)
        ```
        
        Macro: {ref}`Macro-Geometry-CreateCylinderFrustum`
        
        Ribbon: {menuselection}`Geometry --> Part --> Cylinder`
        
        ## Inputs
        
        **`dlOrigin`**
        : A _Double List_ specifying the original. The default value is [0,0,0].
        
        **`dTopRadius`**
        : A _Double_ specifying the top radius. The default value is 0.01.
        
        **`dBotRadius`**
        : A _Double_ specifying the bot radius. The default value is 0.01.
        
        **`dHeight`**
        : A _Double_ specifying the height. The default value is 0.01.
        
        **`iCircleNodeCnt`**
        : An _Integer_ specifying the circle node cnt. The default value is 36.
        
        **`iAxisNodeCnt`**
        : An _Integer_ specifying the axis node cnt. The default value is 10.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "Cylinder_1".
        
        **`iPartCol`**
        : An _Integer_ specifying the part col. The default value is 7105764.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Part.Cylinder(dlOrigin=[0,0,0], dTopRadius=0.01, dBotRadius=0.01, dHeight=0.01, iCircleNodeCnt=36, iAxisNodeCnt=10, strName="Cylinder_1", iPartCol=7105764, crCoord=None)
        ```
        
        """
        message = "Geometry.Part.Cylinder({},{},{},{},{},{},'{}',{},{})".format(dlOrigin, dTopRadius, dBotRadius, dHeight, iCircleNodeCnt, iAxisNodeCnt, strName, iPartCol, crCoord)
        return JPT_RUN_LINE(message)

    def Tube(self, dlOrigin=[0,0,0], dTopInnerRadius=0.001, dTopOuterRadius=0.01, dBotInnerRadius=0.001, dBotOuterRadius=0.01, dHeight=0.01, iCircleNodeCnt=36, iAxisNodeCnt=10, strName="Cylinder_1", iPartCol=7105764, crCoord=None):
        r"""
        ## Description
        
        create tube part
        
        ## Syntax
        
        ```python
        Geometry.Part.Tube(dlOrigin=[0,0,0], dTopInnerRadius=0.001, dTopOuterRadius=0.01, dBotInnerRadius=0.001, dBotOuterRadius=0.01, dHeight=0.01, iCircleNodeCnt=36, iAxisNodeCnt=10, strName="Cylinder_1", iPartCol=7105764, crCoord=None)
        ```
        
        Macro: {ref}`Macro-Geometry-CreateCylinderTube`
        
        Ribbon: {menuselection}`Geometry --> Part --> Tube`
        
        ## Inputs
        
        **`dlOrigin`**
        : A _Double List_ specifying the original. The default value is [0,0,0].
        
        **`dTopInnerRadius`**
        : A _Double_ specifying the top inner radius. The default value is 0.001.
        
        **`dTopOuterRadius`**
        : A _Double_ specifying the top outer radius. The default value is 0.01.
        
        **`dBotInnerRadius`**
        : A _Double_ specifying the bot inner radius. The default value is 0.001.
        
        **`dBotOuterRadius`**
        : A _Double_ specifying the bot outer radius. The default value is 0.01.
        
        **`dHeight`**
        : A _Double_ specifying the height. The default value is 0.01.
        
        **`iCircleNodeCnt`**
        : An _Integer_ specifying the circle node cnt. The default value is 36.
        
        **`iAxisNodeCnt`**
        : An _Integer_ specifying the axis node cnt. The default value is 10.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "Cylinder_1".
        
        **`iPartCol`**
        : An _Integer_ specifying the part col. The default value is 7105764.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Part.Tube(dlOrigin=[0,0,0], dTopInnerRadius=0.001, dTopOuterRadius=0.01, dBotInnerRadius=0.001, dBotOuterRadius=0.01, dHeight=0.01, iCircleNodeCnt=36, iAxisNodeCnt=10, strName="Cylinder_1", iPartCol=7105764, crCoord=None)
        ```
        
        """
        message = "Geometry.Part.Tube({},{},{},{},{},{},{},{},'{}',{},{})".format(dlOrigin, dTopInnerRadius, dTopOuterRadius, dBotInnerRadius, dBotOuterRadius, dHeight, iCircleNodeCnt, iAxisNodeCnt, strName, iPartCol, crCoord)
        return JPT_RUN_LINE(message)

    def Trapezoid(self, dlOrigin=[0.0,0.0,0.0], dlLength=[0.01, 0.01, 0.01], dTopXLength=7.0, dRadius=0, ilNodeCnt=[10, 10, 10], strPartName="Trapezoid_1", iColorPart=7105764, crCoord=None):
        r"""
        ## Description
        
        Create trapezoid part
        
        ## Syntax
        
        ```python
        Geometry.Part.Trapezoid(dlOrigin=[0.0,0.0,0.0], dlLength=[0.01, 0.01, 0.01], dTopXLength=7.0, dRadius=0, ilNodeCnt=[10, 10, 10], strPartName="Trapezoid_1", iColorPart=7105764, crCoord=None)
        ```
        
        Macro: {ref}`Macro-Geometry-CreateTrapezoid`
        
        Ribbon: {menuselection}`Geometry --> Part --> Trapezoid`
        
        ## Inputs
        
        **`dlOrigin`**
        : A _Double List_ specifying the original. The default value is [0.0,0.0,0.0].
        
        **`dlLength`**
        : A _Double List_ specifying the length. The default value is [0.01, 0.01, 0.01].
        
        **`dTopXLength`**
        : A _Double_ specifying the top x length. The default value is 7.0.
        
        **`dRadius`**
        : A _Double_ specifying the radius. The default value is 0.
        
        **`ilNodeCnt`**
        : A _Integer List_ specifying the node cnt. The default value is [10, 10, 10].
        
        **`strPartName`**
        : A _String_ specifying the part name. The default value is "Trapezoid_1".
        
        **`iColorPart`**
        : An _Integer_ specifying the color part. The default value is 7105764.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Part.Trapezoid(dlOrigin=[0.0,0.0,0.0], dlLength=[0.01, 0.01, 0.01], dTopXLength=7.0, dRadius=0, ilNodeCnt=[10, 10, 10], strPartName="Trapezoid_1", iColorPart=7105764, crCoord=None)
        ```
        
        """
        message = "Geometry.Part.Trapezoid({},{},{},{},{},'{}',{},{})".format(dlOrigin, dlLength, dTopXLength, dRadius, ilNodeCnt, strPartName, iColorPart, crCoord)
        return JPT_RUN_LINE(message)

    def Cone(self, dlOriginXyz=[0,0,0], dBottomRadius=0.01, dHeight=0.02, iCircleNodeCount=20, iAxisNodeCnt=20, strPartName="Cone_1", iPartColor=7105764, crCoordinate=None):
        r"""
        ## Description
        
        Create Cone Body
        
        ## Syntax
        
        ```python
        Geometry.Part.Cone(dlOriginXyz=[0,0,0], dBottomRadius=0.01, dHeight=0.02, iCircleNodeCount=20, iAxisNodeCnt=20, strPartName="Cone_1", iPartColor=7105764, crCoordinate=None)
        ```
        
        Macro: {ref}`Macro-Geometry-CreateCone`
        
        Ribbon: {menuselection}`Geometry --> Part --> Cone`
        
        ## Inputs
        
        **`dlOriginXyz`**
        : A _Double List_ specifying the original xyz. The default value is [0,0,0].
        
        **`dBottomRadius`**
        : A _Double_ specifying the bottom radius. The default value is 0.01.
        
        **`dHeight`**
        : A _Double_ specifying the height. The default value is 0.02.
        
        **`iCircleNodeCount`**
        : An _Integer_ specifying the circle node count. The default value is 20.
        
        **`iAxisNodeCnt`**
        : An _Integer_ specifying the axis node cnt. The default value is 20.
        
        **`strPartName`**
        : A _String_ specifying the part name. The default value is "Cone_1".
        
        **`iPartColor`**
        : An _Integer_ specifying the part color. The default value is 7105764.
        
        **`crCoordinate`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Part.Cone(dlOriginXyz=[0,0,0], dBottomRadius=0.01, dHeight=0.02, iCircleNodeCount=20, iAxisNodeCnt=20, strPartName="Cone_1", iPartColor=7105764, crCoordinate=None)
        ```
        
        """
        message = "Geometry.Part.Cone({},{},{},{},{},'{}',{},{})".format(dlOriginXyz, dBottomRadius, dHeight, iCircleNodeCount, iAxisNodeCnt, strPartName, iPartColor, crCoordinate)
        return JPT_RUN_LINE(message)

class Geometry_ShowAdjacent:
    def Faces(self, Angle=0.0, IncludeStopFace=0, Layer=1,IsPreview=0, taStartFaceCr=[] ,taStopFaceCr=[]):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Geometry.ShowAdjacent.Faces(dAngle=0.0, iIncludeStopFace=0, iLayer=1, bIsPreview=0, crlStartFace=[] , crlStopFace=[])
        ```
        
        Macro: {ref}`Macro-Geometry-Geom_ShowAdjacent`
        
        Ribbon: {menuselection}`Geometry --> ShowAdjacent --> Faces`
        
        ## Inputs
        
        **`dAngle`**
        : A _Double_ specifying the angle stop. The default value is 0.0.
        
        **`iIncludeStopFace`**
        : An _Integer_ enable/disable option including stop face. The default value is 0.
        
        **`iLayer`**
        : An _Integer_ specifying the number of layer. This is a required input.
        
        **`bIsPreview`**
        : A _Boolean_ enable/disable option preview. The default value is False.
        
        **`crlStartFace`**
        : A _Cursor List_ specifying the list of start face. This is a required input.
        
        **`crlStopFace`**
        : A _Cursor List_ specifying the list of stop face. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.ShowAdjacent.Faces(dAngle=0.0, iIncludeStopFace=0, iLayer=1, bIsPreview=0, crlStartFace=[] , crlStopFace=[])
        ```
        
        """
        message = "Geometry.ShowAdjacent.Faces({},{},{},{},{},{})".format(Angle, IncludeStopFace, Layer,IsPreview, taStartFaceCr,taStopFaceCr)
        return JPT_RUN_LINE(message)

    def Elements(self, Angle=0.0, IncludeStopElem=0, Layer=1,IsPreview=0, taStartElemCr=[] ,taStopElemCr=[]):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Geometry.ShowAdjacent.Elements(dAngle=0.0, iIncludeStopElem=0, iLayer=1, bIsPreview=0, crlStartElem=[], crlStopElem=[])
        ```
        
        Macro: {ref}`Macro-Geometry-Geom_ShowAdjacent_Elements`
        
        Ribbon: {menuselection}`Geometry --> ShowAdjacent --> Elements`
        
        ## Inputs
        
        **`dAngle`**
        : A _Double_ specifying the angle stop. The default value is 0.0.
        
        **`iIncludeStopElem`**
        : An _Integer_ enable/disable option including stop element. The default value is 0.
        
        **`iLayer`**
        : An _Integer_ specifying the number of layer. This is a required input.
        
        **`bIsPreview`**
        : A _Boolean_ enable/disable option preview. The default value is False.
        
        **`crlStartElem`**
        : A _Cursor List_ specifying the list of start element. This is a required input.
        
        **`crlStopElem`**
        : A _Cursor List_ specifying the list of stop element. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.ShowAdjacent.Elements(dAngle=0.0, iIncludeStopElem=0, iLayer=1, bIsPreview=0, crlStarElem=[], crlStopElem=[])
        ```
        
        """
        message = "Geometry.ShowAdjacent.Elements({},{},{},{},{},{})".format(Angle, IncludeStopElem, Layer,IsPreview, taStartElemCr,taStopElemCr)
        return JPT_RUN_LINE(message)

class Geometry_Transform:
    def Rotation(self, crlPart=[], posCenter=[0,0,0], vecAxis=[1,0,0], dAngle=0, bCreateNewPart=False, bCopyLBC=False, bCopyProperty=False, iCopyCount=1, bMergeNode=False, dTol=1.0e-5):
        r"""
        ## Description
        
        Rotate the selected Part.
        
        ## Syntax
        
        ```python
        Geometry.Transform.Rotation(crlPart=[], posCenter=[0,0,0], vecAxis=[1,0,0], dAngle=0, bCreateNewPart=False, bCopyLBC=False, bCopyProperty=False, iCopyCount=1, bMergeNode=False, dTol=1.0e-5)
        ```
        
        Macro: {ref}`Macro-Geometry-RotateBody`
        
        Ribbon: {menuselection}`Geometry --> Transform --> Rotation`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`posCenter`**
        : A _Position_ specifying the center. The default value is [0,0,0].
        
        **`vecAxis`**
        : A _Vector_ specifying the axis. The default value is [1,0,0].
        
        **`dAngle`**
        : A _Double_ specifying the angle. The default value is 0.
        
        **`bCreateNewPart`**
        : A _Boolean_ specifying the create new part. The default value is False.
        
        **`bCopyLBC`**
        : A _Boolean_ specifying the copy load boundary condition. The default value is False.
        
        **`bCopyProperty`**
        : A _Boolean_ specifying the copy property. The default value is False.
        
        **`iCopyCount`**
        : An _Integer_ specifying the copy count. The default value is 1.
        
        **`bMergeNode`**
        : A _Boolean_ specifying the merge node. The default value is False.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is 1.0e-5.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Transform.Rotation(crlPart=[], posCenter=[0,0,0], vecAxis=[1,0,0], dAngle=0, bCreateNewPart=False, bCopyLBC=False, bCopyProperty=False, iCopyCount=1, bMergeNode=False, dTol=1.0e-5)
        ```
        
        """
        message = "Geometry.Transform.Rotation({},{},{},{},{},{},{},{},{},{})".format(crlPart, posCenter, vecAxis, dAngle, bCreateNewPart, bCopyLBC, bCopyProperty, iCopyCount, bMergeNode, dTol)
        return JPT_RUN_LINE(message)

    def Scaling(self, crlPart, dlScaleVector=[1.0,1.0,1.0], dlScaleCentre=[0.0,0.0,0.0], crCoordinate=None, bCreateNew=False, bCopyLbc=False, bCopyProperty=False, bUsepartcenter=True):
        r"""
        ## Description
        
        Scale Body
        
        ## Syntax
        
        ```python
        Geometry.Transform.Scaling(crlPart, dlScaleVector=[1.0,1.0,1.0], dlScaleCentre=[0.0,0.0,0.0], crCoordinate=None, bCreateNew=False, bCopyLbc=False, bCopyProperty=False, bUsepartcenter=True)
        ```
        
        Macro: {ref}`Macro-Geometry-ScaleBody`
        
        Ribbon: {menuselection}`Geometry --> Transform --> Scaling`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. This is a required input.
        
        **`dlScaleVector`**
        : A _Double List_ specifying the scale vector. The default value is [1.0,1.0,1.0].
        
        **`dlScaleCentre`**
        : A _Double List_ specifying the scale centre. The default value is [0.0,0.0,0.0].
        
        **`crCoordinate`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`bCreateNew`**
        : A _Boolean_ specifying the create new. The default value is False.
        
        **`bCopyLbc`**
        : A _Boolean_ specifying the copy load boundary condition. The default value is False.
        
        **`bCopyProperty`**
        : A _Boolean_ specifying the copy property. The default value is False.
        
        **`bUsepartcenter`**
        : A _Boolean_ specifying the usepartcenter. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Transform.Scaling(crlPart, dlScaleVector=[1.0,1.0,1.0], dlScaleCentre=[0.0,0.0,0.0], crCoordinate=None, bCreateNew=False, bCopyLbc=False, bCopyProperty=False, bUsepartcenter=True)
        ```
        
        """
        message = "Geometry.Transform.Scaling({},{},{},{},{},{},{},{})".format(crlPart, dlScaleVector, dlScaleCentre, crCoordinate, bCreateNew, bCopyLbc, bCopyProperty, bUsepartcenter)
        return JPT_RUN_LINE(message)

    def Mirror(self, crlPart, veclPoint=[[0.0, 0.0, 0.0]], dOffset=0.0, bCreateNewPart=True, bCopyLBC=False, bCopyProperty=False, bRemoveDupFace=True, bMergeNode=False, dTol=1e-05):
        r"""
        ## Description
        
        mirror body
        
        ## Syntax
        
        ```python
        Geometry.Transform.Mirror(crlPart, veclPoint=[[0.0, 0.0, 0.0]], dOffset=0.0, bCreateNewPart=True, bCopyLBC=False, bCopyProperty=False, bRemoveDupFace=True, bMergeNode=False, dTol=1e-05)
        ```
        
        Macro: {ref}`Macro-Geometry-MirrorBody`
        
        Ribbon: {menuselection}`Geometry --> Transform --> Mirror`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. This is a required input.
        
        **`veclPoint`**
        : A _Vector List_ specifying the point. The default value is [[0.0, 0.0, 0.0]].
        
        **`dOffset`**
        : A _Double_ specifying the offset. The default value is 0.0.
        
        **`bCreateNewPart`**
        : A _Boolean_ specifying the create new part. The default value is True.
        
        **`bCopyLBC`**
        : A _Boolean_ specifying the copy load boundary condition. The default value is False.
        
        **`bCopyProperty`**
        : A _Boolean_ specifying the copy property. The default value is False.
        
        **`bRemoveDupFace`**
        : A _Boolean_ specifying the remove dup face. The default value is True.
        
        **`bMergeNode`**
        : A _Boolean_ specifying the merge node. The default value is False.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is 1e-05.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Transform.Mirror(crlPart, veclPoint=[[0.0, 0.0, 0.0]], dOffset=0.0, bCreateNewPart=True, bCopyLBC=False, bCopyProperty=False, bRemoveDupFace=True, bMergeNode=False, dTol=1e-05)
        ```
        
        """
        message = "Geometry.Transform.Mirror({},{},{},{},{},{},{},{},{})".format(crlPart, veclPoint, dOffset, bCreateNewPart, bCopyLBC, bCopyProperty, bRemoveDupFace, bMergeNode, dTol)
        return JPT_RUN_LINE(message)

    def Position(self, crlPart, veclPoint=[[0.0, 0.0, 0.0]], bCreateNewPart=False, bCopyLBC=False, bCopyProperty=False):
        r"""
        ## Description
        
        transform position
        
        ## Syntax
        
        ```python
        Geometry.Transform.Position(crlPart, veclPoint=[[0.0, 0.0, 0.0]], bCreateNewPart=False, bCopyLBC=False, bCopyProperty=False)
        ```
        
        Macro: {ref}`Macro-Geometry-PositionBody`
        
        Ribbon: {menuselection}`Geometry --> Transform --> Position`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. This is a required input.
        
        **`veclPoint`**
        : A _Vector List_ specifying the point. The default value is [[0.0, 0.0, 0.0]].
        
        **`bCreateNewPart`**
        : A _Boolean_ specifying the create new part. The default value is False.
        
        **`bCopyLBC`**
        : A _Boolean_ specifying the copy load boundary condition. The default value is False.
        
        **`bCopyProperty`**
        : A _Boolean_ specifying the copy property. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Transform.Position(crlPart, veclPoint=[[0.0, 0.0, 0.0]], bCreateNewPart=False, bCopyLBC=False, bCopyProperty=False)
        ```
        
        """
        message = "Geometry.Transform.Position({},{},{},{},{})".format(crlPart, veclPoint, bCreateNewPart, bCopyLBC, bCopyProperty)
        return JPT_RUN_LINE(message)

    def Translation(self, crlPart=[], poslTranslates=[], crCoord=None, bCreateNewPart=False, bCopyLBC=False, bCopyProperty=False, iCopyCount=1):
        r"""
        ## Description
        
        Translate the selected Part.
        
        ## Syntax
        
        ```python
        Geometry.Transform.Translation(crlPart=[], poslTranslates=[], crCoord=None, bCreateNewPart=False, bCopyLBC=False, bCopyProperty=False, iCopyCount=1)
        ```
        
        Macro: {ref}`Macro-Geometry-TranslateBody`
        
        Ribbon: {menuselection}`Geometry --> Transform --> Translation`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`poslTranslates`**
        : A _Position List_ specifying the translates. The default value is [].
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`bCreateNewPart`**
        : A _Boolean_ specifying the create new part. The default value is False.
        
        **`bCopyLBC`**
        : A _Boolean_ specifying the copy load boundary condition. The default value is False.
        
        **`bCopyProperty`**
        : A _Boolean_ specifying the copy property. The default value is False.
        
        **`iCopyCount`**
        : An _Integer_ specifying the copy count. The default value is 1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Transform.Translation(crlPart=[], poslTranslates=[], crCoord=None, bCreateNewPart=False, bCopyLBC=False, bCopyProperty=False, iCopyCount=1)
        ```
        
        """
        message = "Geometry.Transform.Translation({},{},{},{},{},{},{})".format(crlPart, poslTranslates, crCoord, bCreateNewPart, bCopyLBC, bCopyProperty, iCopyCount)
        return JPT_RUN_LINE(message)

    def MatingFace(self, crlPart=[], crSrcFace=None, crDstFace=None, crSrcEdge=None, crDstEdge=None, crSrcNode=None, crDstNode=None, iFaceOpposite=0, dEdgeAngle=0, iEdgeOpposite=0, iAlignMethodType=0, iAdjustPointType=0, iAdjustProjectionType=0, dlAlignVector=[0, 0, 0], dlAdjustPoint=[0, 0, 0], dlAdjustVector=[0, 0, 0], bCreateNewPart=False, bCopyLBC=False, bCopyProperty=False, bIsPreview=False, crlCoordSyss=[]):
        r"""
        ## Description
        
        Transform MatingFace
        
        ## Syntax
        
        ```python
        Geometry.Transform.MatingFace(crlPart=[], crSrcFace=None, crDstFace=None, crSrcEdge=None, crDstEdge=None, crSrcNode=None, crDstNode=None, iFaceOpposite=0, dEdgeAngle=0, iEdgeOpposite=0, iAlignMethodType=0, iAdjustPointType=0, iAdjustProjectionType=0, dlAlignVector=[0, 0, 0], dlAdjustPoint=[0, 0, 0], dlAdjustVector=[0, 0, 0], bCreateNewPart=False, bCopyLBC=False, bCopyProperty=False, bIsPreview=False, crlCoordSyss=[])
        ```
        
        Macro: {ref}`Macro-Geometry-TransMatingFace`
        
        Ribbon: {menuselection}`Geometry --> Transform --> MatingFace`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`crSrcFace`**
        : A _Cursor_ specifying the source face. The default value is None.
        
        **`crDstFace`**
        : A _Cursor_ specifying the dst face. The default value is None.
        
        **`crSrcEdge`**
        : A _Cursor_ specifying the source edge. The default value is None.
        
        **`crDstEdge`**
        : A _Cursor_ specifying the dst edge. The default value is None.
        
        **`crSrcNode`**
        : A _Cursor_ specifying the source node. The default value is None.
        
        **`crDstNode`**
        : A _Cursor_ specifying the dst node. The default value is None.
        
        **`iFaceOpposite`**
        : An _Integer_ specifying the face opposite. The default value is 0.
        
        **`dEdgeAngle`**
        : A _Double_ specifying the edge angle. The default value is 0.
        
        **`iEdgeOpposite`**
        : An _Integer_ specifying the edge opposite. The default value is 0.
        
        **`iAlignMethodType`**
        : An _Integer_ specifying the align method type. The default value is 0.
        
        **`iAdjustPointType`**
        : An _Integer_ specifying the adjust point type. The default value is 0.
        
        **`iAdjustProjectionType`**
        : An _Integer_ specifying the adjust projection type. The default value is 0.
        
        **`dlAlignVector`**
        : A _Double List_ specifying the align vector. The default value is [0, 0, 0].
        
        **`dlAdjustPoint`**
        : A _Double List_ specifying the adjust point. The default value is [0, 0, 0].
        
        **`dlAdjustVector`**
        : A _Double List_ specifying the adjust vector. The default value is [0, 0, 0].
        
        **`bCreateNewPart`**
        : A _Boolean_ specifying the create new part. The default value is False.
        
        **`bCopyLBC`**
        : A _Boolean_ specifying the copy load boundary condition. The default value is False.
        
        **`bCopyProperty`**
        : A _Boolean_ specifying the copy property. The default value is False.
        
        **`bIsPreview`**
        : A _Boolean_ specifying the is preview. The default value is False.
        
        **`crlCoordSyss`**
        : A _Cursor List_ specifying the coordinate system. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Transform.MatingFace(crlPart=[], crSrcFace=None, crDstFace=None, crSrcEdge=None, crDstEdge=None, crSrcNode=None, crDstNode=None, iFaceOpposite=0, dEdgeAngle=0, iEdgeOpposite=0, iAlignMethodType=0, iAdjustPointType=0, iAdjustProjectionType=0, dlAlignVector=[0, 0, 0], dlAdjustPoint=[0, 0, 0], dlAdjustVector=[0, 0, 0], bCreateNewPart=False, bCopyLBC=False, bCopyProperty=False, bIsPreview=False, crlCoordSyss=[])
        ```
        
        """
        message = "Geometry.Transform.MatingFace({},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(crlPart, crSrcFace, crDstFace, crSrcEdge, crDstEdge, crSrcNode, crDstNode, iFaceOpposite, dEdgeAngle, iEdgeOpposite, iAlignMethodType, iAdjustPointType, iAdjustProjectionType, dlAlignVector, dlAdjustPoint, dlAdjustVector, bCreateNewPart, bCopyLBC, bCopyProperty, bIsPreview, crlCoordSyss)
        return JPT_RUN_LINE(message)

    def CylinderFace(self, crlPart, veclPoint=[[0.0, 0.0, 0.0]], bCreateNewPart=False, bCopyLBC=False, bCopyProperty=False):
        r"""
        ## Description
        
        transform position
        
        ## Syntax
        
        ```python
        Geometry.Transform.CylinderFace(crlPart, veclPoint=[[0.0, 0.0, 0.0]], bCreateNewPart=False, bCopyLBC=False, bCopyProperty=False)
        ```
        
        Macro: {ref}`Macro-Geometry-Transform_CylinderFace`
        
        Ribbon: {menuselection}`Geometry --> Transform --> CylinderFace`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. This is a required input.
        
        **`veclPoint`**
        : A _Vector List_ specifying the point. The default value is [[0.0, 0.0, 0.0]].
        
        **`bCreateNewPart`**
        : A _Boolean_ specifying the create new part. The default value is False.
        
        **`bCopyLBC`**
        : A _Boolean_ specifying the copy load boundary condition. The default value is False.
        
        **`bCopyProperty`**
        : A _Boolean_ specifying the copy property. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.Transform.CylinderFace(crlPart, veclPoint=[[0.0, 0.0, 0.0]], bCreateNewPart=False, bCopyLBC=False, bCopyProperty=False)
        ```
        
        """
        message = "Geometry.Transform.CylinderFace({},{},{},{},{})".format(crlPart, veclPoint, bCreateNewPart, bCopyLBC, bCopyProperty)
        return JPT_RUN_LINE(message)

class Groups_RightClick:
    def PropertyGroup(self, strTmp=""):
        r"""
        ## Description
        
        create group of properties
        
        ## Syntax
        
        ```python
        Groups.RightClick.PropertyGroup(strTmp="")
        ```
        
        Macro: {ref}`Macro-Groups-CreatePropertyGroup`
        
        Ribbon: {menuselection}`Groups --> RightClick --> PropertyGroup`
        
        ## Inputs
        
        **`strTmp`**
        : A _String_ specifying the temporary. The default value is "".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Groups.RightClick.PropertyGroup(strTmp="")
        ```
        
        """
        message = "Groups.RightClick.PropertyGroup('{}')".format(strTmp)
        return JPT_RUN_LINE(message)

    def Rename(self, strNewName, crItem):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Groups.RightClick.Rename(strNewName, crItem)
        ```
        
        Macro: {ref}`Macro-Groups-RenameItem`
        
        Ribbon: {menuselection}`Groups --> RightClick --> Rename`
        
        ## Inputs
        
        **`strNewName`**
        : A _String_ specifying the new name. This is a required input.
        
        **`crItem`**
        : A _Cursor_ specifying the item. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Groups.RightClick.Rename(strNewName, crItem)
        ```
        
        """
        message = "Groups.RightClick.Rename('{}',{})".format(strNewName, crItem)
        return JPT_RUN_LINE(message)

    def DeleteGroup(self, crlDelGroup, bRemoveAll=False):
        r"""
        ## Description
        
        Delete Group
        
        ## Syntax
        
        ```python
        Groups.RightClick.DeleteGroup(crlDelGroup, bRemoveAll=False)
        ```
        
        Macro: {ref}`Macro-Groups-DeleteGroup`
        
        Ribbon: {menuselection}`Groups --> RightClick --> DeleteGroup`
        
        ## Inputs
        
        **`crlDelGroup`**
        : A _Cursor List_ specifying the del group. This is a required input.
        
        **`bRemoveAll`**
        : A _Boolean_ specifying the remove all. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Groups.RightClick.DeleteGroup(crlDelGroup, bRemoveAll=False)
        ```
        
        """
        message = "Groups.RightClick.DeleteGroup({},{})".format(crlDelGroup, bRemoveAll)
        return JPT_RUN_LINE(message)

    def CopyGroup(self, crlSrc=[], strlNames=[], crDest=None, bKeep=0):
        r"""
        ## Description
        
        Copy Group
        
        ## Syntax
        
        ```python
        Groups.RightClick.CopyGroup(crlSrc=[], strlNames=[], crDest=None, bKeep=0)
        ```
        
        Macro: {ref}`Macro-Groups-CopyGroup`
        
        Ribbon: {menuselection}`Groups --> RightClick --> CopyGroup`
        
        ## Inputs
        
        **`crlSrc`**
        : A _Cursor List_ specifying the source. The default value is [].
        
        **`strlNames`**
        : A _String List_ specifying the names. The default value is [].
        
        **`crDest`**
        : A _Cursor_ specifying the dest. The default value is None.
        
        **`bKeep`**
        : A _Boolean_ specifying the keep. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Groups.RightClick.CopyGroup(crlSrc=[], strlNames=[], crDest=None, bKeep=0)
        ```
        
        """
        message = "Groups.RightClick.CopyGroup({},'{}',{},{})".format(crlSrc, strlNames, crDest, bKeep)
        return JPT_RUN_LINE(message)

    def AddSupGroup(self, crSupGroupSelected=None):
        r"""
        ## Description
        
        Add supper group
        
        ## Syntax
        
        ```python
        Groups.RightClick.AddSupGroup(crSupGroupSelected=None)
        ```
        
        Macro: {ref}`Macro-Groups-AddSupGroup`
        
        Ribbon: {menuselection}`Groups --> RightClick --> AddSupGroup`
        
        ## Inputs
        
        **`crSupGroupSelected`**
        : A _Cursor_ specifying the sup group selected. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Groups.RightClick.AddSupGroup(crSupGroupSelected=None)
        ```
        
        """
        message = "Groups.RightClick.AddSupGroup({})".format(crSupGroupSelected)
        return JPT_RUN_LINE(message)

    def CreateMatGroup(self, strTmp=""):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Groups.RightClick.CreateMatGroup(strTmp="")
        ```
        
        Macro: {ref}`Macro-Groups-CreateMaterialGroup`
        
        Ribbon: {menuselection}`Groups --> RightClick --> CreateMatGroup`
        
        ## Inputs
        
        **`strTmp`**
        : A _String_ specifying the temporary. The default value is "".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Groups.RightClick.CreateMatGroup(strTmp="")
        ```
        
        """
        message = "Groups.RightClick.CreateMatGroup('{}')".format(strTmp)
        return JPT_RUN_LINE(message)

class HexModeling_Sweep:
    def Circular(self, crlFace=[], dAngle=360, dTol=0.0000001, iLayer=36, vecAxisPt=[0.0,0.0,0.0], vecAxisVect=[1.0,0.0,0.0], bInterfaceElem=False, bExtrusion=False, dTranslationExtrusion=0.0, dBDeleteOriginalParts=0.0):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        HexModeling.Sweep.Circular(crlFace=[], dAngle=360, dTol=0.0000001, iLayer=36, vecAxisPt=[0.0,0.0,0.0], vecAxisVect=[1.0,0.0,0.0], bInterfaceElem=False, bExtrusion=False, dTranslationExtrusion=0.0, dBDeleteOriginalParts=0.0)
        ```
        
        Macro: {ref}`Macro-HexModeling-HexSweepCircular`
        
        Ribbon: {menuselection}`HexModeling --> Sweep --> Circular`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`dAngle`**
        : A _Double_ specifying the angle. The default value is 360.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is 0.0000001.
        
        **`iLayer`**
        : An _Integer_ specifying the layer. The default value is 36.
        
        **`vecAxisPt`**
        : A _Vector_ specifying the axis point. The default value is [0.0,0.0,0.0].
        
        **`vecAxisVect`**
        : A _Vector_ specifying the axis vector. The default value is [1.0,0.0,0.0].
        
        **`bInterfaceElem`**
        : A _Boolean_ specifying the interface element. The default value is False.
        
        **`bExtrusion`**
        : A _Boolean_ specifying the extrusion. The default value is False.
        
        **`dTranslationExtrusion`**
        : A _Double_ specifying the translation extrusion. The default value is 0.0.
        
        **`dBDeleteOriginalParts`**
        : A _Double_ specifying the delete original parts. The default value is 0.0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        HexModeling.Sweep.Circular(crlFace=[], dAngle=360, dTol=0.0000001, iLayer=36, vecAxisPt=[0.0,0.0,0.0], vecAxisVect=[1.0,0.0,0.0], bInterfaceElem=False, bExtrusion=False, dTranslationExtrusion=0.0, dBDeleteOriginalParts=0.0)
        ```
        
        """
        message = "HexModeling.Sweep.Circular({},{},{},{},{},{},{},{},{},{})".format(crlFace, dAngle, dTol, iLayer, vecAxisPt, vecAxisVect, bInterfaceElem, bExtrusion, dTranslationExtrusion, dBDeleteOriginalParts)
        return JPT_RUN_LINE(message)

    def FaceToFace(self, crSrcFace, crDstFace, bDeleteOriginalParts=True):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        HexModeling.Sweep.FaceToFace(crSrcFace, crDstFace, bDeleteOriginalParts=True)
        ```
        
        Macro: {ref}`Macro-HexModeling-HexSweepFaceToFace`
        
        Ribbon: {menuselection}`HexModeling --> Sweep --> FaceToFace`
        
        ## Inputs
        
        **`crSrcFace`**
        : A _Cursor_ specifying the source face. This is a required input.
        
        **`crDstFace`**
        : A _Cursor_ specifying the dst face. This is a required input.
        
        **`bDeleteOriginalParts`**
        : A _Boolean_ specifying the delete original parts. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        HexModeling.Sweep.FaceToFace(crSrcFace, crDstFace, bDeleteOriginalParts=True)
        ```
        
        """
        message = "HexModeling.Sweep.FaceToFace({},{},{})".format(crSrcFace, crDstFace, bDeleteOriginalParts)
        return JPT_RUN_LINE(message)

    def Layer(self, crlFace=[], dFrontWidth=0.0, dBackWidth=0.0, iFrontLayers=1, iBackLayers=0, iBaseFaceType=0, iSeparate=0):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        HexModeling.Sweep.Layer(crlFace=[], dFrontWidth=0.0, dBackWidth=0.0, iFrontLayers=1, iBackLayers=0, iBaseFaceType=0, iSeparate=0)
        ```
        
        Macro: {ref}`Macro-HexModeling-HexSweepLayer`
        
        Ribbon: {menuselection}`HexModeling --> Sweep --> Layer`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`dFrontWidth`**
        : A _Double_ specifying the front width. The default value is 0.0.
        
        **`dBackWidth`**
        : A _Double_ specifying the back width. The default value is 0.0.
        
        **`iFrontLayers`**
        : An _Integer_ specifying the front layers. The default value is 1.
        
        **`iBackLayers`**
        : An _Integer_ specifying the back layers. The default value is 0.
        
        **`iBaseFaceType`**
        : An _Integer_ specifying the base face type. The default value is 0.
        
        **`iSeparate`**
        : An _Integer_ specifying the separate. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        HexModeling.Sweep.Layer(crlFace=[], dFrontWidth=0.0, dBackWidth=0.0, iFrontLayers=1, iBackLayers=0, iBaseFaceType=0, iSeparate=0)
        ```
        
        """
        message = "HexModeling.Sweep.Layer({},{},{},{},{},{},{})".format(crlFace, dFrontWidth, dBackWidth, iFrontLayers, iBackLayers, iBaseFaceType, iSeparate)
        return JPT_RUN_LINE(message)

    def Linear(self, crlFace=[], dLength=10, iLayer=10, dlSweepDirection=[], bInterfaceElemFlag=False, iLinearMethod=0, bDeleteOriginalParts=False, bDeleteTargetParts=False, iMethodBias=0, dFactor=2.0, iProgression=0):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        HexModeling.Sweep.Linear(crlFace=[], dLength=10, iLayer=10, dlSweepDirection=[], bInterfaceElemFlag=False, iLinearMethod=0, bDeleteOriginalParts=False, bDeleteTargetParts=False, iMethodBias=0, dFactor=2.0, iProgression=0)
        ```
        
        Macro: {ref}`Macro-HexModeling-HexSweepLinear`
        
        Ribbon: {menuselection}`HexModeling --> Sweep --> Linear`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`dLength`**
        : A _Double_ specifying the length. The default value is 10.
        
        **`iLayer`**
        : An _Integer_ specifying the layer. The default value is 10.
        
        **`dlSweepDirection`**
        : A _Double List_ specifying the sweep direction. The default value is [].
        
        **`bInterfaceElemFlag`**
        : A _Boolean_ specifying the interface element flag. The default value is False.
        
        **`iLinearMethod`**
        : An _Integer_ specifying the linear method. The default value is 0.
        
        **`bDeleteOriginalParts`**
        : A _Boolean_ specifying the delete original parts. The default value is False.
        
        **`bDeleteTargetParts`**
        : A _Boolean_ specifying the delete target parts. The default value is False.
        
        **`iMethodBias`**
        : An _Integer_ specifying the method bias. The default value is 0.
        
        **`dFactor`**
        : A _Double_ specifying the factor. The default value is 2.0.
        
        **`iProgression`**
        : An _Integer_ specifying the progression. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        HexModeling.Sweep.Linear(crlFace=[], dLength=10, iLayer=10, dlSweepDirection=[], bInterfaceElemFlag=False, iLinearMethod=0, bDeleteOriginalParts=False, bDeleteTargetParts=False, iMethodBias=0, dFactor=2.0, iProgression=0)
        ```
        
        """
        message = "HexModeling.Sweep.Linear({},{},{},{},{},{},{},{},{},{},{})".format(crlFace, dLength, iLayer, dlSweepDirection, bInterfaceElemFlag, iLinearMethod, bDeleteOriginalParts, bDeleteTargetParts, iMethodBias, dFactor, iProgression)
        return JPT_RUN_LINE(message)

    def Curve(self, crFace=None, crlEdge=[], crlRefEdge=[], dMeshSize=0.1):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        HexModeling.Sweep.Curve(crFace=None, crlEdge=[], crlRefEdge=[], dMeshSize=0.1)
        ```
        
        Macro: {ref}`Macro-HexModeling-SweepCloseLoopShape`
        
        Ribbon: {menuselection}`HexModeling --> Sweep --> Curve`
        
        ## Inputs
        
        **`crFace`**
        : A _Cursor_ specifying the face. The default value is None.
        
        **`crlEdge`**
        : A _Cursor List_ specifying the edge. The default value is [].
        
        **`crlRefEdge`**
        : A _Cursor List_ specifying the reference edge. The default value is [].
        
        **`dMeshSize`**
        : A _Double_ specifying the mesh size. The default value is 0.1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        HexModeling.Sweep.Curve(crFace=None, crlEdge=[], crlRefEdge=[], dMeshSize=0.1)
        ```
        
        """
        message = "HexModeling.Sweep.Curve({},{},{},{})".format(crFace, crlEdge, crlRefEdge, dMeshSize)
        return JPT_RUN_LINE(message)

    def FromMidPlane(self, crlPart=[], bRef=True):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        HexModeling.Sweep.FromMidPlane(crlPart=[], bRef=True)
        ```
        
        Macro: {ref}`Macro-HexModeling-Shell2Hex`
        
        Ribbon: {menuselection}`HexModeling --> Sweep --> FromMidPlane`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`bRef`**
        : A _Boolean_ specifying the reference. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        HexModeling.Sweep.FromMidPlane(crlPart=[], bRef=True)
        ```
        
        """
        message = "HexModeling.Sweep.FromMidPlane({},{})".format(crlPart, bRef)
        return JPT_RUN_LINE(message)

class Home_ImportCAD:
    def Elysium(self, strlPath=[], dChordHeightTolerance=1.0, dAngleToleranceDegree=5.0, dPointCoincidentTolerance=0.01, iConvertIsolatedCurve=0, iDekCleanselfintersectingloop=2, iDekVolumetopart=4, iIgesFixedcurevepreference=0, iIgesAutostitch=1, dIgesStitchtolerance=0.1, iCatiaConvertnotshowedelement=0, iCatiaConvertnotshowedinstance=0, iCatiaConvertaxis=1, iStepCreateseam=1, dStepPointtolerance=0.0, iAcisHealacisbeforeversion=0, iJtConvertgeometrytype=2, bFaceColor=False, iJtConvertgeneralpart=1, iJtConvertaxis=1, iJtConvertcenterline=0):
        r"""
        ## Description
        
        import elysium
        
        ## Syntax
        
        ```python
        Home.ImportCAD.Elysium(strlPath=[], dChordHeightTolerance=1.0, dAngleToleranceDegree=5.0, dPointCoincidentTolerance=0.01, iConvertIsolatedCurve=0, iDekCleanselfintersectingloop=2, iDekVolumetopart=4, iIgesFixedcurevepreference=0, iIgesAutostitch=1, dIgesStitchtolerance=0.1, iCatiaConvertnotshowedelement=0, iCatiaConvertnotshowedinstance=0, iCatiaConvertaxis=1, iStepCreateseam=1, dStepPointtolerance=0.0, iAcisHealacisbeforeversion=0, iJtConvertgeometrytype=2, bFaceColor=False, iJtConvertgeneralpart=1, iJtConvertaxis=1, iJtConvertcenterline=0)
        ```
        
        Macro: {ref}`Macro-Home-ImportElysium`
        
        Ribbon: {menuselection}`Home --> ImportCAD --> Elysium`
        
        ## Inputs
        
        **`strlPath`**
        : A _String List_ specifying the path. The default value is [].
        
        **`dChordHeightTolerance`**
        : A _Double_ specifying the chord height tolerance. The default value is 1.0.
        
        **`dAngleToleranceDegree`**
        : A _Double_ specifying the angle tolerance degree. The default value is 5.0.
        
        **`dPointCoincidentTolerance`**
        : A _Double_ specifying the point coincident tolerance. The default value is 0.01.
        
        **`iConvertIsolatedCurve`**
        : An _Integer_ specifying the convert isolated curve. The default value is 0.
        
        **`iDekCleanselfintersectingloop`**
        : An _Integer_ specifying the dek clean self intersecting loop. The default value is 2.
        
        **`iDekVolumetopart`**
        : An _Integer_ specifying the dek volume to part. The default value is 4.
        
        **`iIgesFixedcurevepreference`**
        : An _Integer_ specifying the iges fixed cureve preference. The default value is 0.
        
        **`iIgesAutostitch`**
        : An _Integer_ specifying the iges auto stitch. The default value is 1.
        
        **`dIgesStitchtolerance`**
        : A _Double_ specifying the iges stitch tolerance. The default value is 0.1.
        
        **`iCatiaConvertnotshowedelement`**
        : An _Integer_ specifying the catia convert not showed element. The default value is 0.
        
        **`iCatiaConvertnotshowedinstance`**
        : An _Integer_ specifying the catia convert not showed instance. The default value is 0.
        
        **`iCatiaConvertaxis`**
        : An _Integer_ specifying the catia convert axis. The default value is 1.
        
        **`iStepCreateseam`**
        : An _Integer_ specifying the step create seam. The default value is 1.
        
        **`dStepPointtolerance`**
        : A _Double_ specifying the step point tolerance. The default value is 0.0.
        
        **`iAcisHealacisbeforeversion`**
        : An _Integer_ specifying the acis heal acis before version. The default value is 0.
        
        **`iJtConvertgeometrytype`**
        : An _Integer_ specifying the jupiter convert geometry type. The default value is 2.
        
        **`bFaceColor`**
        : A _Boolean_ specifying the face color. The default value is False.
        
        **`iJtConvertgeneralpart`**
        : An _Integer_ specifying the jupiter convert general part. The default value is 1.
        
        **`iJtConvertaxis`**
        : An _Integer_ specifying the jupiter convert axis. The default value is 1.
        
        **`iJtConvertcenterline`**
        : An _Integer_ specifying the jupiter convert center line. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Home.ImportCAD.Elysium(strlPath=[], dChordHeightTolerance=1.0, dAngleToleranceDegree=5.0, dPointCoincidentTolerance=0.01, iConvertIsolatedCurve=0, iDekCleanselfintersectingloop=2, iDekVolumetopart=4, iIgesFixedcurevepreference=0, iIgesAutostitch=1, dIgesStitchtolerance=0.1, iCatiaConvertnotshowedelement=0, iCatiaConvertnotshowedinstance=0, iCatiaConvertaxis=1, iStepCreateseam=1, dStepPointtolerance=0.0, iAcisHealacisbeforeversion=0, iJtConvertgeometrytype=2, bFaceColor=False, iJtConvertgeneralpart=1, iJtConvertaxis=1, iJtConvertcenterline=0)
        ```
        
        """
        message = "Home.ImportCAD.Elysium('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strlPath, dChordHeightTolerance, dAngleToleranceDegree, dPointCoincidentTolerance, iConvertIsolatedCurve, iDekCleanselfintersectingloop, iDekVolumetopart, iIgesFixedcurevepreference, iIgesAutostitch, dIgesStitchtolerance, iCatiaConvertnotshowedelement, iCatiaConvertnotshowedinstance, iCatiaConvertaxis, iStepCreateseam, dStepPointtolerance, iAcisHealacisbeforeversion, iJtConvertgeometrytype, bFaceColor, iJtConvertgeneralpart, iJtConvertaxis, iJtConvertcenterline)
        return JPT_RUN_LINE(message)

    def Spatial(self, strlPath, dSurfacePlaneTolerance=0.0, dSufacePlaneAngle=20.0, dMaxFacetWidth=1000.0, bNXMultipart=True, bHealing=True, bIsNXDirect=False, bSetFaceColor=False, strCsvFilePath=""):
        r"""
        ## Description
        
        import CAD by Spatial
        
        ## Syntax
        
        ```python
        Home.ImportCAD.Spatial(strlPath, dSurfacePlaneTolerance=0.0, dSufacePlaneAngle=20.0, dMaxFacetWidth=1000.0, bNXMultipart=True, bHealing=True, bIsNXDirect=False, bSetFaceColor=False, strCsvFilePath="")
        ```
        
        Macro: {ref}`Macro-Home-ImportSpatial`
        
        Ribbon: {menuselection}`Home --> ImportCAD --> Spatial`
        
        ## Inputs
        
        **`strlPath`**
        : A _String List_ specifying the path. This is a required input.
        
        **`dSurfacePlaneTolerance`**
        : A _Double_ specifying the surface plane tolerance. The default value is 0.0.
        
        **`dSufacePlaneAngle`**
        : A _Double_ specifying the suface plane angle. The default value is 20.0.
        
        **`dMaxFacetWidth`**
        : A _Double_ specifying the maximum facet width. The default value is 1000.0.
        
        **`bNXMultipart`**
        : A _Boolean_ specifying the NX multipart. The default value is True.
        
        **`bHealing`**
        : A _Boolean_ specifying the healing. The default value is True.
        
        **`bIsNXDirect`**
        : A _Boolean_ specifying the is NX direct. The default value is False.
        
        **`bSetFaceColor`**
        : A _Boolean_ specifying the set face color. The default value is False.
        
        **`strCsvFilePath`**
        : A _String_ specifying the csv file path. The default value is "".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Home.ImportCAD.Spatial(strlPath, dSurfacePlaneTolerance=0.0, dSufacePlaneAngle=20.0, dMaxFacetWidth=1000.0, bNXMultipart=True, bHealing=True, bIsNXDirect=False, bSetFaceColor=False, strCsvFilePath="")
        ```
        
        """
        message = "Home.ImportCAD.Spatial('{}',{},{},{},{},{},{},{},'{}')".format(strlPath, dSurfacePlaneTolerance, dSufacePlaneAngle, dMaxFacetWidth, bNXMultipart, bHealing, bIsNXDirect, bSetFaceColor, strCsvFilePath)
        return JPT_RUN_LINE(message)

    def Parasolid(self, strlFiles, dChordHeightTolerance=0.0, dAngleToleranceDegree=0.0, iConvertIsolatedCurve=0, dSurfacePlaneTolerance=0.0, dSufacePlaneAngle=20.0, dMaxFacetWidth=0.1, dMinFacetWidth=0.0, bICAD=False, iVRMLColorGroups=0, dScale=1.0):
        r"""
        ## Description
        
        Import Parasolid
        
        ## Syntax
        
        ```python
        Home.ImportCAD.Parasolid(strlFiles, dChordHeightTolerance=0.0, dAngleToleranceDegree=0.0, iConvertIsolatedCurve=0, dSurfacePlaneTolerance=0.0, dSufacePlaneAngle=20.0, dMaxFacetWidth=0.1, dMinFacetWidth=0.0, bICAD=False, iVRMLColorGroups=0, dScale=1.0)
        ```
        
        Macro: {ref}`Macro-Home-ImportDirect_Parasolid`
        
        Ribbon: {menuselection}`Home --> ImportCAD --> Parasolid`
        
        ## Inputs
        
        **`strlFiles`**
        : A _String List_ specifying the files. This is a required input.
        
        **`dChordHeightTolerance`**
        : A _Double_ specifying the chord height tolerance. The default value is 0.0.
        
        **`dAngleToleranceDegree`**
        : A _Double_ specifying the angle tolerance degree. The default value is 0.0.
        
        **`iConvertIsolatedCurve`**
        : An _Integer_ specifying the convert isolated curve. The default value is 0.
        
        **`dSurfacePlaneTolerance`**
        : A _Double_ specifying the surface plane tolerance. The default value is 0.0.
        
        **`dSufacePlaneAngle`**
        : A _Double_ specifying the suface plane angle. The default value is 20.0.
        
        **`dMaxFacetWidth`**
        : A _Double_ specifying the maximum facet width. The default value is 0.1.
        
        **`dMinFacetWidth`**
        : A _Double_ specifying the minimum facet width. The default value is 0.0.
        
        **`bICAD`**
        : A _Boolean_ specifying the i CAD. The default value is False.
        
        **`iVRMLColorGroups`**
        : An _Integer_ specifying the VRML color groups. The default value is 0.
        
        **`dScale`**
        : A _Double_ specifying the scale. The default value is 1.0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Home.ImportCAD.Parasolid(strlFiles, dChordHeightTolerance=0.0, dAngleToleranceDegree=0.0, iConvertIsolatedCurve=0, dSurfacePlaneTolerance=0.0, dSufacePlaneAngle=20.0, dMaxFacetWidth=0.1, dMinFacetWidth=0.0, bICAD=False, iVRMLColorGroups=0, dScale=1.0)
        ```
        
        """
        message = "Home.ImportCAD.Parasolid('{}',{},{},{},{},{},{},{},{},{},{})".format(strlFiles, dChordHeightTolerance, dAngleToleranceDegree, iConvertIsolatedCurve, dSurfacePlaneTolerance, dSufacePlaneAngle, dMaxFacetWidth, dMinFacetWidth, bICAD, iVRMLColorGroups, dScale)
        return JPT_RUN_LINE(message)

    def STL(self, strlFiles, dChordHeightTolerance=0.0, dAngleToleranceDegree=0.0, iConvertIsolatedCurve=0, dSurfacePlaneTolerance=0.0, dSufacePlaneAngle=7.0, dMaxFacetWidth=0.0, dMinFacetWidth=0.0, bICAD=False, iVRMLColorGroups=-227253959, dScale=0.001):
        r"""
        ## Description
        
        Import STL
        
        ## Syntax
        
        ```python
        Home.ImportCAD.STL(strlFiles, dChordHeightTolerance=0.0, dAngleToleranceDegree=0.0, iConvertIsolatedCurve=0, dSurfacePlaneTolerance=0.0, dSufacePlaneAngle=7.0, dMaxFacetWidth=0.0, dMinFacetWidth=0.0, bICAD=False, iVRMLColorGroups=-227253959, dScale=0.001)
        ```
        
        Macro: {ref}`Macro-Home-ImportDirect_STL`
        
        Ribbon: {menuselection}`Home --> ImportCAD --> STL`
        
        ## Inputs
        
        **`strlFiles`**
        : A _String List_ specifying the files. This is a required input.
        
        **`dChordHeightTolerance`**
        : A _Double_ specifying the chord height tolerance. The default value is 0.0.
        
        **`dAngleToleranceDegree`**
        : A _Double_ specifying the angle tolerance degree. The default value is 0.0.
        
        **`iConvertIsolatedCurve`**
        : An _Integer_ specifying the convert isolated curve. The default value is 0.
        
        **`dSurfacePlaneTolerance`**
        : A _Double_ specifying the surface plane tolerance. The default value is 0.0.
        
        **`dSufacePlaneAngle`**
        : A _Double_ specifying the suface plane angle. The default value is 7.0.
        
        **`dMaxFacetWidth`**
        : A _Double_ specifying the maximum facet width. The default value is 0.0.
        
        **`dMinFacetWidth`**
        : A _Double_ specifying the minimum facet width. The default value is 0.0.
        
        **`bICAD`**
        : A _Boolean_ specifying the i CAD. The default value is False.
        
        **`iVRMLColorGroups`**
        : An _Integer_ specifying the VRML color groups. The default value is -227253959.
        
        **`dScale`**
        : A _Double_ specifying the scale. The default value is 0.001.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Home.ImportCAD.STL(strlFiles, dChordHeightTolerance=0.0, dAngleToleranceDegree=0.0, iConvertIsolatedCurve=0, dSurfacePlaneTolerance=0.0, dSufacePlaneAngle=7.0, dMaxFacetWidth=0.0, dMinFacetWidth=0.0, bICAD=False, iVRMLColorGroups=-227253959, dScale=0.001)
        ```
        
        """
        message = "Home.ImportCAD.STL('{}',{},{},{},{},{},{},{},{},{},{})".format(strlFiles, dChordHeightTolerance, dAngleToleranceDegree, iConvertIsolatedCurve, dSurfacePlaneTolerance, dSufacePlaneAngle, dMaxFacetWidth, dMinFacetWidth, bICAD, iVRMLColorGroups, dScale)
        return JPT_RUN_LINE(message)

    def VRML(self, strlFiles, dChordHeightTolerance=0.0, dAngleToleranceDegree=0.0, iConvertIsolatedCurve=0, dSurfacePlaneTolerance=0.0, dSufacePlaneAngle=20.0, dMaxFacetWidth=0.1, dMinFacetWidth=0.0, bICAD=False, iVRMLColorGroups=0, dScale=1.0):
        r"""
        ## Description
        
        Import VRML
        
        ## Syntax
        
        ```python
        Home.ImportCAD.VRML(strlFiles, dChordHeightTolerance=0.0, dAngleToleranceDegree=0.0, iConvertIsolatedCurve=0, dSurfacePlaneTolerance=0.0, dSufacePlaneAngle=20.0, dMaxFacetWidth=0.1, dMinFacetWidth=0.0, bICAD=False, iVRMLColorGroups=0, dScale=1.0)
        ```
        
        Macro: {ref}`Macro-Home-ImportDirect_VRML`
        
        Ribbon: {menuselection}`Home --> ImportCAD --> VRML`
        
        ## Inputs
        
        **`strlFiles`**
        : A _String List_ specifying the files. This is a required input.
        
        **`dChordHeightTolerance`**
        : A _Double_ specifying the chord height tolerance. The default value is 0.0.
        
        **`dAngleToleranceDegree`**
        : A _Double_ specifying the angle tolerance degree. The default value is 0.0.
        
        **`iConvertIsolatedCurve`**
        : An _Integer_ specifying the convert isolated curve. The default value is 0.
        
        **`dSurfacePlaneTolerance`**
        : A _Double_ specifying the surface plane tolerance. The default value is 0.0.
        
        **`dSufacePlaneAngle`**
        : A _Double_ specifying the suface plane angle. The default value is 20.0.
        
        **`dMaxFacetWidth`**
        : A _Double_ specifying the maximum facet width. The default value is 0.1.
        
        **`dMinFacetWidth`**
        : A _Double_ specifying the minimum facet width. The default value is 0.0.
        
        **`bICAD`**
        : A _Boolean_ specifying the i CAD. The default value is False.
        
        **`iVRMLColorGroups`**
        : An _Integer_ specifying the VRML color groups. The default value is 0.
        
        **`dScale`**
        : A _Double_ specifying the scale. The default value is 1.0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Home.ImportCAD.VRML(strlFiles, dChordHeightTolerance=0.0, dAngleToleranceDegree=0.0, iConvertIsolatedCurve=0, dSurfacePlaneTolerance=0.0, dSufacePlaneAngle=20.0, dMaxFacetWidth=0.1, dMinFacetWidth=0.0, bICAD=False, iVRMLColorGroups=0, dScale=1.0)
        ```
        
        """
        message = "Home.ImportCAD.VRML('{}',{},{},{},{},{},{},{},{},{},{})".format(strlFiles, dChordHeightTolerance, dAngleToleranceDegree, iConvertIsolatedCurve, dSurfacePlaneTolerance, dSufacePlaneAngle, dMaxFacetWidth, dMinFacetWidth, bICAD, iVRMLColorGroups, dScale)
        return JPT_RUN_LINE(message)

    def ProECreoDirect(self, strlPath, dChordHeightTolerance=0.0, dAngleToleranceDegree=20.0, dStepMaxSize=0.1):
        r"""
        ## Description
        
        import Creo by Direct
        
        ## Syntax
        
        ```python
        Home.ImportCAD.ProECreoDirect(strlPath, dChordHeightTolerance=0.0, dAngleToleranceDegree=20.0, dStepMaxSize=0.1)
        ```
        
        Macro: {ref}`Macro-Home-ImportCreo`
        
        Ribbon: {menuselection}`Home --> ImportCAD --> ProECreoDirect`
        
        ## Inputs
        
        **`strlPath`**
        : A _String List_ specifying the path. This is a required input.
        
        **`dChordHeightTolerance`**
        : A _Double_ specifying the chord height tolerance. The default value is 0.0.
        
        **`dAngleToleranceDegree`**
        : A _Double_ specifying the angle tolerance degree. The default value is 20.0.
        
        **`dStepMaxSize`**
        : A _Double_ specifying the step maximum size. The default value is 0.1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Home.ImportCAD.ProECreoDirect(strlPath, dChordHeightTolerance=0.0, dAngleToleranceDegree=20.0, dStepMaxSize=0.1)
        ```
        
        """
        message = "Home.ImportCAD.ProECreoDirect('{}',{},{},{})".format(strlPath, dChordHeightTolerance, dAngleToleranceDegree, dStepMaxSize)
        return JPT_RUN_LINE(message)

    def TechnoStarGeometry(self, strlPath=[], bUseUnit=True):
        r"""
        ## Description
        
        Import Geometry bdf file
        
        ## Syntax
        
        ```python
        Home.ImportCAD.TechnoStarGeometry(strlPath=[], bUseUnit=True)
        ```
        
        Macro: {ref}`Macro-Home-ImportGeomBDF`
        
        Ribbon: {menuselection}`Home --> ImportCAD --> TechnoStarGeometry`
        
        ## Inputs
        
        **`strlPath`**
        : A _String List_ specifying the path. The default value is [].
        
        **`bUseUnit`**
        : A _Boolean_ specifying the use unit. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Home.ImportCAD.TechnoStarGeometry(strlPath=[], bUseUnit=True)
        ```
        
        """
        message = "Home.ImportCAD.TechnoStarGeometry('{}',{})".format(strlPath, bUseUnit)
        return JPT_RUN_LINE(message)

class Home_ImportMesh:
    def ADVCADX(self, strPath, dFaceAngle=60.0, dEdgeAngle=60.0):
        r"""
        ## Description
        
        import adx files
        
        ## Syntax
        
        ```python
        Home.ImportMesh.ADVCADX(strPath, dFaceAngle=60.0, dEdgeAngle=60.0)
        ```
        
        Macro: {ref}`Macro-Home-ImportAdx`
        
        Ribbon: {menuselection}`Home --> ImportMesh --> ADVCADX`
        
        ## Inputs
        
        **`strPath`**
        : A _String_ specifying the path. This is a required input.
        
        **`dFaceAngle`**
        : A _Double_ specifying the face angle. The default value is 60.0.
        
        **`dEdgeAngle`**
        : A _Double_ specifying the edge angle. The default value is 60.0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Home.ImportMesh.ADVCADX(strPath, dFaceAngle=60.0, dEdgeAngle=60.0)
        ```
        
        """
        message = "Home.ImportMesh.ADVCADX('{}',{},{})".format(strPath, dFaceAngle, dEdgeAngle)
        return JPT_RUN_LINE(message)

    def AnsysDat(self, strlPath, dFaceAngle=60.0, dEdgeAngle=60.0):
        r"""
        ## Description
        
        Import Ansys file
        
        ## Syntax
        
        ```python
        Home.ImportMesh.AnsysDat(strlPath, dFaceAngle=60.0, dEdgeAngle=60.0)
        ```
        
        Macro: {ref}`Macro-Home-ImportAnsys`
        
        Ribbon: {menuselection}`Home --> ImportMesh --> AnsysDat`
        
        ## Inputs
        
        **`strlPath`**
        : A _String List_ specifying the path. This is a required input.
        
        **`dFaceAngle`**
        : A _Double_ specifying the face angle. The default value is 60.0.
        
        **`dEdgeAngle`**
        : A _Double_ specifying the edge angle. The default value is 60.0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Home.ImportMesh.AnsysDat(strlPath, dFaceAngle=60.0, dEdgeAngle=60.0)
        ```
        
        """
        message = "Home.ImportMesh.AnsysDat('{}',{},{})".format(strlPath, dFaceAngle, dEdgeAngle)
        return JPT_RUN_LINE(message)

    def NastranBdf(self, strlFilePaths, iImportType=2, dFaceAngle=60.0, dEdgeAngle=60.0, bReadNameComment=False, iCreateDup1DElemAnswer=-1):
        r"""
        ## Description
        
        import Nastran bdf file
        
        ## Syntax
        
        ```python
        Home.ImportMesh.NastranBdf(strlFilePaths, iImportType=2, dFaceAngle=60.0, dEdgeAngle=60.0, bReadNameComment=False, iCreateDup1DElemAnswer=-1)
        ```
        
        Macro: {ref}`Macro-Home-ImportBdf`
        
        Ribbon: {menuselection}`Home --> ImportMesh --> NastranBdf`
        
        ## Inputs
        
        **`strlFilePaths`**
        : A _String List_ specifying the file paths. This is a required input.
        
        **`iImportType`**
        : An _Integer_ specifying the import type. The default value is 2.
        
        **`dFaceAngle`**
        : A _Double_ specifying the face angle. The default value is 60.0.
        
        **`dEdgeAngle`**
        : A _Double_ specifying the edge angle. The default value is 60.0.
        
        **`bReadNameComment`**
        : A _Boolean_ specifying the read name comment. The default value is False.
        
        **`iCreateDup1DElemAnswer`**
        : An _Integer_ specifying the create dup1 d element answer. The default value is -1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Home.ImportMesh.NastranBdf(strlFilePaths, iImportType=2, dFaceAngle=60.0, dEdgeAngle=60.0, bReadNameComment=False, iCreateDup1DElemAnswer=-1)
        ```
        
        """
        message = "Home.ImportMesh.NastranBdf('{}',{},{},{},{},{})".format(strlFilePaths, iImportType, dFaceAngle, dEdgeAngle, bReadNameComment, iCreateDup1DElemAnswer)
        return JPT_RUN_LINE(message)

    def AbaqusINP(self, strlFilePaths, dFaceAngle=60.0, dEdgeAngle=60.0, iImportType=1):
        r"""
        ## Description
        
        import Abaqus INP file
        
        ## Syntax
        
        ```python
        Home.ImportMesh.AbaqusINP(strlFilePaths, dFaceAngle=60.0, dEdgeAngle=60.0, iImportType=1)
        ```
        
        Macro: {ref}`Macro-Home-ImportInp`
        
        Ribbon: {menuselection}`Home --> ImportMesh --> AbaqusINP`
        
        ## Inputs
        
        **`strlFilePaths`**
        : A _String List_ specifying the file paths. This is a required input.
        
        **`dFaceAngle`**
        : A _Double_ specifying the face angle. The default value is 60.0.
        
        **`dEdgeAngle`**
        : A _Double_ specifying the edge angle. The default value is 60.0.
        
        **`iImportType`**
        : An _Integer_ specifying the import type. The default value is 1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Home.ImportMesh.AbaqusINP(strlFilePaths, dFaceAngle=60.0, dEdgeAngle=60.0, iImportType=1)
        ```
        
        """
        message = "Home.ImportMesh.AbaqusINP('{}',{},{},{})".format(strlFilePaths, dFaceAngle, dEdgeAngle, iImportType)
        return JPT_RUN_LINE(message)

    def LSDYNA(self, strlPath, dFaceAngle=60.0, dEdgeAngle=60.0):
        r"""
        ## Description
        
        Import Ls-Dyna file
        
        ## Syntax
        
        ```python
        Home.ImportMesh.LSDYNA(strlPath, dFaceAngle=60.0, dEdgeAngle=60.0)
        ```
        
        Macro: {ref}`Macro-Home-ImportLsDyna`
        
        Ribbon: {menuselection}`Home --> ImportMesh --> LSDYNA`
        
        ## Inputs
        
        **`strlPath`**
        : A _String List_ specifying the path. This is a required input.
        
        **`dFaceAngle`**
        : A _Double_ specifying the face angle. The default value is 60.0.
        
        **`dEdgeAngle`**
        : A _Double_ specifying the edge angle. The default value is 60.0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Home.ImportMesh.LSDYNA(strlPath, dFaceAngle=60.0, dEdgeAngle=60.0)
        ```
        
        """
        message = "Home.ImportMesh.LSDYNA('{}',{},{})".format(strlPath, dFaceAngle, dEdgeAngle)
        return JPT_RUN_LINE(message)

    def Universal(self, strPath=""):
        r"""
        ## Description
        
        Import Universal
        
        ## Syntax
        
        ```python
        Home.ImportMesh.Universal(strPath="")
        ```
        
        Macro: {ref}`Macro-Home-ImportUnv`
        
        Ribbon: {menuselection}`Home --> ImportMesh --> Universal`
        
        ## Inputs
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Home.ImportMesh.Universal(strPath="")
        ```
        
        """
        message = "Home.ImportMesh.Universal('{}')".format(strPath)
        return JPT_RUN_LINE(message)

    def TSVPre(self, strImportPath="", strExportPath="", ilModelIndex=None, iMerge=None):
        r"""
        ## Description
        
        Convert a old TSV-Pre/Designer file into one or more jtdb files.
        
        ## Syntax
        
        ```python
        Home.ImportMesh.TSVPre(strImportPath="", strExportPath="", ilModelIndex=None, iMerge=None)
        ```
        
        Macro: {ref}`Macro-Home-ImportVDB`
        
        Ribbon: {menuselection}`Home --> ImportMesh --> TSVPre`
        
        ## Inputs
        
        **`strImportPath`**
        : A _String_ specifying the import path. The default value is "".
        
        **`strExportPath`**
        : A _String_ specifying the export path. The default value is "".
        
        **`ilModelIndex`**
        : A _Integer List_ specifying the model index. The default value is None.
        
        **`iMerge`**
        : An _Integer_ specifying the merge. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Home.ImportMesh.TSVPre(strImportPath="", strExportPath="", ilModelIndex=None, iMerge=None)
        ```
        
        """
        message = "Home.ImportMesh.TSVPre('{}','{}',{},{})".format(strImportPath, strExportPath, ilModelIndex, iMerge)
        return JPT_RUN_LINE(message)

class MainWindow_RightClick:
    def MergeFaces(self, crlFace, bIsMergeEdge=False, bRemoveNonBoundEdge=True):
        r"""
        ## Description
        
        Merge Faces
        
        ## Syntax
        
        ```python
        MainWindow.RightClick.MergeFaces(crlFace, bIsMergeEdge=False, bRemoveNonBoundEdge=True)
        ```
        
        Macro: {ref}`Macro-MainWindow-bMergeFace`
        
        Ribbon: {menuselection}`MainWindow --> RightClick --> MergeFaces`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. This is a required input.
        
        **`bIsMergeEdge`**
        : A _Boolean_ specifying the is merge edge. The default value is False.
        
        **`bRemoveNonBoundEdge`**
        : A _Boolean_ specifying the remove non boundary edge. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MainWindow.RightClick.MergeFaces(crlFace, bIsMergeEdge=False, bRemoveNonBoundEdge=True)
        ```
        
        """
        message = "MainWindow.RightClick.MergeFaces({},{},{})".format(crlFace, bIsMergeEdge, bRemoveNonBoundEdge)
        return JPT_RUN_LINE(message)

    def SelectAllParts(self, ):
        r"""
        ## Description
        
        Select all of the parts in the model
        
        ## Syntax
        
        ```python
        MainWindow.RightClick.SelectAllParts()
        ```
        
        Macro: {ref}`Macro-MainWindow-SelectAllParts`
        
        Ribbon: {menuselection}`MainWindow --> RightClick --> SelectAllParts`
        
        ## Inputs
        
        None
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MainWindow.RightClick.SelectAllParts()
        ```
        
        """
        message = "MainWindow.RightClick.SelectAllParts({})".format('')
        return JPT_RUN_LINE(message)

    def AssociatedPick(self, crlInput, strTarget, strConnect="UNKNOWN"):
        r"""
        ## Description
        
        pick associated entity
        
        ## Syntax
        
        ```python
        MainWindow.RightClick.AssociatedPick(crlInput, strTarget, strConnect="UNKNOWN")
        ```
        
        Macro: {ref}`Macro-MainWindow-AssociatedPick`
        
        Ribbon: {menuselection}`MainWindow --> RightClick --> AssociatedPick`
        
        ## Inputs
        
        **`crlInput`**
        : A _Cursor List_ specifying the input. This is a required input.
        
        **`strTarget`**
        : A _String_ specifying the target. This is a required input.
        
        **`strConnect`**
        : A _String_ specifying the connect. The default value is "UNKNOWN".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MainWindow.RightClick.AssociatedPick(crlInput, strTarget, strConnect="UNKNOWN")
        ```
        
        """
        message = "MainWindow.RightClick.AssociatedPick({},'{}','{}')".format(crlInput, strTarget, strConnect)
        return JPT_RUN_LINE(message)

    def FlipElement(self, crlTarget):
        r"""
        ## Description
        
        flip element
        
        ## Syntax
        
        ```python
        MainWindow.RightClick.FlipElement(crlTarget)
        ```
        
        Macro: {ref}`Macro-MainWindow-FlipElement`
        
        Ribbon: {menuselection}`MainWindow --> RightClick --> FlipElement`
        
        ## Inputs
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MainWindow.RightClick.FlipElement(crlTarget)
        ```
        
        """
        message = "MainWindow.RightClick.FlipElement({})".format(crlTarget)
        return JPT_RUN_LINE(message)

class ChangeTopology_Element:
    def SurfaceElement(self, ilElement, ilFace, ilPart, iCreateNewPart):
        r"""
        undefined
        """
        message = "MeshCleanup.ChangeTopology.Element.SurfaceElement({},{},{},{})".format(ilElement, ilFace, ilPart, iCreateNewPart)
        return JPT_RUN_LINE(message)

class Manual2D_MergeElement:
    def TwoQuadsToQuad(self, crlElem):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual2D.MergeElement.TwoQuadsToQuad({})".format(crlElem)
        return JPT_RUN_LINE(message)

    def TwoTrisToQuad(self, crlElem=[]):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual2D.MergeElement.TwoTrisToQuad({})".format(crlElem)
        return JPT_RUN_LINE(message)

class Manual2D_SplitElement:
    def QuadTo4Quads(self, crlElem=[], crDatumNode0=None, crDatumNode1=None, iMethod=0, iAutoExecute=0, iAutoTransition=0, iCADProject=0, iMergeNode=0):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual2D.SplitElement.QuadTo4Quads({},{},{},{},{},{},{},{})".format(crlElem, crDatumNode0, crDatumNode1, iMethod, iAutoExecute, iAutoTransition, iCADProject, iMergeNode)
        return JPT_RUN_LINE(message)

    def QuadToTrans4Quads(self, crlElem=[], crDatumNode0=None, crDatumNode1=None, iMethod=0, iAutoExecute=0, iAutoTransition=0, iCADProject=0, iMergeNode=0):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual2D.SplitElement.QuadToTrans4Quads({},{},{},{},{},{},{},{})".format(crlElem, crDatumNode0, crDatumNode1, iMethod, iAutoExecute, iAutoTransition, iCADProject, iMergeNode)
        return JPT_RUN_LINE(message)

    def QuadToTrans3Quads(self, crlElem=[], crDatumNode0=None, crDatumNode1=None, iMethod=0, iAutoExecute=0, iAutoTransition=0, iCADProject=0, iMergeNode=0):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual2D.SplitElement.QuadToTrans3Quads({},{},{},{},{},{},{},{})".format(crlElem, crDatumNode0, crDatumNode1, iMethod, iAutoExecute, iAutoTransition, iCADProject, iMergeNode)
        return JPT_RUN_LINE(message)

    def QuadTo2Quads1Tri(self, crlElem=[], crDatumNode0=None, crDatumNode1=None, iMethod=0, iAutoExecute=0, iAutoTransition=0, iCADProject=0, iMergeNode=0):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual2D.SplitElement.QuadTo2Quads1Tri({},{},{},{},{},{},{},{})".format(crlElem, crDatumNode0, crDatumNode1, iMethod, iAutoExecute, iAutoTransition, iCADProject, iMergeNode)
        return JPT_RUN_LINE(message)

    def QuadTo3Tris(self, crlElem=[], crDatumNode0=None, crDatumNode1=None, iMethod=0, iAutoExecute=0, iAutoTransition=0, iCADProject=0, iMergeNode=0):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual2D.SplitElement.QuadTo3Tris({},{},{},{},{},{},{},{})".format(crlElem, crDatumNode0, crDatumNode1, iMethod, iAutoExecute, iAutoTransition, iCADProject, iMergeNode)
        return JPT_RUN_LINE(message)

    def QuadTo2Quads(self, crlElem=[], crDatumNode0=None, crDatumNode1=None, iMethod=0, iAutoExecute=0, iAutoTransition=0, iCADProject=0, iMergeNode=0):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual2D.SplitElement.QuadTo2Quads({},{},{},{},{},{},{},{})".format(crlElem, crDatumNode0, crDatumNode1, iMethod, iAutoExecute, iAutoTransition, iCADProject, iMergeNode)
        return JPT_RUN_LINE(message)

    def QuadTo2Tris(self, crlElem=[], crDatumNode0=None, crDatumNode1=None, iMethod=0, iAutoExecute=0, iAutoTransition=0, iCADProject=0, iMergeNode=0):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual2D.SplitElement.QuadTo2Tris({},{},{},{},{},{},{},{})".format(crlElem, crDatumNode0, crDatumNode1, iMethod, iAutoExecute, iAutoTransition, iCADProject, iMergeNode)
        return JPT_RUN_LINE(message)

    def QuadToQuadTri(self, crlElem=[], crDatumNode0=None, crDatumNode1=None, iMethod=0, iAutoExecute=0, iAutoTransition=0, iCADProject=0, iMergeNode=0):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual2D.SplitElement.QuadToQuadTri({},{},{},{},{},{},{},{})".format(crlElem, crDatumNode0, crDatumNode1, iMethod, iAutoExecute, iAutoTransition, iCADProject, iMergeNode)
        return JPT_RUN_LINE(message)

    def QuadTo4Tris(self, crlElem=[], crDatumNode0=None, crDatumNode1=None, iMethod=0, iAutoExecute=0, iAutoTransition=0, iCADProject=0, iMergeNode=0):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual2D.SplitElement.QuadTo4Tris({},{},{},{},{},{},{},{})".format(crlElem, crDatumNode0, crDatumNode1, iMethod, iAutoExecute, iAutoTransition, iCADProject, iMergeNode)
        return JPT_RUN_LINE(message)

class Manual3D_Collapse:
    def CenterFaceCollapse(self, crlElem):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual3D.Collapse.CenterFaceCollapse({})".format(crlElem)
        return JPT_RUN_LINE(message)

    def HalfEdgeCollapse(self, crplElemEdge):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual3D.Collapse.HalfEdgeCollapse({})".format(crplElemEdge)
        return JPT_RUN_LINE(message)

    def EdgeCollapse(self, crplElemEdge=[], crlNode=[]):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual3D.Collapse.EdgeCollapse({},{})".format(crplElemEdge, crlNode)
        return JPT_RUN_LINE(message)

class MeshCleanup_Element:
    def SolidElement(self, crlElem, crPart=None):
        r"""
        undefined
        """
        message = "MeshCleanup.Element.SolidElement({},{})".format(crlElem, crPart)
        return JPT_RUN_LINE(message)

    def SurfaceElement(self, ilElement=[], ilFace=[], ilPart=[], iCreateNewPart=0):
        r"""
        undefined
        """
        message = "MeshCleanup.Element.SurfaceElement({},{},{},{})".format(ilElement, ilFace, ilPart, iCreateNewPart)
        return JPT_RUN_LINE(message)

class MeshCleanup_ChangeTopology:
    Element = ChangeTopology_Element()

class MeshCleanup_Cleanup:
    def CloseGap(self, crlPartCur, dDistanceTol):
        r"""
        undefined
        """
        message = "MeshCleanup.Cleanup.CloseGap({},{})".format(crlPartCur, dDistanceTol)
        return JPT_RUN_LINE(message)

class MeshCleanup_Manual2D:
    MergeElement = Manual2D_MergeElement()

    SplitElement = Manual2D_SplitElement()

    def Equivalence(self, crlNode, iTypeEquiva=0, dTolerance=1.0):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual2D.Equivalence({},{},{})".format(crlNode, iTypeEquiva, dTolerance)
        return JPT_RUN_LINE(message)

    def DeleteElement(self, crlElem, bKeepShareElem=False):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual2D.DeleteElement({},{})".format(crlElem, bKeepShareElem)
        return JPT_RUN_LINE(message)

    def Split(self, crplElemEdge, dRatio=0.0, crNodeRef=None, crProjectPart=None):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual2D.Split({},{},{},{})".format(crplElemEdge, dRatio, crNodeRef, crProjectPart)
        return JPT_RUN_LINE(message)

    def Swap(self, crplElemEdge=[]):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual2D.Swap({})".format(crplElemEdge)
        return JPT_RUN_LINE(message)

    def Collapse(self, crNodeRef=None, crNodeEq=None):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual2D.Collapse({},{})".format(crNodeRef, crNodeEq)
        return JPT_RUN_LINE(message)

    def CreateElement(self, iElemType=0, crParentEntity=None, crlNode=[]):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual2D.CreateElement({},{},{})".format(iElemType, crParentEntity, crlNode)
        return JPT_RUN_LINE(message)

    def RemeshElement(self, crlTarget=[], surfaceMesh=SURFACE_MESH(), bUseSetting=False, bGrading=False, bFMesher=False, iOverrideType=0, bKeepConnection=False, bProjCAD=False, bTinyFaceMerge=False, dMinFaceWidth=0, dMaxFaceWidth=0.001, bIDchcek=False, bKeepRemeshEdge=False):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual2D.RemeshElement({},{},{},{},{},{},{},{},{},{},{},{},{})".format(crlTarget, surfaceMesh, bUseSetting, bGrading, bFMesher, iOverrideType, bKeepConnection, bProjCAD, bTinyFaceMerge, dMinFaceWidth, dMaxFaceWidth, bIDchcek, bKeepRemeshEdge)
        return JPT_RUN_LINE(message)

class MeshCleanup_Manual3D:
    Collapse = Manual3D_Collapse()

    def DeleteNode(self, crlNode):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual3D.DeleteNode({})".format(crlNode)
        return JPT_RUN_LINE(message)

    def Swap(self, crplElemEdge):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual3D.Swap({})".format(crplElemEdge)
        return JPT_RUN_LINE(message)

    def Equivalence(self, crlNode=[], iMergeTowards=0):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual3D.Equivalence({},{})".format(crlNode, iMergeTowards)
        return JPT_RUN_LINE(message)

    def Split(self, crplElemEdge, crlNode=[], dRatioDistance=0.5):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual3D.Split({},{},{})".format(crplElemEdge, crlNode, dRatioDistance)
        return JPT_RUN_LINE(message)

    def CreateHex(self, iParentEntityId=0, crlElem=[], iSeprateN=1):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual3D.CreateHex({},{},{})".format(iParentEntityId, crlElem, iSeprateN)
        return JPT_RUN_LINE(message)

    def CreatePenta(self, iParentEntityId=0, crlElem=[]):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual3D.CreatePenta({},{})".format(iParentEntityId, crlElem)
        return JPT_RUN_LINE(message)

    def CreateTetra(self, iParentEntityId=0, crlNode=[], crlElem=[]):
        r"""
        undefined
        """
        message = "MeshCleanup.Manual3D.CreateTetra({},{},{})".format(iParentEntityId, crlNode, crlElem)
        return JPT_RUN_LINE(message)

class MeshCleanup_ManualCheck:
    def Tri(self, crlPart=[], nElemType=0, veQuality=0, nCheckCondition=0, dLimitValue=0.0, CFLValue=0.0, nNonManifold=0, nCleanupMode=0, crlElem=[]):
        r"""
        undefined
        """
        message = "MeshCleanup.ManualCheck.Tri({},{},{},{},{},{},{},{},{})".format(crlPart, nElemType, veQuality, nCheckCondition, dLimitValue, CFLValue, nNonManifold, nCleanupMode, crlElem)
        return JPT_RUN_LINE(message)

class MeshEdit_CreateElement:
    def Hex(self, iParentEntityId=0, crlElem=[], iSeprateN=1):
        r"""
        ## Description
        
        create hex8 elements
        
        ## Syntax
        
        ```python
        MeshEdit.CreateElement.Hex(iParentEntityId=0, crlElem=[], iSeprateN=1)
        ```
        
        Macro: {ref}`Macro-MeshEdit-CreateElementHEX8_ME`
        
        Ribbon: {menuselection}`MeshEdit --> CreateElement --> Hex`
        
        ## Inputs
        
        **`iParentEntityId`**
        : An _Integer_ specifying the parent entity ID. The default value is 0.
        
        **`crlElem`**
        : A _Cursor List_ specifying the element. The default value is [].
        
        **`iSeprateN`**
        : An _Integer_ specifying the seprate n. The default value is 1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.CreateElement.Hex(iParentEntityId=0, crlElem=[], iSeprateN=1)
        ```
        
        """
        message = "MeshEdit.CreateElement.Hex({},{},{})".format(iParentEntityId, crlElem, iSeprateN)
        return JPT_RUN_LINE(message)

    def Penta(self, iParentEntityId=0, crlElem=[]):
        r"""
        ## Description
        
        Create penta element
        
        ## Syntax
        
        ```python
        MeshEdit.CreateElement.Penta(iParentEntityId=0, crlElem=[])
        ```
        
        Macro: {ref}`Macro-MeshEdit-MeshEditCreatePenta`
        
        Ribbon: {menuselection}`MeshEdit --> CreateElement --> Penta`
        
        ## Inputs
        
        **`iParentEntityId`**
        : An _Integer_ specifying the parent entity ID. The default value is 0.
        
        **`crlElem`**
        : A _Cursor List_ specifying the element. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.CreateElement.Penta(iParentEntityId=0, crlElem=[])
        ```
        
        """
        message = "MeshEdit.CreateElement.Penta({},{})".format(iParentEntityId, crlElem)
        return JPT_RUN_LINE(message)

    def Tet(self, iParentEntityId=0, crlNode=[], crlElem=[]):
        r"""
        ## Description
        
        create element Tet
        
        ## Syntax
        
        ```python
        MeshEdit.CreateElement.Tet(iParentEntityId=0, crlNode=[], crlElem=[])
        ```
        
        Macro: {ref}`Macro-MeshEdit-CreateElementTET4_ME`
        
        Ribbon: {menuselection}`MeshEdit --> CreateElement --> Tet`
        
        ## Inputs
        
        **`iParentEntityId`**
        : An _Integer_ specifying the parent entity ID. The default value is 0.
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        **`crlElem`**
        : A _Cursor List_ specifying the element. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.CreateElement.Tet(iParentEntityId=0, crlNode=[], crlElem=[])
        ```
        
        """
        message = "MeshEdit.CreateElement.Tet({},{},{})".format(iParentEntityId, crlNode, crlElem)
        return JPT_RUN_LINE(message)

    def Tri3(self, iElemType=0, crParentEntity=None, crlNode=[]):
        r"""
        ## Description
        
        Create element
        
        ## Syntax
        
        ```python
        MeshEdit.CreateElement.Tri3(iElemType=0, crParentEntity=None, crlNode=[])
        ```
        
        Macro: {ref}`Macro-MeshEdit-CreateElementTRI3Cr`
        
        Ribbon: {menuselection}`MeshEdit --> CreateElement --> Tri3`
        
        ## Inputs
        
        **`iElemType`**
        : An _Integer_ specifying the element type. The default value is 0.
        
        **`crParentEntity`**
        : A _Cursor_ specifying the parent entity. The default value is None.
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.CreateElement.Tri3(iElemType=0, crParentEntity=None, crlNode=[])
        ```
        
        """
        message = "MeshEdit.CreateElement.Tri3({},{},{})".format(iElemType, crParentEntity, crlNode)
        return JPT_RUN_LINE(message)

    def Quad4(self, iElemType=0, crParentEntity=None, crlNode=[]):
        r"""
        ## Description
        
        Create element
        
        ## Syntax
        
        ```python
        MeshEdit.CreateElement.Quad4(iElemType=0, crParentEntity=None, crlNode=[])
        ```
        
        Macro: {ref}`Macro-MeshEdit-CreateElementQUAD4Cr`
        
        Ribbon: {menuselection}`MeshEdit --> CreateElement --> Quad4`
        
        ## Inputs
        
        **`iElemType`**
        : An _Integer_ specifying the element type. The default value is 0.
        
        **`crParentEntity`**
        : A _Cursor_ specifying the parent entity. The default value is None.
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.CreateElement.Quad4(iElemType=0, crParentEntity=None, crlNode=[])
        ```
        
        """
        message = "MeshEdit.CreateElement.Quad4({},{},{})".format(iElemType, crParentEntity, crlNode)
        return JPT_RUN_LINE(message)

class MeshEdit_CreateNode:
    def CircleCenter(self, crlEdge, iNodeID, bImprint=False, crFace=None):
        r"""
        ## Description
        
        create node at center of circle
        
        ## Syntax
        
        ```python
        MeshEdit.CreateNode.CircleCenter(crlEdge, iNodeID, bImprint=False, crFace=None)
        ```
        
        Macro: {ref}`Macro-MeshEdit-CreateNodeEdgeCenter`
        
        Ribbon: {menuselection}`MeshEdit --> CreateNode --> CircleCenter`
        
        ## Inputs
        
        **`crlEdge`**
        : A _Cursor List_ specifying the edge. This is a required input.
        
        **`iNodeID`**
        : An _Integer_ specifying the node ID. This is a required input.
        
        **`bImprint`**
        : A _Boolean_ specifying the imprint. The default value is False.
        
        **`crFace`**
        : A _Cursor_ specifying the face. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.CreateNode.CircleCenter(crlEdge, iNodeID, bImprint=False, crFace=None)
        ```
        
        """
        message = "MeshEdit.CreateNode.CircleCenter({},{},{},{})".format(crlEdge, iNodeID, bImprint, crFace)
        return JPT_RUN_LINE(message)

    def Absolute(self, veclNodeCoord=[], ilNewNodeID=[]):
        r"""
        ## Description
        
        create node by input direct value
        
        ## Syntax
        
        ```python
        MeshEdit.CreateNode.Absolute(veclNodeCoord=[], ilNewNodeID=[])
        ```
        
        Macro: {ref}`Macro-MeshEdit-CreateNode`
        
        Ribbon: {menuselection}`MeshEdit --> CreateNode --> Absolute`
        
        ## Inputs
        
        **`veclNodeCoord`**
        : A _Vector List_ specifying the node coordinate. The default value is [].
        
        **`ilNewNodeID`**
        : A _Integer List_ specifying the new node ID. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.CreateNode.Absolute(veclNodeCoord=[], ilNewNodeID=[])
        ```
        
        """
        message = "MeshEdit.CreateNode.Absolute({},{})".format(veclNodeCoord, ilNewNodeID)
        return JPT_RUN_LINE(message)

    def Import(self, strCsvFilePath):
        r"""
        ## Description
        
        create node by importing CSV file
        
        ## Syntax
        
        ```python
        MeshEdit.CreateNode.Import(strCsvFilePath)
        ```
        
        Macro: {ref}`Macro-MeshEdit-CreateNodeImport`
        
        Ribbon: {menuselection}`MeshEdit --> CreateNode --> Import`
        
        ## Inputs
        
        **`strCsvFilePath`**
        : A _String_ specifying the csv file path. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.CreateNode.Import(strCsvFilePath)
        ```
        
        """
        message = "MeshEdit.CreateNode.Import('{}')".format(strCsvFilePath)
        return JPT_RUN_LINE(message)

    def Point(self, iNodeID=1, posPoint=[0,0,0], bImprint=True, crShape=None):
        r"""
        ## Description
        
        create node point
        
        ## Syntax
        
        ```python
        MeshEdit.CreateNode.Point(iNodeID=1, posPoint=[0,0,0], bImprint=True, crShape=None)
        ```
        
        Macro: {ref}`Macro-MeshEdit-MeshEditCreateNodePoint`
        
        Ribbon: {menuselection}`MeshEdit --> CreateNode --> Point`
        
        ## Inputs
        
        **`iNodeID`**
        : An _Integer_ specifying the node ID. The default value is 1.
        
        **`posPoint`**
        : A _Position_ specifying the point. The default value is [0,0,0].
        
        **`bImprint`**
        : A _Boolean_ specifying the imprint. The default value is True.
        
        **`crShape`**
        : A _Cursor_ specifying the shape. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.CreateNode.Point(iNodeID=1, posPoint=[0,0,0], bImprint=True, crShape=None)
        ```
        
        """
        message = "MeshEdit.CreateNode.Point({},{},{},{})".format(iNodeID, posPoint, bImprint, crShape)
        return JPT_RUN_LINE(message)

    def Between2Nodes(self, iNodeID=0, dX=0.0, dY=0.0, dZ=0.0, iNumberofNodes=0, bImprint=False, crlNode=[], crlFace=[]):
        r"""
        ## Description
        
        create node point
        
        ## Syntax
        
        ```python
        MeshEdit.CreateNode.Between2Nodes(iNodeID=0, dX=0.0, dY=0.0, dZ=0.0, iNumberofNodes=0, bImprint=False, crlNode=[], crlFace=[])
        ```
        
        Macro: {ref}`Macro-MeshEdit-MeshEditCreateNodeBetween2Nodes`
        
        Ribbon: {menuselection}`MeshEdit --> CreateNode --> Between2Nodes`
        
        ## Inputs
        
        **`iNodeID`**
        : An _Integer_ specifying the node ID. The default value is 0.
        
        **`dX`**
        : A _Double_ specifying the x. The default value is 0.0.
        
        **`dY`**
        : A _Double_ specifying the y. The default value is 0.0.
        
        **`dZ`**
        : A _Double_ specifying the z. The default value is 0.0.
        
        **`iNumberofNodes`**
        : An _Integer_ specifying the number of nodes. The default value is 0.
        
        **`bImprint`**
        : A _Boolean_ specifying the imprint. The default value is False.
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.CreateNode.Between2Nodes(iNodeID=0, dX=0.0, dY=0.0, dZ=0.0, iNumberofNodes=0, bImprint=False, crlNode=[], crlFace=[])
        ```
        
        """
        message = "MeshEdit.CreateNode.Between2Nodes({},{},{},{},{},{},{},{})".format(iNodeID, dX, dY, dZ, iNumberofNodes, bImprint, crlNode, crlFace)
        return JPT_RUN_LINE(message)

    def Between3Nodes(self, iNodeID=0, dX=0.0, dY=0.0, dZ=0.0, bImprint=False, crlNode=[], crlFace=[]):
        r"""
        ## Description
        
        create node point
        
        ## Syntax
        
        ```python
        MeshEdit.CreateNode.Between3Nodes(iNodeID=0, dX=0.0, dY=0.0, dZ=0.0, bImprint=False, crlNode=[], crlFace=[])
        ```
        
        Macro: {ref}`Macro-MeshEdit-MeshEditCreateNodeBetween3Nodes`
        
        Ribbon: {menuselection}`MeshEdit --> CreateNode --> Between3Nodes`
        
        ## Inputs
        
        **`iNodeID`**
        : An _Integer_ specifying the node ID. The default value is 0.
        
        **`dX`**
        : A _Double_ specifying the x. The default value is 0.0.
        
        **`dY`**
        : A _Double_ specifying the y. The default value is 0.0.
        
        **`dZ`**
        : A _Double_ specifying the z. The default value is 0.0.
        
        **`bImprint`**
        : A _Boolean_ specifying the imprint. The default value is False.
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.CreateNode.Between3Nodes(iNodeID=0, dX=0.0, dY=0.0, dZ=0.0, bImprint=False, crlNode=[], crlFace=[])
        ```
        
        """
        message = "MeshEdit.CreateNode.Between3Nodes({},{},{},{},{},{},{})".format(iNodeID, dX, dY, dZ, bImprint, crlNode, crlFace)
        return JPT_RUN_LINE(message)

    def ProjectToPlane(self, dX=0.0, dY=0.0, dZ=0.0, crlNode=[], crlFace=[]):
        r"""
        ## Description
        
        create node point
        
        ## Syntax
        
        ```python
        MeshEdit.CreateNode.ProjectToPlane(dX=0.0, dY=0.0, dZ=0.0, crlNode=[], crlFace=[])
        ```
        
        Macro: {ref}`Macro-MeshEdit-MeshEditCreateNodeProjectNode`
        
        Ribbon: {menuselection}`MeshEdit --> CreateNode --> ProjectToPlane`
        
        ## Inputs
        
        **`dX`**
        : A _Double_ specifying the x. The default value is 0.0.
        
        **`dY`**
        : A _Double_ specifying the y. The default value is 0.0.
        
        **`dZ`**
        : A _Double_ specifying the z. The default value is 0.0.
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.CreateNode.ProjectToPlane(dX=0.0, dY=0.0, dZ=0.0, crlNode=[], crlFace=[])
        ```
        
        """
        message = "MeshEdit.CreateNode.ProjectToPlane({},{},{},{},{})".format(dX, dY, dZ, crlNode, crlFace)
        return JPT_RUN_LINE(message)

    def CenterOfCylinder(self, crlFace=[], iNodeID=1):
        r"""
        ## Description
        
        Create node of center cylinder
        
        ## Syntax
        
        ```python
        MeshEdit.CreateNode.CenterOfCylinder(crlFace=[], iNodeID=1)
        ```
        
        Macro: {ref}`Macro-MeshEdit-MeshEditCreateNodeCylindCenter`
        
        Ribbon: {menuselection}`MeshEdit --> CreateNode --> CenterOfCylinder`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`iNodeID`**
        : An _Integer_ specifying the node ID. The default value is 1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.CreateNode.CenterOfCylinder(crlFace=[], iNodeID=1)
        ```
        
        """
        message = "MeshEdit.CreateNode.CenterOfCylinder({},{})".format(crlFace, iNodeID)
        return JPT_RUN_LINE(message)

    def CenterOfSphere(self, crlNodeOrFace=[], iNodeID=1):
        r"""
        ## Description
        
        Create node of center sphere
        
        ## Syntax
        
        ```python
        MeshEdit.CreateNode.CenterOfSphere(crlNodeOrFace=[], iNodeID=1)
        ```
        
        Macro: {ref}`Macro-MeshEdit-MeshEditCreateNodeSphereCenter`
        
        Ribbon: {menuselection}`MeshEdit --> CreateNode --> CenterOfSphere`
        
        ## Inputs
        
        **`crlNodeOrFace`**
        : A _Cursor List_ specifying the node or face. The default value is [].
        
        **`iNodeID`**
        : An _Integer_ specifying the node ID. The default value is 1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.CreateNode.CenterOfSphere(crlNodeOrFace=[], iNodeID=1)
        ```
        
        """
        message = "MeshEdit.CreateNode.CenterOfSphere({},{})".format(crlNodeOrFace, iNodeID)
        return JPT_RUN_LINE(message)

    def Offset(self, vecOffset=[], iRep=1, crlNode=[], crCoord=None):
        r"""
        ## Description
        
        MeshEdit CreateNode CreateNodeNodeOffset
        
        ## Syntax
        
        ```python
        MeshEdit.CreateNode.Offset(vecOffset=[], iRep=1, crlNode=[], crCoord=None)
        ```
        
        Macro: {ref}`Macro-MeshEdit-CreateNodeOffset`
        
        Ribbon: {menuselection}`MeshEdit --> CreateNode --> Offset`
        
        ## Inputs
        
        **`vecOffset`**
        : A _Vector_ specifying the offset. The default value is [].
        
        **`iRep`**
        : An _Integer_ specifying the repeat times. The default value is 1.
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.CreateNode.Offset(vecOffset=[], iRep=1, crlNode=[], crCoord=None)
        ```
        
        """
        message = "MeshEdit.CreateNode.Offset({},{},{},{})".format(vecOffset, iRep, crlNode, crCoord)
        return JPT_RUN_LINE(message)

    def CenterOfGravity(self, iCreationType=1, iNodeID=0, dX=0.0, dY=0.0, dZ=0.0, crlPart=[], crlBarPart=[], crlFace=[]):
        r"""
        ## Description
        
        create node Center Of Gravity
        
        ## Syntax
        
        ```python
        MeshEdit.CreateNode.CenterOfGravity(iCreationType=1, iNodeID=0, dX=0.0, dY=0.0, dZ=0.0, crlPart=[], crlBarPart=[], crlFace=[])
        ```
        
        Macro: {ref}`Macro-MeshEdit-MeshEditCreateNodeCenterofGravity`
        
        Ribbon: {menuselection}`MeshEdit --> CreateNode --> CenterOfGravity`
        
        ## Inputs
        
        **`iCreationType`**
        : An _Integer_ specifying the creation type. The default value is 1.
        
        **`iNodeID`**
        : An _Integer_ specifying the node ID. The default value is 0.
        
        **`dX`**
        : A _Double_ specifying the x. The default value is 0.0.
        
        **`dY`**
        : A _Double_ specifying the y. The default value is 0.0.
        
        **`dZ`**
        : A _Double_ specifying the z. The default value is 0.0.
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`crlBarPart`**
        : A _Cursor List_ specifying the bar part. The default value is [].
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.CreateNode.CenterOfGravity(iCreationType=1, iNodeID=0, dX=0.0, dY=0.0, dZ=0.0, crlPart=[], crlBarPart=[], crlFace=[])
        ```
        
        """
        message = "MeshEdit.CreateNode.CenterOfGravity({},{},{},{},{},{},{},{})".format(iCreationType, iNodeID, dX, dY, dZ, crlPart, crlBarPart, crlFace)
        return JPT_RUN_LINE(message)

    def ProjectToLine(self, crlTa):
        r"""
        ## Description
        
        create node by projection to line
        
        ## Syntax
        
        ```python
        MeshEdit.CreateNode.ProjectToLine(crlTa)
        ```
        
        Macro: {ref}`Macro-MeshEdit-CreateNodeProjectToLine`
        
        Ribbon: {menuselection}`MeshEdit --> CreateNode --> ProjectToLine`
        
        ## Inputs
        
        **`crlTa`**
        : A _Cursor List_ specifying the list node. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.CreateNode.ProjectToLine(crlTa)
        ```
        
        """
        message = "MeshEdit.CreateNode.ProjectToLine({})".format(crlTa)
        return JPT_RUN_LINE(message)

    def IntersectionNode(self, crlFace, crlPart, crlEdge, crlNode):
        r"""
        ## Description
        
        create node by intersection node
        
        ## Syntax
        
        ```python
        MeshEdit.CreateNode.IntersectionNode(crlFace, crlPart, crlEdge, crlNode)
        ```
        
        Macro: {ref}`Macro-MeshEdit-CreateNodeIntersectionNode`
        
        Ribbon: {menuselection}`MeshEdit --> CreateNode --> IntersectionNode`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. This is a required input.
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. This is a required input.
        
        **`crlEdge`**
        : A _Cursor List_ specifying the edge. This is a required input.
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.CreateNode.IntersectionNode(crlFace, crlPart, crlEdge, crlNode)
        ```
        
        """
        message = "MeshEdit.CreateNode.IntersectionNode({},{},{},{})".format(crlFace, crlPart, crlEdge, crlNode)
        return JPT_RUN_LINE(message)

class MeshEdit_MoveNode:
    def Point(self, dX=0.0, dY=0.0, dZ=0.0, ilNodeList=[]):
        r"""
        ## Description
        
        Move node(s) to an Face(Edge) Point position
        
        ## Syntax
        
        ```python
        MeshEdit.MoveNode.Point(dX=0.0, dY=0.0, dZ=0.0, ilNodeList=[])
        ```
        
        Macro: {ref}`Macro-MeshEdit-MoveNodePoint`
        
        Ribbon: {menuselection}`MeshEdit --> MoveNode --> Point`
        
        ## Inputs
        
        **`dX`**
        : A _Double_ specifying the x. The default value is 0.0.
        
        **`dY`**
        : A _Double_ specifying the y. The default value is 0.0.
        
        **`dZ`**
        : A _Double_ specifying the z. The default value is 0.0.
        
        **`ilNodeList`**
        : A _Integer List_ specifying the node list. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.MoveNode.Point(dX=0.0, dY=0.0, dZ=0.0, ilNodeList=[])
        ```
        
        """
        message = "MeshEdit.MoveNode.Point({},{},{},{})".format(dX, dY, dZ, ilNodeList)
        return JPT_RUN_LINE(message)

    def ProjectToLine(self, crlRefNodes=[], crlObjNodes=[], iType=0):
        r"""
        ## Description
        
        move node by project to line
        
        ## Syntax
        
        ```python
        MeshEdit.MoveNode.ProjectToLine(crlRefNodes=[], crlObjNodes=[], iType=0)
        ```
        
        Macro: {ref}`Macro-MeshEdit-MoveNodeAlignNodeCr`
        
        Ribbon: {menuselection}`MeshEdit --> MoveNode --> ProjectToLine`
        
        ## Inputs
        
        **`crlRefNodes`**
        : A _Cursor List_ specifying the reference nodes. The default value is [].
        
        **`crlObjNodes`**
        : A _Cursor List_ specifying the object nodes. The default value is [].
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.MoveNode.ProjectToLine(crlRefNodes=[], crlObjNodes=[], iType=0)
        ```
        
        """
        message = "MeshEdit.MoveNode.ProjectToLine({},{},{})".format(crlRefNodes, crlObjNodes, iType)
        return JPT_RUN_LINE(message)

    def ProjectToPlaneElem(self, crlNode=[], crlElem=[]):
        r"""
        ## Description
        
        Move Node by Project to Plane(Elem)
        
        ## Syntax
        
        ```python
        MeshEdit.MoveNode.ProjectToPlaneElem(crlNode=[], crlElem=[])
        ```
        
        Macro: {ref}`Macro-MeshEdit-MoveNodeNode2PlanElemCr`
        
        Ribbon: {menuselection}`MeshEdit --> MoveNode --> ProjectToPlaneElem`
        
        ## Inputs
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        **`crlElem`**
        : A _Cursor List_ specifying the element. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.MoveNode.ProjectToPlaneElem(crlNode=[], crlElem=[])
        ```
        
        """
        message = "MeshEdit.MoveNode.ProjectToPlaneElem({},{})".format(crlNode, crlElem)
        return JPT_RUN_LINE(message)

    def Equalize(self, crlEdge=[]):
        r"""
        ## Description
        
        Move node by equalize
        
        ## Syntax
        
        ```python
        MeshEdit.MoveNode.Equalize(crlEdge=[])
        ```
        
        Macro: {ref}`Macro-MeshEdit-MeshEditMoveNodeEqualize`
        
        Ribbon: {menuselection}`MeshEdit --> MoveNode --> Equalize`
        
        ## Inputs
        
        **`crlEdge`**
        : A _Cursor List_ specifying the edge. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.MoveNode.Equalize(crlEdge=[])
        ```
        
        """
        message = "MeshEdit.MoveNode.Equalize({})".format(crlEdge)
        return JPT_RUN_LINE(message)

    def NormalOffset(self, dMagnitude=0.0, ilNodeList=[]):
        r"""
        ## Description
        
        Move node(s) in Normal Direction of plane
        
        ## Syntax
        
        ```python
        MeshEdit.MoveNode.NormalOffset(dMagnitude=0.0, ilNodeList=[])
        ```
        
        Macro: {ref}`Macro-MeshEdit-MoveNodeNormalOffset`
        
        Ribbon: {menuselection}`MeshEdit --> MoveNode --> NormalOffset`
        
        ## Inputs
        
        **`dMagnitude`**
        : A _Double_ specifying the magnitude. The default value is 0.0.
        
        **`ilNodeList`**
        : A _Integer List_ specifying the node list. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.MoveNode.NormalOffset(dMagnitude=0.0, ilNodeList=[])
        ```
        
        """
        message = "MeshEdit.MoveNode.NormalOffset({},{})".format(dMagnitude, ilNodeList)
        return JPT_RUN_LINE(message)

    def CoincidentNodes(self, crlNode=[], dTol=0.01, bDesOrder=False):
        r"""
        ## Description
        
        Coincident Nodes
        
        ## Syntax
        
        ```python
        MeshEdit.MoveNode.CoincidentNodes(crlNode=[], dTol=0.01, bDesOrder=False)
        ```
        
        Macro: {ref}`Macro-MeshEdit-Coincident_Nodes`
        
        Ribbon: {menuselection}`MeshEdit --> MoveNode --> CoincidentNodes`
        
        ## Inputs
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is 0.01.
        
        **`bDesOrder`**
        : A _Boolean_ specifying the des order. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.MoveNode.CoincidentNodes(crlNode=[], dTol=0.01, bDesOrder=False)
        ```
        
        """
        message = "MeshEdit.MoveNode.CoincidentNodes({},{},{})".format(crlNode, dTol, bDesOrder)
        return JPT_RUN_LINE(message)

    def AlongCylinder(self, crlFace=[], crlNode=[], dIrX=0, dIrY=0, dIrZ=0, dCircleX=0, dCircleY=0, dCircleZ=0, dRadius=0, dHeight=0):
        r"""
        ## Description
        
        Move node along cylinder surface
        
        ## Syntax
        
        ```python
        MeshEdit.MoveNode.AlongCylinder(crlFace=[], crlNode=[], dIrX=0, dIrY=0, dIrZ=0, dCircleX=0, dCircleY=0, dCircleZ=0, dRadius=0, dHeight=0)
        ```
        
        Macro: {ref}`Macro-MeshEdit-MoveNodeAlongCylinder`
        
        Ribbon: {menuselection}`MeshEdit --> MoveNode --> AlongCylinder`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        **`dIrX`**
        : A _Double_ specifying the direction x. The default value is 0.
        
        **`dIrY`**
        : A _Double_ specifying the direction y. The default value is 0.
        
        **`dIrZ`**
        : A _Double_ specifying the direction z. The default value is 0.
        
        **`dCircleX`**
        : A _Double_ specifying the circle x. The default value is 0.
        
        **`dCircleY`**
        : A _Double_ specifying the circle y. The default value is 0.
        
        **`dCircleZ`**
        : A _Double_ specifying the circle z. The default value is 0.
        
        **`dRadius`**
        : A _Double_ specifying the radius. The default value is 0.
        
        **`dHeight`**
        : A _Double_ specifying the height. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.MoveNode.AlongCylinder(crlFace=[], crlNode=[], dIrX=0, dIrY=0, dIrZ=0, dCircleX=0, dCircleY=0, dCircleZ=0, dRadius=0, dHeight=0)
        ```
        
        """
        message = "MeshEdit.MoveNode.AlongCylinder({},{},{},{},{},{},{},{},{},{})".format(crlFace, crlNode, dIrX, dIrY, dIrZ, dCircleX, dCircleY, dCircleZ, dRadius, dHeight)
        return JPT_RUN_LINE(message)

    def ProjectToPlane_3Nodes(self, ilNodeList=[]):
        r"""
        ## Description
        
        Move Nodes from Node to 3 nodes created Plane
        
        ## Syntax
        
        ```python
        MeshEdit.MoveNode.ProjectToPlane_3Nodes(ilNodeList=[])
        ```
        
        Macro: {ref}`Macro-MeshEdit-MoveNodeNode2PlanNodes`
        
        Ribbon: {menuselection}`MeshEdit --> MoveNode --> ProjectToPlane_3Nodes`
        
        ## Inputs
        
        **`ilNodeList`**
        : A _Integer List_ specifying the node list. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.MoveNode.ProjectToPlane_3Nodes(ilNodeList=[])
        ```
        
        """
        message = "MeshEdit.MoveNode.ProjectToPlane_3Nodes({})".format(ilNodeList)
        return JPT_RUN_LINE(message)

    def MoveNodeOffset(self, dDeltaX, dDeltaY, dDeltaZ, crlNode, crCoord):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        MeshEdit.MoveNode.MoveNodeOffset(dDeltaX, dDeltaY, dDeltaZ, crlNode, crCoord)
        ```
        
        Macro: {ref}`Macro-MeshEdit-MoveNodeOffset`
        
        Ribbon: {menuselection}`MeshEdit --> MoveNode --> MoveNodeOffset`
        
        ## Inputs
        
        **`dDeltaX`**
        : A _Double_ specifying the delta x. This is a required input.
        
        **`dDeltaY`**
        : A _Double_ specifying the delta y. This is a required input.
        
        **`dDeltaZ`**
        : A _Double_ specifying the delta z. This is a required input.
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. This is a required input.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.MoveNode.MoveNodeOffset(dDeltaX, dDeltaY, dDeltaZ, crlNode, crCoord)
        ```
        
        """
        message = "MeshEdit.MoveNode.MoveNodeOffset({},{},{},{},{})".format(dDeltaX, dDeltaY, dDeltaZ, crlNode, crCoord)
        return JPT_RUN_LINE(message)

    def RefineQuality(self, iMetric=0, crlFace=[], crlElem=[], crlNode=[]):
        r"""
        ## Description
        
        MeshEdit RefineQuality
        
        ## Syntax
        
        ```python
        MeshEdit.MoveNode.RefineQuality(iMetric=0, crlFace=[], crlElem=[], crlNode=[])
        ```
        
        Macro: {ref}`Macro-MeshEdit-MeshEditMoveNodeRefineQuality`
        
        Ribbon: {menuselection}`MeshEdit --> MoveNode --> RefineQuality`
        
        ## Inputs
        
        **`iMetric`**
        : An _Integer_ specifying the metric. The default value is 0.
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`crlElem`**
        : A _Cursor List_ specifying the element. The default value is [].
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.MoveNode.RefineQuality(iMetric=0, crlFace=[], crlElem=[], crlNode=[])
        ```
        
        """
        message = "MeshEdit.MoveNode.RefineQuality({},{},{},{})".format(iMetric, crlFace, crlElem, crlNode)
        return JPT_RUN_LINE(message)

    def StraightenMidnodes(self, crlPart=[], crlFace=[], crlEdge=[], crlNode=[]):
        r"""
        ## Description
        
        move node by straighten_mid_nodes
        
        ## Syntax
        
        ```python
        MeshEdit.MoveNode.StraightenMidnodes(crlPart=[], crlFace=[], crlEdge=[], crlNode=[])
        ```
        
        Macro: {ref}`Macro-MeshEdit-MoveNodeStraightenMidNodesCr`
        
        Ribbon: {menuselection}`MeshEdit --> MoveNode --> StraightenMidnodes`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`crlEdge`**
        : A _Cursor List_ specifying the edge. The default value is [].
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.MoveNode.StraightenMidnodes(crlPart=[], crlFace=[], crlEdge=[], crlNode=[])
        ```
        
        """
        message = "MeshEdit.MoveNode.StraightenMidnodes({},{},{},{})".format(crlPart, crlFace, crlEdge, crlNode)
        return JPT_RUN_LINE(message)

    def Offset(self, dDeltaX=0.0, dDeltaY=0.0, dDeltaZ=0.0, crCoord=None, crlNode=[]):
        r"""
        ## Description
        
        MeshEdit MoveNode MoveNodeOffset
        
        ## Syntax
        
        ```python
        MeshEdit.MoveNode.Offset(dDeltaX=0.0, dDeltaY=0.0, dDeltaZ=0.0, crCoord=None, crlNode=[])
        ```
        
        Macro: {ref}`Macro-MeshEdit-MeshEditMoveNodeOffset`
        
        Ribbon: {menuselection}`MeshEdit --> MoveNode --> Offset`
        
        ## Inputs
        
        **`dDeltaX`**
        : A _Double_ specifying the delta x. The default value is 0.0.
        
        **`dDeltaY`**
        : A _Double_ specifying the delta y. The default value is 0.0.
        
        **`dDeltaZ`**
        : A _Double_ specifying the delta z. The default value is 0.0.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.MoveNode.Offset(dDeltaX=0.0, dDeltaY=0.0, dDeltaZ=0.0, crCoord=None, crlNode=[])
        ```
        
        """
        message = "MeshEdit.MoveNode.Offset({},{},{},{},{})".format(dDeltaX, dDeltaY, dDeltaZ, crCoord, crlNode)
        return JPT_RUN_LINE(message)

    def Laplacian(self, crlTarget=[], iType=0, bWithCADFollow=False):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        MeshEdit.MoveNode.Laplacian(crlTarget=[], iType=0, bWithCADFollow=False)
        ```
        
        Macro: {ref}`Macro-MeshEdit-LaplacianSmooth`
        
        Ribbon: {menuselection}`MeshEdit --> MoveNode --> Laplacian`
        
        ## Inputs
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 0.
        
        **`bWithCADFollow`**
        : A _Boolean_ specifying the with CAD follow. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.MoveNode.Laplacian(crlTarget=[], iType=0, bWithCADFollow=False)
        ```
        
        """
        message = "MeshEdit.MoveNode.Laplacian({},{},{})".format(crlTarget, iType, bWithCADFollow)
        return JPT_RUN_LINE(message)

    def AlongEdge(self, crlNode=[], bMoveX=False, bMoveY=False, bMoveZ=False, dPosX=0.0, dPosY=0.0, dPosZ=0.0, iMoveType=0):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        MeshEdit.MoveNode.AlongEdge(crlNode=[], bMoveX=False, bMoveY=False, bMoveZ=False, dPosX=0.0, dPosY=0.0, dPosZ=0.0, iMoveType=0)
        ```
        
        Macro: {ref}`Macro-MeshEdit-MeshEditMoveNodeOnEdge`
        
        Ribbon: {menuselection}`MeshEdit --> MoveNode --> AlongEdge`
        
        ## Inputs
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        **`bMoveX`**
        : A _Boolean_ specifying the move x. The default value is False.
        
        **`bMoveY`**
        : A _Boolean_ specifying the move y. The default value is False.
        
        **`bMoveZ`**
        : A _Boolean_ specifying the move z. The default value is False.
        
        **`dPosX`**
        : A _Double_ specifying the position x. The default value is 0.0.
        
        **`dPosY`**
        : A _Double_ specifying the position y. The default value is 0.0.
        
        **`dPosZ`**
        : A _Double_ specifying the position z. The default value is 0.0.
        
        **`iMoveType`**
        : An _Integer_ specifying the move type. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.MoveNode.AlongEdge(crlNode=[], bMoveX=False, bMoveY=False, bMoveZ=False, dPosX=0.0, dPosY=0.0, dPosZ=0.0, iMoveType=0)
        ```
        
        """
        message = "MeshEdit.MoveNode.AlongEdge({},{},{},{},{},{},{},{})".format(crlNode, bMoveX, bMoveY, bMoveZ, dPosX, dPosY, dPosZ, iMoveType)
        return JPT_RUN_LINE(message)

    def AlongDirection(self, crlNode=[], crElem=None, crFace=None, vecDirection=[0,0,0], dMagnitude=0.0, bDestination=False):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        MeshEdit.MoveNode.AlongDirection(crlNode=[], crElem=None, crFace=None, vecDirection=[0,0,0], dMagnitude=0.0, bDestination=False)
        ```
        
        Macro: {ref}`Macro-MeshEdit-NodeMovedByDirection`
        
        Ribbon: {menuselection}`MeshEdit --> MoveNode --> AlongDirection`
        
        ## Inputs
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        **`crElem`**
        : A _Cursor_ specifying the element. The default value is None.
        
        **`crFace`**
        : A _Cursor_ specifying the face. The default value is None.
        
        **`vecDirection`**
        : A _Vector_ specifying the direction. The default value is [0,0,0].
        
        **`dMagnitude`**
        : A _Double_ specifying the magnitude. The default value is 0.0.
        
        **`bDestination`**
        : A _Boolean_ specifying the destination. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.MoveNode.AlongDirection(crlNode=[], crElem=None, crFace=None, vecDirection=[0,0,0], dMagnitude=0.0, bDestination=False)
        ```
        
        """
        message = "MeshEdit.MoveNode.AlongDirection({},{},{},{},{},{})".format(crlNode, crElem, crFace, vecDirection, dMagnitude, bDestination)
        return JPT_RUN_LINE(message)

    def CADFollows(self, crlNode=[], dMovedPosX=0.0, dMovedPosY=0.0, dMovedPosZ=0.0):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        MeshEdit.MoveNode.CADFollows(crlNode=[], dMovedPosX=0.0, dMovedPosY=0.0, dMovedPosZ=0.0)
        ```
        
        Macro: {ref}`Macro-MeshEdit-MoveNodeCADFollows`
        
        Ribbon: {menuselection}`MeshEdit --> MoveNode --> CADFollows`
        
        ## Inputs
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        **`dMovedPosX`**
        : A _Double_ specifying the moved position x. The default value is 0.0.
        
        **`dMovedPosY`**
        : A _Double_ specifying the moved position y. The default value is 0.0.
        
        **`dMovedPosZ`**
        : A _Double_ specifying the moved position z. The default value is 0.0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.MoveNode.CADFollows(crlNode=[], dMovedPosX=0.0, dMovedPosY=0.0, dMovedPosZ=0.0)
        ```
        
        """
        message = "MeshEdit.MoveNode.CADFollows({},{},{},{})".format(crlNode, dMovedPosX, dMovedPosY, dMovedPosZ)
        return JPT_RUN_LINE(message)

    def Scale(self, crlNode=[], crlNodeOrigin=[], crCoord=None, posDeltaXYZ=[10.0, 10.0, 10.0]):
        r"""
        ## Description
        
        Move node scale
        
        ## Syntax
        
        ```python
        MeshEdit.MoveNode.Scale(crlNode=[], crlNodeOrigin=[], crCoord=None, posDeltaXYZ=[10.0, 10.0, 10.0])
        ```
        
        Macro: {ref}`Macro-MeshEdit-MeshEditMoveNodeScale`
        
        Ribbon: {menuselection}`MeshEdit --> MoveNode --> Scale`
        
        ## Inputs
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        **`crlNodeOrigin`**
        : A _Cursor List_ specifying the node original. The default value is [].
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`posDeltaXYZ`**
        : A _Position_ specifying the delta x y z. The default value is [10.0, 10.0, 10.0].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.MoveNode.Scale(crlNode=[], crlNodeOrigin=[], crCoord=None, posDeltaXYZ=[10.0, 10.0, 10.0])
        ```
        
        """
        message = "MeshEdit.MoveNode.Scale({},{},{},{})".format(crlNode, crlNodeOrigin, crCoord, posDeltaXYZ)
        return JPT_RUN_LINE(message)

    def Absolute(self, dDeltaX=0.0, dDeltaY=0.0, dDeltaZ=0.0, b1stCoord=True, b2ndCoord=True, b3rdCoord=True, crlNode=[], crCoord=None):
        r"""
        ## Description
        
        move node absolute
        
        ## Syntax
        
        ```python
        MeshEdit.MoveNode.Absolute(dDeltaX=0.0, dDeltaY=0.0, dDeltaZ=0.0, b1stCoord=True, b2ndCoord=True, b3rdCoord=True, crlNode=[], crCoord=None)
        ```
        
        Macro: {ref}`Macro-MeshEdit-MoveNodeAbsoluteCr`
        
        Ribbon: {menuselection}`MeshEdit --> MoveNode --> Absolute`
        
        ## Inputs
        
        **`dDeltaX`**
        : A _Double_ specifying the delta x. The default value is 0.0.
        
        **`dDeltaY`**
        : A _Double_ specifying the delta y. The default value is 0.0.
        
        **`dDeltaZ`**
        : A _Double_ specifying the delta z. The default value is 0.0.
        
        **`b1stCoord`**
        : A _B1ST_COORD_ specifying the coordinate. The default value is True.
        
        **`b2ndCoord`**
        : A _B2ND_COORD_ specifying the coordinate. The default value is True.
        
        **`b3rdCoord`**
        : A _B3RD_COORD_ specifying the coordinate. The default value is True.
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.MoveNode.Absolute(dDeltaX=0.0, dDeltaY=0.0, dDeltaZ=0.0, b1stCoord=True, b2ndCoord=True, b3rdCoord=True, crlNode=[], crCoord=None)
        ```
        
        """
        message = "MeshEdit.MoveNode.Absolute({},{},{},{},{},{},{},{})".format(dDeltaX, dDeltaY, dDeltaZ, b1stCoord, b2ndCoord, b3rdCoord, crlNode, crCoord)
        return JPT_RUN_LINE(message)

class Meshing_CADProjection:
    def Part(self, iMethod=1, crCadPart=None, crMeshedPart=None, bForceProject=False, bProjectCornerNodes=True, bProjectMidNodes=False, bIDcheck=False):
        r"""
        ## Description
        
        CadProject for Part
        
        ## Syntax
        
        ```python
        Meshing.CADProjection.Part(iMethod=1, crCadPart=None, crMeshedPart=None, bForceProject=False, bProjectCornerNodes=True, bProjectMidNodes=False, bIDcheck=False)
        ```
        
        Macro: {ref}`Macro-Meshing-CadProject_Part`
        
        Ribbon: {menuselection}`Meshing --> CADProjection --> Part`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 1.
        
        **`crCadPart`**
        : A _Cursor_ specifying the CAD part. The default value is None.
        
        **`crMeshedPart`**
        : A _Cursor_ specifying the meshed part. The default value is None.
        
        **`bForceProject`**
        : A _Boolean_ specifying the force project. The default value is False.
        
        **`bProjectCornerNodes`**
        : A _Boolean_ specifying the project corner nodes. The default value is True.
        
        **`bProjectMidNodes`**
        : A _Boolean_ specifying the project mid nodes. The default value is False.
        
        **`bIDcheck`**
        : A _Boolean_ specifying the i dcheck. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Meshing.CADProjection.Part(iMethod=1, crCadPart=None, crMeshedPart=None, bForceProject=False, bProjectCornerNodes=True, bProjectMidNodes=False, bIDcheck=False)
        ```
        
        """
        message = "Meshing.CADProjection.Part({},{},{},{},{},{},{})".format(iMethod, crCadPart, crMeshedPart, bForceProject, bProjectCornerNodes, bProjectMidNodes, bIDcheck)
        return JPT_RUN_LINE(message)

    def Face(self, iMethod=2, crCadPart=None, crlMeshedFace=[], bForceProject=False, bProjectCornerNodes=True, bProjectMidNodes=False, bIDcheck=False):
        r"""
        ## Description
        
        CadProject for Face
        
        ## Syntax
        
        ```python
        Meshing.CADProjection.Face(iMethod=2, crCadPart=None, crlMeshedFace=[], bForceProject=False, bProjectCornerNodes=True, bProjectMidNodes=False, bIDcheck=False)
        ```
        
        Macro: {ref}`Macro-Meshing-CadProject_Face`
        
        Ribbon: {menuselection}`Meshing --> CADProjection --> Face`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 2.
        
        **`crCadPart`**
        : A _Cursor_ specifying the CAD part. The default value is None.
        
        **`crlMeshedFace`**
        : A _Cursor List_ specifying the meshed face. The default value is [].
        
        **`bForceProject`**
        : A _Boolean_ specifying the force project. The default value is False.
        
        **`bProjectCornerNodes`**
        : A _Boolean_ specifying the project corner nodes. The default value is True.
        
        **`bProjectMidNodes`**
        : A _Boolean_ specifying the project mid nodes. The default value is False.
        
        **`bIDcheck`**
        : A _Boolean_ specifying the ID check. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Meshing.CADProjection.Face(iMethod=2, crCadPart=None, crlMeshedFace=[], bForceProject=False, bProjectCornerNodes=True, bProjectMidNodes=False, bIDcheck=False)
        ```
        
        """
        message = "Meshing.CADProjection.Face({},{},{},{},{},{},{})".format(iMethod, crCadPart, crlMeshedFace, bForceProject, bProjectCornerNodes, bProjectMidNodes, bIDcheck)
        return JPT_RUN_LINE(message)

    def FaceToFace(self, iMethod=3, crlCadFace=[], crlMeshedFace=[], bForceProject=False, bProjectCornerNodes=True, bProjectMidNodes=False, bIDcheck=False):
        r"""
        ## Description
        
        CadProject for Fact to Face
        
        ## Syntax
        
        ```python
        Meshing.CADProjection.FaceToFace(iMethod=3, crlCadFace=[], crlMeshedFace=[], bForceProject=False, bProjectCornerNodes=True, bProjectMidNodes=False, bIDcheck=False)
        ```
        
        Macro: {ref}`Macro-Meshing-CadProject_FaceToFace`
        
        Ribbon: {menuselection}`Meshing --> CADProjection --> FaceToFace`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 3.
        
        **`crlCadFace`**
        : A _Cursor List_ specifying the CAD face. The default value is [].
        
        **`crlMeshedFace`**
        : A _Cursor List_ specifying the meshed face. The default value is [].
        
        **`bForceProject`**
        : A _Boolean_ specifying the force project. The default value is False.
        
        **`bProjectCornerNodes`**
        : A _Boolean_ specifying the project corner nodes. The default value is True.
        
        **`bProjectMidNodes`**
        : A _Boolean_ specifying the project mid nodes. The default value is False.
        
        **`bIDcheck`**
        : A _Boolean_ specifying the ID check. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Meshing.CADProjection.FaceToFace(iMethod=3, crlCadFace=[], crlMeshedFace=[], bForceProject=False, bProjectCornerNodes=True, bProjectMidNodes=False, bIDcheck=False)
        ```
        
        """
        message = "Meshing.CADProjection.FaceToFace({},{},{},{},{},{},{})".format(iMethod, crlCadFace, crlMeshedFace, bForceProject, bProjectCornerNodes, bProjectMidNodes, bIDcheck)
        return JPT_RUN_LINE(message)

    def NodeToFace(self, iMethod=4, crlCadFace=[], crlMeshedNode=[], iDirection=0, iImproveQuality=0):
        r"""
        ## Description
        
        CadProject for Node to Face
        
        ## Syntax
        
        ```python
        Meshing.CADProjection.NodeToFace(iMethod=4, crlCadFace=[], crlMeshedNode=[], iDirection=0, iImproveQuality=0)
        ```
        
        Macro: {ref}`Macro-Meshing-CadProject_NodeToFace`
        
        Ribbon: {menuselection}`Meshing --> CADProjection --> NodeToFace`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 4.
        
        **`crlCadFace`**
        : A _Cursor List_ specifying the CAD face. The default value is [].
        
        **`crlMeshedNode`**
        : A _Cursor List_ specifying the meshed node. The default value is [].
        
        **`iDirection`**
        : An _Integer_ specifying the direction. The default value is 0.
        
        **`iImproveQuality`**
        : An _Integer_ specifying the improve quality. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Meshing.CADProjection.NodeToFace(iMethod=4, crlCadFace=[], crlMeshedNode=[], iDirection=0, iImproveQuality=0)
        ```
        
        """
        message = "Meshing.CADProjection.NodeToFace({},{},{},{},{})".format(iMethod, crlCadFace, crlMeshedNode, iDirection, iImproveQuality)
        return JPT_RUN_LINE(message)

    def NodeToEdge(self, iMethod=5, crCadEdge=None, crlMeshedNode=[], iDirection=0):
        r"""
        ## Description
        
        CadProject for Node to Edge
        
        ## Syntax
        
        ```python
        Meshing.CADProjection.NodeToEdge(iMethod=5, crCadEdge=None, crlMeshedNode=[], iDirection=0)
        ```
        
        Macro: {ref}`Macro-Meshing-CadProject_NodeToEdge`
        
        Ribbon: {menuselection}`Meshing --> CADProjection --> NodeToEdge`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 5.
        
        **`crCadEdge`**
        : A _Cursor_ specifying the CAD edge. The default value is None.
        
        **`crlMeshedNode`**
        : A _Cursor List_ specifying the meshed node. The default value is [].
        
        **`iDirection`**
        : An _Integer_ specifying the direction. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Meshing.CADProjection.NodeToEdge(iMethod=5, crCadEdge=None, crlMeshedNode=[], iDirection=0)
        ```
        
        """
        message = "Meshing.CADProjection.NodeToEdge({},{},{},{})".format(iMethod, crCadEdge, crlMeshedNode, iDirection)
        return JPT_RUN_LINE(message)

class Meshing_LocalMeshing:
    def FilletMapping(self, crlFace=[], iIsoDiv=4, dIsoSize=5, dIsoError=0.5):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Meshing.LocalMeshing.FilletMapping(crlFace=[], iIsoDiv=4, dIsoSize=5, dIsoError=0.5)
        ```
        
        Macro: {ref}`Macro-Meshing-MeshingLocalMeshingFilletMapped`
        
        Ribbon: {menuselection}`Meshing --> LocalMeshing --> FilletMapping`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`iIsoDiv`**
        : An _Integer_ specifying the iso divide. The default value is 4.
        
        **`dIsoSize`**
        : A _Double_ specifying the iso size. The default value is 5.
        
        **`dIsoError`**
        : A _Double_ specifying the iso error. The default value is 0.5.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Meshing.LocalMeshing.FilletMapping(crlFace=[], iIsoDiv=4, dIsoSize=5, dIsoError=0.5)
        ```
        
        """
        message = "Meshing.LocalMeshing.FilletMapping({},{},{},{})".format(crlFace, iIsoDiv, dIsoSize, dIsoError)
        return JPT_RUN_LINE(message)

    def SelectFillet(self, crlItems=[], dSelectWidthMin=1, dSelectWidthMax=10, dSelectRMin=1, dSelectRMax=10, dAngleMin=0.0, dAngleMax=171.0, bConvex=True, bConcave=True):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Meshing.LocalMeshing.SelectFillet(crlItems=[], dSelectWidthMin=1, dSelectWidthMax=10, dSelectRMin=1, dSelectRMax=10, dAngleMin=0.0, dAngleMax=171.0, bConvex=True, bConcave=True)
        ```
        
        Macro: {ref}`Macro-Meshing-MeshingLocalMeshingFilletSelect`
        
        Ribbon: {menuselection}`Meshing --> LocalMeshing --> SelectFillet`
        
        ## Inputs
        
        **`crlItems`**
        : A _Cursor List_ specifying the items. The default value is [].
        
        **`dSelectWidthMin`**
        : A _Double_ specifying the select width minimum. The default value is 1.
        
        **`dSelectWidthMax`**
        : A _Double_ specifying the select width maximum. The default value is 10.
        
        **`dSelectRMin`**
        : A _Double_ specifying the select radius minimum. The default value is 1.
        
        **`dSelectRMax`**
        : A _Double_ specifying the select radius maximum. The default value is 10.
        
        **`dAngleMin`**
        : A _Double_ specifying the angle minimum. The default value is 0.0.
        
        **`dAngleMax`**
        : A _Double_ specifying the angle maximum. The default value is 171.0.
        
        **`bConvex`**
        : A _Boolean_ specifying the convex. The default value is True.
        
        **`bConcave`**
        : A _Boolean_ specifying the concave. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Meshing.LocalMeshing.SelectFillet(crlItems=[], dSelectWidthMin=1, dSelectWidthMax=10, dSelectRMin=1, dSelectRMax=10, dAngleMin=0.0, dAngleMax=171.0, bConvex=True, bConcave=True)
        ```
        
        """
        message = "Meshing.LocalMeshing.SelectFillet({},{},{},{},{},{},{},{},{})".format(crlItems, dSelectWidthMin, dSelectWidthMax, dSelectRMin, dSelectRMax, dAngleMin, dAngleMax, bConvex, bConcave)
        return JPT_RUN_LINE(message)

class Meshing_LocalSetting:
    def SearchTargetFaces(self, iPartType=0, dlOrigin=[0, 0, 0], dlLength=[0.1, 0.1, 0.1], dlCenterPt=[0.0,0.0,0.0], dlAxisPt1=[0.0,0.0,0.1], dlAxisPt2=[0.0,0.0,0.0], bEnclosed=False):
        r"""
        ## Description
        
        Search Target Faces for Local mesh setting
        
        ## Syntax
        
        ```python
        Meshing.LocalSetting.SearchTargetFaces(iPartType=0, dlOrigin=[0, 0, 0], dlLength=[0.1, 0.1, 0.1], dlCenterPt=[0.0,0.0,0.0], dlAxisPt1=[0.0,0.0,0.1], dlAxisPt2=[0.0,0.0,0.0], bEnclosed=False)
        ```
        
        Macro: {ref}`Macro-Meshing-SearchTargetFacesInModel`
        
        Ribbon: {menuselection}`Meshing --> LocalSetting --> SearchTargetFaces`
        
        ## Inputs
        
        **`iPartType`**
        : An _Integer_ specifying the part type. The default value is 0.
        
        **`dlOrigin`**
        : A _Double List_ specifying the original. The default value is [0, 0, 0].
        
        **`dlLength`**
        : A _Double List_ specifying the length. The default value is [0.1, 0.1, 0.1].
        
        **`dlCenterPt`**
        : A _Double List_ specifying the center point. The default value is [0.0,0.0,0.0].
        
        **`dlAxisPt1`**
        : A _Double List_ specifying the axis point 1. The default value is [0.0,0.0,0.1].
        
        **`dlAxisPt2`**
        : A _Double List_ specifying the axis point 2. The default value is [0.0,0.0,0.0].
        
        **`bEnclosed`**
        : A _Boolean_ specifying the enclosed. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Meshing.LocalSetting.SearchTargetFaces(iPartType=0, dlOrigin=[0, 0, 0], dlLength=[0.1, 0.1, 0.1], dlCenterPt=[0.0,0.0,0.0], dlAxisPt1=[0.0,0.0,0.1], dlAxisPt2=[0.0,0.0,0.0], bEnclosed=False)
        ```
        
        """
        message = "Meshing.LocalSetting.SearchTargetFaces({},{},{},{},{},{},{})".format(iPartType, dlOrigin, dlLength, dlCenterPt, dlAxisPt1, dlAxisPt2, bEnclosed)
        return JPT_RUN_LINE(message)

class Meshing_Templates:
    def TemplateCopy(self, crlReferent=[], crlTarget=[], iMethod=0, iCopySub=1, dTolerance=0.001, strSource="", strTarget=""):
        r"""
        ## Description
        
        Template Copy local setting
        
        ## Syntax
        
        ```python
        Meshing.Templates.TemplateCopy(crlReferent=[], crlTarget=[], iMethod=0, iCopySub=1, dTolerance=0.001, strSource="", strTarget="")
        ```
        
        Macro: {ref}`Macro-Meshing-TemplateCopy`
        
        Ribbon: {menuselection}`Meshing --> Templates --> TemplateCopy`
        
        ## Inputs
        
        **`crlReferent`**
        : A _Cursor List_ specifying the reference. The default value is [].
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`iCopySub`**
        : An _Integer_ specifying the copy sub. The default value is 1.
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. The default value is 0.001.
        
        **`strSource`**
        : A _String_ specifying the source. The default value is "".
        
        **`strTarget`**
        : A _String_ specifying the target. The default value is "".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Meshing.Templates.TemplateCopy(crlReferent=[], crlTarget=[], iMethod=0, iCopySub=1, dTolerance=0.001, strSource="", strTarget="")
        ```
        
        """
        message = "Meshing.Templates.TemplateCopy({},{},{},{},{},'{}','{}')".format(crlReferent, crlTarget, iMethod, iCopySub, dTolerance, strSource, strTarget)
        return JPT_RUN_LINE(message)

class Meshing_LocalRemesh:
    def Solid(self, crlPart=[], dlCenter=[0.0,0.0,0.0], dRadius=5.0, dGradFactor=1.0, dStrechLimit=0.1):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Meshing.LocalRemesh.Solid(crlPart=[], dlCenter=[0.0,0.0,0.0], dRadius=5.0, dGradFactor=1.0, dStrechLimit=0.1)
        ```
        
        Macro: {ref}`Macro-Meshing-LocalRemeshSolid`
        
        Ribbon: {menuselection}`Meshing --> LocalRemesh --> Solid`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`dlCenter`**
        : A _Double List_ specifying the center. The default value is [0.0,0.0,0.0].
        
        **`dRadius`**
        : A _Double_ specifying the radius. The default value is 5.0.
        
        **`dGradFactor`**
        : A _Double_ specifying the gradient factor. The default value is 1.0.
        
        **`dStrechLimit`**
        : A _Double_ specifying the strech limit. The default value is 0.1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Meshing.LocalRemesh.Solid(crlPart=[], dlCenter=[0.0,0.0,0.0], dRadius=5.0, dGradFactor=1.0, dStrechLimit=0.1)
        ```
        
        """
        message = "Meshing.LocalRemesh.Solid({},{},{},{},{})".format(crlPart, dlCenter, dRadius, dGradFactor, dStrechLimit)
        return JPT_RUN_LINE(message)

    def Surfase(self, crlTarget=[], surfaceMesh = SURFACE_MESH(), bUseSetting=True, bGrading=False, bFMesher=False, iOverrideType=1, bKeepConnection=False, bProjCAD=True, bTinyFaceMerge=False, dMinFaceWidth=0, dMaxFaceWidth=0.001,bIDchcek = False, bKeepRemeshEdge = False):
        r"""
        ## Description
        
        local surface remesh
        
        ## Syntax
        
        ```python
        Meshing.LocalRemesh.Surfase(crlTarget=[], surfaceMesh = SURFACE_MESH(), bUseSetting=True, bGrading=False, bFMesher=False, iOverrideType=1, bKeepConnection=False, bProjCAD=True, bTinyFaceMerge=False, dMinFaceWidth=0, dMaxFaceWidth=0.001,bIDchcek = False, bKeepRemeshEdge = False)
        ```
        
        Macro: {ref}`Macro-Meshing-LocalRemeshTriQuad`
        
        Ribbon: {menuselection}`Meshing --> LocalRemesh --> Surfase`
        
        ## Inputs
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`surfaceMesh`**
        : A _SURFACE_MESH_ specifying the mesh. The default value is SURFACE_MESH().
        
        **`bUseSetting`**
        : A _Boolean_ specifying the use setting. The default value is True.
        
        **`bGrading`**
        : A _Boolean_ specifying the grading. The default value is False.
        
        **`bFMesher`**
        : A _Boolean_ specifying the mesher. The default value is False.
        
        **`iOverrideType`**
        : An _Integer_ specifying the override type. The default value is 1.
        
        **`bKeepConnection`**
        : A _Boolean_ specifying the keep connection. The default value is False.
        
        **`bProjCAD`**
        : A _Boolean_ specifying the projection CAD. The default value is True.
        
        **`bTinyFaceMerge`**
        : A _Boolean_ specifying the tiny face merge. The default value is False.
        
        **`dMinFaceWidth`**
        : A _Double_ specifying the minimum face width. The default value is 0.
        
        **`dMaxFaceWidth`**
        : A _Double_ specifying the maximum face width. This is a required input.
        
        **`bKeepRemeshEdge`**
        : A _Boolean_ specifying the keep remesh edge. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Meshing.LocalRemesh.Surfase(crlTarget=[], surfaceMesh = SURFACE_MESH(), bUseSetting=True, bGrading=False, bFMesher=False, iOverrideType=1, bKeepConnection=False, bProjCAD=True, bTinyFaceMerge=False, dMinFaceWidth=0, dMaxFaceWidth=0.001,bIDchcek = False, bKeepRemeshEdge = False)
        ```
        
        """
        message = "Meshing.LocalRemesh.Surfase({},{},{},{},{},{},{},{},{},{},{},{},{})".format(crlTarget, surfaceMesh , bUseSetting, bGrading, bFMesher, iOverrideType, bKeepConnection, bProjCAD, bTinyFaceMerge, dMinFaceWidth, dMaxFaceWidth,bIDchcek , bKeepRemeshEdge )
        return JPT_RUN_LINE(message)

class Meshing_LocalSettings:
    def Edge(self, strName, localMesh, crlTarget=[], ilHardPointId=[], veclHardPointXYZ=[], crlHardPointTarget=[], crEditTarget=None):
        r"""
        ## Description
        
        LocalSettings.Edge
        
        ## Syntax
        
        ```python
        Meshing.LocalSettings.Edge(strName, localMesh, crlTarget=[], ilHardPointId=[], veclHardPointXYZ=[], crlHardPointTarget=[], crEditTarget=None)
        ```
        
        Macro: {ref}`Macro-Meshing-CreateLocalSetting_Edge`
        
        Ribbon: {menuselection}`Meshing --> LocalSettings --> Edge`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`localMesh`**
        : A _LOCAL_MESH_ specifying the mesh. This is a required input.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`ilHardPointId`**
        : A _Integer List_ specifying the hard point ID. The default value is [].
        
        **`veclHardPointXYZ`**
        : A _Vector List_ specifying the hard point x y z. The default value is [].
        
        **`crlHardPointTarget`**
        : A _Cursor List_ specifying the hard point target. The default value is [].
        
        **`crEditTarget`**
        : A _Cursor_ specifying the edit target. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Meshing.LocalSettings.Edge(strName, localMesh, crlTarget=[], ilHardPointId=[], veclHardPointXYZ=[], crlHardPointTarget=[], crEditTarget=None)
        ```
        
        """
        message = "Meshing.LocalSettings.Edge('{}',{},{},{},{},{},{})".format(strName, localMesh, crlTarget, ilHardPointId, veclHardPointXYZ, crlHardPointTarget, crEditTarget)
        return JPT_RUN_LINE(message)

    def Face(self, strName, localMesh, crlTarget=[], ilHardPointId=[], veclHardPointXYZ=[], crlHardPointTarget=[], crEditTarget=None):
        r"""
        ## Description
        
        LocalSettings.Face
        
        ## Syntax
        
        ```python
        Meshing.LocalSettings.Face(strName, localMesh, crlTarget=[], ilHardPointId=[], veclHardPointXYZ=[], crlHardPointTarget=[], crEditTarget=None)
        ```
        
        Macro: {ref}`Macro-Meshing-CreateLocalSetting_Face`
        
        Ribbon: {menuselection}`Meshing --> LocalSettings --> Face`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`localMesh`**
        : A _LOCAL_MESH_ specifying the mesh. This is a required input.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`ilHardPointId`**
        : A _Integer List_ specifying the hard point ID. The default value is [].
        
        **`veclHardPointXYZ`**
        : A _Vector List_ specifying the hard point x y z. The default value is [].
        
        **`crlHardPointTarget`**
        : A _Cursor List_ specifying the hard point target. The default value is [].
        
        **`crEditTarget`**
        : A _Cursor_ specifying the edit target. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Meshing.LocalSettings.Face(strName, localMesh, crlTarget=[], ilHardPointId=[], veclHardPointXYZ=[], crlHardPointTarget=[], crEditTarget=None)
        ```
        
        """
        message = "Meshing.LocalSettings.Face('{}',{},{},{},{},{},{})".format(strName, localMesh, crlTarget, ilHardPointId, veclHardPointXYZ, crlHardPointTarget, crEditTarget)
        return JPT_RUN_LINE(message)

    def FaceElement(self, strName, localMesh, crlTarget=[], ilHardPointId=[], veclHardPointXYZ=[], crlHardPointTarget=[], crEditTarget=None):
        r"""
        ## Description
        
        LocalSettings.FaceElement
        
        ## Syntax
        
        ```python
        Meshing.LocalSettings.FaceElement(strName, localMesh, crlTarget=[], ilHardPointId=[], veclHardPointXYZ=[], crlHardPointTarget=[], crEditTarget=None)
        ```
        
        Macro: {ref}`Macro-Meshing-CreateLocalSetting_FaceElement`
        
        Ribbon: {menuselection}`Meshing --> LocalSettings --> FaceElement`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`localMesh`**
        : A _LOCAL_MESH_ specifying the mesh. This is a required input.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`ilHardPointId`**
        : A _Integer List_ specifying the hard point ID. The default value is [].
        
        **`veclHardPointXYZ`**
        : A _Vector List_ specifying the hard point x y z. The default value is [].
        
        **`crlHardPointTarget`**
        : A _Cursor List_ specifying the hard point target. The default value is [].
        
        **`crEditTarget`**
        : A _Cursor_ specifying the edit target. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Meshing.LocalSettings.FaceElement(strName, localMesh, crlTarget=[], ilHardPointId=[], veclHardPointXYZ=[], crlHardPointTarget=[], crEditTarget=None)
        ```
        
        """
        message = "Meshing.LocalSettings.FaceElement('{}',{},{},{},{},{},{})".format(strName, localMesh, crlTarget, ilHardPointId, veclHardPointXYZ, crlHardPointTarget, crEditTarget)
        return JPT_RUN_LINE(message)

    def Model(self, strName, localMesh, crlTarget=[], ilHardPointId=[], veclHardPointXYZ=[], crlHardPointTarget=[], crEditTarget=None):
        r"""
        ## Description
        
        LocalSettings.Model
        
        ## Syntax
        
        ```python
        Meshing.LocalSettings.Model(strName, localMesh, crlTarget=[], ilHardPointId=[], veclHardPointXYZ=[], crlHardPointTarget=[], crEditTarget=None)
        ```
        
        Macro: {ref}`Macro-Meshing-CreateLocalSetting_Model`
        
        Ribbon: {menuselection}`Meshing --> LocalSettings --> Model`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`localMesh`**
        : A _LOCAL_MESH_ specifying the mesh. This is a required input.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`ilHardPointId`**
        : A _Integer List_ specifying the hard point ID. The default value is [].
        
        **`veclHardPointXYZ`**
        : A _Vector List_ specifying the hard point x y z. The default value is [].
        
        **`crlHardPointTarget`**
        : A _Cursor List_ specifying the hard point target. The default value is [].
        
        **`crEditTarget`**
        : A _Cursor_ specifying the edit target. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Meshing.LocalSettings.Model(strName, localMesh, crlTarget=[], ilHardPointId=[], veclHardPointXYZ=[], crlHardPointTarget=[], crEditTarget=None)
        ```
        
        """
        message = "Meshing.LocalSettings.Model('{}',{},{},{},{},{},{})".format(strName, localMesh, crlTarget, ilHardPointId, veclHardPointXYZ, crlHardPointTarget, crEditTarget)
        return JPT_RUN_LINE(message)

    def Part(self, strName, localMesh, crlTarget=[], ilHardPointId=[], veclHardPointXYZ=[], crlHardPointTarget=[], crEditTarget=None):
        r"""
        ## Description
        
        LocalSettings.Part
        
        ## Syntax
        
        ```python
        Meshing.LocalSettings.Part(strName, localMesh, crlTarget=[], ilHardPointId=[], veclHardPointXYZ=[], crlHardPointTarget=[], crEditTarget=None)
        ```
        
        Macro: {ref}`Macro-Meshing-CreateLocalSetting_Part`
        
        Ribbon: {menuselection}`Meshing --> LocalSettings --> Part`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`localMesh`**
        : A _LOCAL_MESH_ specifying the mesh. This is a required input.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`ilHardPointId`**
        : A _Integer List_ specifying the hard point ID. The default value is [].
        
        **`veclHardPointXYZ`**
        : A _Vector List_ specifying the hard point x y z. The default value is [].
        
        **`crlHardPointTarget`**
        : A _Cursor List_ specifying the hard point target. The default value is [].
        
        **`crEditTarget`**
        : A _Cursor_ specifying the edit target. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Meshing.LocalSettings.Part(strName, localMesh, crlTarget=[], ilHardPointId=[], veclHardPointXYZ=[], crlHardPointTarget=[], crEditTarget=None)
        ```
        
        """
        message = "Meshing.LocalSettings.Part('{}',{},{},{},{},{},{})".format(strName, localMesh, crlTarget, ilHardPointId, veclHardPointXYZ, crlHardPointTarget, crEditTarget)
        return JPT_RUN_LINE(message)

    def Points(self, strName, localMesh, crlTarget=[], ilHardPointId=[], veclHardPointXYZ=[], crlHardPointTarget=[], crEditTarget=None):
        r"""
        ## Description
        
        LocalSettings.Points
        
        ## Syntax
        
        ```python
        Meshing.LocalSettings.Points(strName, localMesh, crlTarget=[], ilHardPointId=[], veclHardPointXYZ=[], crlHardPointTarget=[], crEditTarget=None)
        ```
        
        Macro: {ref}`Macro-Meshing-CreateLocalSetting_Points`
        
        Ribbon: {menuselection}`Meshing --> LocalSettings --> Points`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`localMesh`**
        : A _LOCAL_MESH_ specifying the mesh. This is a required input.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`ilHardPointId`**
        : A _Integer List_ specifying the hard point ID. The default value is [].
        
        **`veclHardPointXYZ`**
        : A _Vector List_ specifying the hard point x y z. The default value is [].
        
        **`crlHardPointTarget`**
        : A _Cursor List_ specifying the hard point target. The default value is [].
        
        **`crEditTarget`**
        : A _Cursor_ specifying the edit target. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Meshing.LocalSettings.Points(strName, localMesh, crlTarget=[], ilHardPointId=[], veclHardPointXYZ=[], crlHardPointTarget=[], crEditTarget=None)
        ```
        
        """
        message = "Meshing.LocalSettings.Points('{}',{},{},{},{},{},{})".format(strName, localMesh, crlTarget, ilHardPointId, veclHardPointXYZ, crlHardPointTarget, crEditTarget)
        return JPT_RUN_LINE(message)

class AddItems_Edge:
    def ProjectEdgeToFace(self, crlEdge, crlFace, bExtendEdge=True):
        r"""
        undefined
        """
        message = "MidPlaneEdit.AddItems.Edge.ProjectEdgeToFace({},{},{})".format(crlEdge, crlFace, bExtendEdge)
        return JPT_RUN_LINE(message)

    def FaceTwoFace(self, crRefFace=None, crExtFace=None, iExtendType=0):
        r"""
        undefined
        """
        message = "MidPlaneEdit.AddItems.Edge.FaceTwoFace({},{},{})".format(crRefFace, crExtFace, iExtendType)
        return JPT_RUN_LINE(message)

class AddItems_Face:
    def EFExtendFreeEdge(self, crlEdge, crlFace, bMergeFace, bMergeEdge, bUseNeighDir, dMergeEdgeAngle, bMultiEF):
        r"""
        undefined
        """
        message = "MidPlaneEdit.AddItems.Face.EFExtendFreeEdge({},{},{},{},{},{},{})".format(crlEdge, crlFace, bMergeFace, bMergeEdge, bUseNeighDir, dMergeEdgeAngle, bMultiEF)
        return JPT_RUN_LINE(message)

    def EFProject(self, crlEdge, crlFace, bMergeFace, bMergeEdge, dMergeEdgeAngle, bMultiEF):
        r"""
        undefined
        """
        message = "MidPlaneEdit.AddItems.Face.EFProject({},{},{},{},{},{})".format(crlEdge, crlFace, bMergeFace, bMergeEdge, dMergeEdgeAngle, bMultiEF)
        return JPT_RUN_LINE(message)

class MidPlaneEdit_Edge:
    def Nodes(self, crlNode=[]):
        r"""
        undefined
        """
        message = "MidPlaneEdit.Edge.Nodes({})".format(crlNode)
        return JPT_RUN_LINE(message)

class MidPlaneEdit_ExtendFace:
    def CylinderFace(self, crlExtFace=[], crRefFace=None, crEdge=None, iExtendType=1, iFaceType=0, iMethod=0, dParaAngleOffset=0.0, dParaArcLength=0.0, dParaZxy=0.0, iAxisPlane=0, iParaArcNodesNum=0, dOffLength=0.0, crlSelExtendedFace=[], crlSelRefFace=[], dCoMag=0.0, iAxisSystem=0, iCoorSystem=0, iCoX=0, iCoY=0, iCoZ=0, bOtherSameAsFaceNormal=False, dOtherArcNodesNum=0.0, dOtherArcRadius=0.0):
        r"""
        undefined
        """
        message = "MidPlaneEdit.ExtendFace.CylinderFace({},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(crlExtFace, crRefFace, crEdge, iExtendType, iFaceType, iMethod, dParaAngleOffset, dParaArcLength, dParaZxy, iAxisPlane, iParaArcNodesNum, dOffLength, crlSelExtendedFace, crlSelRefFace, dCoMag, iAxisSystem, iCoorSystem, iCoX, iCoY, iCoZ, bOtherSameAsFaceNormal, dOtherArcNodesNum, dOtherArcRadius)
        return JPT_RUN_LINE(message)

    def PlanarFace(self, bIType=False, crExtFace=None, crRefFace=None, crEdge=None, iFaceType=0, iExtendType=0, iMethod=0, dParaZxy=0, iAxisPlane=0, iParaArcNodesNum=0, dOffLength=0, dCoMag=0, iAxisSystem=0, iCoorSystem=0, crCoord=None, iCoX=0, iCoY=0, iCoZ=0, bOtherSameAsFaceNormal=False, dOtherArcNodesNum=0, dOtherArcRadius=0):
        r"""
        undefined
        """
        message = "MidPlaneEdit.ExtendFace.PlanarFace({},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(bIType, crExtFace, crRefFace, crEdge, iFaceType, iExtendType, iMethod, dParaZxy, iAxisPlane, iParaArcNodesNum, dOffLength, dCoMag, iAxisSystem, iCoorSystem, crCoord, iCoX, iCoY, iCoZ, bOtherSameAsFaceNormal, dOtherArcNodesNum, dOtherArcRadius)
        return JPT_RUN_LINE(message)

class MidPlaneEdit_Face:
    def FaceExtendtoFace(self, crlExtFaces, crlRefFaces, bMergeFace, bMergeEdge, dMergeEdgeAngle):
        r"""
        undefined
        """
        message = "MidPlaneEdit.Face.FaceExtendtoFace({},{},{},{},{})".format(crlExtFaces, crlRefFaces, bMergeFace, bMergeEdge, dMergeEdgeAngle)
        return JPT_RUN_LINE(message)

    def FaceExtendToIntersection(self, crEdge0, crEdge1):
        r"""
        undefined
        """
        message = "MidPlaneEdit.Face.FaceExtendToIntersection({},{})".format(crEdge0, crEdge1)
        return JPT_RUN_LINE(message)

    def EdgesToEdges(self, crlEdge, bImprint=False, bMultiEdges=False):
        r"""
        undefined
        """
        message = "MidPlaneEdit.Face.EdgesToEdges({},{},{})".format(crlEdge, bImprint, bMultiEdges)
        return JPT_RUN_LINE(message)

class MidPlaneEdit_Manual:
    def vecOffset(self, crlFace, crPart, dOffset, bCyl, strNewPartName):
        r"""
        undefined
        """
        message = "MidPlaneEdit.Manual.vecOffset({},{},{},{},'{}')".format(crlFace, crPart, dOffset, bCyl, strNewPartName)
        return JPT_RUN_LINE(message)

    def MidByPair(self, crlBaseFaces, crlPairFaces, crlRefFaces, crPart, bMergeFaces, bExtendFaces, bHideFaces, dExtendTol, dMergeEdgesAngle, dStitchFaces):
        r"""
        undefined
        """
        message = "MidPlaneEdit.Manual.MidByPair({},{},{},{},{},{},{},{},{},{})".format(crlBaseFaces, crlPairFaces, crlRefFaces, crPart, bMergeFaces, bExtendFaces, bHideFaces, dExtendTol, dMergeEdgesAngle, dStitchFaces)
        return JPT_RUN_LINE(message)

class MidPlaneEdit_AddItems:
    Edge = AddItems_Edge()

    Face = AddItems_Face()

class MMCCarACTools_ACModelCreationTools:
    def MeshedFace(self, crlItem1, crlItem2, crlItem3, crlPart, iType, dMeshSise, bMergeTol, dTol, bCreatePart):
        r"""
        undefined
        """
        message = "MMCCarACTools.ACModelCreationTools.MeshedFace({},{},{},{},{},{},{},{},{})".format(crlItem1, crlItem2, crlItem3, crlPart, iType, dMeshSise, bMergeTol, dTol, bCreatePart)
        return JPT_RUN_LINE(message)

class MMCCarACTools_ClearanceElement:
    def Connect(self, crlFace, crlElem, iConnectionMethod):
        r"""
        undefined
        """
        message = "MMCCarACTools.ClearanceElement.Connect({},{},{})".format(crlFace, crlElem, iConnectionMethod)
        return JPT_RUN_LINE(message)

    def Edit(self, dDx, dDy, dDz, dLx, dLy, dLz, crlTarget, crlDestNode, poslDestPoint):
        r"""
        undefined
        """
        message = "MMCCarACTools.ClearanceElement.Edit({},{},{},{},{},{},{},{},{})".format(dDx, dDy, dDz, dLx, dLy, dLz, crlTarget, crlDestNode, poslDestPoint)
        return JPT_RUN_LINE(message)

class MufflerHA_CreateEdge:
    def PerpendicularLineToEdge(self, crNode, crEdge, crlFace, bBreakFace):
        r"""
        undefined
        """
        message = "MufflerHA.CreateEdge.PerpendicularLineToEdge({},{},{},{})".format(crNode, crEdge, crlFace, bBreakFace)
        return JPT_RUN_LINE(message)

class MufflerHA_CreateEdgeClassic:
    def ProjectLine(self, ilAiedgeidForMacro, ilAifaceidForMacro, bDivideFace, crlAiparttargetForMarco):
        r"""
        undefined
        """
        message = "MufflerHA.CreateEdgeClassic.ProjectLine({},{},{},{})".format(ilAiedgeidForMacro, ilAifaceidForMacro, bDivideFace, crlAiparttargetForMarco)
        return JPT_RUN_LINE(message)

class SpecialModeling_Rod:
    def Rod(self, crlNode, dRadius, iType, dMeshSize, dStartDist, dWeldDist, iDivNumber, dDeformWidth, iTransitionElem, dlPosDir):
        r"""
        undefined
        """
        message = "MufflerT.SpecialModeling.Rod.Rod({},{},{},{},{},{},{},{},{},{})".format(crlNode, dRadius, iType, dMeshSize, dStartDist, dWeldDist, iDivNumber, dDeformWidth, iTransitionElem, dlPosDir)
        return JPT_RUN_LINE(message)

class MufflerT_SpecialModeling:
    Rod = SpecialModeling_Rod()

class MuxWeld_CreateWeld:
    def Auto(self, iIconnectattributeMethod, strStrconnectattributeName, crlMasterTarget, crlSlaveTarget, iIconnectattributeCoordsys, crEdit):
        r"""
        ## Description
        
        Auto create weld
        
        ## Syntax
        
        ```python
        MuxWeld.CreateWeld.Auto(iIconnectattributeMethod, strStrconnectattributeName, crlMasterTarget, crlSlaveTarget, iIconnectattributeCoordsys, crEdit)
        ```
        
        Macro: {ref}`Macro-MuxWeld-ConnectionWeld`
        
        Ribbon: {menuselection}`MuxWeld --> CreateWeld --> Auto`
        
        ## Inputs
        
        **`iIconnectattributeMethod`**
        : An _Integer_ specifying the iconnectattribute method. This is a required input.
        
        **`strStrconnectattributeName`**
        : A _String_ specifying the strconnectattribute name. This is a required input.
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. This is a required input.
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. This is a required input.
        
        **`iIconnectattributeCoordsys`**
        : An _Integer_ specifying the iconnectattribute coordsys. This is a required input.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MuxWeld.CreateWeld.Auto(iIconnectattributeMethod, strStrconnectattributeName, crlMasterTarget, crlSlaveTarget, iIconnectattributeCoordsys, crEdit)
        ```
        
        """
        message = "MuxWeld.CreateWeld.Auto({},'{}',{},{},{},{})".format(iIconnectattributeMethod, strStrconnectattributeName, crlMasterTarget, crlSlaveTarget, iIconnectattributeCoordsys, crEdit)
        return JPT_RUN_LINE(message)

    def CreateBeadWeld(self, crlEdge, crlPrjtedEdge, crlPart, dTol, dRatio, crRefElem):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        MuxWeld.CreateWeld.CreateBeadWeld(crlEdge, crlPrjtedEdge, crlPart, dTol, dRatio, crRefElem)
        ```
        
        Macro: {ref}`Macro-MuxWeld-CreateBeadWeld`
        
        Ribbon: {menuselection}`MuxWeld --> CreateWeld --> CreateBeadWeld`
        
        ## Inputs
        
        **`crlEdge`**
        : A _Cursor List_ specifying the edge. This is a required input.
        
        **`crlPrjtedEdge`**
        : A _Cursor List_ specifying the projected edge. This is a required input.
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. This is a required input.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. This is a required input.
        
        **`dRatio`**
        : A _Double_ specifying the ratio. This is a required input.
        
        **`crRefElem`**
        : A _Cursor_ specifying the reference element. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MuxWeld.CreateWeld.CreateBeadWeld(crlEdge, crlPrjtedEdge, crlPart, dTol, dRatio, crRefElem)
        ```
        
        """
        message = "MuxWeld.CreateWeld.CreateBeadWeld({},{},{},{},{},{})".format(crlEdge, crlPrjtedEdge, crlPart, dTol, dRatio, crRefElem)
        return JPT_RUN_LINE(message)

class MuxWeld_DefineSequence:
    def Single(self, crEdit):
        r"""
        ## Description
        
        Define Sequence
        
        ## Syntax
        
        ```python
        MuxWeld.DefineSequence.Single(crEdit)
        ```
        
        Macro: {ref}`Macro-MuxWeld-DefineWeldOrder`
        
        Ribbon: {menuselection}`MuxWeld --> DefineSequence --> Single`
        
        ## Inputs
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MuxWeld.DefineSequence.Single(crEdit)
        ```
        
        """
        message = "MuxWeld.DefineSequence.Single({})".format(crEdit)
        return JPT_RUN_LINE(message)

class OasisAWizard_LocalMeshing:
    def FilletMapMeshing(self, crlPart=[], crlFace=[], dMinLength=0.0, dMaxLength=1.0, dMinRadius=0.0, dMaxRadius=9e-3, bConvex=True, bConcave=True, iTmp=0, dLengthSingleLayer=0, dBMinLengthForSingleLayer=0, dRadiusSingleLayer=0, dBMinRadiusForSingleLayer=0, iMinlayer=0, bMinLayer=False):
        r"""
        undefined
        """
        message = "OasisAWizard.LocalMeshing.FilletMapMeshing({},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(crlPart, crlFace, dMinLength, dMaxLength, dMinRadius, dMaxRadius, bConvex, bConcave, iTmp, dLengthSingleLayer, dBMinLengthForSingleLayer, dRadiusSingleLayer, dBMinRadiusForSingleLayer, iMinlayer, bMinLayer)
        return JPT_RUN_LINE(message)

class Post_ImportResults:
    def ImportOp2Mesh(self, strlFilePaths, iImportType=0, dFaceAngle=60.0, dEdgeAngle=60.0):
        r"""
        ## Description
        
        import Nastran op2 mesh
        
        ## Syntax
        
        ```python
        Post.ImportResults.ImportOp2Mesh(strlFilePaths, iImportType=0, dFaceAngle=60.0, dEdgeAngle=60.0)
        ```
        
        Macro: {ref}`Macro-Post-ImportOp2Mesh`
        
        Ribbon: {menuselection}`Post --> ImportResults --> ImportOp2Mesh`
        
        ## Inputs
        
        **`strlFilePaths`**
        : A _String List_ specifying the file paths. This is a required input.
        
        **`iImportType`**
        : An _Integer_ specifying the import type. The default value is 0.
        
        **`dFaceAngle`**
        : A _Double_ specifying the face angle. The default value is 60.0.
        
        **`dEdgeAngle`**
        : A _Double_ specifying the edge angle. The default value is 60.0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Post.ImportResults.ImportOp2Mesh(strlFilePaths, iImportType=0, dFaceAngle=60.0, dEdgeAngle=60.0)
        ```
        
        """
        message = "Post.ImportResults.ImportOp2Mesh('{}',{},{},{})".format(strlFilePaths, iImportType, dFaceAngle, dEdgeAngle)
        return JPT_RUN_LINE(message)

    def NastranOp2PostJob(self, strName, strlPaths, crEdit=None):
        r"""
        ## Description
        
        import Nastran op2 post job
        
        ## Syntax
        
        ```python
        Post.ImportResults.NastranOp2PostJob(strName, strlPaths, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Post-NastranOp2PostJob`
        
        Ribbon: {menuselection}`Post --> ImportResults --> NastranOp2PostJob`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`strlPaths`**
        : A _String List_ specifying the paths. This is a required input.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Post.ImportResults.NastranOp2PostJob(strName, strlPaths, crEdit=None)
        ```
        
        """
        message = "Post.ImportResults.NastranOp2PostJob('{}','{}',{})".format(strName, strlPaths, crEdit)
        return JPT_RUN_LINE(message)

    def ImportTsdbMesh(self, strTsdbFilePath, strBtxFilePath, iImportType=1, dFaceAngle=60.0, dEdgeAngle=60.0):
        r"""
        ## Description
        
        import tsdb mesh
        
        ## Syntax
        
        ```python
        Post.ImportResults.ImportTsdbMesh(strTsdbFilePath, strBtxFilePath, iImportType=1, dFaceAngle=60.0, dEdgeAngle=60.0)
        ```
        
        Macro: {ref}`Macro-Post-ImportTsdbMesh`
        
        Ribbon: {menuselection}`Post --> ImportResults --> ImportTsdbMesh`
        
        ## Inputs
        
        **`strTsdbFilePath`**
        : A _String_ specifying the tsdb file path. This is a required input.
        
        **`strBtxFilePath`**
        : A _String_ specifying the btx file path. This is a required input.
        
        **`iImportType`**
        : An _Integer_ specifying the import type. The default value is 1.
        
        **`dFaceAngle`**
        : A _Double_ specifying the face angle. The default value is 60.0.
        
        **`dEdgeAngle`**
        : A _Double_ specifying the edge angle. The default value is 60.0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Post.ImportResults.ImportTsdbMesh(strTsdbFilePath, strBtxFilePath, iImportType=1, dFaceAngle=60.0, dEdgeAngle=60.0)
        ```
        
        """
        message = "Post.ImportResults.ImportTsdbMesh('{}','{}',{},{},{})".format(strTsdbFilePath, strBtxFilePath, iImportType, dFaceAngle, dEdgeAngle)
        return JPT_RUN_LINE(message)

    def HDF5Mesh(self, strlFilePaths, iImportType=2, dFaceAngle=60.0, dEdgeAngle=60.0):
        r"""
        ## Description
        
        import Nastran HDF5Mesh file
        
        ## Syntax
        
        ```python
        Post.ImportResults.HDF5Mesh(strlFilePaths, iImportType=2, dFaceAngle=60.0, dEdgeAngle=60.0)
        ```
        
        Macro: {ref}`Macro-Post-ImportHDF5Mesh`
        
        Ribbon: {menuselection}`Post --> ImportResults --> HDF5Mesh`
        
        ## Inputs
        
        **`strlFilePaths`**
        : A _String List_ specifying the file paths. This is a required input.
        
        **`iImportType`**
        : An _Integer_ specifying the import type. The default value is 2.
        
        **`dFaceAngle`**
        : A _Double_ specifying the face angle. The default value is 60.0.
        
        **`dEdgeAngle`**
        : A _Double_ specifying the edge angle. The default value is 60.0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Post.ImportResults.HDF5Mesh(strlFilePaths, iImportType=2, dFaceAngle=60.0, dEdgeAngle=60.0)
        ```
        
        """
        message = "Post.ImportResults.HDF5Mesh('{}',{},{},{})".format(strlFilePaths, iImportType, dFaceAngle, dEdgeAngle)
        return JPT_RUN_LINE(message)

    def ADVC(self, strlPath=[], iImportType=1, dFaceAngle=60.0, dEdgeAngle=60.0):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Post.ImportResults.ADVC(strlPath=[], iImportType=1, dFaceAngle=60.0, dEdgeAngle=60.0)
        ```
        
        Macro: {ref}`Macro-Post-ImportADVCMesh`
        
        Ribbon: {menuselection}`Post --> ImportResults --> ADVC`
        
        ## Inputs
        
        **`strlPath`**
        : A _String List_ specifying the path. The default value is [].
        
        **`iImportType`**
        : An _Integer_ specifying the import type. The default value is 1.
        
        **`dFaceAngle`**
        : A _Double_ specifying the face angle. The default value is 60.0.
        
        **`dEdgeAngle`**
        : A _Double_ specifying the edge angle. The default value is 60.0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Post.ImportResults.ADVC(strlPath=[], iImportType=1, dFaceAngle=60.0, dEdgeAngle=60.0)
        ```
        
        """
        message = "Post.ImportResults.ADVC('{}',{},{},{})".format(strlPath, iImportType, dFaceAngle, dEdgeAngle)
        return JPT_RUN_LINE(message)

    def ADVC2PostJob(self, strName, strlResultFolderPaths, crEdit):
        r"""
        ## Description
        
        Post ImportResults ADVC2PostJob
        
        ## Syntax
        
        ```python
        Post.ImportResults.ADVC2PostJob(strName, strlResultFolderPaths, crEdit)
        ```
        
        Macro: {ref}`Macro-Post-ADVC2PostJob`
        
        Ribbon: {menuselection}`Post --> ImportResults --> ADVC2PostJob`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`strlResultFolderPaths`**
        : A _String List_ specifying the result folder paths. This is a required input.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Post.ImportResults.ADVC2PostJob(strName, strlResultFolderPaths, crEdit)
        ```
        
        """
        message = "Post.ImportResults.ADVC2PostJob('{}','{}',{})".format(strName, strlResultFolderPaths, crEdit)
        return JPT_RUN_LINE(message)

    def NastranHDF5(self, strName="", strlPaths=[], crEdit=None):
        r"""
        ## Description
        
        Import Nastran HDF5PostJob file
        
        ## Syntax
        
        ```python
        Post.ImportResults.NastranHDF5(strName="", strlPaths=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-Post-NastranHDF5PostJob`
        
        Ribbon: {menuselection}`Post --> ImportResults --> NastranHDF5`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`strlPaths`**
        : A _String List_ specifying the paths. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Post.ImportResults.NastranHDF5(strName="", strlPaths=[], crEdit=None)
        ```
        
        """
        message = "Post.ImportResults.NastranHDF5('{}','{}',{})".format(strName, strlPaths, crEdit)
        return JPT_RUN_LINE(message)

class Properties_ElemRelatedInfo:
    def Shell(self, listErishellThetaProp=[], listErishellCsProp=[], listErishellZoffsProp=[]):
        r"""
        ## Description
        
        Set Shell Parameter
        
        ## Syntax
        
        ```python
        Properties.ElemRelatedInfo.Shell(listErishellThetaProp=[], listErishellCsProp=[], listErishellZoffsProp=[])
        ```
        
        Macro: {ref}`Macro-Properties-ElemRelatedInfo_Shell`
        
        Ribbon: {menuselection}`Properties --> ElemRelatedInfo --> Shell`
        
        ## Inputs
        
        **`listErishellThetaProp`**
        : A _ERISHELL_THETA_PROP List_ specifying the erishell theta property. The default value is [].
        
        **`listErishellCsProp`**
        : A _ERISHELL_CS_PROP List_ specifying the erishell cs property. The default value is [].
        
        **`listErishellZoffsProp`**
        : A _ERISHELL_ZOFFS_PROP List_ specifying the erishell zoffs property. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.ElemRelatedInfo.Shell(listErishellThetaProp=[], listErishellCsProp=[], listErishellZoffsProp=[])
        ```
        
        """
        message = "Properties.ElemRelatedInfo.Shell({},{},{})".format(listErishellThetaProp, listErishellCsProp, listErishellZoffsProp)
        return JPT_RUN_LINE(message)

    def Conn(self, listEricontEndProp=[], listEricontOriVecProp=[], listCidProp=[], listEricontDamperLocProp=[], listOcidProp=[], listDamperOffsetVecs=[], listEricontNodeidProp=[]):
        r"""
        ## Description
        
        Set Shell Parameter
        
        ## Syntax
        
        ```python
        Properties.ElemRelatedInfo.Conn(listEricontEndProp=[], listEricontOriVecProp=[], listCidProp=[], listEricontDamperLocProp=[], listOcidProp=[], listDamperOffsetVecs=[], listEricontNodeidProp=[])
        ```
        
        Macro: {ref}`Macro-Properties-ElemRelatedInfo_Conn`
        
        Ribbon: {menuselection}`Properties --> ElemRelatedInfo --> Conn`
        
        ## Inputs
        
        **`listEricontEndProp`**
        : A _ERICONT_END_PROP List_ specifying the ericont end property. The default value is [].
        
        **`listEricontOriVecProp`**
        : A _ERICONT_ORI_VEC_PROP List_ specifying the ericont ori vector property. The default value is [].
        
        **`listCidProp`**
        : A _CID_PROP List_ specifying the cid property. The default value is [].
        
        **`listEricontDamperLocProp`**
        : A _ERICONT_DAMPER_LOC_PROP List_ specifying the ericont damper location property. The default value is [].
        
        **`listOcidProp`**
        : A _OCID_PROP List_ specifying the ocid property. The default value is [].
        
        **`listDamperOffsetVecs`**
        : A _DAMPER_OFFSET_VECS List_ specifying the damper offset vecs. The default value is [].
        
        **`listEricontNodeidProp`**
        : A _ERICONT_NODEID_PROP List_ specifying the ericont nodeid property. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.ElemRelatedInfo.Conn(listEricontEndProp=[], listEricontOriVecProp=[], listCidProp=[], listEricontDamperLocProp=[], listOcidProp=[], listDamperOffsetVecs=[], listEricontNodeidProp=[])
        ```
        
        """
        message = "Properties.ElemRelatedInfo.Conn({},{},{},{},{},{},{})".format(listEricontEndProp, listEricontOriVecProp, listCidProp, listEricontDamperLocProp, listOcidProp, listDamperOffsetVecs, listEricontNodeidProp)
        return JPT_RUN_LINE(message)

    def Rod(self, listEricontEndProp=[]):
        r"""
        ## Description
        
        Set Rod Parameter
        
        ## Syntax
        
        ```python
        Properties.ElemRelatedInfo.Rod(listEricontEndProp=[])
        ```
        
        Macro: {ref}`Macro-Properties-ElemRelatedInfo_Rod`
        
        Ribbon: {menuselection}`Properties --> ElemRelatedInfo --> Rod`
        
        ## Inputs
        
        **`listEricontEndProp`**
        : A _ERICONT_END_PROP List_ specifying the ericont end property. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.ElemRelatedInfo.Rod(listEricontEndProp=[])
        ```
        
        """
        message = "Properties.ElemRelatedInfo.Rod({})".format(listEricontEndProp)
        return JPT_RUN_LINE(message)

    def Beam(self, listEribeamEndProp=[], listEribeamOriVecProp=[], listEribeamOriNodeidProp=[], listEribeamOffsetVecA=[], listEribeamOffsetVecB=[], listEribeamPinAProp=[], listEribeamPinBProp=[], listEribeamWarpProp=[]):
        r"""
        ## Description
        
        Set Beam Parameter
        
        ## Syntax
        
        ```python
        Properties.ElemRelatedInfo.Beam(listEribeamEndProp=[], listEribeamOriVecProp=[], listEribeamOriNodeidProp=[], listEribeamOffsetVecA=[], listEribeamOffsetVecB=[], listEribeamPinAProp=[], listEribeamPinBProp=[], listEribeamWarpProp=[])
        ```
        
        Macro: {ref}`Macro-Properties-ElemRelatedInfo_Beam`
        
        Ribbon: {menuselection}`Properties --> ElemRelatedInfo --> Beam`
        
        ## Inputs
        
        **`listEribeamEndProp`**
        : A _ERIBEAM_END_PROP List_ specifying the eribeam end property. The default value is [].
        
        **`listEribeamOriVecProp`**
        : A _ERIBEAM_ORI_VEC_PROP List_ specifying the eribeam ori vector property. The default value is [].
        
        **`listEribeamOriNodeidProp`**
        : A _ERIBEAM_ORI_NODEID_PROP List_ specifying the eribeam ori nodeid property. The default value is [].
        
        **`listEribeamOffsetVecA`**
        : A _ERIBEAM_OFFSET_VEC_A List_ specifying the eribeam offset vector a. The default value is [].
        
        **`listEribeamOffsetVecB`**
        : A _ERIBEAM_OFFSET_VEC_B List_ specifying the eribeam offset vector . The default value is [].
        
        **`listEribeamPinAProp`**
        : A _ERIBEAM_PIN_APROP List_ specifying the eribeam pin a property. The default value is [].
        
        **`listEribeamPinBProp`**
        : A _ERIBEAM_PIN_BPROP List_ specifying the eribeam pin property. The default value is [].
        
        **`listEribeamWarpProp`**
        : A _ERIBEAM_WARP_PROP List_ specifying the eribeam warp property. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.ElemRelatedInfo.Beam(listEribeamEndProp=[], listEribeamOriVecProp=[], listEribeamOriNodeidProp=[], listEribeamOffsetVecA=[], listEribeamOffsetVecB=[], listEribeamPinAProp=[], listEribeamPinBProp=[], listEribeamWarpProp=[])
        ```
        
        """
        message = "Properties.ElemRelatedInfo.Beam({},{},{},{},{},{},{},{})".format(listEribeamEndProp, listEribeamOriVecProp, listEribeamOriNodeidProp, listEribeamOffsetVecA, listEribeamOffsetVecB, listEribeamPinAProp, listEribeamPinBProp, listEribeamWarpProp)
        return JPT_RUN_LINE(message)

    def Bar(self, listEribeamEndProp=[], listEribeamOriVecProp=[], listEribeamOriNodeidProp=[], listEribeamOffsetVecA=[], listEribeamOffsetVecB=[], listEribeamPinAProp=[], listEribeamPinBProp=[], listEribeamWarpProp=[]):
        r"""
        ## Description
        
        Set Bar Parameter
        
        ## Syntax
        
        ```python
        Properties.ElemRelatedInfo.Bar(listEribeamEndProp=[], listEribeamOriVecProp=[], listEribeamOriNodeidProp=[], listEribeamOffsetVecA=[], listEribeamOffsetVecB=[], listEribeamPinAProp=[], listEribeamPinBProp=[], listEribeamWarpProp=[])
        ```
        
        Macro: {ref}`Macro-Properties-ElemRelatedInfo_Bar`
        
        Ribbon: {menuselection}`Properties --> ElemRelatedInfo --> Bar`
        
        ## Inputs
        
        **`listEribeamEndProp`**
        : A _ERIBEAM_END_PROP List_ specifying the eribeam end property. The default value is [].
        
        **`listEribeamOriVecProp`**
        : A _ERIBEAM_ORI_VEC_PROP List_ specifying the eribeam ori vector property. The default value is [].
        
        **`listEribeamOriNodeidProp`**
        : A _ERIBEAM_ORI_NODEID_PROP List_ specifying the eribeam ori nodeid property. The default value is [].
        
        **`listEribeamOffsetVecA`**
        : A _ERIBEAM_OFFSET_VEC_A List_ specifying the eribeam offset vector a. The default value is [].
        
        **`listEribeamOffsetVecB`**
        : A _ERIBEAM_OFFSET_VEC_B List_ specifying the eribeam offset vector . The default value is [].
        
        **`listEribeamPinAProp`**
        : A _ERIBEAM_PIN_APROP List_ specifying the eribeam pin a property. The default value is [].
        
        **`listEribeamPinBProp`**
        : A _ERIBEAM_PIN_BPROP List_ specifying the eribeam pin property. The default value is [].
        
        **`listEribeamWarpProp`**
        : A _ERIBEAM_WARP_PROP List_ specifying the eribeam warp property. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.ElemRelatedInfo.Bar(listEribeamEndProp=[], listEribeamOriVecProp=[], listEribeamOriNodeidProp=[], listEribeamOffsetVecA=[], listEribeamOffsetVecB=[], listEribeamPinAProp=[], listEribeamPinBProp=[], listEribeamWarpProp=[])
        ```
        
        """
        message = "Properties.ElemRelatedInfo.Bar({},{},{},{},{},{},{},{})".format(listEribeamEndProp, listEribeamOriVecProp, listEribeamOriNodeidProp, listEribeamOffsetVecA, listEribeamOffsetVecB, listEribeamPinAProp, listEribeamPinBProp, listEribeamWarpProp)
        return JPT_RUN_LINE(message)

    def Gap(self, listEricontEndProp=[], listEricontOriVecProp=[], listCidProp=[], listEricontDamperLocProp=[], listOcidProp=[], listDamperOffsetVecs=[], listEricontNodeidProp=[]):
        r"""
        ## Description
        
        Set Shell Parameter
        
        ## Syntax
        
        ```python
        Properties.ElemRelatedInfo.Gap(listEricontEndProp=[], listEricontOriVecProp=[], listCidProp=[], listEricontDamperLocProp=[], listOcidProp=[], listDamperOffsetVecs=[], listEricontNodeidProp=[])
        ```
        
        Macro: {ref}`Macro-Properties-ElemRelatedInfo_Gap`
        
        Ribbon: {menuselection}`Properties --> ElemRelatedInfo --> Gap`
        
        ## Inputs
        
        **`listEricontEndProp`**
        : A _ERICONT_END_PROP List_ specifying the ericont end property. The default value is [].
        
        **`listEricontOriVecProp`**
        : A _ERICONT_ORI_VEC_PROP List_ specifying the ericont ori vector property. The default value is [].
        
        **`listCidProp`**
        : A _CID_PROP List_ specifying the cid property. The default value is [].
        
        **`listEricontDamperLocProp`**
        : A _ERICONT_DAMPER_LOC_PROP List_ specifying the ericont damper location property. The default value is [].
        
        **`listOcidProp`**
        : A _OCID_PROP List_ specifying the ocid property. The default value is [].
        
        **`listDamperOffsetVecs`**
        : A _DAMPER_OFFSET_VECS List_ specifying the damper offset vecs. The default value is [].
        
        **`listEricontNodeidProp`**
        : A _ERICONT_NODEID_PROP List_ specifying the ericont nodeid property. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.ElemRelatedInfo.Gap(listEricontEndProp=[], listEricontOriVecProp=[], listCidProp=[], listEricontDamperLocProp=[], listOcidProp=[], listDamperOffsetVecs=[], listEricontNodeidProp=[])
        ```
        
        """
        message = "Properties.ElemRelatedInfo.Gap({},{},{},{},{},{},{})".format(listEricontEndProp, listEricontOriVecProp, listCidProp, listEricontDamperLocProp, listOcidProp, listDamperOffsetVecs, listEricontNodeidProp)
        return JPT_RUN_LINE(message)

    def Bush(self, listEricontEndProp=[], listEricontOriVecProp=[], listCidProp=[], listEricontDamperLocProp=[], listOcidProp=[], listDamperOffsetVecs=[], listEricontNodeidProp=[]):
        r"""
        ## Description
        
        Set Shell Parameter
        
        ## Syntax
        
        ```python
        Properties.ElemRelatedInfo.Bush(listEricontEndProp=[], listEricontOriVecProp=[], listCidProp=[], listEricontDamperLocProp=[], listOcidProp=[], listDamperOffsetVecs=[], listEricontNodeidProp=[])
        ```
        
        Macro: {ref}`Macro-Properties-ElemRelatedInfo_Bush`
        
        Ribbon: {menuselection}`Properties --> ElemRelatedInfo --> Bush`
        
        ## Inputs
        
        **`listEricontEndProp`**
        : A _ERICONT_END_PROP List_ specifying the ericont end property. The default value is [].
        
        **`listEricontOriVecProp`**
        : A _ERICONT_ORI_VEC_PROP List_ specifying the ericont ori vector property. The default value is [].
        
        **`listCidProp`**
        : A _CID_PROP List_ specifying the cid property. The default value is [].
        
        **`listEricontDamperLocProp`**
        : A _ERICONT_DAMPER_LOC_PROP List_ specifying the ericont damper location property. The default value is [].
        
        **`listOcidProp`**
        : A _OCID_PROP List_ specifying the ocid property. The default value is [].
        
        **`listDamperOffsetVecs`**
        : A _DAMPER_OFFSET_VECS List_ specifying the damper offset vecs. The default value is [].
        
        **`listEricontNodeidProp`**
        : A _ERICONT_NODEID_PROP List_ specifying the ericont nodeid property. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.ElemRelatedInfo.Bush(listEricontEndProp=[], listEricontOriVecProp=[], listCidProp=[], listEricontDamperLocProp=[], listOcidProp=[], listDamperOffsetVecs=[], listEricontNodeidProp=[])
        ```
        
        """
        message = "Properties.ElemRelatedInfo.Bush({},{},{},{},{},{},{})".format(listEricontEndProp, listEricontOriVecProp, listCidProp, listEricontDamperLocProp, listOcidProp, listDamperOffsetVecs, listEricontNodeidProp)
        return JPT_RUN_LINE(message)

class Properties_Material:
    def Add(self, strMaterialName, listMaterialProperty):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Properties.Material.Add(strMaterialName, listMaterialProperty)
        ```
        
        Macro: {ref}`Macro-Properties-CreateMaterial`
        
        Ribbon: {menuselection}`Properties --> Material --> Add`
        
        ## Inputs
        
        **`strMaterialName`**
        : A _String_ specifying the material name. This is a required input.
        
        **`listMaterialProperty`**
        : A _MATERIAL_PROPERTY List_ specifying the material property. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.Material.Add(strMaterialName, listMaterialProperty)
        ```
        
        """
        message = "Properties.Material.Add('{}',{})".format(strMaterialName, listMaterialProperty)
        return JPT_RUN_LINE(message)

    def Modify(self, strMaterialID, listMaterialProperty):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Properties.Material.Modify(strMaterialID, listMaterialProperty)
        ```
        
        Macro: {ref}`Macro-Properties-CreateMaterial`
        
        Ribbon: {menuselection}`Properties --> Material --> Modify`
        
        ## Inputs
        
        **`strMaterialID`**
        : A _String_ specifying the material ID. This is a required input.
        
        **`listMaterialProperty`**
        : A _MATERIAL_PROPERTY List_ specifying the material property. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.Material.Modify(strMaterialID, listMaterialProperty)
        ```
        
        """
        message = "Properties.Material.Modify('{}',{})".format(strMaterialID, listMaterialProperty)
        return JPT_RUN_LINE(message)

    def Delete(self, strMaterialID):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Properties.Material.Delete(strMaterialID)
        ```
        
        Macro: {ref}`Macro-Properties-DeleteItem`
        
        Ribbon: {menuselection}`Properties --> Material --> Delete`
        
        ## Inputs
        
        **`strMaterialID`**
        : A _String_ specifying the material ID. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.Material.Delete(strMaterialID)
        ```
        
        """
        message = "Properties.Material.Delete('{}')".format(strMaterialID)
        return JPT_RUN_LINE(message)

class Properties_Section:
    def Import(self, strImportPath=""):
        r"""
        ## Description
        
        import 1D Section
        
        ## Syntax
        
        ```python
        Properties.Section.Import(strImportPath="")
        ```
        
        Macro: {ref}`Macro-Properties-Property1DSectionImport`
        
        Ribbon: {menuselection}`Properties --> Section --> Import`
        
        ## Inputs
        
        **`strImportPath`**
        : A _String_ specifying the import path. The default value is "".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.Section.Import(strImportPath="")
        ```
        
        """
        message = "Properties.Section.Import('{}')".format(strImportPath)
        return JPT_RUN_LINE(message)

    def ModifyGeneral(self, strName="", crSection=None, iSecType=0, iGeneralType=0, dA=0, dB=0, dH=0, dT1=0, dT2=0, dT3=0, bTapered=False, dDaTap=0, dDbTap=0, dDhTap=0, dDt1Tap=0, dDt2Tap=0, dDt3Tap=0):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Properties.Section.ModifyGeneral(strName="", crSection=None, iSecType=0, iGeneralType=0, dA=0, dB=0, dH=0, dT1=0, dT2=0, dT3=0, bTapered=False, dDaTap=0, dDbTap=0, dDhTap=0, dDt1Tap=0, dDt2Tap=0, dDt3Tap=0)
        ```
        
        Macro: {ref}`Macro-Properties-Property1DSectionModify_General`
        
        Ribbon: {menuselection}`Properties --> Section --> ModifyGeneral`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`crSection`**
        : A _Cursor_ specifying the section. The default value is None.
        
        **`iSecType`**
        : An _Integer_ specifying the section type. The default value is 0.
        
        **`iGeneralType`**
        : An _Integer_ specifying the general type. The default value is 0.
        
        **`dA`**
        : A _Double_ specifying the a. The default value is 0.
        
        **`dB`**
        : A _Double_ specifying the b. The default value is 0.
        
        **`dH`**
        : A _Double_ specifying the h. The default value is 0.
        
        **`dT1`**
        : A _Double_ specifying the t1. The default value is 0.
        
        **`dT2`**
        : A _Double_ specifying the t2. The default value is 0.
        
        **`dT3`**
        : A _Double_ specifying the t3. The default value is 0.
        
        **`bTapered`**
        : A _Boolean_ specifying the tapered. The default value is False.
        
        **`dDaTap`**
        : A _Double_ specifying the a tapered. The default value is 0.
        
        **`dDbTap`**
        : A _Double_ specifying the b tapered. The default value is 0.
        
        **`dDhTap`**
        : A _Double_ specifying the h tapered. The default value is 0.
        
        **`dDt1Tap`**
        : A _Double_ specifying the t1 tapered. The default value is 0.
        
        **`dDt2Tap`**
        : A _Double_ specifying the t2 tapered. The default value is 0.
        
        **`dDt3Tap`**
        : A _Double_ specifying the t3 tapered. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.Section.ModifyGeneral(strName="", crSection=None, iSecType=0, iGeneralType=0, dA=0, dB=0, dH=0, dT1=0, dT2=0, dT3=0, bTapered=False, dDaTap=0, dDbTap=0, dDhTap=0, dDt1Tap=0, dDt2Tap=0, dDt3Tap=0)
        ```
        
        """
        message = "Properties.Section.ModifyGeneral('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, crSection, iSecType, iGeneralType, dA, dB, dH, dT1, dT2, dT3, bTapered, dDaTap, dDbTap, dDhTap, dDt1Tap, dDt2Tap, dDt3Tap)
        return JPT_RUN_LINE(message)

    def ModifyLibrary(self, strName="", crSection=None, iType=0, iLibType=0, dDimSize0=0, dDimSize1=0, dDimSize2=0, dDimSize3=0, dDimSize4=0, dDimSize5=0, dDimSize6=0, dDimSize7=0, dDimSize8=0, dDimSize9=0, dDimSize10=0, dDimSize11=0):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Properties.Section.ModifyLibrary(strName="", crSection=None, iType=0, iLibType=0, dDimSize0=0, dDimSize1=0, dDimSize2=0, dDimSize3=0, dDimSize4=0, dDimSize5=0, dDimSize6=0, dDimSize7=0, dDimSize8=0, dDimSize9=0, dDimSize10=0, dDimSize11=0)
        ```
        
        Macro: {ref}`Macro-Properties-Property1DSectionModify_Library`
        
        Ribbon: {menuselection}`Properties --> Section --> ModifyLibrary`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`crSection`**
        : A _Cursor_ specifying the section. The default value is None.
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 0.
        
        **`iLibType`**
        : An _Integer_ specifying the lib type. The default value is 0.
        
        **`dDimSize0`**
        : A _Double_ specifying the dim size0. The default value is 0.
        
        **`dDimSize1`**
        : A _Double_ specifying the dim size1. The default value is 0.
        
        **`dDimSize2`**
        : A _Double_ specifying the dim size2. The default value is 0.
        
        **`dDimSize3`**
        : A _Double_ specifying the dim size3. The default value is 0.
        
        **`dDimSize4`**
        : A _Double_ specifying the dim size4. The default value is 0.
        
        **`dDimSize5`**
        : A _Double_ specifying the dim size5. The default value is 0.
        
        **`dDimSize6`**
        : A _Double_ specifying the dim size6. The default value is 0.
        
        **`dDimSize7`**
        : A _Double_ specifying the dim size7. The default value is 0.
        
        **`dDimSize8`**
        : A _Double_ specifying the dim size8. The default value is 0.
        
        **`dDimSize9`**
        : A _Double_ specifying the dim size9. The default value is 0.
        
        **`dDimSize10`**
        : A _Double_ specifying the dim size10. The default value is 0.
        
        **`dDimSize11`**
        : A _Double_ specifying the dim size11. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.Section.ModifyLibrary(strName="", crSection=None, iType=0, iLibType=0, dDimSize0=0, dDimSize1=0, dDimSize2=0, dDimSize3=0, dDimSize4=0, dDimSize5=0, dDimSize6=0, dDimSize7=0, dDimSize8=0, dDimSize9=0, dDimSize10=0, dDimSize11=0)
        ```
        
        """
        message = "Properties.Section.ModifyLibrary('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, crSection, iType, iLibType, dDimSize0, dDimSize1, dDimSize2, dDimSize3, dDimSize4, dDimSize5, dDimSize6, dDimSize7, dDimSize8, dDimSize9, dDimSize10, dDimSize11)
        return JPT_RUN_LINE(message)

    def ModifySketcher(self, strName="", crSection=None, iType=0):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Properties.Section.ModifySketcher(strName="", crSection=None, iType=0)
        ```
        
        Macro: {ref}`Macro-Properties-Property1DSectionModify_Sketcher`
        
        Ribbon: {menuselection}`Properties --> Section --> ModifySketcher`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`crSection`**
        : A _Cursor_ specifying the section. The default value is None.
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.Section.ModifySketcher(strName="", crSection=None, iType=0)
        ```
        
        """
        message = "Properties.Section.ModifySketcher('{}',{},{})".format(strName, crSection, iType)
        return JPT_RUN_LINE(message)

    def Export(self, strExportSavePath=""):
        r"""
        ## Description
        
        export 1D section to xml file
        
        ## Syntax
        
        ```python
        Properties.Section.Export(strExportSavePath="")
        ```
        
        Macro: {ref}`Macro-Properties-Property1DSectionExport`
        
        Ribbon: {menuselection}`Properties --> Section --> Export`
        
        ## Inputs
        
        **`strExportSavePath`**
        : A _String_ specifying the export save path. The default value is "".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.Section.Export(strExportSavePath="")
        ```
        
        """
        message = "Properties.Section.Export('{}')".format(strExportSavePath)
        return JPT_RUN_LINE(message)

    def Delete(self, crlSection=[]):
        r"""
        ## Description
        
        Properties Section Delete
        
        ## Syntax
        
        ```python
        Properties.Section.Delete(crlSection=[])
        ```
        
        Macro: {ref}`Macro-Properties-Property1DSectionDelMulti`
        
        Ribbon: {menuselection}`Properties --> Section --> Delete`
        
        ## Inputs
        
        **`crlSection`**
        : A _Cursor List_ specifying the section. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.Section.Delete(crlSection=[])
        ```
        
        """
        message = "Properties.Section.Delete({})".format(crlSection)
        return JPT_RUN_LINE(message)

    def AddGeneral(self, strName="", iSecType=0, iSecGenType=0, dDsecGensizeA=0, dDsecGensizeB=0, dDsecGensizeH=0, dDsecGensizeT1=0, dDsecGensizeT2=0, dDsecGensizeT3=0, bBsecTapered=False, dDsecGensizeATap=0, dDsecGensizeBTap=0, dDsecGensizeHTap=0, dDsecGensizeT1Tap=0, dDsecGensizeT2Tap=0, dDsecGensizeT3Tap=0):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Properties.Section.AddGeneral(strName="", iSecType=0, iSecGenType=0, dDsecGensizeA=0, dDsecGensizeB=0, dDsecGensizeH=0, dDsecGensizeT1=0, dDsecGensizeT2=0, dDsecGensizeT3=0, bBsecTapered=False, dDsecGensizeATap=0, dDsecGensizeBTap=0, dDsecGensizeHTap=0, dDsecGensizeT1Tap=0, dDsecGensizeT2Tap=0, dDsecGensizeT3Tap=0)
        ```
        
        Macro: {ref}`Macro-Properties-Property1DSectionAdd_General`
        
        Ribbon: {menuselection}`Properties --> Section --> AddGeneral`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`iSecType`**
        : An _Integer_ specifying the section type. The default value is 0.
        
        **`iSecGenType`**
        : An _Integer_ specifying the section general type. The default value is 0.
        
        **`dDsecGensizeA`**
        : A _Double_ specifying the section general size a. The default value is 0.
        
        **`dDsecGensizeB`**
        : A _Double_ specifying the section general size b. The default value is 0.
        
        **`dDsecGensizeH`**
        : A _Double_ specifying the section general size h. The default value is 0.
        
        **`dDsecGensizeT1`**
        : A _Double_ specifying the section general size t1. The default value is 0.
        
        **`dDsecGensizeT2`**
        : A _Double_ specifying the section general size t2. The default value is 0.
        
        **`dDsecGensizeT3`**
        : A _Double_ specifying the section general size t3. The default value is 0.
        
        **`bBsecTapered`**
        : A _Boolean_ specifying the bsec tapered. The default value is False.
        
        **`dDsecGensizeATap`**
        : A _Double_ specifying the section general size a tapered. The default value is 0.
        
        **`dDsecGensizeBTap`**
        : A _Double_ specifying the section general size b tapered. The default value is 0.
        
        **`dDsecGensizeHTap`**
        : A _Double_ specifying the section general size h tapered. The default value is 0.
        
        **`dDsecGensizeT1Tap`**
        : A _Double_ specifying the section general size t1 tapered. The default value is 0.
        
        **`dDsecGensizeT2Tap`**
        : A _Double_ specifying the section general size t2 tapered. The default value is 0.
        
        **`dDsecGensizeT3Tap`**
        : A _Double_ specifying the section general size t3 tapered. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.Section.AddGeneral(strName="", iSecType=0, iSecGenType=0, dDsecGensizeA=0, dDsecGensizeB=0, dDsecGensizeH=0, dDsecGensizeT1=0, dDsecGensizeT2=0, dDsecGensizeT3=0, bBsecTapered=False, dDsecGensizeATap=0, dDsecGensizeBTap=0, dDsecGensizeHTap=0, dDsecGensizeT1Tap=0, dDsecGensizeT2Tap=0, dDsecGensizeT3Tap=0)
        ```
        
        """
        message = "Properties.Section.AddGeneral('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, iSecType, iSecGenType, dDsecGensizeA, dDsecGensizeB, dDsecGensizeH, dDsecGensizeT1, dDsecGensizeT2, dDsecGensizeT3, bBsecTapered, dDsecGensizeATap, dDsecGensizeBTap, dDsecGensizeHTap, dDsecGensizeT1Tap, dDsecGensizeT2Tap, dDsecGensizeT3Tap)
        return JPT_RUN_LINE(message)

    def AddLibrary(self, strName="", iSecType=1, iLibType=0, dDim1=0, dDim2=0, dDim3=0, dDim4=0, dDim5=0, dDim6=0, dDim7=0, dDim8=0, dDim9=0, dDim10=0, dDim11=0, dDim12=0):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Properties.Section.AddLibrary(strName="", iSecType=1, iLibType=0, dDim1=0, dDim2=0, dDim3=0, dDim4=0, dDim5=0, dDim6=0, dDim7=0, dDim8=0, dDim9=0, dDim10=0, dDim11=0, dDim12=0)
        ```
        
        Macro: {ref}`Macro-Properties-Property1DSectionAdd_Library`
        
        Ribbon: {menuselection}`Properties --> Section --> AddLibrary`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`iSecType`**
        : An _Integer_ specifying the section type. The default value is 1.
        
        **`iLibType`**
        : An _Integer_ specifying the lib type. The default value is 0.
        
        **`dDim1`**
        : A _Double_ specifying the dim1. The default value is 0.
        
        **`dDim2`**
        : A _Double_ specifying the dim2. The default value is 0.
        
        **`dDim3`**
        : A _Double_ specifying the dim3. The default value is 0.
        
        **`dDim4`**
        : A _Double_ specifying the dim4. The default value is 0.
        
        **`dDim5`**
        : A _Double_ specifying the dim5. The default value is 0.
        
        **`dDim6`**
        : A _Double_ specifying the dim6. The default value is 0.
        
        **`dDim7`**
        : A _Double_ specifying the dim7. The default value is 0.
        
        **`dDim8`**
        : A _Double_ specifying the dim8. The default value is 0.
        
        **`dDim9`**
        : A _Double_ specifying the dim9. The default value is 0.
        
        **`dDim10`**
        : A _Double_ specifying the dim10. The default value is 0.
        
        **`dDim11`**
        : A _Double_ specifying the dim11. The default value is 0.
        
        **`dDim12`**
        : A _Double_ specifying the dim12. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.Section.AddLibrary(strName="", iSecType=1, iLibType=0, dDim1=0, dDim2=0, dDim3=0, dDim4=0, dDim5=0, dDim6=0, dDim7=0, dDim8=0, dDim9=0, dDim10=0, dDim11=0, dDim12=0)
        ```
        
        """
        message = "Properties.Section.AddLibrary('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, iSecType, iLibType, dDim1, dDim2, dDim3, dDim4, dDim5, dDim6, dDim7, dDim8, dDim9, dDim10, dDim11, dDim12)
        return JPT_RUN_LINE(message)

    def AddSketcher(self, strName="", iSecType=2):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Properties.Section.AddSketcher(strName="", iSecType=2)
        ```
        
        Macro: {ref}`Macro-Properties-Property1DSectionAdd_Sketcher`
        
        Ribbon: {menuselection}`Properties --> Section --> AddSketcher`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`iSecType`**
        : An _Integer_ specifying the section type. The default value is 2.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.Section.AddSketcher(strName="", iSecType=2)
        ```
        
        """
        message = "Properties.Section.AddSketcher('{}',{})".format(strName, iSecType)
        return JPT_RUN_LINE(message)

class SNOnePush_DropTest:
    def CalcTimestep(self, dRelevantElemRate, dChangeMassRage):
        r"""
        undefined
        """
        message = "SNOnePush.DropTest.CalcTimestep({},{})".format(dRelevantElemRate, dChangeMassRage)
        return JPT_RUN_LINE(message)

    def UpdateFloor(self, strName="", iDir=0, dRopHeight=0.0, dSolutionTime=0.0, iNumberOutput=20, dContactFriction=0.1, iRotAxis=0, dRotAngle=0.0, dRelevantElemRate=0.0, dChangeMassRate=0.0, dMinTimeStep=0.0, strSolverFile="", dFloorSize=0.0, bRename=True, crMat=None):
        r"""
        undefined
        """
        message = "SNOnePush.DropTest.UpdateFloor('{}',{},{},{},{},{},{},{},{},{},{},'{}',{},{},{})".format(strName, iDir, dRopHeight, dSolutionTime, iNumberOutput, dContactFriction, iRotAxis, dRotAngle, dRelevantElemRate, dChangeMassRate, dMinTimeStep, strSolverFile, dFloorSize, bRename, crMat)
        return JPT_RUN_LINE(message)

    def DropRotation(self, strName="", iDir=0, dRopHeight=0.0, dSolutionTime=0.0, iNumberOutput=20, dContactFriction=0.1, iRotAxis=0, dRotAngle=0.0, dRelevantElemRate=0.0, dChangeMassRate=0.0, dMinTimeStep=0.0, strSolverFile="", dFloorSize=0.0, bRename=True, crMat=None):
        r"""
        undefined
        """
        message = "SNOnePush.DropTest.DropRotation('{}',{},{},{},{},{},{},{},{},{},{},'{}',{},{},{})".format(strName, iDir, dRopHeight, dSolutionTime, iNumberOutput, dContactFriction, iRotAxis, dRotAngle, dRelevantElemRate, dChangeMassRate, dMinTimeStep, strSolverFile, dFloorSize, bRename, crMat)
        return JPT_RUN_LINE(message)

class SZOnepushReliability_Assembly:
    def CreateWeld(self, crlWelds, dMeshSize, iRrate, dFilletRadius):
        r"""
        ## Description
        
        Create welding
        
        ## Syntax
        
        ```python
        SZOnepushReliability.Assembly.CreateWeld(crlWelds, dMeshSize, iRrate, dFilletRadius)
        ```
        
        Macro: {ref}`Macro-SZOnepushReliability-SORCreateWeld`
        
        Ribbon: {menuselection}`SZOnepushReliability --> Assembly --> CreateWeld`
        
        ## Inputs
        
        **`crlWelds`**
        : A _Cursor List_ specifying the welds. This is a required input.
        
        **`dMeshSize`**
        : A _Double_ specifying the mesh size. This is a required input.
        
        **`iRrate`**
        : An _Integer_ specifying the rrate. This is a required input.
        
        **`dFilletRadius`**
        : A _Double_ specifying the fillet radius. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        SZOnepushReliability.Assembly.CreateWeld(crlWelds, dMeshSize, iRrate, dFilletRadius)
        ```
        
        """
        message = "SZOnepushReliability.Assembly.CreateWeld({},{},{},{})".format(crlWelds, dMeshSize, iRrate, dFilletRadius)
        return JPT_RUN_LINE(message)

    def ContactSurface(self, crlSrcFace, crlTarPart, dTolerance, iLayer):
        r"""
        ## Description
        
        Contact surface
        
        ## Syntax
        
        ```python
        SZOnepushReliability.Assembly.ContactSurface(crlSrcFace, crlTarPart, dTolerance, iLayer)
        ```
        
        Macro: {ref}`Macro-SZOnepushReliability-SOR_CopyContactSurface`
        
        Ribbon: {menuselection}`SZOnepushReliability --> Assembly --> ContactSurface`
        
        ## Inputs
        
        **`crlSrcFace`**
        : A _Cursor List_ specifying the source face. This is a required input.
        
        **`crlTarPart`**
        : A _Cursor List_ specifying the tar part. This is a required input.
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. This is a required input.
        
        **`iLayer`**
        : An _Integer_ specifying the layer. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        SZOnepushReliability.Assembly.ContactSurface(crlSrcFace, crlTarPart, dTolerance, iLayer)
        ```
        
        """
        message = "SZOnepushReliability.Assembly.ContactSurface({},{},{},{})".format(crlSrcFace, crlTarPart, dTolerance, iLayer)
        return JPT_RUN_LINE(message)

class SZOnepushReliability_MeshEdit:
    def FilletMapping(self, crlPart, crlFace, dMinRadius, dMaxRadius, dMinAngle, dMaxAngle, bConvex, bConcave):
        r"""
        ## Description
        
        Fillet mapping
        
        ## Syntax
        
        ```python
        SZOnepushReliability.MeshEdit.FilletMapping(crlPart, crlFace, dMinRadius, dMaxRadius, dMinAngle, dMaxAngle, bConvex, bConcave)
        ```
        
        Macro: {ref}`Macro-SZOnepushReliability-SORFilletMapping`
        
        Ribbon: {menuselection}`SZOnepushReliability --> MeshEdit --> FilletMapping`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. This is a required input.
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. This is a required input.
        
        **`dMinRadius`**
        : A _Double_ specifying the minimum radius. This is a required input.
        
        **`dMaxRadius`**
        : A _Double_ specifying the maximum radius. This is a required input.
        
        **`dMinAngle`**
        : A _Double_ specifying the minimum angle. This is a required input.
        
        **`dMaxAngle`**
        : A _Double_ specifying the maximum angle. This is a required input.
        
        **`bConvex`**
        : A _Boolean_ specifying the convex. This is a required input.
        
        **`bConcave`**
        : A _Boolean_ specifying the concave. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        SZOnepushReliability.MeshEdit.FilletMapping(crlPart, crlFace, dMinRadius, dMaxRadius, dMinAngle, dMaxAngle, bConvex, bConcave)
        ```
        
        """
        message = "SZOnepushReliability.MeshEdit.FilletMapping({},{},{},{},{},{},{},{})".format(crlPart, crlFace, dMinRadius, dMaxRadius, dMinAngle, dMaxAngle, bConvex, bConcave)
        return JPT_RUN_LINE(message)

class Test_Connection:
    def RRod(self, rbarConnection=RBAR_CONNECTION(), iUlDOFs=1, dTol=0.0, crlMasterTarget=[], crlSlaveTarget=[]):
        r"""
        ## Description
        
        create RRod
        
        ## Syntax
        
        ```python
        Test.Connection.RRod(rbarConnection=RBAR_CONNECTION(), iUlDOFs=1, dTol=0.0, crlMasterTarget=[], crlSlaveTarget=[])
        ```
        
        Macro: {ref}`Macro-Test-ConnRRod`
        
        Ribbon: {menuselection}`Test --> Connection --> RRod`
        
        ## Inputs
        
        **`rbarConnection`**
        : A _RBAR_CONNECTION_ specifying the connection. The default value is RBAR_CONNECTION().
        
        **`iUlDOFs`**
        : An _Integer_ specifying the ul d o fs. The default value is 1.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is 0.0.
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. The default value is [].
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Test.Connection.RRod(rbarConnection=RBAR_CONNECTION(), iUlDOFs=1, dTol=0.0, crlMasterTarget=[], crlSlaveTarget=[])
        ```
        
        """
        message = "Test.Connection.RRod({},{},{},{},{})".format(rbarConnection, iUlDOFs, dTol, crlMasterTarget, crlSlaveTarget)
        return JPT_RUN_LINE(message)

class Test_Muffler:
    def ProjectLineForWeld(self, crlEdge, crlFace):
        r"""
        ## Description
        
        Projec line for weld
        
        ## Syntax
        
        ```python
        Test.Muffler.ProjectLineForWeld(crlEdge, crlFace)
        ```
        
        Macro: {ref}`Macro-Test-WeldingEdgeHGA`
        
        Ribbon: {menuselection}`Test --> Muffler --> ProjectLineForWeld`
        
        ## Inputs
        
        **`crlEdge`**
        : A _Cursor List_ specifying the edge. This is a required input.
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Test.Muffler.ProjectLineForWeld(crlEdge, crlFace)
        ```
        
        """
        message = "Test.Muffler.ProjectLineForWeld({},{})".format(crlEdge, crlFace)
        return JPT_RUN_LINE(message)

class Test_ZGeometryTest:
    def IntersectionCheck(self, crlPart, crlFace, crlElem, iType):
        r"""
        ## Description
        
        Intersection check
        
        ## Syntax
        
        ```python
        Test.ZGeometryTest.IntersectionCheck(crlPart, crlFace, crlElem, iType)
        ```
        
        Macro: {ref}`Macro-Test-IntersectionCheckZGeom`
        
        Ribbon: {menuselection}`Test --> ZGeometryTest --> IntersectionCheck`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. This is a required input.
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. This is a required input.
        
        **`crlElem`**
        : A _Cursor List_ specifying the element. This is a required input.
        
        **`iType`**
        : An _Integer_ specifying the type. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Test.ZGeometryTest.IntersectionCheck(crlPart, crlFace, crlElem, iType)
        ```
        
        """
        message = "Test.ZGeometryTest.IntersectionCheck({},{},{},{})".format(crlPart, crlFace, crlElem, iType)
        return JPT_RUN_LINE(message)

    def ShellAssy(self, taPart=[], crlFace=[], _iMeshType=0, _bSelfIntersection=False, _iMethod=3, _dGapTol=2.1):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Test.ZGeometryTest.ShellAssy(taPart=[], crlFace=[], _iMeshType=0, _bSelfIntersection=False, _iMethod=3, _dGapTol=2.1)
        ```
        
        Macro: {ref}`Macro-Test-ShellAssyGeneral`
        
        Ribbon: {menuselection}`Test --> ZGeometryTest --> ShellAssy`
        
        ## Inputs
        
        **`taPart`**
        : A _TA_PART_ specifying the part. The default value is [].
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`_iMeshType`**
        : A \__I_MESH_TYPE_ specifying the mesh type. The default value is 0.
        
        **`_bSelfIntersection`**
        : A \__B_SELF_INTERSECTION_ specifying the self intersection. The default value is False.
        
        **`_iMethod`**
        : A \__I_METHOD_ specifying the method. The default value is 3.
        
        **`_dGapTol`**
        : A \__D_GAP_TOL_ specifying the gap tolerance. The default value is 2.1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Test.ZGeometryTest.ShellAssy(taPart=[], crlFace=[], _iMeshType=0, _bSelfIntersection=False, _iMethod=3, _dGapTol=2.1)
        ```
        
        """
        message = "Test.ZGeometryTest.ShellAssy({},{},{},{},{},{})".format(taPart, crlFace, _iMeshType, _bSelfIntersection, _iMethod, _dGapTol)
        return JPT_RUN_LINE(message)

class Measure_Angle:
    def TwoNodesAxis(self, crNode1, crNode2, dlAxis=[1,0,0], strTarget="Angle", iPrecision=6):
        r"""
        ## Description
        
        Measure the angle created by 2 nodes and Axis.
        
        ## Syntax
        
        ```python
        Tools.Measure.Angle.TwoNodesAxis(crNode1, crNode2, dlAxis=[1,0,0], strTarget="Angle", iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Tools-MeasureAngleBy2Nodes_Axis`
        
        Ribbon: {menuselection}`Tools --> Measure --> Angle --> TwoNodesAxis`
        
        ## Inputs
        
        **`crNode1`**
        : A _Cursor_ specifying the node1. This is a required input.
        
        **`crNode2`**
        : A _Cursor_ specifying the node2. This is a required input.
        
        **`dlAxis`**
        : A _Double List_ specifying the axis. The default value is [1,0,0].
        
        **`strTarget`**
        : A _String_ specifying the target. The default value is "Angle".
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Measure.Angle.TwoNodesAxis(crNode1, crNode2, dlAxis=[1,0,0], strTarget="Angle", iPrecision=6)
        ```
        
        """
        message = "Tools.Measure.Angle.TwoNodesAxis({},{},{},'{}',{})".format(crNode1, crNode2, dlAxis, strTarget, iPrecision)
        return JPT_RUN_LINE(message)

    def ThreeNodes(self, crNode1, crNode2, crNode3, strTarget="All", iPrecision=6):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Tools.Measure.Angle.ThreeNodes(crNode1, crNode2, crNode3, strTarget="All", iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Tools-MeasureAngleBy3Nodes`
        
        Ribbon: {menuselection}`Tools --> Measure --> Angle --> ThreeNodes`
        
        ## Inputs
        
        **`crNode1`**
        : A _Cursor_ specifying the node1. This is a required input.
        
        **`crNode2`**
        : A _Cursor_ specifying the node2. This is a required input.
        
        **`crNode3`**
        : A _Cursor_ specifying the node3. This is a required input.
        
        **`strTarget`**
        : A _String_ specifying the target. The default value is "All".
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Measure.Angle.ThreeNodes(crNode1, crNode2, crNode3, strTarget="All", iPrecision=6)
        ```
        
        """
        message = "Tools.Measure.Angle.ThreeNodes({},{},{},'{}',{})".format(crNode1, crNode2, crNode3, strTarget, iPrecision)
        return JPT_RUN_LINE(message)

    def ProjectedNode(self, crNode, strTarget="All", iPrecision=6):
        r"""
        ## Description
        
        measure angle on projected node
        
        ## Syntax
        
        ```python
        Tools.Measure.Angle.ProjectedNode(crNode, strTarget="All", iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Tools-MeasureAngleByProjected_Node`
        
        Ribbon: {menuselection}`Tools --> Measure --> Angle --> ProjectedNode`
        
        ## Inputs
        
        **`crNode`**
        : A _Cursor_ specifying the node. This is a required input.
        
        **`strTarget`**
        : A _String_ specifying the target. The default value is "All".
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Measure.Angle.ProjectedNode(crNode, strTarget="All", iPrecision=6)
        ```
        
        """
        message = "Tools.Measure.Angle.ProjectedNode({},'{}',{})".format(crNode, strTarget, iPrecision)
        return JPT_RUN_LINE(message)

    def TwoElemEdges(self, crpElemEdge1, crpElemEdge2, strTarget="Angle", iPrecision=6):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Tools.Measure.Angle.TwoElemEdges(crpElemEdge1, crpElemEdge2, strTarget="Angle", iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Tools-MeasureAngleBy2ElemEdges`
        
        Ribbon: {menuselection}`Tools --> Measure --> Angle --> TwoElemEdges`
        
        ## Inputs
        
        **`crpElemEdge1`**
        : A _Cursor Pair_ specifying the element edge1. This is a required input.
        
        **`crpElemEdge2`**
        : A _Cursor Pair_ specifying the element edge2. This is a required input.
        
        **`strTarget`**
        : A _String_ specifying the target. The default value is "Angle".
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Measure.Angle.TwoElemEdges(crpElemEdge1, crpElemEdge2, strTarget="Angle", iPrecision=6)
        ```
        
        """
        message = "Tools.Measure.Angle.TwoElemEdges({},{},'{}',{})".format(crpElemEdge1, crpElemEdge2, strTarget, iPrecision)
        return JPT_RUN_LINE(message)

    def TwoAxis(self, dlXyz1=[0, 0, 0], dlXyz2=[0, 0, 0], strTarget="Angle", iPrecision=6):
        r"""
        ## Description
        
        Measure the angle created by 2 Axis.
        
        ## Syntax
        
        ```python
        Tools.Measure.Angle.TwoAxis(dlXyz1=[0, 0, 0], dlXyz2=[0, 0, 0], strTarget="Angle", iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Tools-MeasureAngleBy2Axis`
        
        Ribbon: {menuselection}`Tools --> Measure --> Angle --> TwoAxis`
        
        ## Inputs
        
        **`dlXyz1`**
        : A _Double List_ specifying the xyz1. The default value is [0, 0, 0].
        
        **`dlXyz2`**
        : A _Double List_ specifying the xyz2. The default value is [0, 0, 0].
        
        **`strTarget`**
        : A _String_ specifying the target. The default value is "Angle".
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Measure.Angle.TwoAxis(dlXyz1=[0, 0, 0], dlXyz2=[0, 0, 0], strTarget="Angle", iPrecision=6)
        ```
        
        """
        message = "Tools.Measure.Angle.TwoAxis({},{},'{}',{})".format(dlXyz1, dlXyz2, strTarget, iPrecision)
        return JPT_RUN_LINE(message)

    def TwoEdges(self, crEdge1, crEdge2, strTarget="Angle", iPrecision=6):
        r"""
        ## Description
        
        Measure the angle created by 2 edges.
        
        ## Syntax
        
        ```python
        Tools.Measure.Angle.TwoEdges(crEdge1, crEdge2, strTarget="Angle", iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Tools-MeasureAngleBy2Edges`
        
        Ribbon: {menuselection}`Tools --> Measure --> Angle --> TwoEdges`
        
        ## Inputs
        
        **`crEdge1`**
        : A _Cursor_ specifying the edge1. This is a required input.
        
        **`crEdge2`**
        : A _Cursor_ specifying the edge2. This is a required input.
        
        **`strTarget`**
        : A _String_ specifying the target. The default value is "Angle".
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Measure.Angle.TwoEdges(crEdge1, crEdge2, strTarget="Angle", iPrecision=6)
        ```
        
        """
        message = "Tools.Measure.Angle.TwoEdges({},{},'{}',{})".format(crEdge1, crEdge2, strTarget, iPrecision)
        return JPT_RUN_LINE(message)

class Measure_Area:
    def Element(self, crlElem=[], iPrecision=6):
        r"""
        ## Description
        
        Measure Distance By FaceNode
        
        ## Syntax
        
        ```python
        Tools.Measure.Area.Element(crlElem=[], iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Tools-measure_area_elem`
        
        Ribbon: {menuselection}`Tools --> Measure --> Area --> Element`
        
        ## Inputs
        
        **`crlElem`**
        : A _Cursor List_ specifying the element. The default value is [].
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Measure.Area.Element(crlElem=[], iPrecision=6)
        ```
        
        """
        message = "Tools.Measure.Area.Element({},{})".format(crlElem, iPrecision)
        return JPT_RUN_LINE(message)

    def Face(self, crlFace=[], iPrecision=6):
        r"""
        ## Description
        
        Measure Distance By FaceNode
        
        ## Syntax
        
        ```python
        Tools.Measure.Area.Face(crlFace=[], iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Tools-measure_area_face`
        
        Ribbon: {menuselection}`Tools --> Measure --> Area --> Face`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Measure.Area.Face(crlFace=[], iPrecision=6)
        ```
        
        """
        message = "Tools.Measure.Area.Face({},{})".format(crlFace, iPrecision)
        return JPT_RUN_LINE(message)

    def Part(self, crlPart=[], iPrecision=6):
        r"""
        ## Description
        
        Measure Distance By FaceNode
        
        ## Syntax
        
        ```python
        Tools.Measure.Area.Part(crlPart=[], iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Tools-measure_area_part`
        
        Ribbon: {menuselection}`Tools --> Measure --> Area --> Part`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Measure.Area.Part(crlPart=[], iPrecision=6)
        ```
        
        """
        message = "Tools.Measure.Area.Part({},{})".format(crlPart, iPrecision)
        return JPT_RUN_LINE(message)

class Measure_Distance:
    def TwoEdges(self, crEdge1, crEdge2, iPrecision=6):
        r"""
        ## Description
        
        measure the distance of two edges
        
        ## Syntax
        
        ```python
        Tools.Measure.Distance.TwoEdges(crEdge1, crEdge2, iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Tools-MeasureDistanceBy2Edges`
        
        Ribbon: {menuselection}`Tools --> Measure --> Distance --> TwoEdges`
        
        ## Inputs
        
        **`crEdge1`**
        : A _Cursor_ specifying the edge1. This is a required input.
        
        **`crEdge2`**
        : A _Cursor_ specifying the edge2. This is a required input.
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Measure.Distance.TwoEdges(crEdge1, crEdge2, iPrecision=6)
        ```
        
        """
        message = "Tools.Measure.Distance.TwoEdges({},{},{})".format(crEdge1, crEdge2, iPrecision)
        return JPT_RUN_LINE(message)

    def TwoNodes(self, crNode1=None, crNode2=None, strTarget="ALL", iPrecision=6, crCoordinateSystem=None):
        r"""
        ## Description
        
        Measure Distance Two Nodes
        
        ## Syntax
        
        ```python
        Tools.Measure.Distance.TwoNodes(crNode1=None, crNode2=None, strTarget="ALL", iPrecision=6, crCoordinateSystem=None)
        ```
        
        Macro: {ref}`Macro-Tools-MeasureDistanceBy2Nodes`
        
        Ribbon: {menuselection}`Tools --> Measure --> Distance --> TwoNodes`
        
        ## Inputs
        
        **`crNode1`**
        : A _Cursor_ specifying the node1. The default value is None.
        
        **`crNode2`**
        : A _Cursor_ specifying the node2. The default value is None.
        
        **`strTarget`**
        : A _String_ specifying the target. The default value is "ALL".
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        **`crCoordinateSystem`**
        : A _Cursor_ specifying the coordinate system. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Measure.Distance.TwoNodes(crNode1=None, crNode2=None, strTarget="ALL", iPrecision=6, crCoordinateSystem=None)
        ```
        
        """
        message = "Tools.Measure.Distance.TwoNodes({},{},'{}',{},{})".format(crNode1, crNode2, strTarget, iPrecision, crCoordinateSystem)
        return JPT_RUN_LINE(message)

    def FaceNode(self, crlFace, crlNode, iPrecision=6):
        r"""
        ## Description
        
        Measure Distance By FaceNode
        
        ## Syntax
        
        ```python
        Tools.Measure.Distance.FaceNode(crlFace, crlNode, iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Tools-MeasureDistanceByNode2Face`
        
        Ribbon: {menuselection}`Tools --> Measure --> Distance --> FaceNode`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. This is a required input.
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. This is a required input.
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Measure.Distance.FaceNode(crlFace, crlNode, iPrecision=6)
        ```
        
        """
        message = "Tools.Measure.Distance.FaceNode({},{},{})".format(crlFace, crlNode, iPrecision)
        return JPT_RUN_LINE(message)

    def Edge(self, crEdge=None, iPrecision=6):
        r"""
        ## Description
        
        Measure Edge Length
        
        ## Syntax
        
        ```python
        Tools.Measure.Distance.Edge(crEdge=None, iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Tools-MeasureDistanceByEdge`
        
        Ribbon: {menuselection}`Tools --> Measure --> Distance --> Edge`
        
        ## Inputs
        
        **`crEdge`**
        : A _Cursor_ specifying the edge. The default value is None.
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Measure.Distance.Edge(crEdge=None, iPrecision=6)
        ```
        
        """
        message = "Tools.Measure.Distance.Edge({},{})".format(crEdge, iPrecision)
        return JPT_RUN_LINE(message)

    def TwoPoints(self, posPoint1=[0,0,0], posPoint2=[0,0,0], strTarget="ALL", iPrecision=6, crCoordinateSystem=None):
        r"""
        ## Description
        
        measure distance 2 points
        
        ## Syntax
        
        ```python
        Tools.Measure.Distance.TwoPoints(posPoint1=[0,0,0], posPoint2=[0,0,0], strTarget="ALL", iPrecision=6, crCoordinateSystem=None)
        ```
        
        Macro: {ref}`Macro-Tools-MeasureDistanceBy2Points`
        
        Ribbon: {menuselection}`Tools --> Measure --> Distance --> TwoPoints`
        
        ## Inputs
        
        **`posPoint1`**
        : A _Position_ specifying the point1. The default value is [0,0,0].
        
        **`posPoint2`**
        : A _Position_ specifying the point2. The default value is [0,0,0].
        
        **`strTarget`**
        : A _String_ specifying the target. The default value is "ALL".
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        **`crCoordinateSystem`**
        : A _Cursor_ specifying the coordinate system. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Measure.Distance.TwoPoints(posPoint1=[0,0,0], posPoint2=[0,0,0], strTarget="ALL", iPrecision=6, crCoordinateSystem=None)
        ```
        
        """
        message = "Tools.Measure.Distance.TwoPoints({},{},'{}',{},{})".format(posPoint1, posPoint2, strTarget, iPrecision, crCoordinateSystem)
        return JPT_RUN_LINE(message)

    def EdgeNode(self, crEdge, crNode, iPrecision=6):
        r"""
        ## Description
        
        Measure Distance From Node to Edge
        
        ## Syntax
        
        ```python
        Tools.Measure.Distance.EdgeNode(crEdge, crNode, iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Tools-MeasureDistanceByEdge_Node`
        
        Ribbon: {menuselection}`Tools --> Measure --> Distance --> EdgeNode`
        
        ## Inputs
        
        **`crEdge`**
        : A _Cursor_ specifying the edge. This is a required input.
        
        **`crNode`**
        : A _Cursor_ specifying the node. This is a required input.
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Measure.Distance.EdgeNode(crEdge, crNode, iPrecision=6)
        ```
        
        """
        message = "Tools.Measure.Distance.EdgeNode({},{},{})".format(crEdge, crNode, iPrecision)
        return JPT_RUN_LINE(message)

    def LineNode(self, crlTargetNode, iPrecision=6):
        r"""
        ## Description
        
        Measures the distance of a perpendicular line from a node toward the line defined by the two nodes.
        
        ## Syntax
        
        ```python
        Tools.Measure.Distance.LineNode(crlTargetNode, iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Tools-MeasureDistanceByLine2Nodes_Node`
        
        Ribbon: {menuselection}`Tools --> Measure --> Distance --> LineNode`
        
        ## Inputs
        
        **`crlTargetNode`**
        : A _Cursor List_ specifying the target node. This is a required input.
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Measure.Distance.LineNode(crlTargetNode, iPrecision=6)
        ```
        
        """
        message = "Tools.Measure.Distance.LineNode({},{})".format(crlTargetNode, iPrecision)
        return JPT_RUN_LINE(message)

    def PlaneElemToNode(self, crNode=None, crElem=None, iPrecision=6):
        r"""
        ## Description
        
        Measure Distance between Node and plane (created by element).
        
        ## Syntax
        
        ```python
        Tools.Measure.Distance.PlaneElemToNode(crNode=None, crElem=None, iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Tools-MeasureDistanceByPlaneElem_Node`
        
        Ribbon: {menuselection}`Tools --> Measure --> Distance --> PlaneElemToNode`
        
        ## Inputs
        
        **`crNode`**
        : A _Cursor_ specifying the node. The default value is None.
        
        **`crElem`**
        : A _Cursor_ specifying the element. The default value is None.
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Measure.Distance.PlaneElemToNode(crNode=None, crElem=None, iPrecision=6)
        ```
        
        """
        message = "Tools.Measure.Distance.PlaneElemToNode({},{},{})".format(crNode, crElem, iPrecision)
        return JPT_RUN_LINE(message)

    def Plane3NodesToNode(self, crNode1, crNode2, crNode3, crNode, iPrecision=6):
        r"""
        ## Description
        
        measure the distance from node to plane(defined by 3 nodes)
        
        ## Syntax
        
        ```python
        Tools.Measure.Distance.Plane3NodesToNode(crNode1, crNode2, crNode3, crNode, iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Tools-MeasureDistanceByPlane3Nodes_Node`
        
        Ribbon: {menuselection}`Tools --> Measure --> Distance --> Plane3NodesToNode`
        
        ## Inputs
        
        **`crNode1`**
        : A _Cursor_ specifying the node1. This is a required input.
        
        **`crNode2`**
        : A _Cursor_ specifying the node2. This is a required input.
        
        **`crNode3`**
        : A _Cursor_ specifying the node3. This is a required input.
        
        **`crNode`**
        : A _Cursor_ specifying the node. This is a required input.
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Measure.Distance.Plane3NodesToNode(crNode1, crNode2, crNode3, crNode, iPrecision=6)
        ```
        
        """
        message = "Tools.Measure.Distance.Plane3NodesToNode({},{},{},{},{})".format(crNode1, crNode2, crNode3, crNode, iPrecision)
        return JPT_RUN_LINE(message)

class Measure_Mass:
    def Property(self, crlPart, crlCondition, strTarget="Mass", bGravityCenter=False, iPrecision=6):
        r"""
        ## Description
        
        measure mass using applied property
        
        ## Syntax
        
        ```python
        Tools.Measure.Mass.Property(crlPart, crlCondition, strTarget="Mass", bGravityCenter=False, iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Tools-MeasureMassByProperty`
        
        Ribbon: {menuselection}`Tools --> Measure --> Mass --> Property`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. This is a required input.
        
        **`crlCondition`**
        : A _Cursor List_ specifying the condition. This is a required input.
        
        **`strTarget`**
        : A _String_ specifying the target. The default value is "Mass".
        
        **`bGravityCenter`**
        : A _Boolean_ specifying the gravity center. The default value is False.
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Measure.Mass.Property(crlPart, crlCondition, strTarget="Mass", bGravityCenter=False, iPrecision=6)
        ```
        
        """
        message = "Tools.Measure.Mass.Property({},{},'{}',{},{})".format(crlPart, crlCondition, strTarget, bGravityCenter, iPrecision)
        return JPT_RUN_LINE(message)

    def Material(self, crlPart, crlCondition, strDensity, strTarget="Mass", bGravityCenter=False, iPrecision=6):
        r"""
        ## Description
        
        measure mass by material
        
        ## Syntax
        
        ```python
        Tools.Measure.Mass.Material(crlPart, crlCondition, strDensity, strTarget="Mass", bGravityCenter=False, iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Tools-MeasureMassByMaterial`
        
        Ribbon: {menuselection}`Tools --> Measure --> Mass --> Material`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. This is a required input.
        
        **`crlCondition`**
        : A _Cursor List_ specifying the condition. This is a required input.
        
        **`strDensity`**
        : A _String_ specifying the density. This is a required input.
        
        **`strTarget`**
        : A _String_ specifying the target. The default value is "Mass".
        
        **`bGravityCenter`**
        : A _Boolean_ specifying the gravity center. The default value is False.
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Measure.Mass.Material(crlPart, crlCondition, strDensity, strTarget="Mass", bGravityCenter=False, iPrecision=6)
        ```
        
        """
        message = "Tools.Measure.Mass.Material({},{},'{}','{}',{},{})".format(crlPart, crlCondition, strDensity, strTarget, bGravityCenter, iPrecision)
        return JPT_RUN_LINE(message)

class Measure_Radius:
    def Edge(self, crEdge, iPrecision=6):
        r"""
        ## Description
        
        Measure edge minimum radius
        
        ## Syntax
        
        ```python
        Tools.Measure.Radius.Edge(crEdge, iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Tools-MeasureRadiusByEdge`
        
        Ribbon: {menuselection}`Tools --> Measure --> Radius --> Edge`
        
        ## Inputs
        
        **`crEdge`**
        : A _Cursor_ specifying the edge. This is a required input.
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Measure.Radius.Edge(crEdge, iPrecision=6)
        ```
        
        """
        message = "Tools.Measure.Radius.Edge({},{})".format(crEdge, iPrecision)
        return JPT_RUN_LINE(message)

    def ThreeNodes(self, crNode13, crNode23, crNode33, iPrecision=6):
        r"""
        ## Description
        
        Measure Radius MeasureRadiusBy3Nodes
        
        ## Syntax
        
        ```python
        Tools.Measure.Radius.ThreeNodes(crNode13, crNode23, crNode33, iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Tools-MeasureRadiusBy3Nodes`
        
        Ribbon: {menuselection}`Tools --> Measure --> Radius --> ThreeNodes`
        
        ## Inputs
        
        **`crNode13`**
        : A _Cursor_ specifying the node13. This is a required input.
        
        **`crNode23`**
        : A _Cursor_ specifying the node23. This is a required input.
        
        **`crNode33`**
        : A _Cursor_ specifying the node33. This is a required input.
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Measure.Radius.ThreeNodes(crNode13, crNode23, crNode33, iPrecision=6)
        ```
        
        """
        message = "Tools.Measure.Radius.ThreeNodes({},{},{},{})".format(crNode13, crNode23, crNode33, iPrecision)
        return JPT_RUN_LINE(message)

class Tools_BySelection:
    def SelectionOrder(self, crlTarget=[], iType=0, iMethod=0, iStartID=1, iIncrementStep=1, bAscending=True):
        r"""
        ## Description
        
        Renumber by selection order
        
        ## Syntax
        
        ```python
        Tools.BySelection.SelectionOrder(crlTarget=[], iType=0, iMethod=0, iStartID=1, iIncrementStep=1, bAscending=True)
        ```
        
        Macro: {ref}`Macro-Tools-RenumberSpecify`
        
        Ribbon: {menuselection}`Tools --> BySelection --> SelectionOrder`
        
        ## Inputs
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 0.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`iStartID`**
        : An _Integer_ specifying the start ID. The default value is 1.
        
        **`iIncrementStep`**
        : An _Integer_ specifying the increment step. The default value is 1.
        
        **`bAscending`**
        : A _Boolean_ specifying the ascending. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.BySelection.SelectionOrder(crlTarget=[], iType=0, iMethod=0, iStartID=1, iIncrementStep=1, bAscending=True)
        ```
        
        """
        message = "Tools.BySelection.SelectionOrder({},{},{},{},{},{})".format(crlTarget, iType, iMethod, iStartID, iIncrementStep, bAscending)
        return JPT_RUN_LINE(message)

    def Position(self, crlTarget=[], iType=0, iMethod=0, iStartID=1, iIncrementStep=1, bAscending1=True, bAscending2=False, bAscending3=False, iSortFirst=0, iSortSecond=1, iSortThird=2, iEnableSortFirst=1, iEnableSortSecond=0, iEnableSortThird=0, iOffset1=0, iOffset2=0, iOffset3=0, dTol1=0.0, dTol2=0.0, dTol3=0.0, crCoord=None, bSpecialFace=False):
        r"""
        ## Description
        
        Renumber by position
        
        ## Syntax
        
        ```python
        Tools.BySelection.Position(crlTarget=[], iType=0, iMethod=0, iStartID=1, iIncrementStep=1, bAscending1=True, bAscending2=False, bAscending3=False, iSortFirst=0, iSortSecond=1, iSortThird=2, iEnableSortFirst=1, iEnableSortSecond=0, iEnableSortThird=0, iOffset1=0, iOffset2=0, iOffset3=0, dTol1=0.0, dTol2=0.0, dTol3=0.0, crCoord=None, bSpecialFace=False)
        ```
        
        Macro: {ref}`Macro-Tools-RenumberSpecify_byPosition`
        
        Ribbon: {menuselection}`Tools --> BySelection --> Position`
        
        ## Inputs
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 0.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`iStartID`**
        : An _Integer_ specifying the start ID. The default value is 1.
        
        **`iIncrementStep`**
        : An _Integer_ specifying the increment step. The default value is 1.
        
        **`bAscending1`**
        : A _Boolean_ specifying the ascending1. The default value is True.
        
        **`bAscending2`**
        : A _Boolean_ specifying the ascending2. The default value is False.
        
        **`bAscending3`**
        : A _Boolean_ specifying the ascending3. The default value is False.
        
        **`iSortFirst`**
        : An _Integer_ specifying the sort first. The default value is 0.
        
        **`iSortSecond`**
        : An _Integer_ specifying the sort second. The default value is 1.
        
        **`iSortThird`**
        : An _Integer_ specifying the sort third. The default value is 2.
        
        **`iEnableSortFirst`**
        : An _Integer_ specifying the enable sort first. The default value is 1.
        
        **`iEnableSortSecond`**
        : An _Integer_ specifying the enable sort second. The default value is 0.
        
        **`iEnableSortThird`**
        : An _Integer_ specifying the enable sort third. The default value is 0.
        
        **`iOffset1`**
        : An _Integer_ specifying the offset1. The default value is 0.
        
        **`iOffset2`**
        : An _Integer_ specifying the offset2. The default value is 0.
        
        **`iOffset3`**
        : An _Integer_ specifying the offset3. The default value is 0.
        
        **`dTol1`**
        : A _Double_ specifying the tol1. The default value is 0.0.
        
        **`dTol2`**
        : A _Double_ specifying the tol2. The default value is 0.0.
        
        **`dTol3`**
        : A _Double_ specifying the tol3. The default value is 0.0.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`bSpecialFace`**
        : A _Boolean_ specifying the special face. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.BySelection.Position(crlTarget=[], iType=0, iMethod=0, iStartID=1, iIncrementStep=1, bAscending1=True, bAscending2=False, bAscending3=False, iSortFirst=0, iSortSecond=1, iSortThird=2, iEnableSortFirst=1, iEnableSortSecond=0, iEnableSortThird=0, iOffset1=0, iOffset2=0, iOffset3=0, dTol1=0.0, dTol2=0.0, dTol3=0.0, crCoord=None, bSpecialFace=False)
        ```
        
        """
        message = "Tools.BySelection.Position({},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(crlTarget, iType, iMethod, iStartID, iIncrementStep, bAscending1, bAscending2, bAscending3, iSortFirst, iSortSecond, iSortThird, iEnableSortFirst, iEnableSortSecond, iEnableSortThird, iOffset1, iOffset2, iOffset3, dTol1, dTol2, dTol3, crCoord, bSpecialFace)
        return JPT_RUN_LINE(message)

    def OriginalID(self, crlTarget=[], iType=0, iMethod=0, iStartID=1, iIncrementStep=1, bAscending=True):
        r"""
        ## Description
        
        Renumber by original ID
        
        ## Syntax
        
        ```python
        Tools.BySelection.OriginalID(crlTarget=[], iType=0, iMethod=0, iStartID=1, iIncrementStep=1, bAscending=True)
        ```
        
        Macro: {ref}`Macro-Tools-RenumberSpecify_OriginalID`
        
        Ribbon: {menuselection}`Tools --> BySelection --> OriginalID`
        
        ## Inputs
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 0.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`iStartID`**
        : An _Integer_ specifying the start ID. The default value is 1.
        
        **`iIncrementStep`**
        : An _Integer_ specifying the increment step. The default value is 1.
        
        **`bAscending`**
        : A _Boolean_ specifying the ascending. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.BySelection.OriginalID(crlTarget=[], iType=0, iMethod=0, iStartID=1, iIncrementStep=1, bAscending=True)
        ```
        
        """
        message = "Tools.BySelection.OriginalID({},{},{},{},{},{})".format(crlTarget, iType, iMethod, iStartID, iIncrementStep, bAscending)
        return JPT_RUN_LINE(message)

class Tools_Coordinates:
    def CylinderFace(self, strName="CRect1", iCoordType=0, crFace=None):
        r"""
        ## Description
        
        create Coordinate by Cylinder Face
        
        ## Syntax
        
        ```python
        Tools.Coordinates.CylinderFace(strName="CRect1", iCoordType=0, crFace=None)
        ```
        
        Macro: {ref}`Macro-Tools-CreateCoordinateCylinderFace`
        
        Ribbon: {menuselection}`Tools --> Coordinates --> CylinderFace`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "CRect1".
        
        **`iCoordType`**
        : An _Integer_ specifying the coordinate type. The default value is 0.
        
        **`crFace`**
        : A _Cursor_ specifying the face. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Coordinates.CylinderFace(strName="CRect1", iCoordType=0, crFace=None)
        ```
        
        """
        message = "Tools.Coordinates.CylinderFace('{}',{},{})".format(strName, iCoordType, crFace)
        return JPT_RUN_LINE(message)

    def ThreeNode(self, strName="CRect1", iCoordType=0, iOrder=0, crlNode=[], veclPoints=[], crRefCoord=None, crEdit=None):
        r"""
        ## Description
        
        create Coordinate by Cylinder Face
        
        ## Syntax
        
        ```python
        Tools.Coordinates.ThreeNode(strName="CRect1", iCoordType=0, iOrder=0, crlNode=[], veclPoints=[], crRefCoord=None, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Tools-CreateCoordinateThreeNode`
        
        Ribbon: {menuselection}`Tools --> Coordinates --> ThreeNode`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "CRect1".
        
        **`iCoordType`**
        : An _Integer_ specifying the coordinate type. The default value is 0.
        
        **`iOrder`**
        : An _Integer_ specifying the order. The default value is 0.
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        **`veclPoints`**
        : A _Vector List_ specifying the points. The default value is [].
        
        **`crRefCoord`**
        : A _Cursor_ specifying the reference coordinate. The default value is None.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Coordinates.ThreeNode(strName="CRect1", iCoordType=0, iOrder=0, crlNode=[], veclPoints=[], crRefCoord=None, crEdit=None)
        ```
        
        """
        message = "Tools.Coordinates.ThreeNode('{}',{},{},{},{},{},{})".format(strName, iCoordType, iOrder, crlNode, veclPoints, crRefCoord, crEdit)
        return JPT_RUN_LINE(message)

    def Align(self, strName="CRect1", iCoordType=0, iCoordAxis=0, bCreateNew=True, crlNode=[], crEdge=None, crEdit=None):
        r"""
        ## Description
        
        create Coordinate by Align
        
        ## Syntax
        
        ```python
        Tools.Coordinates.Align(strName="CRect1", iCoordType=0, iCoordAxis=0, bCreateNew=True, crlNode=[], crEdge=None, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Tools-CreateCoordinateAlign`
        
        Ribbon: {menuselection}`Tools --> Coordinates --> Align`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "CRect1".
        
        **`iCoordType`**
        : An _Integer_ specifying the coordinate type. The default value is 0.
        
        **`iCoordAxis`**
        : An _Integer_ specifying the coordinate axis. The default value is 0.
        
        **`bCreateNew`**
        : A _Boolean_ specifying the create new. The default value is True.
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        **`crEdge`**
        : A _Cursor_ specifying the edge. The default value is None.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Coordinates.Align(strName="CRect1", iCoordType=0, iCoordAxis=0, bCreateNew=True, crlNode=[], crEdge=None, crEdit=None)
        ```
        
        """
        message = "Tools.Coordinates.Align('{}',{},{},{},{},{},{})".format(strName, iCoordType, iCoordAxis, bCreateNew, crlNode, crEdge, crEdit)
        return JPT_RUN_LINE(message)

    def vecOffset(self, strName="CRect1", iCoordType=0, vTranslate=[0.0,0.0,0.0], bCreateNew=True, crRefCoord=None, crEdit=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Tools.Coordinates.vecOffset(strName="CRect1", iCoordType=0, vTranslate=[0.0,0.0,0.0], bCreateNew=True, crRefCoord=None, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Tools-CreateCoordinateOffset`
        
        Ribbon: {menuselection}`Tools --> Coordinates --> vecOffset`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "CRect1".
        
        **`iCoordType`**
        : An _Integer_ specifying the coordinate type. The default value is 0.
        
        **`vTranslate`**
        : A _V_TRANSLATE_ specifying the translate. The default value is [0.0,0.0,0.0].
        
        **`bCreateNew`**
        : A _Boolean_ specifying the create new. The default value is True.
        
        **`crRefCoord`**
        : A _Cursor_ specifying the reference coordinate. The default value is None.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Coordinates.vecOffset(strName="CRect1", iCoordType=0, vTranslate=[0.0,0.0,0.0], bCreateNew=True, crRefCoord=None, crEdit=None)
        ```
        
        """
        message = "Tools.Coordinates.vecOffset('{}',{},{},{},{},{})".format(strName, iCoordType, vTranslate, bCreateNew, crRefCoord, crEdit)
        return JPT_RUN_LINE(message)

    def Rotate(self, strName="CRect1", iCoordType=0, vecRotate=[0.0,0.0,0.0], bCreateNew=True, crRefCoord=None, crEdit=None):
        r"""
        ## Description
        
        create Coordinate by Rotate
        
        ## Syntax
        
        ```python
        Tools.Coordinates.Rotate(strName="CRect1", iCoordType=0, vecRotate=[0.0,0.0,0.0], bCreateNew=True, crRefCoord=None, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Tools-CreateCoordinateRotate`
        
        Ribbon: {menuselection}`Tools --> Coordinates --> Rotate`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "CRect1".
        
        **`iCoordType`**
        : An _Integer_ specifying the coordinate type. The default value is 0.
        
        **`vecRotate`**
        : A _Vector_ specifying the rotate. The default value is [0.0,0.0,0.0].
        
        **`bCreateNew`**
        : A _Boolean_ specifying the create new. The default value is True.
        
        **`crRefCoord`**
        : A _Cursor_ specifying the reference coordinate. The default value is None.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Coordinates.Rotate(strName="CRect1", iCoordType=0, vecRotate=[0.0,0.0,0.0], bCreateNew=True, crRefCoord=None, crEdit=None)
        ```
        
        """
        message = "Tools.Coordinates.Rotate('{}',{},{},{},{},{})".format(strName, iCoordType, vecRotate, bCreateNew, crRefCoord, crEdit)
        return JPT_RUN_LINE(message)

    def AttachCircle(self, strName="CRect1", iCoordType=0, crEdge=None, bCreateNew=True, crRefCoord=None, crEdit=None):
        r"""
        ## Description
        
        create Coordinate by AttachCircle
        
        ## Syntax
        
        ```python
        Tools.Coordinates.AttachCircle(strName="CRect1", iCoordType=0, crEdge=None, bCreateNew=True, crRefCoord=None, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Tools-CreateCoordinateAttachCircle`
        
        Ribbon: {menuselection}`Tools --> Coordinates --> AttachCircle`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "CRect1".
        
        **`iCoordType`**
        : An _Integer_ specifying the coordinate type. The default value is 0.
        
        **`crEdge`**
        : A _Cursor_ specifying the edge. The default value is None.
        
        **`bCreateNew`**
        : A _Boolean_ specifying the create new. The default value is True.
        
        **`crRefCoord`**
        : A _Cursor_ specifying the reference coordinate. The default value is None.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Coordinates.AttachCircle(strName="CRect1", iCoordType=0, crEdge=None, bCreateNew=True, crRefCoord=None, crEdit=None)
        ```
        
        """
        message = "Tools.Coordinates.AttachCircle('{}',{},{},{},{},{})".format(strName, iCoordType, crEdge, bCreateNew, crRefCoord, crEdit)
        return JPT_RUN_LINE(message)

    def AttachNode(self, strName="CRect1", iCoordType=0, crNode=None, bCreateNew=True, crRefCoord=None, crEdit=None):
        r"""
        ## Description
        
        create Coordinate by AttachNode
        
        ## Syntax
        
        ```python
        Tools.Coordinates.AttachNode(strName="CRect1", iCoordType=0, crNode=None, bCreateNew=True, crRefCoord=None, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Tools-CreateCoordinateAttachNode`
        
        Ribbon: {menuselection}`Tools --> Coordinates --> AttachNode`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "CRect1".
        
        **`iCoordType`**
        : An _Integer_ specifying the coordinate type. The default value is 0.
        
        **`crNode`**
        : A _Cursor_ specifying the node. The default value is None.
        
        **`bCreateNew`**
        : A _Boolean_ specifying the create new. The default value is True.
        
        **`crRefCoord`**
        : A _Cursor_ specifying the reference coordinate. The default value is None.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Coordinates.AttachNode(strName="CRect1", iCoordType=0, crNode=None, bCreateNew=True, crRefCoord=None, crEdit=None)
        ```
        
        """
        message = "Tools.Coordinates.AttachNode('{}',{},{},{},{},{})".format(strName, iCoordType, crNode, bCreateNew, crRefCoord, crEdit)
        return JPT_RUN_LINE(message)

    def Face(self, strName="CRect1", iCoordType=0, iOrder=0, veclPoint=[], crlNode=[], crItem=None, crRefCoord=None, crEdit=None):
        r"""
        ## Description
        
        create Coordinate by Face
        
        ## Syntax
        
        ```python
        Tools.Coordinates.Face(strName="CRect1", iCoordType=0, iOrder=0, veclPoint=[], crlNode=[], crItem=None, crRefCoord=None, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Tools-CreateCoordinateFace`
        
        Ribbon: {menuselection}`Tools --> Coordinates --> Face`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "CRect1".
        
        **`iCoordType`**
        : An _Integer_ specifying the coordinate type. The default value is 0.
        
        **`iOrder`**
        : An _Integer_ specifying the order. The default value is 0.
        
        **`veclPoint`**
        : A _Vector List_ specifying the point. The default value is [].
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        **`crItem`**
        : A _Cursor_ specifying the item. The default value is None.
        
        **`crRefCoord`**
        : A _Cursor_ specifying the reference coordinate. The default value is None.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Coordinates.Face(strName="CRect1", iCoordType=0, iOrder=0, veclPoint=[], crlNode=[], crItem=None, crRefCoord=None, crEdit=None)
        ```
        
        """
        message = "Tools.Coordinates.Face('{}',{},{},{},{},{},{},{})".format(strName, iCoordType, iOrder, veclPoint, crlNode, crItem, crRefCoord, crEdit)
        return JPT_RUN_LINE(message)

    def Offset(self, strName="CRect1", iCoordType=0, vecTranslate=[0.0,0.0,0.0], bCreateNew=True, crRefCoord=None, crEdit=None):
        r"""
        ## Description
        
        create Coordinate by Offset
        
        ## Syntax
        
        ```python
        Tools.Coordinates.Offset(strName="CRect1", iCoordType=0, vecTranslate=[0.0,0.0,0.0], bCreateNew=True, crRefCoord=None, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Tools-CreateCoordinateOffset`
        
        Ribbon: {menuselection}`Tools --> Coordinates --> Offset`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "CRect1".
        
        **`iCoordType`**
        : An _Integer_ specifying the coordinate type. The default value is 0.
        
        **`vecTranslate`**
        : A _Vector_ specifying the translate. The default value is [0.0,0.0,0.0].
        
        **`bCreateNew`**
        : A _Boolean_ specifying the create new. The default value is True.
        
        **`crRefCoord`**
        : A _Cursor_ specifying the reference coordinate. The default value is None.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Coordinates.Offset(strName="CRect1", iCoordType=0, vecTranslate=[0.0,0.0,0.0], bCreateNew=True, crRefCoord=None, crEdit=None)
        ```
        
        """
        message = "Tools.Coordinates.Offset('{}',{},{},{},{},{})".format(strName, iCoordType, vecTranslate, bCreateNew, crRefCoord, crEdit)
        return JPT_RUN_LINE(message)

class Tools_Group:
    def DeleteGroupEntity(self, crlDelGroup):
        r"""
        ## Description
        
        Delete Entity in Group
        
        ## Syntax
        
        ```python
        Tools.Group.DeleteGroupEntity(crlDelGroup)
        ```
        
        Macro: {ref}`Macro-Tools-DeleteGroupEntity`
        
        Ribbon: {menuselection}`Tools --> Group --> DeleteGroupEntity`
        
        ## Inputs
        
        **`crlDelGroup`**
        : A _Cursor List_ specifying the del group. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Group.DeleteGroupEntity(crlDelGroup)
        ```
        
        """
        message = "Tools.Group.DeleteGroupEntity({})".format(crlDelGroup)
        return JPT_RUN_LINE(message)

    def CreateGroup(self, strGroupName, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Tools.Group.CreateGroup(strGroupName, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-Tools-CreateGroup`
        
        Ribbon: {menuselection}`Tools --> Group --> CreateGroup`
        
        ## Inputs
        
        **`strGroupName`**
        : A _String_ specifying the group name. This is a required input.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Group.CreateGroup(strGroupName, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "Tools.Group.CreateGroup('{}',{},{})".format(strGroupName, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

class Tools_TotalLoad:
    def LBC(self, crlTarget=[], crCoordinate=None, strOutput="Total", iPrecision=6):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Tools.TotalLoad.LBC(crlTarget=[], crCoordinate=None, strOutput="Total", iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Tools-MeasureTotalLoad_ForLBC`
        
        Ribbon: {menuselection}`Tools --> TotalLoad --> LBC`
        
        ## Inputs
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crCoordinate`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`strOutput`**
        : A _String_ specifying the output. The default value is "Total".
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.TotalLoad.LBC(crlTarget=[], crCoordinate=None, strOutput="Total", iPrecision=6)
        ```
        
        """
        message = "Tools.TotalLoad.LBC({},{},'{}',{})".format(crlTarget, crCoordinate, strOutput, iPrecision)
        return JPT_RUN_LINE(message)

    def Model(self, crlTarget=[], crCoordinate=None, strOutput="Total", iPrecision=6):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Tools.TotalLoad.Model(crlTarget=[], crCoordinate=None, strOutput="Total", iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Tools-MeasureTotalLoad_ForModel`
        
        Ribbon: {menuselection}`Tools --> TotalLoad --> Model`
        
        ## Inputs
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crCoordinate`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`strOutput`**
        : A _String_ specifying the output. The default value is "Total".
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.TotalLoad.Model(crlTarget=[], crCoordinate=None, strOutput="Total", iPrecision=6)
        ```
        
        """
        message = "Tools.TotalLoad.Model({},{},'{}',{})".format(crlTarget, crCoordinate, strOutput, iPrecision)
        return JPT_RUN_LINE(message)

    def Node(self, crlTarget=[], crCoordinate=None, strOutput="Total", iPrecision=6):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Tools.TotalLoad.Node(crlTarget=[], crCoordinate=None, strOutput="Total", iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Tools-MeasureTotalLoad_ForNode`
        
        Ribbon: {menuselection}`Tools --> TotalLoad --> Node`
        
        ## Inputs
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crCoordinate`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`strOutput`**
        : A _String_ specifying the output. The default value is "Total".
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.TotalLoad.Node(crlTarget=[], crCoordinate=None, strOutput="Total", iPrecision=6)
        ```
        
        """
        message = "Tools.TotalLoad.Node({},{},'{}',{})".format(crlTarget, crCoordinate, strOutput, iPrecision)
        return JPT_RUN_LINE(message)

    def Part(self, crlTarget=[], crCoordinate=None, strOutput="Total", iPrecision=6):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Tools.TotalLoad.Part(crlTarget=[], crCoordinate=None, strOutput="Total", iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Tools-MeasureTotalLoad_ForPart`
        
        Ribbon: {menuselection}`Tools --> TotalLoad --> Part`
        
        ## Inputs
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crCoordinate`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`strOutput`**
        : A _String_ specifying the output. The default value is "Total".
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.TotalLoad.Part(crlTarget=[], crCoordinate=None, strOutput="Total", iPrecision=6)
        ```
        
        """
        message = "Tools.TotalLoad.Part({},{},'{}',{})".format(crlTarget, crCoordinate, strOutput, iPrecision)
        return JPT_RUN_LINE(message)

    def Face(self, crlTarget=[], crCoordinate=None, strOutput="Total", iPrecision=6):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Tools.TotalLoad.Face(crlTarget=[], crCoordinate=None, strOutput="Total", iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Tools-MeasureTotalLoad_ForFace`
        
        Ribbon: {menuselection}`Tools --> TotalLoad --> Face`
        
        ## Inputs
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crCoordinate`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`strOutput`**
        : A _String_ specifying the output. The default value is "Total".
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.TotalLoad.Face(crlTarget=[], crCoordinate=None, strOutput="Total", iPrecision=6)
        ```
        
        """
        message = "Tools.TotalLoad.Face({},{},'{}',{})".format(crlTarget, crCoordinate, strOutput, iPrecision)
        return JPT_RUN_LINE(message)

class Tools_Measure:
    Angle = Measure_Angle()

    Area = Measure_Area()

    Distance = Measure_Distance()

    Mass = Measure_Mass()

    Radius = Measure_Radius()

    def Volume(self, crlPart, iPrecision=6):
        r"""
        ## Description
        
        measure volume of parts
        
        ## Syntax
        
        ```python
        Tools.Measure.Volume(crlPart, iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Tools-MeasureVolumeParts`
        
        Ribbon: {menuselection}`Tools --> Measure --> Volume`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. This is a required input.
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Measure.Volume(crlPart, iPrecision=6)
        ```
        
        """
        message = "Tools.Measure.Volume({},{})".format(crlPart, iPrecision)
        return JPT_RUN_LINE(message)

class FileMenu:
    def AddJTDB(strFileName, strMethod="AUTO", strTargetModel="IMPORTED", strOption="OFFSET", iInputNode=0, iInputElem=0, iInputPart=0, iInputMaterial=0, iInputProperty=0):
        r"""
        ## Description
        
        add jtdb into model
        
        ## Syntax
        
        ```python
        FileMenu.AddJTDB(strFileName, strMethod="AUTO", strTargetModel="IMPORTED", strOption="OFFSET", iInputNode=0, iInputElem=0, iInputPart=0, iInputMaterial=0, iInputProperty=0)
        ```
        
        Macro: {ref}`Macro-FileMenu-AddJTDB`
        
        Ribbon: {menuselection}`FileMenu --> AddJTDB`
        
        ## Inputs
        
        **`strFileName`**
        : A _String_ specifying the file name. This is a required input.
        
        **`strMethod`**
        : A _String_ specifying the method. The default value is "AUTO".
        
        **`strTargetModel`**
        : A _String_ specifying the target model. The default value is "IMPORTED".
        
        **`strOption`**
        : A _String_ specifying the option. The default value is "OFFSET".
        
        **`iInputNode`**
        : An _Integer_ specifying the input node. The default value is 0.
        
        **`iInputElem`**
        : An _Integer_ specifying the input element. The default value is 0.
        
        **`iInputPart`**
        : An _Integer_ specifying the input part. The default value is 0.
        
        **`iInputMaterial`**
        : An _Integer_ specifying the input material. The default value is 0.
        
        **`iInputProperty`**
        : An _Integer_ specifying the input property. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        FileMenu.AddJTDB(strFileName, strMethod="AUTO", strTargetModel="IMPORTED", strOption="OFFSET", iInputNode=0, iInputElem=0, iInputPart=0, iInputMaterial=0, iInputProperty=0)
        ```
        
        """
        message = "FileMenu.AddJTDB('{}','{}','{}','{}',{},{},{},{},{})".format(strFileName, strMethod, strTargetModel, strOption, iInputNode, iInputElem, iInputPart, iInputMaterial, iInputProperty)
        return JPT_RUN_LINE(message)

    def Save(strFileName=""):
        r"""
        ## Description
        
        Save file JTDB
        
        ## Syntax
        
        ```python
        FileMenu.Save(strFileName="")
        ```
        
        Macro: {ref}`Macro-FileMenu-SaveJTDB`
        
        Ribbon: {menuselection}`FileMenu --> Save`
        
        ## Inputs
        
        **`strFileName`**
        : A _String_ specifying the file name. The default value is "".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        FileMenu.Save(strFileName="")
        ```
        
        """
        message = "FileMenu.Save('{}')".format(strFileName)
        return JPT_RUN_LINE(message)

    def Open(strFileName="", bUseTmpTable=False):
        r"""
        ## Description
        
        Load JTDB file
        
        ## Syntax
        
        ```python
        FileMenu.Open(strFileName="", bUseTmpTable=False)
        ```
        
        Macro: {ref}`Macro-FileMenu-LoadJTDB`
        
        Ribbon: {menuselection}`FileMenu --> Open`
        
        ## Inputs
        
        **`strFileName`**
        : A _String_ specifying the file name. The default value is "".
        
        **`bUseTmpTable`**
        : A _Boolean_ specifying the use temporary table. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        FileMenu.Open(strFileName="", bUseTmpTable=False)
        ```
        
        """
        message = "FileMenu.Open('{}',{})".format(strFileName, bUseTmpTable)
        return JPT_RUN_LINE(message)

class Utility:
    def FindEntities(strTarget, strFindType, bFindMatch=False):
        r"""
        ## Description
        
        Search entity by ID, Name ...etc
        
        ## Syntax
        
        ```python
        Utility.FindEntities(strTarget, strFindType, bFindMatch=False)
        ```
        
        Macro: {ref}`Macro-Utility-FindEntities`
        
        Ribbon: {menuselection}`Utility --> FindEntities`
        
        ## Inputs
        
        **`strTarget`**
        : A _String_ specifying the target. This is a required input.
        
        **`strFindType`**
        : A _String_ specifying the find type. This is a required input.
        
        **`bFindMatch`**
        : A _Boolean_ specifying the find match. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Utility.FindEntities(strTarget, strFindType, bFindMatch=False)
        ```
        
        """
        message = "Utility.FindEntities('{}','{}',{})".format(strTarget, strFindType, bFindMatch)
        return JPT_RUN_LINE(message)

    def MeasureDistanceBy2Edges(crEdgeFirst, crEdgeLast, iPrecision=6):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Utility.MeasureDistanceBy2Edges(crEdgeFirst, crEdgeLast, iPrecision=6)
        ```
        
        Macro: {ref}`Macro-Utility-MeasureDistanceBy2Edges`
        
        Ribbon: {menuselection}`Utility --> MeasureDistanceBy2Edges`
        
        ## Inputs
        
        **`crEdgeFirst`**
        : A _Cursor_ specifying the edge first. This is a required input.
        
        **`crEdgeLast`**
        : A _Cursor_ specifying the edge last. This is a required input.
        
        **`iPrecision`**
        : An _Integer_ specifying the precision. The default value is 6.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Utility.MeasureDistanceBy2Edges(crEdgeFirst, crEdgeLast, iPrecision=6)
        ```
        
        """
        message = "Utility.MeasureDistanceBy2Edges({},{},{})".format(crEdgeFirst, crEdgeLast, iPrecision)
        return JPT_RUN_LINE(message)

class ACModeling:
    ACBoundary = ACModeling_ACBoundary()

    Create = ACModeling_Create()

    def CloseHoleAuto(crlClosedHoleParts):
        r"""
        ## Description
        
        ACModeling CloseHoleAuto
        
        ## Syntax
        
        ```python
        ACModeling.CloseHoleAuto(crlClosedHoleParts)
        ```
        
        Macro: {ref}`Macro-ACModeling-ACModelingCloseHoleAuto`
        
        Ribbon: {menuselection}`ACModeling --> CloseHoleAuto`
        
        ## Inputs
        
        **`crlClosedHoleParts`**
        : A _Cursor List_ specifying the closed hole parts. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        ACModeling.CloseHoleAuto(crlClosedHoleParts)
        ```
        
        """
        message = "ACModeling.CloseHoleAuto({})".format(crlClosedHoleParts)
        return JPT_RUN_LINE(message)

    def Cut(crlPart):
        r"""
        ## Description
        
        cut for ACModeling
        
        ## Syntax
        
        ```python
        ACModeling.Cut(crlPart)
        ```
        
        Macro: {ref}`Macro-ACModeling-ACModellingCut`
        
        Ribbon: {menuselection}`ACModeling --> Cut`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        ACModeling.Cut(crlPart)
        ```
        
        """
        message = "ACModeling.Cut({})".format(crlPart)
        return JPT_RUN_LINE(message)

class Analysis:
    AbaqusStep = Analysis_AbaqusStep()

    ACTRAN = Analysis_ACTRAN()

    Analysis = Analysis_Analysis()

    Ansys = Analysis_Ansys()

    Nastran = Analysis_Nastran()

    Permas = Analysis_Permas()

    TSSolver = Analysis_TSSolver()

    TSSS = Analysis_TSSS()

    def Abaqus(strName, bRBE2toMPC=False, bRenameProcess=False, iCodeType=0, iSurfDefType=0, iUnit=0, iWriteType=0, strDescription="", crlStepSequence=[], crEdit=None, strlUserText=[], bExptNdEleGroups=False, bDeleteFloatingNodes=False, bExptFaceElemGroups2Surface=False, bLoadCase=False, bAutoAssignDummyProperty=True, crDummyMat=None, bOutputGeometryId=True):
        r"""
        ## Description
        
        abaqus exporting
        
        ## Syntax
        
        ```python
        Analysis.Abaqus(strName, bRBE2toMPC=False, bRenameProcess=False, iCodeType=0, iSurfDefType=0, iUnit=0, iWriteType=0, strDescription="", crlStepSequence=[], crEdit=None, strlUserText=[], bExptNdEleGroups=False, bDeleteFloatingNodes=False, bExptFaceElemGroups2Surface=False, bLoadCase=False, bAutoAssignDummyProperty=True, crDummyMat=None, bOutputGeometryId=True)
        ```
        
        Macro: {ref}`Macro-Analysis-CreateAbaqusJob`
        
        Ribbon: {menuselection}`Analysis --> Abaqus`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`bRBE2toMPC`**
        : A _Boolean_ specifying the r e2to MPC. The default value is False.
        
        **`bRenameProcess`**
        : A _Boolean_ specifying the rename process. The default value is False.
        
        **`iCodeType`**
        : An _Integer_ specifying the code type. The default value is 0.
        
        **`iSurfDefType`**
        : An _Integer_ specifying the surface definition type. The default value is 0.
        
        **`iUnit`**
        : An _Integer_ specifying the unit. The default value is 0.
        
        **`iWriteType`**
        : An _Integer_ specifying the write type. The default value is 0.
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`crlStepSequence`**
        : A _Cursor List_ specifying the step sequence. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`strlUserText`**
        : A _String List_ specifying the user text. The default value is [].
        
        **`bExptNdEleGroups`**
        : A _Boolean_ specifying the exeption nd element groups. The default value is False.
        
        **`bDeleteFloatingNodes`**
        : A _Boolean_ specifying the delete floating nodes. The default value is False.
        
        **`bExptFaceElemGroups2Surface`**
        : A _Boolean_ specifying the exeption face element groups2 surface. The default value is False.
        
        **`bLoadCase`**
        : A _Boolean_ specifying the load case. The default value is False.
        
        **`bAutoAssignDummyProperty`**
        : A _Boolean_ specifying the auto assign dummy property. The default value is True.
        
        **`crDummyMat`**
        : A _Cursor_ specifying the dummy material. The default value is None.
        
        **`bOutputGeometryId`**
        : A _Boolean_ specifying the output geometry ID. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.Abaqus(strName, bRBE2toMPC=False, bRenameProcess=False, iCodeType=0, iSurfDefType=0, iUnit=0, iWriteType=0, strDescription="", crlStepSequence=[], crEdit=None, strlUserText=[], bExptNdEleGroups=False, bDeleteFloatingNodes=False, bExptFaceElemGroups2Surface=False, bLoadCase=False, bAutoAssignDummyProperty=True, crDummyMat=None, bOutputGeometryId=True)
        ```
        
        """
        message = "Analysis.Abaqus('{}',{},{},{},{},{},{},'{}',{},{},'{}',{},{},{},{},{},{},{})".format(strName, bRBE2toMPC, bRenameProcess, iCodeType, iSurfDefType, iUnit, iWriteType, strDescription, crlStepSequence, crEdit, strlUserText, bExptNdEleGroups, bDeleteFloatingNodes, bExptFaceElemGroups2Surface, bLoadCase, bAutoAssignDummyProperty, crDummyMat, bOutputGeometryId)
        return JPT_RUN_LINE(message)

    def ExportAnsys(strName="", crAnsysJob=None):
        r"""
        ## Description
        
        Find faces in part by typical description
        
        ## Syntax
        
        ```python
        Analysis.ExportAnsys(strName="", crAnsysJob=None)
        ```
        
        Macro: {ref}`Macro-Analysis-ExportAnsys`
        
        Ribbon: {menuselection}`Analysis --> ExportAnsys`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`crAnsysJob`**
        : A _Cursor_ specifying the ansys job. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.ExportAnsys(strName="", crAnsysJob=None)
        ```
        
        """
        message = "Analysis.ExportAnsys('{}',{})".format(strName, crAnsysJob)
        return JPT_RUN_LINE(message)

    def ExportAbaqus(crAbaJob=None, crlSelectPart=[], strInpPath=""):
        r"""
        ## Description
        
        export inp file
        
        ## Syntax
        
        ```python
        Analysis.ExportAbaqus(crAbaJob=None, crlSelectPart=[], strInpPath="")
        ```
        
        Macro: {ref}`Macro-Analysis-ExportAbaqusInp`
        
        Ribbon: {menuselection}`Analysis --> ExportAbaqus`
        
        ## Inputs
        
        **`crAbaJob`**
        : A _Cursor_ specifying the aba job. The default value is None.
        
        **`crlSelectPart`**
        : A _Cursor List_ specifying the select part. The default value is [].
        
        **`strInpPath`**
        : A _String_ specifying the inp path. The default value is "".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.ExportAbaqus(crAbaJob=None, crlSelectPart=[], strInpPath="")
        ```
        
        """
        message = "Analysis.ExportAbaqus({},{},'{}')".format(crAbaJob, crlSelectPart, strInpPath)
        return JPT_RUN_LINE(message)

    def ModifyLbcToStep(listAbaqusLbcStepInfo=[]):
        r"""
        ## Description
        
        Abaqus analysis output data setting
        
        ## Syntax
        
        ```python
        Analysis.ModifyLbcToStep(listAbaqusLbcStepInfo=[])
        ```
        
        Macro: {ref}`Macro-Analysis-AbaModifyLbcToStep`
        
        Ribbon: {menuselection}`Analysis --> ModifyLbcToStep`
        
        ## Inputs
        
        **`listAbaqusLbcStepInfo`**
        : A _ABAQUS_LBC_STEP_INFO List_ specifying the abaqus load boundary condition step info. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.ModifyLbcToStep(listAbaqusLbcStepInfo=[])
        ```
        
        """
        message = "Analysis.ModifyLbcToStep({})".format(listAbaqusLbcStepInfo)
        return JPT_RUN_LINE(message)

    def ExportAdx(crJob=None, strPath="", iNumType=0, iUiWidth=10, iUiPrecision=1):
        r"""
        ## Description
        
        export adx file
        
        ## Syntax
        
        ```python
        Analysis.ExportAdx(crJob=None, strPath="", iNumType=0, iUiWidth=10, iUiPrecision=1)
        ```
        
        Macro: {ref}`Macro-Analysis-ExportAdx`
        
        Ribbon: {menuselection}`Analysis --> ExportAdx`
        
        ## Inputs
        
        **`crJob`**
        : A _Cursor_ specifying the job. The default value is None.
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        **`iNumType`**
        : An _Integer_ specifying the number type. The default value is 0.
        
        **`iUiWidth`**
        : An _Integer_ specifying the UI width. The default value is 10.
        
        **`iUiPrecision`**
        : An _Integer_ specifying the UI precision. The default value is 1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.ExportAdx(crJob=None, strPath="", iNumType=0, iUiWidth=10, iUiPrecision=1)
        ```
        
        """
        message = "Analysis.ExportAdx({},'{}',{},{},{})".format(crJob, strPath, iNumType, iUiWidth, iUiPrecision)
        return JPT_RUN_LINE(message)

    def ExportLsdyna(strPath="", crJob=None):
        r"""
        ## Description
        
        Analysis LSDYNA ExportLsdyna
        
        ## Syntax
        
        ```python
        Analysis.ExportLsdyna(strPath="", crJob=None)
        ```
        
        Macro: {ref}`Macro-Analysis-ExportLsdyna`
        
        Ribbon: {menuselection}`Analysis --> ExportLsdyna`
        
        ## Inputs
        
        **`strPath`**
        : A _String_ specifying the path. The default value is "".
        
        **`crJob`**
        : A _Cursor_ specifying the job. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.ExportLsdyna(strPath="", crJob=None)
        ```
        
        """
        message = "Analysis.ExportLsdyna('{}',{})".format(strPath, crJob)
        return JPT_RUN_LINE(message)

    def NastranJob(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), bDummyPropAutoAssign=False, iDummyPropMaterialID=0, crEdit=None):
        r"""
        ## Description
        
        Create nastran Job
        
        ## Syntax
        
        ```python
        Analysis.NastranJob(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), bDummyPropAutoAssign=False, iDummyPropMaterialID=0, crEdit=None)
        ```
        
        Macro: {ref}`Macro-Analysis-NastranJob`
        
        Ribbon: {menuselection}`Analysis --> NastranJob`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "Job_1".
        
        **`strDescription`**
        : A _String_ specifying the description. The default value is "".
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`nastranAnalysis`**
        : A _NASTRAN_ANALYSIS_ specifying the nastran analysis data structure. The default value is NASTRAN_ANALYSIS().
        
        **`bDummyPropAutoAssign`**
        : A _Boolean_ specifying the dummy property auto assign. The default value is False.
        
        **`iDummyPropMaterialID`**
        : An _Integer_ specifying the dummy property material ID. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.NastranJob(strName="Job_1", strDescription="", crlTarget=[], nastranAnalysis=NASTRAN_ANALYSIS(), bDummyPropAutoAssign=False, iDummyPropMaterialID=0, crEdit=None)
        ```
        
        """
        message = "Analysis.NastranJob('{}','{}',{},'{}',{},{},{})".format(strName, strDescription, crlTarget, nastranAnalysis, bDummyPropAutoAssign, iDummyPropMaterialID, crEdit)
        return JPT_RUN_LINE(message)

    def LSDYNAJob(crEdit=None):
        r"""
        ## Description
        
        Create analysis LSDYNA job
        
        ## Syntax
        
        ```python
        Analysis.LSDYNAJob(crEdit=None)
        ```
        
        Macro: {ref}`Macro-Analysis-LsdynaJob`
        
        Ribbon: {menuselection}`Analysis --> LSDYNAJob`
        
        ## Inputs
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Analysis.LSDYNAJob(crEdit=None)
        ```
        
        """
        message = "Analysis.LSDYNAJob({})".format(crEdit)
        return JPT_RUN_LINE(message)

    ADVC = Analysis_ADVC()

class Assemble:
    SeparateFaces = Assemble_SeparateFaces()

    def Boolean(crlPart, iBooleanType=0, dToleranceAlignment=0.01, bLeaveOriginalBodies=False):
        r"""
        ## Description
        
        Make Boolean between Parts
        
        ## Syntax
        
        ```python
        Assemble.Boolean(crlPart, iBooleanType=0, dToleranceAlignment=0.01, bLeaveOriginalBodies=False)
        ```
        
        Macro: {ref}`Macro-Assemble-AssembleBoolean2`
        
        Ribbon: {menuselection}`Assemble --> Boolean`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. This is a required input.
        
        **`iBooleanType`**
        : An _Integer_ specifying the boolean type. The default value is 0.
        
        **`dToleranceAlignment`**
        : A _Double_ specifying the tolerance alignment. The default value is 0.01.
        
        **`bLeaveOriginalBodies`**
        : A _Boolean_ specifying the leave original bodies. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Assemble.Boolean(crlPart, iBooleanType=0, dToleranceAlignment=0.01, bLeaveOriginalBodies=False)
        ```
        
        """
        message = "Assemble.Boolean({},{},{},{})".format(crlPart, iBooleanType, dToleranceAlignment, bLeaveOriginalBodies)
        return JPT_RUN_LINE(message)

    def AssembleFace(crlPart, crlFace, dTolerance, iFitEdge, iMeshSetting):
        r"""
        ## Description
        
        create assemble face
        
        ## Syntax
        
        ```python
        Assemble.AssembleFace(crlPart, crlFace, dTolerance, iFitEdge, iMeshSetting)
        ```
        
        Macro: {ref}`Macro-Assemble-ASMAssembleFace`
        
        Ribbon: {menuselection}`Assemble --> AssembleFace`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. This is a required input.
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. This is a required input.
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. This is a required input.
        
        **`iFitEdge`**
        : An _Integer_ specifying the fit edge. This is a required input.
        
        **`iMeshSetting`**
        : An _Integer_ specifying the mesh setting. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Assemble.AssembleFace(crlPart, crlFace, dTolerance, iFitEdge, iMeshSetting)
        ```
        
        """
        message = "Assemble.AssembleFace({},{},{},{},{})".format(crlPart, crlFace, dTolerance, iFitEdge, iMeshSetting)
        return JPT_RUN_LINE(message)

    def FullLayer(crPart, dLayerWidth=1.0, iLayer=1, bUsePyramid=False):
        r"""
        ## Description
        
        assemble full layer
        
        ## Syntax
        
        ```python
        Assemble.FullLayer(crPart, dLayerWidth=1.0, iLayer=1, bUsePyramid=False)
        ```
        
        Macro: {ref}`Macro-Assemble-AssembleFullLayer`
        
        Ribbon: {menuselection}`Assemble --> FullLayer`
        
        ## Inputs
        
        **`crPart`**
        : A _Cursor_ specifying the part. This is a required input.
        
        **`dLayerWidth`**
        : A _Double_ specifying the layer width. The default value is 1.0.
        
        **`iLayer`**
        : An _Integer_ specifying the layer. The default value is 1.
        
        **`bUsePyramid`**
        : A _Boolean_ specifying the use pyramid. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Assemble.FullLayer(crPart, dLayerWidth=1.0, iLayer=1, bUsePyramid=False)
        ```
        
        """
        message = "Assemble.FullLayer({},{},{},{})".format(crPart, dLayerWidth, iLayer, bUsePyramid)
        return JPT_RUN_LINE(message)

    def CylinderLayer(crFace=None, crNode=None):
        r"""
        ## Description
        
        Assemble cylinder layer
        
        ## Syntax
        
        ```python
        Assemble.CylinderLayer(crFace=None, crNode=None)
        ```
        
        Macro: {ref}`Macro-Assemble-CylinderLayer`
        
        Ribbon: {menuselection}`Assemble --> CylinderLayer`
        
        ## Inputs
        
        **`crFace`**
        : A _Cursor_ specifying the face. The default value is None.
        
        **`crNode`**
        : A _Cursor_ specifying the node. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Assemble.CylinderLayer(crFace=None, crNode=None)
        ```
        
        """
        message = "Assemble.CylinderLayer({},{})".format(crFace, crNode)
        return JPT_RUN_LINE(message)

    def SharedFace():
        r"""
        ## Description
        
        Create assemble shared face
        
        ## Syntax
        
        ```python
        Assemble.SharedFace()
        ```
        
        Macro: {ref}`Macro-Assemble-CreateSharedFace`
        
        Ribbon: {menuselection}`Assemble --> SharedFace`
        
        ## Inputs
        
        None
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Assemble.SharedFace()
        ```
        
        """
        message = "Assemble.SharedFace({})".format('')
        return JPT_RUN_LINE(message)

    def AssembleFaces(ilPairFaceToMakeShareFace=[], dTolerance=0.1, iTypeConnectPos=1, bUseSnapInput=False, dSnapTolerance=0.005, bFitEdge=False):
        r"""
        ## Description
        
        Assemble AssembleFaces
        
        ## Syntax
        
        ```python
        Assemble.AssembleFaces(ilPairFaceToMakeShareFace=[], dTolerance=0.1, iTypeConnectPos=1, bUseSnapInput=False, dSnapTolerance=0.005, bFitEdge=False)
        ```
        
        Macro: {ref}`Macro-Assemble-Assemble_Faces`
        
        Ribbon: {menuselection}`Assemble --> AssembleFaces`
        
        ## Inputs
        
        **`ilPairFaceToMakeShareFace`**
        : A _Integer List_ specifying the pair face to make share face. The default value is [].
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. The default value is 0.1.
        
        **`iTypeConnectPos`**
        : An _Integer_ specifying the type connect position. The default value is 1.
        
        **`bUseSnapInput`**
        : A _Boolean_ specifying the use snap input. The default value is False.
        
        **`dSnapTolerance`**
        : A _Double_ specifying the snap tolerance. The default value is 0.005.
        
        **`bFitEdge`**
        : A _Boolean_ specifying the fit edge. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Assemble.AssembleFaces(ilPairFaceToMakeShareFace=[], dTolerance=0.1, iTypeConnectPos=1, bUseSnapInput=False, dSnapTolerance=0.005, bFitEdge=False)
        ```
        
        """
        message = "Assemble.AssembleFaces({},{},{},{},{},{})".format(ilPairFaceToMakeShareFace, dTolerance, iTypeConnectPos, bUseSnapInput, dSnapTolerance, bFitEdge)
        return JPT_RUN_LINE(message)

    def GeneralLayer(crlFace=[], dWidth=1.0, iLayer=1, bSeparatePart=False, bForceStitchToSide=False, bSmoothingEdge=False, bNoImprint=False, bWidthOnSurface=False, bMakeHexa=False):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Assemble.GeneralLayer(crlFace=[], dWidth=1.0, iLayer=1, bSeparatePart=False, bForceStitchToSide=False, bSmoothingEdge=False, bNoImprint=False, bWidthOnSurface=False, bMakeHexa=False)
        ```
        
        Macro: {ref}`Macro-Assemble-AssembleGeneralLayer`
        
        Ribbon: {menuselection}`Assemble --> GeneralLayer`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`dWidth`**
        : A _Double_ specifying the width. The default value is 1.0.
        
        **`iLayer`**
        : An _Integer_ specifying the layer. The default value is 1.
        
        **`bSeparatePart`**
        : A _Boolean_ specifying the separate part. The default value is False.
        
        **`bForceStitchToSide`**
        : A _Boolean_ specifying the force stitch to side. The default value is False.
        
        **`bSmoothingEdge`**
        : A _Boolean_ specifying the smoothing edge. The default value is False.
        
        **`bNoImprint`**
        : A _Boolean_ specifying the no imprint. The default value is False.
        
        **`bWidthOnSurface`**
        : A _Boolean_ specifying the width on surface. The default value is False.
        
        **`bMakeHexa`**
        : A _Boolean_ specifying the make hexa. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Assemble.GeneralLayer(crlFace=[], dWidth=1.0, iLayer=1, bSeparatePart=False, bForceStitchToSide=False, bSmoothingEdge=False, bNoImprint=False, bWidthOnSurface=False, bMakeHexa=False)
        ```
        
        """
        message = "Assemble.GeneralLayer({},{},{},{},{},{},{},{},{})".format(crlFace, dWidth, iLayer, bSeparatePart, bForceStitchToSide, bSmoothingEdge, bNoImprint, bWidthOnSurface, bMakeHexa)
        return JPT_RUN_LINE(message)

    def AddRib(crPart=None, crlFace=[], veclPoints=[], dWidth=0.0, dDepth=0.0):
        r"""
        ## Description
        
        create Rib
        
        ## Syntax
        
        ```python
        Assemble.AddRib(crPart=None, crlFace=[], veclPoints=[], dWidth=0.0, dDepth=0.0)
        ```
        
        Macro: {ref}`Macro-Assemble-AddRib`
        
        Ribbon: {menuselection}`Assemble --> AddRib`
        
        ## Inputs
        
        **`crPart`**
        : A _Cursor_ specifying the part. The default value is None.
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`veclPoints`**
        : A _Vector List_ specifying the points. The default value is [].
        
        **`dWidth`**
        : A _Double_ specifying the width. The default value is 0.0.
        
        **`dDepth`**
        : A _Double_ specifying the depth. The default value is 0.0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Assemble.AddRib(crPart=None, crlFace=[], veclPoints=[], dWidth=0.0, dDepth=0.0)
        ```
        
        """
        message = "Assemble.AddRib({},{},{},{},{})".format(crPart, crlFace, veclPoints, dWidth, dDepth)
        return JPT_RUN_LINE(message)

    def FindMatingFace(crlMasterFaces=[], crlSlaveFaces=[], crlPart=[], dTolerance=0.0):
        r"""
        ## Description
        
        Find Mating Face For Assemble Faces
        
        ## Syntax
        
        ```python
        Assemble.FindMatingFace(crlMasterFaces=[], crlSlaveFaces=[], crlPart=[], dTolerance=0.0)
        ```
        
        Macro: {ref}`Macro-Assemble-Assemble_Faces_MatingStep`
        
        Ribbon: {menuselection}`Assemble --> FindMatingFace`
        
        ## Inputs
        
        **`crlMasterFaces`**
        : A _Cursor List_ specifying the master faces. The default value is [].
        
        **`crlSlaveFaces`**
        : A _Cursor List_ specifying the slave faces. The default value is [].
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. The default value is 0.0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Assemble.FindMatingFace(crlMasterFaces=[], crlSlaveFaces=[], crlPart=[], dTolerance=0.0)
        ```
        
        """
        message = "Assemble.FindMatingFace({},{},{},{})".format(crlMasterFaces, crlSlaveFaces, crlPart, dTolerance)
        return JPT_RUN_LINE(message)

    def AddBoss(crPart=None, iType=0, bMerge=True, posOrgCenter=[0,0,0], vecOrgDirection=[0,0,0], crCoord=None, iAxis=0, dAngle=0.0, bHollow=False, dInnerRadius=0.0, dOrgOuterRadius=1.0, dTaperAngle=0.0, iNodeOnCircle=12, iNodeOnAxis=2, dOriginalHeight=5.0):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Assemble.AddBoss(crPart=None, iType=0, bMerge=True, posOrgCenter=[0,0,0], vecOrgDirection=[0,0,0], crCoord=None, iAxis=0, dAngle=0.0, bHollow=False, dInnerRadius=0.0, dOrgOuterRadius=1.0, dTaperAngle=0.0, iNodeOnCircle=12, iNodeOnAxis=2, dOriginalHeight=5.0)
        ```
        
        Macro: {ref}`Macro-Assemble-AssembleAddBoss`
        
        Ribbon: {menuselection}`Assemble --> AddBoss`
        
        ## Inputs
        
        **`crPart`**
        : A _Cursor_ specifying the part. The default value is None.
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 0.
        
        **`bMerge`**
        : A _Boolean_ specifying the merge. The default value is True.
        
        **`posOrgCenter`**
        : A _Position_ specifying the original center. The default value is [0,0,0].
        
        **`vecOrgDirection`**
        : A _Vector_ specifying the original direction. The default value is [0,0,0].
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`iAxis`**
        : An _Integer_ specifying the axis. The default value is 0.
        
        **`dAngle`**
        : A _Double_ specifying the angle. The default value is 0.0.
        
        **`bHollow`**
        : A _Boolean_ specifying the hollow. The default value is False.
        
        **`dInnerRadius`**
        : A _Double_ specifying the inner radius. The default value is 0.0.
        
        **`dOrgOuterRadius`**
        : A _Double_ specifying the original outer radius. The default value is 1.0.
        
        **`dTaperAngle`**
        : A _Double_ specifying the taper angle. The default value is 0.0.
        
        **`iNodeOnCircle`**
        : An _Integer_ specifying the node on circle. The default value is 12.
        
        **`iNodeOnAxis`**
        : An _Integer_ specifying the node on axis. The default value is 2.
        
        **`dOriginalHeight`**
        : A _Double_ specifying the original height. The default value is 5.0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Assemble.AddBoss(crPart=None, iType=0, bMerge=True, posOrgCenter=[0,0,0], vecOrgDirection=[0,0,0], crCoord=None, iAxis=0, dAngle=0.0, bHollow=False, dInnerRadius=0.0, dOrgOuterRadius=1.0, dTaperAngle=0.0, iNodeOnCircle=12, iNodeOnAxis=2, dOriginalHeight=5.0)
        ```
        
        """
        message = "Assemble.AddBoss({},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(crPart, iType, bMerge, posOrgCenter, vecOrgDirection, crCoord, iAxis, dAngle, bHollow, dInnerRadius, dOrgOuterRadius, dTaperAngle, iNodeOnCircle, iNodeOnAxis, dOriginalHeight)
        return JPT_RUN_LINE(message)

class Assembly:
    RightClick = Assembly_RightClick()

class BoundaryConditions:
    BoundaryTemperature = BoundaryConditions_BoundaryTemperature()

    Convection = BoundaryConditions_Convection()

    EnforcedLoads = BoundaryConditions_EnforcedLoads()

    HeatFlux = BoundaryConditions_HeatFlux()

    InitialElementalValue = BoundaryConditions_InitialElementalValue()

    InitialTemperature = BoundaryConditions_InitialTemperature()

    LBCCopy = BoundaryConditions_LBCCopy()

    Pressure = BoundaryConditions_Pressure()

    Submodel = BoundaryConditions_Submodel()

    TemperatureLoads = BoundaryConditions_TemperatureLoads()

    def LoadCase(strName="LoadCase1", dFactor=1.0, crlTarget=[], iExportId=1, dlTargetFactor=[], crEdit=None):
        r"""
        ## Description
        
        create load case
        
        ## Syntax
        
        ```python
        BoundaryConditions.LoadCase(strName="LoadCase1", dFactor=1.0, crlTarget=[], iExportId=1, dlTargetFactor=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-LoadCase`
        
        Ribbon: {menuselection}`BoundaryConditions --> LoadCase`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "LoadCase1".
        
        **`dFactor`**
        : A _Double_ specifying the factor. The default value is 1.0.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`iExportId`**
        : An _Integer_ specifying the export ID. The default value is 1.
        
        **`dlTargetFactor`**
        : A _Double List_ specifying the target factor. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.LoadCase(strName="LoadCase1", dFactor=1.0, crlTarget=[], iExportId=1, dlTargetFactor=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.LoadCase('{}',{},{},{},{},{})".format(strName, dFactor, crlTarget, iExportId, dlTargetFactor, crEdit)
        return JPT_RUN_LINE(message)

    def InsideHeatGeneration(strName="InsideHeatGeneration1", dInsideFlux=DFLT_DBL, crTable=None, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Create load boundary condition of inside heat generation
        
        ## Syntax
        
        ```python
        BoundaryConditions.InsideHeatGeneration(strName="InsideHeatGeneration1", dInsideFlux=DFLT_DBL, crTable=None, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-InsideHeatGeneration`
        
        Ribbon: {menuselection}`BoundaryConditions --> InsideHeatGeneration`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "InsideHeatGeneration1".
        
        **`dInsideFlux`**
        : A _Double_ specifying the inside flux. The default value is DFLT_DBL.
        
        **`crTable`**
        : A _Cursor_ specifying the table. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.InsideHeatGeneration(strName="InsideHeatGeneration1", dInsideFlux=DFLT_DBL, crTable=None, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.InsideHeatGeneration('{}',{},{},{},{})".format(strName, dInsideFlux, crTable, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def LBCCopyMisc(iMethod=0, iMatchMethod=0, dlTransVec=[0,0,0], dTransMag=0, dTransOffset=0, dTransTol=0, crTranscrCoord=None, dlTransaxisVec=[0,0,0], dlTranscenterVec=[0,0,0], dRotateAngle=0, dRotateTol=0, crRotatecrCoord=None, veclMirrorPoint=[], dMirrordOffset=0, dMirrorTol=0.1, crlTarget=[]):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        BoundaryConditions.LBCCopyMisc(iMethod=0, iMatchMethod=0, dlTransVec=[0,0,0], dTransMag=0, dTransOffset=0, dTransTol=0, crTranscrCoord=None, dlTransaxisVec=[0,0,0], dlTranscenterVec=[0,0,0], dRotateAngle=0, dRotateTol=0, crRotatecrCoord=None, veclMirrorPoint=[], dMirrordOffset=0, dMirrorTol=0.1, crlTarget=[])
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-CmdLbcCopy`
        
        Ribbon: {menuselection}`BoundaryConditions --> LBCCopyMisc`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`iMatchMethod`**
        : An _Integer_ specifying the match method. The default value is 0.
        
        **`dlTransVec`**
        : A _Double List_ specifying the trans vector. The default value is [0,0,0].
        
        **`dTransMag`**
        : A _Double_ specifying the trans mag. The default value is 0.
        
        **`dTransOffset`**
        : A _Double_ specifying the trans offset. The default value is 0.
        
        **`dTransTol`**
        : A _Double_ specifying the trans tolerance. The default value is 0.
        
        **`crTranscrCoord`**
        : A _Cursor_ specifying the transcr coordinate. The default value is None.
        
        **`dlTransaxisVec`**
        : A _Double List_ specifying the transaxis vector. The default value is [0,0,0].
        
        **`dlTranscenterVec`**
        : A _Double List_ specifying the transcenter vector. The default value is [0,0,0].
        
        **`dRotateAngle`**
        : A _Double_ specifying the rotate angle. The default value is 0.
        
        **`dRotateTol`**
        : A _Double_ specifying the rotate tolerance. The default value is 0.
        
        **`crRotatecrCoord`**
        : A _Cursor_ specifying the rotatecr coordinate. The default value is None.
        
        **`veclMirrorPoint`**
        : A _Vector List_ specifying the mirror point. The default value is [].
        
        **`dMirrordOffset`**
        : A _Double_ specifying the mirrord offset. The default value is 0.
        
        **`dMirrorTol`**
        : A _Double_ specifying the mirror tolerance. The default value is 0.1.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.LBCCopyMisc(iMethod=0, iMatchMethod=0, dlTransVec=[0,0,0], dTransMag=0, dTransOffset=0, dTransTol=0, crTranscrCoord=None, dlTransaxisVec=[0,0,0], dlTranscenterVec=[0,0,0], dRotateAngle=0, dRotateTol=0, crRotatecrCoord=None, veclMirrorPoint=[], dMirrordOffset=0, dMirrorTol=0.1, crlTarget=[])
        ```
        
        """
        message = "BoundaryConditions.LBCCopyMisc({},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(iMethod, iMatchMethod, dlTransVec, dTransMag, dTransOffset, dTransTol, crTranscrCoord, dlTransaxisVec, dlTranscenterVec, dRotateAngle, dRotateTol, crRotatecrCoord, veclMirrorPoint, dMirrordOffset, dMirrorTol, crlTarget)
        return JPT_RUN_LINE(message)

    def LbcContactConvert(iConvertTo, iTieConvType, crlTarget):
        r"""
        ## Description
        
        BoundaryConditions LbcContactConvert
        
        ## Syntax
        
        ```python
        BoundaryConditions.LbcContactConvert(iConvertTo, iTieConvType, crlTarget)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-LbcContactConvertTo`
        
        Ribbon: {menuselection}`BoundaryConditions --> LbcContactConvert`
        
        ## Inputs
        
        **`iConvertTo`**
        : An _Integer_ specifying the convert to. This is a required input.
        
        **`iTieConvType`**
        : An _Integer_ specifying the tie conv type. This is a required input.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.LbcContactConvert(iConvertTo, iTieConvType, crlTarget)
        ```
        
        """
        message = "BoundaryConditions.LbcContactConvert({},{},{})".format(iConvertTo, iTieConvType, crlTarget)
        return JPT_RUN_LINE(message)

    def FieldData(strName="", iType=0, ilSheet=[], crEdit=None, bAbaqusAmp=False, iAmpType=0):
        r"""
        ## Description
        
        create field data table
        
        ## Syntax
        
        ```python
        BoundaryConditions.FieldData(strName="", iType=0, ilSheet=[], crEdit=None, bAbaqusAmp=False, iAmpType=0)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-FieldData`
        
        Ribbon: {menuselection}`BoundaryConditions --> FieldData`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 0.
        
        **`ilSheet`**
        : A _Integer List_ specifying the sheet. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`bAbaqusAmp`**
        : A _Boolean_ specifying the abaqus amp. The default value is False.
        
        **`iAmpType`**
        : An _Integer_ specifying the amp type. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.FieldData(strName="", iType=0, ilSheet=[], crEdit=None, bAbaqusAmp=False, iAmpType=0)
        ```
        
        """
        message = "BoundaryConditions.FieldData('{}',{},{},{},{},{})".format(strName, iType, ilSheet, crEdit, bAbaqusAmp, iAmpType)
        return JPT_RUN_LINE(message)

    def FixedConstraint(strName="Constraint1", iDwDof=7, crCurCoord=None, iType=0, iUsetType=0, crTable=None, bAbaqusFixed=False, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        create FixedConstraint
        
        ## Syntax
        
        ```python
        BoundaryConditions.FixedConstraint(strName="Constraint1", iDwDof=7, crCurCoord=None, iType=0, iUsetType=0, crTable=None, bAbaqusFixed=False, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-FixedConstraint`
        
        Ribbon: {menuselection}`BoundaryConditions --> FixedConstraint`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "Constraint1".
        
        **`iDwDof`**
        : An _Integer_ specifying the dw dof. The default value is 7.
        
        **`crCurCoord`**
        : A _Cursor_ specifying the cur coordinate. The default value is None.
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 0.
        
        **`iUsetType`**
        : An _Integer_ specifying the uset type. The default value is 0.
        
        **`crTable`**
        : A _Cursor_ specifying the table. The default value is None.
        
        **`bAbaqusFixed`**
        : A _Boolean_ specifying the abaqus fixed. The default value is False.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.FixedConstraint(strName="Constraint1", iDwDof=7, crCurCoord=None, iType=0, iUsetType=0, crTable=None, bAbaqusFixed=False, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.FixedConstraint('{}',{},{},{},{},{},{},{},{})".format(strName, iDwDof, crCurCoord, iType, iUsetType, crTable, bAbaqusFixed, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def DofSet(strName="", iDwDof=0, crCurCoord=None, crTable=None, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Lbc Dof Set
        
        ## Syntax
        
        ```python
        BoundaryConditions.DofSet(strName="", iDwDof=0, crCurCoord=None, crTable=None, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-BoundaryConditions-DofSet`
        
        Ribbon: {menuselection}`BoundaryConditions --> DofSet`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`iDwDof`**
        : An _Integer_ specifying the dw dof. The default value is 0.
        
        **`crCurCoord`**
        : A _Cursor_ specifying the cur coordinate. The default value is None.
        
        **`crTable`**
        : A _Cursor_ specifying the table. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        BoundaryConditions.DofSet(strName="", iDwDof=0, crCurCoord=None, crTable=None, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "BoundaryConditions.DofSet('{}',{},{},{},{},{})".format(strName, iDwDof, crCurCoord, crTable, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    BodyLoads = BoundaryConditions_BodyLoads()

    Force = BoundaryConditions_Force()

    InitialNodalValue = BoundaryConditions_InitialNodalValue()

class Connections:
    Pretension = Connections_Pretension()

    def MassElements(strName, crlTarget, dMass=0.01, iDof=1, bDesigner=True, crCoordinate=None, dOffset0=0.0, dOffset1=0.0, dOffset2=0.0, dInertia0=0.0, dInertia1=0.0, dInertia2=0.0, dInertia3=0.0, dInertia4=0.0, dInertia5=0.0, crEdit=None, bUpdateDispCS=True):
        r"""
        ## Description
        
        Connection new mass
        
        ## Syntax
        
        ```python
        Connections.MassElements(strName, crlTarget, dMass=0.01, iDof=1, bDesigner=True, crCoordinate=None, dOffset0=0.0, dOffset1=0.0, dOffset2=0.0, dInertia0=0.0, dInertia1=0.0, dInertia2=0.0, dInertia3=0.0, dInertia4=0.0, dInertia5=0.0, crEdit=None, bUpdateDispCS=True)
        ```
        
        Macro: {ref}`Macro-Connections-ConnectionNewMass`
        
        Ribbon: {menuselection}`Connections --> MassElements`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. This is a required input.
        
        **`dMass`**
        : A _Double_ specifying the mass. The default value is 0.01.
        
        **`iDof`**
        : An _Integer_ specifying the dof. The default value is 1.
        
        **`bDesigner`**
        : A _Boolean_ specifying the designer. The default value is True.
        
        **`crCoordinate`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`dOffset0`**
        : A _Double_ specifying the offset0. The default value is 0.0.
        
        **`dOffset1`**
        : A _Double_ specifying the offset1. The default value is 0.0.
        
        **`dOffset2`**
        : A _Double_ specifying the offset2. The default value is 0.0.
        
        **`dInertia0`**
        : A _Double_ specifying the inertia0. The default value is 0.0.
        
        **`dInertia1`**
        : A _Double_ specifying the inertia1. The default value is 0.0.
        
        **`dInertia2`**
        : A _Double_ specifying the inertia2. The default value is 0.0.
        
        **`dInertia3`**
        : A _Double_ specifying the inertia3. The default value is 0.0.
        
        **`dInertia4`**
        : A _Double_ specifying the inertia4. The default value is 0.0.
        
        **`dInertia5`**
        : A _Double_ specifying the inertia5. The default value is 0.0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`bUpdateDispCS`**
        : A _Boolean_ specifying the update displacement coordinate system. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.MassElements(strName, crlTarget, dMass=0.01, iDof=1, bDesigner=True, crCoordinate=None, dOffset0=0.0, dOffset1=0.0, dOffset2=0.0, dInertia0=0.0, dInertia1=0.0, dInertia2=0.0, dInertia3=0.0, dInertia4=0.0, dInertia5=0.0, crEdit=None, bUpdateDispCS=True)
        ```
        
        """
        message = "Connections.MassElements('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, crlTarget, dMass, iDof, bDesigner, crCoordinate, dOffset0, dOffset1, dOffset2, dInertia0, dInertia1, dInertia2, dInertia3, dInertia4, dInertia5, crEdit, bUpdateDispCS)
        return JPT_RUN_LINE(message)

    def BarBeam(strName, iEType=10, iMethod=1, crProp=None, dlOrient=[], crlMasterTarget=[], crlSlaveTarget=[]):
        r"""
        ## Description
        
        create Connections Bar or Beam
        
        ## Syntax
        
        ```python
        Connections.BarBeam(strName, iEType=10, iMethod=1, crProp=None, dlOrient=[], crlMasterTarget=[], crlSlaveTarget=[])
        ```
        
        Macro: {ref}`Macro-Connections-ConnectionBarBeam`
        
        Ribbon: {menuselection}`Connections --> BarBeam`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`iEType`**
        : An _Integer_ specifying the e type. The default value is 10.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 1.
        
        **`crProp`**
        : A _Cursor_ specifying the property. The default value is None.
        
        **`dlOrient`**
        : A _Double List_ specifying the orient. The default value is [].
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. The default value is [].
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.BarBeam(strName, iEType=10, iMethod=1, crProp=None, dlOrient=[], crlMasterTarget=[], crlSlaveTarget=[])
        ```
        
        """
        message = "Connections.BarBeam('{}',{},{},{},{},{},{})".format(strName, iEType, iMethod, crProp, dlOrient, crlMasterTarget, crlSlaveTarget)
        return JPT_RUN_LINE(message)

    def GapsDetail(crlMaster=[], crlSlave=[], iMethod=0, iOriMode=0, crCoord=None, strName="", dU0=DFLT_DBL, dF0=DFLT_DBL, dKa=DFLT_DBL, dKb=DFLT_DBL, dKt=DFLT_DBL, dMar=DFLT_DBL, dMu1=DFLT_DBL, dMu2=DFLT_DBL, dlOriVec=[], dTmax=DFLT_DBL, dTol=DFLT_DBL, dTrmin=DFLT_DBL, crEditCur=None):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Connections.GapsDetail(crlMaster=[], crlSlave=[], iMethod=0, iOriMode=0, crCoord=None, strName="", dU0=DFLT_DBL, dF0=DFLT_DBL, dKa=DFLT_DBL, dKb=DFLT_DBL, dKt=DFLT_DBL, dMar=DFLT_DBL, dMu1=DFLT_DBL, dMu2=DFLT_DBL, dlOriVec=[], dTmax=DFLT_DBL, dTol=DFLT_DBL, dTrmin=DFLT_DBL, crEditCur=None)
        ```
        
        Macro: {ref}`Macro-Connections-ConnectGap`
        
        Ribbon: {menuselection}`Connections --> GapsDetail`
        
        ## Inputs
        
        **`crlMaster`**
        : A _Cursor List_ specifying the master. The default value is [].
        
        **`crlSlave`**
        : A _Cursor List_ specifying the slave. The default value is [].
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`iOriMode`**
        : An _Integer_ specifying the ori mode. The default value is 0.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`dU0`**
        : A _Double_ specifying the u0. The default value is DFLT_DBL.
        
        **`dF0`**
        : A _Double_ specifying the f0. The default value is DFLT_DBL.
        
        **`dKa`**
        : A _Double_ specifying the ka. The default value is DFLT_DBL.
        
        **`dKb`**
        : A _Double_ specifying the kb. The default value is DFLT_DBL.
        
        **`dKt`**
        : A _Double_ specifying the kt. The default value is DFLT_DBL.
        
        **`dMar`**
        : A _Double_ specifying the mar. The default value is DFLT_DBL.
        
        **`dMu1`**
        : A _Double_ specifying the mu1. The default value is DFLT_DBL.
        
        **`dMu2`**
        : A _Double_ specifying the mu2. The default value is DFLT_DBL.
        
        **`dlOriVec`**
        : A _Double List_ specifying the ori vector. The default value is [].
        
        **`dTmax`**
        : A _Double_ specifying the tmax. The default value is DFLT_DBL.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is DFLT_DBL.
        
        **`dTrmin`**
        : A _Double_ specifying the trmin. The default value is DFLT_DBL.
        
        **`crEditCur`**
        : A _Cursor_ specifying the edit cur. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.GapsDetail(crlMaster=[], crlSlave=[], iMethod=0, iOriMode=0, crCoord=None, strName="", dU0=DFLT_DBL, dF0=DFLT_DBL, dKa=DFLT_DBL, dKb=DFLT_DBL, dKt=DFLT_DBL, dMar=DFLT_DBL, dMu1=DFLT_DBL, dMu2=DFLT_DBL, dlOriVec=[], dTmax=DFLT_DBL, dTol=DFLT_DBL, dTrmin=DFLT_DBL, crEditCur=None)
        ```
        
        """
        message = "Connections.GapsDetail({},{},{},{},{},'{}',{},{},{},{},{},{},{},{},{},{},{},{},{})".format(crlMaster, crlSlave, iMethod, iOriMode, crCoord, strName, dU0, dF0, dKa, dKb, dKt, dMar, dMu1, dMu2, dlOriVec, dTmax, dTol, dTrmin, crEditCur)
        return JPT_RUN_LINE(message)

    def Plot(strName="PLOT_1", iPID=1, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        Create 1D plot connection
        
        ## Syntax
        
        ```python
        Connections.Plot(strName="PLOT_1", iPID=1, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-Property1DPlot`
        
        Ribbon: {menuselection}`Connections --> Plot`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "PLOT_1".
        
        **`iPID`**
        : An _Integer_ specifying the p ID. The default value is 1.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Plot(strName="PLOT_1", iPID=1, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "Connections.Plot('{}',{},{},{})".format(strName, iPID, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def CreateConnConm(strName, iEType, iMethod, iCoordSys, iConmId, crMatCoord, dMass, dlX=[0, 0, 0], dlVintertia0=[0, 0, 0], dlVintertia1=[0, 0, 0]):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Connections.CreateConnConm(strName, iEType, iMethod, iCoordSys, iConmId, crMatCoord, dMass, dlX=[0, 0, 0], dlVintertia0=[0, 0, 0], dlVintertia1=[0, 0, 0])
        ```
        
        Macro: {ref}`Macro-Connections-CreateConnConm`
        
        Ribbon: {menuselection}`Connections --> CreateConnConm`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`iEType`**
        : An _Integer_ specifying the e type. This is a required input.
        
        **`iMethod`**
        : An _Integer_ specifying the method. This is a required input.
        
        **`iCoordSys`**
        : An _Integer_ specifying the coordinate system. This is a required input.
        
        **`iConmId`**
        : An _Integer_ specifying the conm ID. This is a required input.
        
        **`crMatCoord`**
        : A _Cursor_ specifying the material coordinate. This is a required input.
        
        **`dMass`**
        : A _Double_ specifying the mass. This is a required input.
        
        **`dlX`**
        : A _Double List_ specifying the x. The default value is [0, 0, 0].
        
        **`dlVintertia0`**
        : A _Double List_ specifying the vintertia0. The default value is [0, 0, 0].
        
        **`dlVintertia1`**
        : A _Double List_ specifying the vintertia1. The default value is [0, 0, 0].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.CreateConnConm(strName, iEType, iMethod, iCoordSys, iConmId, crMatCoord, dMass, dlX=[0, 0, 0], dlVintertia0=[0, 0, 0], dlVintertia1=[0, 0, 0])
        ```
        
        """
        message = "Connections.CreateConnConm('{}',{},{},{},{},{},{},{},{},{})".format(strName, iEType, iMethod, iCoordSys, iConmId, crMatCoord, dMass, dlX, dlVintertia0, dlVintertia1)
        return JPT_RUN_LINE(message)

    def RBE3(iMethod=0, crlMasterTarget=[], crlSlaveTarget=[], listRbe3TermConnection=[], iTypeRBE3=3, strName="", crCoordSys=None, dTolerance=0.0, posVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, bUpdateDispCS=True, bCornerOnly=False):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Connections.RBE3(iMethod=0, crlMasterTarget=[], crlSlaveTarget=[], listRbe3TermConnection=[], iTypeRBE3=3, strName="", crCoordSys=None, dTolerance=0.0, posVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, bUpdateDispCS=True, bCornerOnly=False)
        ```
        
        Macro: {ref}`Macro-Connections-Rbe3`
        
        Ribbon: {menuselection}`Connections --> RBE3`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. The default value is [].
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. The default value is [].
        
        **`listRbe3TermConnection`**
        : A _RBE3TERM_CONNECTION List_ specifying the rbe3 term connection. The default value is [].
        
        **`iTypeRBE3`**
        : An _Integer_ specifying the type r e3. The default value is 3.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`crCoordSys`**
        : A _Cursor_ specifying the coordinate system. The default value is None.
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. The default value is 0.0.
        
        **`posVirtualNodePos`**
        : A _Position_ specifying the virtual node position. The default value is [0, 0, 0].
        
        **`iSurfaceDef`**
        : An _Integer_ specifying the surface definition. The default value is 0.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`bUpdateDispCS`**
        : A _Boolean_ specifying the update displacement coordinate system. The default value is True.
        
        **`bCornerOnly`**
        : A _Boolean_ specifying the corner only. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.RBE3(iMethod=0, crlMasterTarget=[], crlSlaveTarget=[], listRbe3TermConnection=[], iTypeRBE3=3, strName="", crCoordSys=None, dTolerance=0.0, posVirtualNodePos=[0, 0, 0], iSurfaceDef=0, crEdit=None, bUpdateDispCS=True, bCornerOnly=False)
        ```
        
        """
        message = "Connections.RBE3({},{},{},{},{},'{}',{},{},{},{},{},{},{})".format(iMethod, crlMasterTarget, crlSlaveTarget, listRbe3TermConnection, iTypeRBE3, strName, crCoordSys, dTolerance, posVirtualNodePos, iSurfaceDef, crEdit, bUpdateDispCS, bCornerOnly)
        return JPT_RUN_LINE(message)

    def RigidWall(strName="RigidWall1", iObject=0, iType=0, iMotion=0, iFriction=0, iOrtho=0, iForces=0, dFinite1=DFLT_DBL, dFinite2=DFLT_DBL, dMotionMass=DFLT_DBL, dMotionInitVelo=DFLT_DBL, dFricCoulombCoeff=DFLT_DBL, dFricWeldVelo=DFLT_DBL, iForcesCirclesNum=0, dOrthoStaticCoeff1=DFLT_DBL, dOrthoStaticCoeff2=DFLT_DBL, dOrthoDynamicCoeff1=DFLT_DBL, dOrthoDynamicCoeff2=DFLT_DBL, dOrthoDecayConst1=DFLT_DBL, dOrthoDecayConst2=DFLT_DBL, dOrthoFricVector1=DFLT_DBL, dOrthoFricVector2=DFLT_DBL, dOrthoFricVector3=DFLT_DBL, bAllNodeSlave=False, crCoord=None, crAreaFaceSet=None, crVisualNodeSet=None, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Connections.RigidWall(strName="RigidWall1", iObject=0, iType=0, iMotion=0, iFriction=0, iOrtho=0, iForces=0, dFinite1=DFLT_DBL, dFinite2=DFLT_DBL, dMotionMass=DFLT_DBL, dMotionInitVelo=DFLT_DBL, dFricCoulombCoeff=DFLT_DBL, dFricWeldVelo=DFLT_DBL, iForcesCirclesNum=0, dOrthoStaticCoeff1=DFLT_DBL, dOrthoStaticCoeff2=DFLT_DBL, dOrthoDynamicCoeff1=DFLT_DBL, dOrthoDynamicCoeff2=DFLT_DBL, dOrthoDecayConst1=DFLT_DBL, dOrthoDecayConst2=DFLT_DBL, dOrthoFricVector1=DFLT_DBL, dOrthoFricVector2=DFLT_DBL, dOrthoFricVector3=DFLT_DBL, bAllNodeSlave=False, crCoord=None, crAreaFaceSet=None, crVisualNodeSet=None, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-LBCRigdWall`
        
        Ribbon: {menuselection}`Connections --> RigidWall`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "RigidWall1".
        
        **`iObject`**
        : An _Integer_ specifying the object. The default value is 0.
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 0.
        
        **`iMotion`**
        : An _Integer_ specifying the motion. The default value is 0.
        
        **`iFriction`**
        : An _Integer_ specifying the friction. The default value is 0.
        
        **`iOrtho`**
        : An _Integer_ specifying the ortho. The default value is 0.
        
        **`iForces`**
        : An _Integer_ specifying the forces. The default value is 0.
        
        **`dFinite1`**
        : A _Double_ specifying the finite1. The default value is DFLT_DBL.
        
        **`dFinite2`**
        : A _Double_ specifying the finite2. The default value is DFLT_DBL.
        
        **`dMotionMass`**
        : A _Double_ specifying the motion mass. The default value is DFLT_DBL.
        
        **`dMotionInitVelo`**
        : A _Double_ specifying the motion initial velo. The default value is DFLT_DBL.
        
        **`dFricCoulombCoeff`**
        : A _Double_ specifying the fric coulomb coeff. The default value is DFLT_DBL.
        
        **`dFricWeldVelo`**
        : A _Double_ specifying the fric weld velo. The default value is DFLT_DBL.
        
        **`iForcesCirclesNum`**
        : An _Integer_ specifying the forces circles number. The default value is 0.
        
        **`dOrthoStaticCoeff1`**
        : A _Double_ specifying the ortho static coefficient 1. The default value is DFLT_DBL.
        
        **`dOrthoStaticCoeff2`**
        : A _Double_ specifying the ortho static coefficient 2. The default value is DFLT_DBL.
        
        **`dOrthoDynamicCoeff1`**
        : A _Double_ specifying the ortho dynamic coefficient 1. The default value is DFLT_DBL.
        
        **`dOrthoDynamicCoeff2`**
        : A _Double_ specifying the ortho dynamic coefficient 2. The default value is DFLT_DBL.
        
        **`dOrthoDecayConst1`**
        : A _Double_ specifying the ortho decay const1. The default value is DFLT_DBL.
        
        **`dOrthoDecayConst2`**
        : A _Double_ specifying the ortho decay const2. The default value is DFLT_DBL.
        
        **`dOrthoFricVector1`**
        : A _Double_ specifying the ortho fric vector1. The default value is DFLT_DBL.
        
        **`dOrthoFricVector2`**
        : A _Double_ specifying the ortho fric vector2. The default value is DFLT_DBL.
        
        **`dOrthoFricVector3`**
        : A _Double_ specifying the ortho fric vector3. The default value is DFLT_DBL.
        
        **`bAllNodeSlave`**
        : A _Boolean_ specifying the all node slave. The default value is False.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`crAreaFaceSet`**
        : A _Cursor_ specifying the area face set. The default value is None.
        
        **`crVisualNodeSet`**
        : A _Cursor_ specifying the visual node set. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.RigidWall(strName="RigidWall1", iObject=0, iType=0, iMotion=0, iFriction=0, iOrtho=0, iForces=0, dFinite1=DFLT_DBL, dFinite2=DFLT_DBL, dMotionMass=DFLT_DBL, dMotionInitVelo=DFLT_DBL, dFricCoulombCoeff=DFLT_DBL, dFricWeldVelo=DFLT_DBL, iForcesCirclesNum=0, dOrthoStaticCoeff1=DFLT_DBL, dOrthoStaticCoeff2=DFLT_DBL, dOrthoDynamicCoeff1=DFLT_DBL, dOrthoDynamicCoeff2=DFLT_DBL, dOrthoDecayConst1=DFLT_DBL, dOrthoDecayConst2=DFLT_DBL, dOrthoFricVector1=DFLT_DBL, dOrthoFricVector2=DFLT_DBL, dOrthoFricVector3=DFLT_DBL, bAllNodeSlave=False, crCoord=None, crAreaFaceSet=None, crVisualNodeSet=None, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "Connections.RigidWall('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, iObject, iType, iMotion, iFriction, iOrtho, iForces, dFinite1, dFinite2, dMotionMass, dMotionInitVelo, dFricCoulombCoeff, dFricWeldVelo, iForcesCirclesNum, dOrthoStaticCoeff1, dOrthoStaticCoeff2, dOrthoDynamicCoeff1, dOrthoDynamicCoeff2, dOrthoDecayConst1, dOrthoDecayConst2, dOrthoFricVector1, dOrthoFricVector2, dOrthoFricVector3, bAllNodeSlave, crCoord, crAreaFaceSet, crVisualNodeSet, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def Connector(strName="", iMethod=1, iConnectType=0, iRefNode=0, iElemCs=0, crLocalCS=None, crlElasticity=[], crlDamp=[], crlMasterTarget=[], crlSlaveTarget=[], crEdit=None):
        r"""
        ## Description
        
        create Connector
        
        ## Syntax
        
        ```python
        Connections.Connector(strName="", iMethod=1, iConnectType=0, iRefNode=0, iElemCs=0, crLocalCS=None, crlElasticity=[], crlDamp=[], crlMasterTarget=[], crlSlaveTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-Connections-Connector`
        
        Ribbon: {menuselection}`Connections --> Connector`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 1.
        
        **`iConnectType`**
        : An _Integer_ specifying the connect type. The default value is 0.
        
        **`iRefNode`**
        : An _Integer_ specifying the reference node. The default value is 0.
        
        **`iElemCs`**
        : An _Integer_ specifying the element cs. The default value is 0.
        
        **`crLocalCS`**
        : A _Cursor_ specifying the local coordinate system. The default value is None.
        
        **`crlElasticity`**
        : A _Cursor List_ specifying the elasticity. The default value is [].
        
        **`crlDamp`**
        : A _Cursor List_ specifying the damp. The default value is [].
        
        **`crlMasterTarget`**
        : A _Cursor List_ specifying the master target. The default value is [].
        
        **`crlSlaveTarget`**
        : A _Cursor List_ specifying the slave target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.Connector(strName="", iMethod=1, iConnectType=0, iRefNode=0, iElemCs=0, crLocalCS=None, crlElasticity=[], crlDamp=[], crlMasterTarget=[], crlSlaveTarget=[], crEdit=None)
        ```
        
        """
        message = "Connections.Connector('{}',{},{},{},{},{},{},{},{},{},{})".format(strName, iMethod, iConnectType, iRefNode, iElemCs, crLocalCS, crlElasticity, crlDamp, crlMasterTarget, crlSlaveTarget, crEdit)
        return JPT_RUN_LINE(message)

    def BoltMeshingSplitOnly(strName="", iPartcutparamImethod=0, dPartcutparamDoffset=0.0, iPartcutparamBshareface=0, iPartcutparamBseparateface=0, iPartcutparamBsplitonly=0, iPartcutparamBmakesectionface=0, crPartcutparamCoord=None, surfaceMesh=SURFACE_MESH(), bLBCPRETENSIONABAQUSDATABfixedlenght=False, crLBCPRETENSIONABAQUSDATACrtable=None, dLBCPRETENSIONABAQUSDATADvalue=0.0, iLBCPRETENSIONABAQUSDATAIlocalunit=0, strLBCPRETENSIONABAQUSDATAStrnormal="", posLBCPRETENSIONABAQUSDATATvctrolnodepos=[0,0,0], crlTarget=[], poslCutter=[]):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Connections.BoltMeshingSplitOnly(strName="", iPartcutparamImethod=0, dPartcutparamDoffset=0.0, iPartcutparamBshareface=0, iPartcutparamBseparateface=0, iPartcutparamBsplitonly=0, iPartcutparamBmakesectionface=0, crPartcutparamCoord=None, surfaceMesh=SURFACE_MESH(), bLBCPRETENSIONABAQUSDATABfixedlenght=False, crLBCPRETENSIONABAQUSDATACrtable=None, dLBCPRETENSIONABAQUSDATADvalue=0.0, iLBCPRETENSIONABAQUSDATAIlocalunit=0, strLBCPRETENSIONABAQUSDATAStrnormal="", posLBCPRETENSIONABAQUSDATATvctrolnodepos=[0,0,0], crlTarget=[], poslCutter=[])
        ```
        
        Macro: {ref}`Macro-Connections-BoltMeshing2_SplitOnly`
        
        Ribbon: {menuselection}`Connections --> BoltMeshingSplitOnly`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`iPartcutparamImethod`**
        : An _Integer_ specifying the part cut parameter method. The default value is 0.
        
        **`dPartcutparamDoffset`**
        : A _Double_ specifying the part cut parameter offset. The default value is 0.0.
        
        **`iPartcutparamBshareface`**
        : An _Integer_ specifying the part cut parameter share face. The default value is 0.
        
        **`iPartcutparamBseparateface`**
        : An _Integer_ specifying the part cut parameter separate face. The default value is 0.
        
        **`iPartcutparamBsplitonly`**
        : An _Integer_ specifying the part cut parameter split only. The default value is 0.
        
        **`iPartcutparamBmakesectionface`**
        : An _Integer_ specifying the part cut parameter make section face. The default value is 0.
        
        **`crPartcutparamCoord`**
        : A _Cursor_ specifying the part cut parameter coordinate. The default value is None.
        
        **`surfaceMesh`**
        : A _SURFACE_MESH_ specifying the mesh. The default value is SURFACE_MESH().
        
        **`bLBCPRETENSIONABAQUSDATABfixedlenght`**
        : A _Boolean_ specifying the load boundary condition pretension abaqus data fixed length. The default value is False.
        
        **`crLBCPRETENSIONABAQUSDATACrtable`**
        : A _Cursor_ specifying the load boundary condition pretension abaqus data table. The default value is None.
        
        **`dLBCPRETENSIONABAQUSDATADvalue`**
        : A _Double_ specifying the load boundary condition pretension abaqus data value. The default value is 0.0.
        
        **`iLBCPRETENSIONABAQUSDATAIlocalunit`**
        : An _Integer_ specifying the load boundary condition pretension abaqus data local unit. The default value is 0.
        
        **`strLBCPRETENSIONABAQUSDATAStrnormal`**
        : A _String_ specifying the load boundary condition pretension abaqus data normal. The default value is "".
        
        **`posLBCPRETENSIONABAQUSDATATvctrolnodepos`**
        : A _Position_ specifying the load boundary condition pretension abaqus data node position. The default value is [0,0,0].
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`poslCutter`**
        : A _Position List_ specifying the cutter. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.BoltMeshingSplitOnly(strName="", iPartcutparamImethod=0, dPartcutparamDoffset=0.0, iPartcutparamBshareface=0, iPartcutparamBseparateface=0, iPartcutparamBsplitonly=0, iPartcutparamBmakesectionface=0, crPartcutparamCoord=None, surfaceMesh=SURFACE_MESH(), bLBCPRETENSIONABAQUSDATABfixedlenght=False, crLBCPRETENSIONABAQUSDATACrtable=None, dLBCPRETENSIONABAQUSDATADvalue=0.0, iLBCPRETENSIONABAQUSDATAIlocalunit=0, strLBCPRETENSIONABAQUSDATAStrnormal="", posLBCPRETENSIONABAQUSDATATvctrolnodepos=[0,0,0], crlTarget=[], poslCutter=[])
        ```
        
        """
        message = "Connections.BoltMeshingSplitOnly('{}',{},{},{},{},{},{},{},{},{},{},{},{},'{}',{},{},{})".format(strName, iPartcutparamImethod, dPartcutparamDoffset, iPartcutparamBshareface, iPartcutparamBseparateface, iPartcutparamBsplitonly, iPartcutparamBmakesectionface, crPartcutparamCoord, surfaceMesh, bLBCPRETENSIONABAQUSDATABfixedlenght, crLBCPRETENSIONABAQUSDATACrtable, dLBCPRETENSIONABAQUSDATADvalue, iLBCPRETENSIONABAQUSDATAIlocalunit, strLBCPRETENSIONABAQUSDATAStrnormal, posLBCPRETENSIONABAQUSDATATvctrolnodepos, crlTarget, poslCutter)
        return JPT_RUN_LINE(message)

    def BoltMeshingNotSplitOnly(strName="", iPartcutparamImethod=0, dPartcutparamDoffset=0.0, iPartcutparamBshareface=0, iPartcutparamBseparateface=0, iPartcutparamBsplitonly=0, iPartcutparamBmakesectionface=0, crPartcutparamCoord=None, surfaceMesh=SURFACE_MESH(), iLBCPRETENSIONDATAIdir=0, dLBCPRETENSIONDATADvalue=0.0, bLBCPRETENSIONDATABfixlength=False, crLBCPRETENSIONDATACrtable=None, crLBCPRETENSIONDATACrcoord=None, iLBCPRETENSIONDATAIlocalunit=0, crlTarget=[], poslCutter=[]):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Connections.BoltMeshingNotSplitOnly(strName="", iPartcutparamImethod=0, dPartcutparamDoffset=0.0, iPartcutparamBshareface=0, iPartcutparamBseparateface=0, iPartcutparamBsplitonly=0, iPartcutparamBmakesectionface=0, crPartcutparamCoord=None, surfaceMesh=SURFACE_MESH(), iLBCPRETENSIONDATAIdir=0, dLBCPRETENSIONDATADvalue=0.0, bLBCPRETENSIONDATABfixlength=False, crLBCPRETENSIONDATACrtable=None, crLBCPRETENSIONDATACrcoord=None, iLBCPRETENSIONDATAIlocalunit=0, crlTarget=[], poslCutter=[])
        ```
        
        Macro: {ref}`Macro-Connections-BoltMeshing2_NotSplitOnly`
        
        Ribbon: {menuselection}`Connections --> BoltMeshingNotSplitOnly`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`iPartcutparamImethod`**
        : An _Integer_ specifying the part cut parameter method. The default value is 0.
        
        **`dPartcutparamDoffset`**
        : A _Double_ specifying the part cut parameter offset. The default value is 0.0.
        
        **`iPartcutparamBshareface`**
        : An _Integer_ specifying the part cut parameter share face. The default value is 0.
        
        **`iPartcutparamBseparateface`**
        : An _Integer_ specifying the part cut parameter separate face. The default value is 0.
        
        **`iPartcutparamBsplitonly`**
        : An _Integer_ specifying the part cut parameter split only. The default value is 0.
        
        **`iPartcutparamBmakesectionface`**
        : An _Integer_ specifying the part cut parameter make section face. The default value is 0.
        
        **`crPartcutparamCoord`**
        : A _Cursor_ specifying the part cut parameter coordinate. The default value is None.
        
        **`surfaceMesh`**
        : A _SURFACE_MESH_ specifying the mesh. The default value is SURFACE_MESH().
        
        **`iLBCPRETENSIONDATAIdir`**
        : An _Integer_ specifying the load boundary condition pretension data direction. The default value is 0.
        
        **`dLBCPRETENSIONDATADvalue`**
        : A _Double_ specifying the load boundary condition pretension data value. The default value is 0.0.
        
        **`bLBCPRETENSIONDATABfixlength`**
        : A _Boolean_ specifying the load boundary condition pretension data fixed length. The default value is False.
        
        **`crLBCPRETENSIONDATACrtable`**
        : A _Cursor_ specifying the load boundary condition pretension data table. The default value is None.
        
        **`crLBCPRETENSIONDATACrcoord`**
        : A _Cursor_ specifying the load boundary condition pretension data coordinate. The default value is None.
        
        **`iLBCPRETENSIONDATAIlocalunit`**
        : An _Integer_ specifying the load boundary condition pretension data local unit. The default value is 0.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`poslCutter`**
        : A _Position List_ specifying the cutter. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Connections.BoltMeshingNotSplitOnly(strName="", iPartcutparamImethod=0, dPartcutparamDoffset=0.0, iPartcutparamBshareface=0, iPartcutparamBseparateface=0, iPartcutparamBsplitonly=0, iPartcutparamBmakesectionface=0, crPartcutparamCoord=None, surfaceMesh=SURFACE_MESH(), iLBCPRETENSIONDATAIdir=0, dLBCPRETENSIONDATADvalue=0.0, bLBCPRETENSIONDATABfixlength=False, crLBCPRETENSIONDATACrtable=None, crLBCPRETENSIONDATACrcoord=None, iLBCPRETENSIONDATAIlocalunit=0, crlTarget=[], poslCutter=[])
        ```
        
        """
        message = "Connections.BoltMeshingNotSplitOnly('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, iPartcutparamImethod, dPartcutparamDoffset, iPartcutparamBshareface, iPartcutparamBseparateface, iPartcutparamBsplitonly, iPartcutparamBmakesectionface, crPartcutparamCoord, surfaceMesh, iLBCPRETENSIONDATAIdir, dLBCPRETENSIONDATADvalue, bLBCPRETENSIONDATABfixlength, crLBCPRETENSIONDATACrtable, crLBCPRETENSIONDATACrcoord, iLBCPRETENSIONDATAIlocalunit, crlTarget, poslCutter)
        return JPT_RUN_LINE(message)

    BoltConnections = Connections_BoltConnections()

    Contacts = Connections_Contacts()

    Gaps = Connections_Gaps()

    MPC = Connections_MPC()

    RigidElements = Connections_RigidElements()

    SpringsDampers = Connections_SpringsDampers()

class Designer:
    LBC = Designer_LBC()

    Load = Designer_Load()

    def ContactMerge(crlTarget):
        r"""
        ## Description
        
        Build contact for designer
        
        ## Syntax
        
        ```python
        Designer.ContactMerge(crlTarget)
        ```
        
        Macro: {ref}`Macro-Designer-MergeContact`
        
        Ribbon: {menuselection}`Designer --> ContactMerge`
        
        ## Inputs
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Designer.ContactMerge(crlTarget)
        ```
        
        """
        message = "Designer.ContactMerge({})".format(crlTarget)
        return JPT_RUN_LINE(message)

    def Material(strMatName, strPropName, dThickness, crlTarget):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Designer.Material(strMatName, strPropName, dThickness, crlTarget)
        ```
        
        Macro: {ref}`Macro-Designer-Material2DForDesigner`
        
        Ribbon: {menuselection}`Designer --> Material`
        
        ## Inputs
        
        **`strMatName`**
        : A _String_ specifying the material name. This is a required input.
        
        **`strPropName`**
        : A _String_ specifying the property name. This is a required input.
        
        **`dThickness`**
        : A _Double_ specifying the thickness. This is a required input.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Designer.Material(strMatName, strPropName, dThickness, crlTarget)
        ```
        
        """
        message = "Designer.Material('{}','{}',{},{})".format(strMatName, strPropName, dThickness, crlTarget)
        return JPT_RUN_LINE(message)

class EngReliability:
    def SubModelBC(strName, crlTarget, iPos, iViewCp, iCp, iSrcType, iMappedCpIndexArr0, dScaleR, vecOffset, vecRotate, dScaleT, strPath, crEdit, iMappingMethod, iSubmodelBCMappingType, iMappingFromStepNo, bSetADVCFile, strADVCResultFile, bSetDetATol, dDetATol, bSetElementSet, strElementSet):
        r"""
        ## Description
        
        create mapping forced displacement
        
        ## Syntax
        
        ```python
        EngReliability.SubModelBC(strName, crlTarget, iPos, iViewCp, iCp, iSrcType, iMappedCpIndexArr0, dScaleR, vecOffset, vecRotate, dScaleT, strPath, crEdit, iMappingMethod, iSubmodelBCMappingType, iMappingFromStepNo, bSetADVCFile, strADVCResultFile, bSetDetATol, dDetATol, bSetElementSet, strElementSet)
        ```
        
        Macro: {ref}`Macro-EngReliability-MappingForcedDisplacement`
        
        Ribbon: {menuselection}`EngReliability --> SubModelBC`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. This is a required input.
        
        **`iPos`**
        : An _Integer_ specifying the position. This is a required input.
        
        **`iViewCp`**
        : An _Integer_ specifying the view component. This is a required input.
        
        **`iCp`**
        : An _Integer_ specifying the component. This is a required input.
        
        **`iSrcType`**
        : An _Integer_ specifying the source type. This is a required input.
        
        **`iMappedCpIndexArr0`**
        : An _Integer_ specifying the mapped component index arr0. This is a required input.
        
        **`dScaleR`**
        : A _Double_ specifying the scale r. This is a required input.
        
        **`vecOffset`**
        : A _Vector_ specifying the offset. This is a required input.
        
        **`vecRotate`**
        : A _Vector_ specifying the rotate. This is a required input.
        
        **`dScaleT`**
        : A _Double_ specifying the scale t. This is a required input.
        
        **`strPath`**
        : A _String_ specifying the path. This is a required input.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. This is a required input.
        
        **`iMappingMethod`**
        : An _Integer_ specifying the mapping method. This is a required input.
        
        **`iSubmodelBCMappingType`**
        : An _Integer_ specifying the submodel c mapping type. This is a required input.
        
        **`iMappingFromStepNo`**
        : An _Integer_ specifying the mapping from step no. This is a required input.
        
        **`bSetADVCFile`**
        : A _Boolean_ specifying the set ADVC file. This is a required input.
        
        **`strADVCResultFile`**
        : A _String_ specifying the ADVC result file. This is a required input.
        
        **`bSetDetATol`**
        : A _Boolean_ specifying the set det a tolerance. This is a required input.
        
        **`dDetATol`**
        : A _Double_ specifying the det a tolerance. This is a required input.
        
        **`bSetElementSet`**
        : A _Boolean_ specifying the set element set. This is a required input.
        
        **`strElementSet`**
        : A _String_ specifying the element set. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        EngReliability.SubModelBC(strName, crlTarget, iPos, iViewCp, iCp, iSrcType, iMappedCpIndexArr0, dScaleR, vecOffset, vecRotate, dScaleT, strPath, crEdit, iMappingMethod, iSubmodelBCMappingType, iMappingFromStepNo, bSetADVCFile, strADVCResultFile, bSetDetATol, dDetATol, bSetElementSet, strElementSet)
        ```
        
        """
        message = "EngReliability.SubModelBC('{}',{},{},{},{},{},{},{},{},{},{},'{}',{},{},{},{},{},'{}',{},{},{},'{}')".format(strName, crlTarget, iPos, iViewCp, iCp, iSrcType, iMappedCpIndexArr0, dScaleR, vecOffset, vecRotate, dScaleT, strPath, crEdit, iMappingMethod, iSubmodelBCMappingType, iMappingFromStepNo, bSetADVCFile, strADVCResultFile, bSetDetATol, dDetATol, bSetElementSet, strElementSet)
        return JPT_RUN_LINE(message)

class ExManifoldModeling:
    SZ = ExManifoldModeling_SZ()

class Geometry:
    Bar = Geometry_Bar()

    BodyCut = Geometry_BodyCut()

    BreakEntity = Geometry_BreakEntity()

    DeleteEntity = Geometry_DeleteEntity()

    Edge = Geometry_Edge()

    ExtractSurfaces = Geometry_ExtractSurfaces()

    Face = Geometry_Face()

    FindFeature = Geometry_FindFeature()

    MergeEntities = Geometry_MergeEntities()

    Part = Geometry_Part()

    ShowAdjacent = Geometry_ShowAdjacent()

    Transform = Geometry_Transform()

    def CADTrim(crlFace, crlPart, dTrimSize=1, dTrimAngle=15):
        r"""
        ## Description
        
        CAD Trim
        
        ## Syntax
        
        ```python
        Geometry.CADTrim(crlFace, crlPart, dTrimSize=1, dTrimAngle=15)
        ```
        
        Macro: {ref}`Macro-Geometry-GeometryCADTrim`
        
        Ribbon: {menuselection}`Geometry --> CADTrim`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. This is a required input.
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. This is a required input.
        
        **`dTrimSize`**
        : A _Double_ specifying the trim size. The default value is 1.
        
        **`dTrimAngle`**
        : A _Double_ specifying the trim angle. The default value is 15.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.CADTrim(crlFace, crlPart, dTrimSize=1, dTrimAngle=15)
        ```
        
        """
        message = "Geometry.CADTrim({},{},{},{})".format(crlFace, crlPart, dTrimSize, dTrimAngle)
        return JPT_RUN_LINE(message)

    def StitchEdge(dTolerance=0.3, bKeepSlave=True, crlMaster=[], crlSlave=[]):
        r"""
        ## Description
        
        Stitch Edges
        
        ## Syntax
        
        ```python
        Geometry.StitchEdge(dTolerance=0.3, bKeepSlave=True, crlMaster=[], crlSlave=[])
        ```
        
        Macro: {ref}`Macro-Geometry-StitchEdge`
        
        Ribbon: {menuselection}`Geometry --> StitchEdge`
        
        ## Inputs
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. The default value is 0.3.
        
        **`bKeepSlave`**
        : A _Boolean_ specifying the keep slave. The default value is True.
        
        **`crlMaster`**
        : A _Cursor List_ specifying the master. The default value is [].
        
        **`crlSlave`**
        : A _Cursor List_ specifying the slave. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.StitchEdge(dTolerance=0.3, bKeepSlave=True, crlMaster=[], crlSlave=[])
        ```
        
        """
        message = "Geometry.StitchEdge({},{},{},{})".format(dTolerance, bKeepSlave, crlMaster, crlSlave)
        return JPT_RUN_LINE(message)

    def LogoRemoval(crlStartFaces=[], crlStopFaces=[], iLayers=5, bMergeFaces=False):
        r"""
        ## Description
        
        Create Face From Edges
        
        ## Syntax
        
        ```python
        Geometry.LogoRemoval(crlStartFaces=[], crlStopFaces=[], iLayers=5, bMergeFaces=False)
        ```
        
        Macro: {ref}`Macro-Geometry-LogoRemoval`
        
        Ribbon: {menuselection}`Geometry --> LogoRemoval`
        
        ## Inputs
        
        **`crlStartFaces`**
        : A _Cursor List_ specifying the start faces. The default value is [].
        
        **`crlStopFaces`**
        : A _Cursor List_ specifying the stop faces. The default value is [].
        
        **`iLayers`**
        : An _Integer_ specifying the layers. The default value is 5.
        
        **`bMergeFaces`**
        : A _Boolean_ specifying the merge faces. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.LogoRemoval(crlStartFaces=[], crlStopFaces=[], iLayers=5, bMergeFaces=False)
        ```
        
        """
        message = "Geometry.LogoRemoval({},{},{},{})".format(crlStartFaces, crlStopFaces, iLayers, bMergeFaces)
        return JPT_RUN_LINE(message)

    def ShellAsm(crlPartK=[], crlFaceK=[], dTol=0.2, iElemType=0, bSkipTiny=False):
        r"""
        ## Description
        
        assemble the separated parts
        
        ## Syntax
        
        ```python
        Geometry.ShellAsm(crlPartK=[], crlFaceK=[], dTol=0.2, iElemType=0, bSkipTiny=False)
        ```
        
        Macro: {ref}`Macro-Geometry-ShellAsm`
        
        Ribbon: {menuselection}`Geometry --> ShellAsm`
        
        ## Inputs
        
        **`crlPartK`**
        : A _Cursor List_ specifying the part k. The default value is [].
        
        **`crlFaceK`**
        : A _Cursor List_ specifying the face k. The default value is [].
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is 0.2.
        
        **`iElemType`**
        : An _Integer_ specifying the element type. The default value is 0.
        
        **`bSkipTiny`**
        : A _Boolean_ specifying the skip tiny. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.ShellAsm(crlPartK=[], crlFaceK=[], dTol=0.2, iElemType=0, bSkipTiny=False)
        ```
        
        """
        message = "Geometry.ShellAsm({},{},{},{},{})".format(crlPartK, crlFaceK, dTol, iElemType, bSkipTiny)
        return JPT_RUN_LINE(message)

    def SquareUpFillet(crlFace=[]):
        r"""
        ## Description
        
        Square Up Fillet
        
        ## Syntax
        
        ```python
        Geometry.SquareUpFillet(crlFace=[])
        ```
        
        Macro: {ref}`Macro-Geometry-SquareUpFillet`
        
        Ribbon: {menuselection}`Geometry --> SquareUpFillet`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.SquareUpFillet(crlFace=[])
        ```
        
        """
        message = "Geometry.SquareUpFillet({})".format(crlFace)
        return JPT_RUN_LINE(message)

    def MakeFillet(crlEdge=[], dRadius=1.0):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Geometry.MakeFillet(crlEdge=[], dRadius=1.0)
        ```
        
        Macro: {ref}`Macro-Geometry-MakeFillet`
        
        Ribbon: {menuselection}`Geometry --> MakeFillet`
        
        ## Inputs
        
        **`crlEdge`**
        : A _Cursor List_ specifying the edge. The default value is [].
        
        **`dRadius`**
        : A _Double_ specifying the radius. The default value is 1.0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.MakeFillet(crlEdge=[], dRadius=1.0)
        ```
        
        """
        message = "Geometry.MakeFillet({},{})".format(crlEdge, dRadius)
        return JPT_RUN_LINE(message)

    def MakeFacePlanar(dlPlanePt1=[0.0,0.0,0.0], dlPlanePt2=[0.0,0.0,0.0], dlPlanePt3=[0.0,0.0,0.0], ilFaceIds=[], iMergeFace=0):
        r"""
        ## Description
        
        Make planar faces by given plane points
        
        ## Syntax
        
        ```python
        Geometry.MakeFacePlanar(dlPlanePt1=[0.0,0.0,0.0], dlPlanePt2=[0.0,0.0,0.0], dlPlanePt3=[0.0,0.0,0.0], ilFaceIds=[], iMergeFace=0)
        ```
        
        Macro: {ref}`Macro-Geometry-MakeFacePlanar`
        
        Ribbon: {menuselection}`Geometry --> MakeFacePlanar`
        
        ## Inputs
        
        **`dlPlanePt1`**
        : A _Double List_ specifying the plane point 1. The default value is [0.0,0.0,0.0].
        
        **`dlPlanePt2`**
        : A _Double List_ specifying the plane point 2. The default value is [0.0,0.0,0.0].
        
        **`dlPlanePt3`**
        : A _Double List_ specifying the plane pt3. The default value is [0.0,0.0,0.0].
        
        **`ilFaceIds`**
        : A _Integer List_ specifying the face ids. The default value is [].
        
        **`iMergeFace`**
        : An _Integer_ specifying the merge face. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.MakeFacePlanar(dlPlanePt1=[0.0,0.0,0.0], dlPlanePt2=[0.0,0.0,0.0], dlPlanePt3=[0.0,0.0,0.0], ilFaceIds=[], iMergeFace=0)
        ```
        
        """
        message = "Geometry.MakeFacePlanar({},{},{},{},{})".format(dlPlanePt1, dlPlanePt2, dlPlanePt3, ilFaceIds, iMergeFace)
        return JPT_RUN_LINE(message)

    def FCircleAdjustVertex(crlPart=[]):
        r"""
        ## Description
        
        adjust vertex in circle
        
        ## Syntax
        
        ```python
        Geometry.FCircleAdjustVertex(crlPart=[])
        ```
        
        Macro: {ref}`Macro-Geometry-MeshEditAdjustVertex`
        
        Ribbon: {menuselection}`Geometry --> FCircleAdjustVertex`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.FCircleAdjustVertex(crlPart=[])
        ```
        
        """
        message = "Geometry.FCircleAdjustVertex({})".format(crlPart)
        return JPT_RUN_LINE(message)

    def AdjustHalfCylinder(poslPoint=[], crlFace=[], crCoord=None, iAxisPlane=0, bDivideFace=True, crlPart=[], bMergeEdge=True):
        r"""
        ## Description
        
        Adjust half cylinder
        
        ## Syntax
        
        ```python
        Geometry.AdjustHalfCylinder(poslPoint=[], crlFace=[], crCoord=None, iAxisPlane=0, bDivideFace=True, crlPart=[], bMergeEdge=True)
        ```
        
        Macro: {ref}`Macro-Geometry-MeshEditAdjustHalfCylinderCoordinateCr`
        
        Ribbon: {menuselection}`Geometry --> AdjustHalfCylinder`
        
        ## Inputs
        
        **`poslPoint`**
        : A _Position List_ specifying the point. The default value is [].
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`iAxisPlane`**
        : An _Integer_ specifying the axis plane. The default value is 0.
        
        **`bDivideFace`**
        : A _Boolean_ specifying the divide face. The default value is True.
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`bMergeEdge`**
        : A _Boolean_ specifying the merge edge. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.AdjustHalfCylinder(poslPoint=[], crlFace=[], crCoord=None, iAxisPlane=0, bDivideFace=True, crlPart=[], bMergeEdge=True)
        ```
        
        """
        message = "Geometry.AdjustHalfCylinder({},{},{},{},{},{},{})".format(poslPoint, crlFace, crCoord, iAxisPlane, bDivideFace, crlPart, bMergeEdge)
        return JPT_RUN_LINE(message)

    def FCircVertexAdjust(crlPart, dMinRadius=0.0, bFullCylinder=True, bCylinderMorethan90=False, bSkipFaceHaveLocalSetting=False):
        r"""
        ## Description
        
        FCirc Vertex Adjust
        
        ## Syntax
        
        ```python
        Geometry.FCircVertexAdjust(crlPart, dMinRadius=0.0, bFullCylinder=True, bCylinderMorethan90=False, bSkipFaceHaveLocalSetting=False)
        ```
        
        Macro: {ref}`Macro-Geometry-MeshEditGeomEditDivideCylinderBy90Deg`
        
        Ribbon: {menuselection}`Geometry --> FCircVertexAdjust`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. This is a required input.
        
        **`dMinRadius`**
        : A _Double_ specifying the minimum radius. The default value is 0.0.
        
        **`bFullCylinder`**
        : A _Boolean_ specifying the full cylinder. The default value is True.
        
        **`bCylinderMorethan90`**
        : A _Boolean_ specifying the cylinder morethan90. The default value is False.
        
        **`bSkipFaceHaveLocalSetting`**
        : A _Boolean_ specifying the skip face have local setting. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.FCircVertexAdjust(crlPart, dMinRadius=0.0, bFullCylinder=True, bCylinderMorethan90=False, bSkipFaceHaveLocalSetting=False)
        ```
        
        """
        message = "Geometry.FCircVertexAdjust({},{},{},{},{})".format(crlPart, dMinRadius, bFullCylinder, bCylinderMorethan90, bSkipFaceHaveLocalSetting)
        return JPT_RUN_LINE(message)

    def ExtractSurfaces(crlFace, dAngle=60.0, strName="ExtractFace_1", bMergePart=False):
        r"""
        ## Description
        
        Extract Reference Surfaces
        
        ## Syntax
        
        ```python
        Geometry.ExtractSurfaces(crlFace, dAngle=60.0, strName="ExtractFace_1", bMergePart=False)
        ```
        
        Macro: {ref}`Macro-Geometry-MeshEditExtractSurfaces`
        
        Ribbon: {menuselection}`Geometry --> ExtractSurfaces`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. This is a required input.
        
        **`dAngle`**
        : A _Double_ specifying the angle. The default value is 60.0.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ExtractFace_1".
        
        **`bMergePart`**
        : A _Boolean_ specifying the merge part. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.ExtractSurfaces(crlFace, dAngle=60.0, strName="ExtractFace_1", bMergePart=False)
        ```
        
        """
        message = "Geometry.ExtractSurfaces({},{},'{}',{})".format(crlFace, dAngle, strName, bMergePart)
        return JPT_RUN_LINE(message)

    def RemoveRibBoss(crlFace, dGradiation=1.0, iContinuity=1):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Geometry.RemoveRibBoss(crlFace, dGradiation=1.0, iContinuity=1)
        ```
        
        Macro: {ref}`Macro-Geometry-Remove_Rib_Boss`
        
        Ribbon: {menuselection}`Geometry --> RemoveRibBoss`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. This is a required input.
        
        **`dGradiation`**
        : A _Double_ specifying the gradiation. The default value is 1.0.
        
        **`iContinuity`**
        : An _Integer_ specifying the continuity. The default value is 1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.RemoveRibBoss(crlFace, dGradiation=1.0, iContinuity=1)
        ```
        
        """
        message = "Geometry.RemoveRibBoss({},{},{})".format(crlFace, dGradiation, iContinuity)
        return JPT_RUN_LINE(message)

    def AdvancedShellAssembly(crlPart=[], crlFace=[], iMeshType=0, bSelfIntersection=False, iMethod=3, dGapTol=2.1):
        r"""
        ## Description
        
        Test shell assembly
        
        ## Syntax
        
        ```python
        Geometry.AdvancedShellAssembly(crlPart=[], crlFace=[], iMeshType=0, bSelfIntersection=False, iMethod=3, dGapTol=2.1)
        ```
        
        Macro: {ref}`Macro-Geometry-ShellAssyGeneral`
        
        Ribbon: {menuselection}`Geometry --> AdvancedShellAssembly`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`iMeshType`**
        : An _Integer_ specifying the mesh type. The default value is 0.
        
        **`bSelfIntersection`**
        : A _Boolean_ specifying the self intersection. The default value is False.
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 3.
        
        **`dGapTol`**
        : A _Double_ specifying the gap tolerance. The default value is 2.1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.AdvancedShellAssembly(crlPart=[], crlFace=[], iMeshType=0, bSelfIntersection=False, iMethod=3, dGapTol=2.1)
        ```
        
        """
        message = "Geometry.AdvancedShellAssembly({},{},{},{},{},{})".format(crlPart, crlFace, iMeshType, bSelfIntersection, iMethod, dGapTol)
        return JPT_RUN_LINE(message)

    def ExtractRefSurface(crlFace, dAngle=60.0, strName="ExtractFace_1", bMergePart=False):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Geometry.ExtractRefSurface(crlFace, dAngle=60.0, strName="ExtractFace_1", bMergePart=False)
        ```
        
        Macro: {ref}`Macro-Geometry-MeshEditExtractRefSurfaces`
        
        Ribbon: {menuselection}`Geometry --> ExtractRefSurface`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. This is a required input.
        
        **`dAngle`**
        : A _Double_ specifying the angle. The default value is 60.0.
        
        **`strName`**
        : A _String_ specifying the name. The default value is "ExtractFace_1".
        
        **`bMergePart`**
        : A _Boolean_ specifying the merge part. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Geometry.ExtractRefSurface(crlFace, dAngle=60.0, strName="ExtractFace_1", bMergePart=False)
        ```
        
        """
        message = "Geometry.ExtractRefSurface({},{},'{}',{})".format(crlFace, dAngle, strName, bMergePart)
        return JPT_RUN_LINE(message)

class Groups:
    RightClick = Groups_RightClick()

class HexModeling:
    Sweep = HexModeling_Sweep()

    def SolidElemInterface(crlFace=[], bFlip=False, crlElms=[]):
        r"""
        ## Description
        
        make solid element interface
        
        ## Syntax
        
        ```python
        HexModeling.SolidElemInterface(crlFace=[], bFlip=False, crlElms=[])
        ```
        
        Macro: {ref}`Macro-HexModeling-SolidElemInterface`
        
        Ribbon: {menuselection}`HexModeling --> SolidElemInterface`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`bFlip`**
        : A _Boolean_ specifying the flip. The default value is False.
        
        **`crlElms`**
        : A _Cursor List_ specifying the elms. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        HexModeling.SolidElemInterface(crlFace=[], bFlip=False, crlElms=[])
        ```
        
        """
        message = "HexModeling.SolidElemInterface({},{},{})".format(crlFace, bFlip, crlElms)
        return JPT_RUN_LINE(message)

    def BallHexa(crPart, vecCenter=[0.0,0.0,0.0], dRadius=5.0, dMeshSize=0.5, iType=0, iLayer=3, bMakeCenterNode=True, strPartName="HexBall_1"):
        r"""
        ## Description
        
        hexa modeling ball hexa
        
        ## Syntax
        
        ```python
        HexModeling.BallHexa(crPart, vecCenter=[0.0,0.0,0.0], dRadius=5.0, dMeshSize=0.5, iType=0, iLayer=3, bMakeCenterNode=True, strPartName="HexBall_1")
        ```
        
        Macro: {ref}`Macro-HexModeling-HexModelingBallHexa`
        
        Ribbon: {menuselection}`HexModeling --> BallHexa`
        
        ## Inputs
        
        **`crPart`**
        : A _Cursor_ specifying the part. This is a required input.
        
        **`vecCenter`**
        : A _Vector_ specifying the center. The default value is [0.0,0.0,0.0].
        
        **`dRadius`**
        : A _Double_ specifying the radius. The default value is 5.0.
        
        **`dMeshSize`**
        : A _Double_ specifying the mesh size. The default value is 0.5.
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 0.
        
        **`iLayer`**
        : An _Integer_ specifying the layer. The default value is 3.
        
        **`bMakeCenterNode`**
        : A _Boolean_ specifying the make center node. The default value is True.
        
        **`strPartName`**
        : A _String_ specifying the part name. The default value is "HexBall_1".
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        HexModeling.BallHexa(crPart, vecCenter=[0.0,0.0,0.0], dRadius=5.0, dMeshSize=0.5, iType=0, iLayer=3, bMakeCenterNode=True, strPartName="HexBall_1")
        ```
        
        """
        message = "HexModeling.BallHexa({},{},{},{},{},{},{},'{}')".format(crPart, vecCenter, dRadius, dMeshSize, iType, iLayer, bMakeCenterNode, strPartName)
        return JPT_RUN_LINE(message)

    def BoxMesh(ilPartIds, dMeshSize, strMaterialName):
        r"""
        ## Description
        
        Box hex mesh creator for parts
        
        ## Syntax
        
        ```python
        HexModeling.BoxMesh(ilPartIds, dMeshSize, strMaterialName)
        ```
        
        Macro: {ref}`Macro-HexModeling-HexBoxMesh`
        
        Ribbon: {menuselection}`HexModeling --> BoxMesh`
        
        ## Inputs
        
        **`ilPartIds`**
        : A _Integer List_ specifying the part ids. This is a required input.
        
        **`dMeshSize`**
        : A _Double_ specifying the mesh size. This is a required input.
        
        **`strMaterialName`**
        : A _String_ specifying the material name. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        HexModeling.BoxMesh(ilPartIds, dMeshSize, strMaterialName)
        ```
        
        """
        message = "HexModeling.BoxMesh({},{},'{}')".format(ilPartIds, dMeshSize, strMaterialName)
        return JPT_RUN_LINE(message)

    def AutoSweep(crlPart=[], dMeshSize=0.0, bLayers=False, iLayers=2):
        r"""
        ## Description
        
        Hex Modeling Auto Sweep
        
        ## Syntax
        
        ```python
        HexModeling.AutoSweep(crlPart=[], dMeshSize=0.0, bLayers=False, iLayers=2)
        ```
        
        Macro: {ref}`Macro-HexModeling-HexModelAutoSweep`
        
        Ribbon: {menuselection}`HexModeling --> AutoSweep`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`dMeshSize`**
        : A _Double_ specifying the mesh size. The default value is 0.0.
        
        **`bLayers`**
        : A _Boolean_ specifying the layers. The default value is False.
        
        **`iLayers`**
        : An _Integer_ specifying the layers. The default value is 2.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        HexModeling.AutoSweep(crlPart=[], dMeshSize=0.0, bLayers=False, iLayers=2)
        ```
        
        """
        message = "HexModeling.AutoSweep({},{},{},{})".format(crlPart, dMeshSize, bLayers, iLayers)
        return JPT_RUN_LINE(message)

    def Circular(crlFace=[], dAngle=360, dTol=0.0000001, iLayer=36, vecAxisPt=[0.0,0.0,0.0], vecAxisVect=[1.0,0.0,0.0], bInterfaceElem=False, bExtrusion=False, dTranslationExtrusion=0.0, dBDeleteOriginalParts=0.0):
        r"""
        ## Description
        
        create Hexa mesh by revolving a surface
        
        ## Syntax
        
        ```python
        HexModeling.Circular(crlFace=[], dAngle=360, dTol=0.0000001, iLayer=36, vecAxisPt=[0.0,0.0,0.0], vecAxisVect=[1.0,0.0,0.0], bInterfaceElem=False, bExtrusion=False, dTranslationExtrusion=0.0, dBDeleteOriginalParts=0.0)
        ```
        
        Macro: {ref}`Macro-HexModeling-HexSweepCircular`
        
        Ribbon: {menuselection}`HexModeling --> Circular`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`dAngle`**
        : A _Double_ specifying the angle. The default value is 360.
        
        **`dTol`**
        : A _Double_ specifying the tolerance. The default value is 0.0000001.
        
        **`iLayer`**
        : An _Integer_ specifying the layer. The default value is 36.
        
        **`vecAxisPt`**
        : A _Vector_ specifying the axis point. The default value is [0.0,0.0,0.0].
        
        **`vecAxisVect`**
        : A _Vector_ specifying the axis vector. The default value is [1.0,0.0,0.0].
        
        **`bInterfaceElem`**
        : A _Boolean_ specifying the interface element. The default value is False.
        
        **`bExtrusion`**
        : A _Boolean_ specifying the extrusion. The default value is False.
        
        **`dTranslationExtrusion`**
        : A _Double_ specifying the translation extrusion. The default value is 0.0.
        
        **`dBDeleteOriginalParts`**
        : A _Double_ specifying the delete original parts. The default value is 0.0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        HexModeling.Circular(crlFace=[], dAngle=360, dTol=0.0000001, iLayer=36, vecAxisPt=[0.0,0.0,0.0], vecAxisVect=[1.0,0.0,0.0], bInterfaceElem=False, bExtrusion=False, dTranslationExtrusion=0.0, dBDeleteOriginalParts=0.0)
        ```
        
        """
        message = "HexModeling.Circular({},{},{},{},{},{},{},{},{},{})".format(crlFace, dAngle, dTol, iLayer, vecAxisPt, vecAxisVect, bInterfaceElem, bExtrusion, dTranslationExtrusion, dBDeleteOriginalParts)
        return JPT_RUN_LINE(message)

    def FaceToFace(crSrcFace, crDstFace, bDeleteOriginalParts=True):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        HexModeling.FaceToFace(crSrcFace, crDstFace, bDeleteOriginalParts=True)
        ```
        
        Macro: {ref}`Macro-HexModeling-HexSweepFaceToFace`
        
        Ribbon: {menuselection}`HexModeling --> FaceToFace`
        
        ## Inputs
        
        **`crSrcFace`**
        : A _Cursor_ specifying the source face. This is a required input.
        
        **`crDstFace`**
        : A _Cursor_ specifying the dst face. This is a required input.
        
        **`bDeleteOriginalParts`**
        : A _Boolean_ specifying the delete original parts. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        HexModeling.FaceToFace(crSrcFace, crDstFace, bDeleteOriginalParts=True)
        ```
        
        """
        message = "HexModeling.FaceToFace({},{},{})".format(crSrcFace, crDstFace, bDeleteOriginalParts)
        return JPT_RUN_LINE(message)

    def Layer(crlFace=[], dFrontWidth=0.0, dBackWidth=0.0, iFrontLayers=1, iBackLayers=0, iBaseFaceType=0, iSeparate=0):
        r"""
        ## Description
        
        sweep by layer
        
        ## Syntax
        
        ```python
        HexModeling.Layer(crlFace=[], dFrontWidth=0.0, dBackWidth=0.0, iFrontLayers=1, iBackLayers=0, iBaseFaceType=0, iSeparate=0)
        ```
        
        Macro: {ref}`Macro-HexModeling-HexSweepLayer`
        
        Ribbon: {menuselection}`HexModeling --> Layer`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`dFrontWidth`**
        : A _Double_ specifying the front width. The default value is 0.0.
        
        **`dBackWidth`**
        : A _Double_ specifying the back width. The default value is 0.0.
        
        **`iFrontLayers`**
        : An _Integer_ specifying the front layers. The default value is 1.
        
        **`iBackLayers`**
        : An _Integer_ specifying the back layers. The default value is 0.
        
        **`iBaseFaceType`**
        : An _Integer_ specifying the base face type. The default value is 0.
        
        **`iSeparate`**
        : An _Integer_ specifying the separate. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        HexModeling.Layer(crlFace=[], dFrontWidth=0.0, dBackWidth=0.0, iFrontLayers=1, iBackLayers=0, iBaseFaceType=0, iSeparate=0)
        ```
        
        """
        message = "HexModeling.Layer({},{},{},{},{},{},{})".format(crlFace, dFrontWidth, dBackWidth, iFrontLayers, iBackLayers, iBaseFaceType, iSeparate)
        return JPT_RUN_LINE(message)

    def Linear(crlFace=[], dLength=10, iLayer=10, vecSweepDirection=[], bInterfaceElemFlag=False, iLinearMethod=0, bDeleteOriginalParts=False, bDeleteTargetParts=False, iMethodBias=0, dFactor=2.0, iProgression=0):
        r"""
        ## Description
        
        Linear hex mesh creation
        
        ## Syntax
        
        ```python
        HexModeling.Linear(crlFace=[], dLength=10, iLayer=10, vecSweepDirection=[], bInterfaceElemFlag=False, iLinearMethod=0, bDeleteOriginalParts=False, bDeleteTargetParts=False, iMethodBias=0, dFactor=2.0, iProgression=0)
        ```
        
        Macro: {ref}`Macro-HexModeling-HexModelSweepLinear`
        
        Ribbon: {menuselection}`HexModeling --> Linear`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`dLength`**
        : A _Double_ specifying the length. The default value is 10.
        
        **`iLayer`**
        : An _Integer_ specifying the layer. The default value is 10.
        
        **`vecSweepDirection`**
        : A _Vector_ specifying the sweep direction. The default value is [].
        
        **`bInterfaceElemFlag`**
        : A _Boolean_ specifying the interface element flag. The default value is False.
        
        **`iLinearMethod`**
        : An _Integer_ specifying the linear method. The default value is 0.
        
        **`bDeleteOriginalParts`**
        : A _Boolean_ specifying the delete original parts. The default value is False.
        
        **`bDeleteTargetParts`**
        : A _Boolean_ specifying the delete target parts. The default value is False.
        
        **`iMethodBias`**
        : An _Integer_ specifying the method bias. The default value is 0.
        
        **`dFactor`**
        : A _Double_ specifying the factor. The default value is 2.0.
        
        **`iProgression`**
        : An _Integer_ specifying the progression. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        HexModeling.Linear(crlFace=[], dLength=10, iLayer=10, vecSweepDirection=[], bInterfaceElemFlag=False, iLinearMethod=0, bDeleteOriginalParts=False, bDeleteTargetParts=False, iMethodBias=0, dFactor=2.0, iProgression=0)
        ```
        
        """
        message = "HexModeling.Linear({},{},{},{},{},{},{},{},{},{},{})".format(crlFace, dLength, iLayer, vecSweepDirection, bInterfaceElemFlag, iLinearMethod, bDeleteOriginalParts, bDeleteTargetParts, iMethodBias, dFactor, iProgression)
        return JPT_RUN_LINE(message)

    def FromMidPlane(crlPart=[], bRef=True):
        r"""
        ## Description
        
        HexModeling From MidPlane
        
        ## Syntax
        
        ```python
        HexModeling.FromMidPlane(crlPart=[], bRef=True)
        ```
        
        Macro: {ref}`Macro-HexModeling-Shell2Hex`
        
        Ribbon: {menuselection}`HexModeling --> FromMidPlane`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`bRef`**
        : A _Boolean_ specifying the reference. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        HexModeling.FromMidPlane(crlPart=[], bRef=True)
        ```
        
        """
        message = "HexModeling.FromMidPlane({},{})".format(crlPart, bRef)
        return JPT_RUN_LINE(message)

    def Curve(crFace=None, crlEdge=[], crlRefEdge=[], dMeshSize=0.1):
        r"""
        ## Description
        
        make hex by sweeping curve
        
        ## Syntax
        
        ```python
        HexModeling.Curve(crFace=None, crlEdge=[], crlRefEdge=[], dMeshSize=0.1)
        ```
        
        Macro: {ref}`Macro-HexModeling-SweepCloseLoopShape`
        
        Ribbon: {menuselection}`HexModeling --> Curve`
        
        ## Inputs
        
        **`crFace`**
        : A _Cursor_ specifying the face. The default value is None.
        
        **`crlEdge`**
        : A _Cursor List_ specifying the edge. The default value is [].
        
        **`crlRefEdge`**
        : A _Cursor List_ specifying the reference edge. The default value is [].
        
        **`dMeshSize`**
        : A _Double_ specifying the mesh size. The default value is 0.1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        HexModeling.Curve(crFace=None, crlEdge=[], crlRefEdge=[], dMeshSize=0.1)
        ```
        
        """
        message = "HexModeling.Curve({},{},{},{})".format(crFace, crlEdge, crlRefEdge, dMeshSize)
        return JPT_RUN_LINE(message)

class Home:
    ImportCAD = Home_ImportCAD()

    ImportMesh = Home_ImportMesh()

    def ExportSTL(strFile="", crlPart=[], dScale=1, bFilterIndex=False):
        r"""
        ## Description
        
        export stl
        
        ## Syntax
        
        ```python
        Home.ExportSTL(strFile="", crlPart=[], dScale=1, bFilterIndex=False)
        ```
        
        Macro: {ref}`Macro-Home-ExportSTL`
        
        Ribbon: {menuselection}`Home --> ExportSTL`
        
        ## Inputs
        
        **`strFile`**
        : A _String_ specifying the file. The default value is "".
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`dScale`**
        : A _Double_ specifying the scale. The default value is 1.
        
        **`bFilterIndex`**
        : A _Boolean_ specifying the filter index. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Home.ExportSTL(strFile="", crlPart=[], dScale=1, bFilterIndex=False)
        ```
        
        """
        message = "Home.ExportSTL('{}',{},{},{})".format(strFile, crlPart, dScale, bFilterIndex)
        return JPT_RUN_LINE(message)

    def ExportGeometryBDF(strFileName, crlPart=[], bBigID=False, bUseUnit=True, bVert=True, bEdge=True, bFace=True, bSolid=True):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Home.ExportGeometryBDF(strFileName, crlPart=[], bBigID=False, bUseUnit=True, bVert=True, bEdge=True, bFace=True, bSolid=True)
        ```
        
        Macro: {ref}`Macro-Home-ExportGeomBDF`
        
        Ribbon: {menuselection}`Home --> ExportGeometryBDF`
        
        ## Inputs
        
        **`strFileName`**
        : A _String_ specifying the file name. This is a required input.
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`bBigID`**
        : A _Boolean_ specifying the big ID. The default value is False.
        
        **`bUseUnit`**
        : A _Boolean_ specifying the use unit. The default value is True.
        
        **`bVert`**
        : A _Boolean_ specifying the vert. The default value is True.
        
        **`bEdge`**
        : A _Boolean_ specifying the edge. The default value is True.
        
        **`bFace`**
        : A _Boolean_ specifying the face. The default value is True.
        
        **`bSolid`**
        : A _Boolean_ specifying the solid. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Home.ExportGeometryBDF(strFileName, crlPart=[], bBigID=False, bUseUnit=True, bVert=True, bEdge=True, bFace=True, bSolid=True)
        ```
        
        """
        message = "Home.ExportGeometryBDF('{}',{},{},{},{},{},{},{})".format(strFileName, crlPart, bBigID, bUseUnit, bVert, bEdge, bFace, bSolid)
        return JPT_RUN_LINE(message)

    def ToImage(strImgPath, bWhiteBG=False, bTransparentBG=False, bFixedSize=False, iExportWidth=1200, iExportHeight=900):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Home.ToImage(strImgPath, bWhiteBG=False, bTransparentBG=False, bFixedSize=False, iExportWidth=1200, iExportHeight=900)
        ```
        
        Macro: {ref}`Macro-Home-Capture_ToImageEx`
        
        Ribbon: {menuselection}`Home --> ToImage`
        
        ## Inputs
        
        **`strImgPath`**
        : A _String_ specifying the image path. This is a required input.
        
        **`bWhiteBG`**
        : A _Boolean_ specifying the white back ground. The default value is False.
        
        **`bTransparentBG`**
        : A _Boolean_ specifying the transparent back ground. The default value is False.
        
        **`bFixedSize`**
        : A _Boolean_ specifying the fixed size. The default value is False.
        
        **`iExportWidth`**
        : An _Integer_ specifying the export width. The default value is 1200.
        
        **`iExportHeight`**
        : An _Integer_ specifying the export height. The default value is 900.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Home.ToImage(strImgPath, bWhiteBG=False, bTransparentBG=False, bFixedSize=False, iExportWidth=1200, iExportHeight=900)
        ```
        
        """
        message = "Home.ToImage('{}',{},{},{},{},{})".format(strImgPath, bWhiteBG, bTransparentBG, bFixedSize, iExportWidth, iExportHeight)
        return JPT_RUN_LINE(message)

    def Find(strSearch="", strSeletedType="Part", bFindMatch=False):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Home.Find(strSearch="", strSeletedType="Part", bFindMatch=False)
        ```
        
        Macro: {ref}`Macro-Home-ViewFindEntities`
        
        Ribbon: {menuselection}`Home --> Find`
        
        ## Inputs
        
        **`strSearch`**
        : A _String_ specifying the search. The default value is "".
        
        **`strSeletedType`**
        : A _String_ specifying the seleted type. The default value is "Part".
        
        **`bFindMatch`**
        : A _Boolean_ specifying the find match. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Home.Find(strSearch="", strSeletedType="Part", bFindMatch=False)
        ```
        
        """
        message = "Home.Find('{}','{}',{})".format(strSearch, strSeletedType, bFindMatch)
        return JPT_RUN_LINE(message)

    def RectangularCapture(iLeft=0, iTop=0, iRight=0, iBottom=0):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Home.RectangularCapture(iLeft=0, iTop=0, iRight=0, iBottom=0)
        ```
        
        Macro: {ref}`Macro-Home-Capture_Rectangular`
        
        Ribbon: {menuselection}`Home --> RectangularCapture`
        
        ## Inputs
        
        **`iLeft`**
        : An _Integer_ specifying the left. The default value is 0.
        
        **`iTop`**
        : An _Integer_ specifying the top. The default value is 0.
        
        **`iRight`**
        : An _Integer_ specifying the right. The default value is 0.
        
        **`iBottom`**
        : An _Integer_ specifying the bottom. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Home.RectangularCapture(iLeft=0, iTop=0, iRight=0, iBottom=0)
        ```
        
        """
        message = "Home.RectangularCapture({},{},{},{})".format(iLeft, iTop, iRight, iBottom)
        return JPT_RUN_LINE(message)

    def CopyToClipboard(bWhiteBG=False, bTransparentBG=False, bFixedSize=False, iWidth=1200, iHeight=900):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Home.CopyToClipboard(bWhiteBG=False, bTransparentBG=False, bFixedSize=False, iWidth=1200, iHeight=900)
        ```
        
        Macro: {ref}`Macro-Home-Capture_CopyToClipboardEx`
        
        Ribbon: {menuselection}`Home --> CopyToClipboard`
        
        ## Inputs
        
        **`bWhiteBG`**
        : A _Boolean_ specifying the white back ground. The default value is False.
        
        **`bTransparentBG`**
        : A _Boolean_ specifying the transparent back ground. The default value is False.
        
        **`bFixedSize`**
        : A _Boolean_ specifying the fixed size. The default value is False.
        
        **`iWidth`**
        : An _Integer_ specifying the width. The default value is 1200.
        
        **`iHeight`**
        : An _Integer_ specifying the height. The default value is 900.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Home.CopyToClipboard(bWhiteBG=False, bTransparentBG=False, bFixedSize=False, iWidth=1200, iHeight=900)
        ```
        
        """
        message = "Home.CopyToClipboard({},{},{},{},{})".format(bWhiteBG, bTransparentBG, bFixedSize, iWidth, iHeight)
        return JPT_RUN_LINE(message)

    def FullScreen():
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Home.FullScreen()
        ```
        
        Macro: {ref}`Macro-Home-ShowFullScreen`
        
        Ribbon: {menuselection}`Home --> FullScreen`
        
        ## Inputs
        
        None
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Home.FullScreen()
        ```
        
        """
        message = "Home.FullScreen({})".format('')
        return JPT_RUN_LINE(message)

    def Synchronize():
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Home.Synchronize()
        ```
        
        Macro: {ref}`Macro-Home-SetSynchronize`
        
        Ribbon: {menuselection}`Home --> Synchronize`
        
        ## Inputs
        
        None
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Home.Synchronize()
        ```
        
        """
        message = "Home.Synchronize({})".format('')
        return JPT_RUN_LINE(message)

class MainWindow:
    RightClick = MainWindow_RightClick()

class MeshCleanup:
    Element = MeshCleanup_Element()

    def Face(crlFace=[], crlPart=[], bCreateNewPart=False):
        r"""
        undefined
        """
        message = "MeshCleanup.Face({},{},{})".format(crlFace, crlPart, bCreateNewPart)
        return JPT_RUN_LINE(message)

    def CorrectModel(crlPart, iEnableBreakEdge=0, dEdgeAngle=0, iEnableMergeEdge=0, dMergeEdgeAngle=0, iEnableMergePlanarFace=0, iEnableRemoveExtraVertex=0):
        r"""
        undefined
        """
        message = "MeshCleanup.CorrectModel({},{},{},{},{},{},{})".format(crlPart, iEnableBreakEdge, dEdgeAngle, iEnableMergeEdge, dMergeEdgeAngle, iEnableMergePlanarFace, iEnableRemoveExtraVertex)
        return JPT_RUN_LINE(message)

    def CloseHoles(crlEdge=[], dAreaMin=0.0, dAreaMax=543210.0, bMergeFace=False, bMergeEdge=False):
        r"""
        undefined
        """
        message = "MeshCleanup.CloseHoles({},{},{},{},{})".format(crlEdge, dAreaMin, dAreaMax, bMergeFace, bMergeEdge)
        return JPT_RUN_LINE(message)

    def CloseGap(crlPartCur=[], dDistanceTol=0.01):
        r"""
        undefined
        """
        message = "MeshCleanup.CloseGap({},{})".format(crlPartCur, dDistanceTol)
        return JPT_RUN_LINE(message)

    def AutoCheck(crlPart, iElemType, blCheckCondition, blElemQuality, dlLimitValue, crlElem):
        r"""
        undefined
        """
        message = "MeshCleanup.AutoCheck({},{},{},{},{},{})".format(crlPart, iElemType, blCheckCondition, blElemQuality, dlLimitValue, crlElem)
        return JPT_RUN_LINE(message)

    def ManualCheck(crlPart=[], iElemType=0, iVeQuality=0, iCheckCondition=0, dLimitValue=0.0, dCFLValue=0.0, iNonManifold=0, iCleanupMode=0, crlElem=[]):
        r"""
        undefined
        """
        message = "MeshCleanup.ManualCheck({},{},{},{},{},{},{},{},{})".format(crlPart, iElemType, iVeQuality, iCheckCondition, dLimitValue, dCFLValue, iNonManifold, iCleanupMode, crlElem)
        return JPT_RUN_LINE(message)

    ChangeTopology = MeshCleanup_ChangeTopology()

    Cleanup = MeshCleanup_Cleanup()

    Manual2D = MeshCleanup_Manual2D()

    Manual3D = MeshCleanup_Manual3D()

    ManualCheck = MeshCleanup_ManualCheck()

class MeshEdit:
    CreateElement = MeshEdit_CreateElement()

    CreateNode = MeshEdit_CreateNode()

    MoveNode = MeshEdit_MoveNode()

    def Face(crlFace, crlFaceFixed, iOffsetType=0, crCoord=None, dlOffset=[1.0, 0.0, 0.0], dOffset=0, iDistType=0, dDistStrong=10, dDistWeak=20, iNodeIdPick=-1, dlPickForMacro=[]):
        r"""
        ## Description
        
        Make Mesh deformation
        
        ## Syntax
        
        ```python
        MeshEdit.Face(crlFace, crlFaceFixed, iOffsetType=0, crCoord=None, dlOffset=[1.0, 0.0, 0.0], dOffset=0, iDistType=0, dDistStrong=10, dDistWeak=20, iNodeIdPick=-1, dlPickForMacro=[])
        ```
        
        Macro: {ref}`Macro-MeshEdit-MeshEditMorphingFaces`
        
        Ribbon: {menuselection}`MeshEdit --> Face`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. This is a required input.
        
        **`crlFaceFixed`**
        : A _Cursor List_ specifying the face fixed. This is a required input.
        
        **`iOffsetType`**
        : An _Integer_ specifying the offset type. The default value is 0.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`dlOffset`**
        : A _Double List_ specifying the offset. The default value is [1.0, 0.0, 0.0].
        
        **`dOffset`**
        : A _Double_ specifying the offset. The default value is 0.
        
        **`iDistType`**
        : An _Integer_ specifying the dist type. The default value is 0.
        
        **`dDistStrong`**
        : A _Double_ specifying the dist strong. The default value is 10.
        
        **`dDistWeak`**
        : A _Double_ specifying the dist weak. The default value is 20.
        
        **`iNodeIdPick`**
        : An _Integer_ specifying the node ID pick. The default value is -1.
        
        **`dlPickForMacro`**
        : A _Double List_ specifying the pick for macro. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.Face(crlFace, crlFaceFixed, iOffsetType=0, crCoord=None, dlOffset=[1.0, 0.0, 0.0], dOffset=0, iDistType=0, dDistStrong=10, dDistWeak=20, iNodeIdPick=-1, dlPickForMacro=[])
        ```
        
        """
        message = "MeshEdit.Face({},{},{},{},{},{},{},{},{},{},{})".format(crlFace, crlFaceFixed, iOffsetType, crCoord, dlOffset, dOffset, iDistType, dDistStrong, dDistWeak, iNodeIdPick, dlPickForMacro)
        return JPT_RUN_LINE(message)

    def ElementConvert(crlPart=[], iType=1):
        r"""
        ## Description
        
        Element Conversion
        
        ## Syntax
        
        ```python
        MeshEdit.ElementConvert(crlPart=[], iType=1)
        ```
        
        Macro: {ref}`Macro-MeshEdit-ElementConvert`
        
        Ribbon: {menuselection}`MeshEdit --> ElementConvert`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.ElementConvert(crlPart=[], iType=1)
        ```
        
        """
        message = "MeshEdit.ElementConvert({},{})".format(crlPart, iType)
        return JPT_RUN_LINE(message)

    def Deform(crlFaceSrcObverse=[], crlFaceDstReverse=[], crlFaceSrcReverse=[], crlFaceDstObverse=[], crlFaceFixed=[], dDistEffect=0.02):
        r"""
        ## Description
        
        geometry deformation
        
        ## Syntax
        
        ```python
        MeshEdit.Deform(crlFaceSrcObverse=[], crlFaceDstReverse=[], crlFaceSrcReverse=[], crlFaceDstObverse=[], crlFaceFixed=[], dDistEffect=0.02)
        ```
        
        Macro: {ref}`Macro-MeshEdit-GeometryDeform`
        
        Ribbon: {menuselection}`MeshEdit --> Deform`
        
        ## Inputs
        
        **`crlFaceSrcObverse`**
        : A _Cursor List_ specifying the face source obverse. The default value is [].
        
        **`crlFaceDstReverse`**
        : A _Cursor List_ specifying the face dst reverse. The default value is [].
        
        **`crlFaceSrcReverse`**
        : A _Cursor List_ specifying the face source reverse. The default value is [].
        
        **`crlFaceDstObverse`**
        : A _Cursor List_ specifying the face dst obverse. The default value is [].
        
        **`crlFaceFixed`**
        : A _Cursor List_ specifying the face fixed. The default value is [].
        
        **`dDistEffect`**
        : A _Double_ specifying the dist effect. The default value is 0.02.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.Deform(crlFaceSrcObverse=[], crlFaceDstReverse=[], crlFaceSrcReverse=[], crlFaceDstObverse=[], crlFaceFixed=[], dDistEffect=0.02)
        ```
        
        """
        message = "MeshEdit.Deform({},{},{},{},{},{})".format(crlFaceSrcObverse, crlFaceDstReverse, crlFaceSrcReverse, crlFaceDstObverse, crlFaceFixed, dDistEffect)
        return JPT_RUN_LINE(message)

    def MirrorCopy(crlFace=[]):
        r"""
        ## Description
        
        mirror copy of surface mesh
        
        ## Syntax
        
        ```python
        MeshEdit.MirrorCopy(crlFace=[])
        ```
        
        Macro: {ref}`Macro-MeshEdit-MirrorCopy`
        
        Ribbon: {menuselection}`MeshEdit --> MirrorCopy`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.MirrorCopy(crlFace=[])
        ```
        
        """
        message = "MeshEdit.MirrorCopy({})".format(crlFace)
        return JPT_RUN_LINE(message)

    def DeleteNode(crlNode=[], bRemoveVertex=True):
        r"""
        ## Description
        
        Delete floating nodes in db
        
        ## Syntax
        
        ```python
        MeshEdit.DeleteNode(crlNode=[], bRemoveVertex=True)
        ```
        
        Macro: {ref}`Macro-MeshEdit-DeleteNode`
        
        Ribbon: {menuselection}`MeshEdit --> DeleteNode`
        
        ## Inputs
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        **`bRemoveVertex`**
        : A _Boolean_ specifying the remove vertex. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.DeleteNode(crlNode=[], bRemoveVertex=True)
        ```
        
        """
        message = "MeshEdit.DeleteNode({},{})".format(crlNode, bRemoveVertex)
        return JPT_RUN_LINE(message)

    def FaceImprint(crlFaces=[], bMeshCopy=False):
        r"""
        ## Description
        
        import Nastran bdf file
        
        ## Syntax
        
        ```python
        MeshEdit.FaceImprint(crlFaces=[], bMeshCopy=False)
        ```
        
        Macro: {ref}`Macro-MeshEdit-MeshEditCMPFaceImprint`
        
        Ribbon: {menuselection}`MeshEdit --> FaceImprint`
        
        ## Inputs
        
        **`crlFaces`**
        : A _Cursor List_ specifying the faces. The default value is [].
        
        **`bMeshCopy`**
        : A _Boolean_ specifying the mesh copy. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.FaceImprint(crlFaces=[], bMeshCopy=False)
        ```
        
        """
        message = "MeshEdit.FaceImprint({},{})".format(crlFaces, bMeshCopy)
        return JPT_RUN_LINE(message)

    def AdjustOrientation(crlPart=[], crlFace=[], crlElem=[]):
        r"""
        ## Description
        
        Adjust Orientation
        
        ## Syntax
        
        ```python
        MeshEdit.AdjustOrientation(crlPart=[], crlFace=[], crlElem=[])
        ```
        
        Macro: {ref}`Macro-MeshEdit-GeomEditAdjustOrientation`
        
        Ribbon: {menuselection}`MeshEdit --> AdjustOrientation`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`crlElem`**
        : A _Cursor List_ specifying the element. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.AdjustOrientation(crlPart=[], crlFace=[], crlElem=[])
        ```
        
        """
        message = "MeshEdit.AdjustOrientation({},{},{})".format(crlPart, crlFace, crlElem)
        return JPT_RUN_LINE(message)

    def OneNode(crlNode=[], crlFaceFixed=[], bOffsetvector=False, crCoord=None, dlOffset=[0, 1, 0], dOffset=1.0, iDisttype=0, dDiststrong=10, dDistweak=20):
        r"""
        ## Description
        
        morphing one node
        
        ## Syntax
        
        ```python
        MeshEdit.OneNode(crlNode=[], crlFaceFixed=[], bOffsetvector=False, crCoord=None, dlOffset=[0, 1, 0], dOffset=1.0, iDisttype=0, dDiststrong=10, dDistweak=20)
        ```
        
        Macro: {ref}`Macro-MeshEdit-MeshEditMorphingOneNode`
        
        Ribbon: {menuselection}`MeshEdit --> OneNode`
        
        ## Inputs
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        **`crlFaceFixed`**
        : A _Cursor List_ specifying the face fixed. The default value is [].
        
        **`bOffsetvector`**
        : A _Boolean_ specifying the offsetvector. The default value is False.
        
        **`crCoord`**
        : A _Cursor_ specifying the coordinate. The default value is None.
        
        **`dlOffset`**
        : A _Double List_ specifying the offset. The default value is [0, 1, 0].
        
        **`dOffset`**
        : A _Double_ specifying the offset. The default value is 1.0.
        
        **`iDisttype`**
        : An _Integer_ specifying the disttype. The default value is 0.
        
        **`dDiststrong`**
        : A _Double_ specifying the diststrong. The default value is 10.
        
        **`dDistweak`**
        : A _Double_ specifying the distweak. The default value is 20.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.OneNode(crlNode=[], crlFaceFixed=[], bOffsetvector=False, crCoord=None, dlOffset=[0, 1, 0], dOffset=1.0, iDisttype=0, dDiststrong=10, dDistweak=20)
        ```
        
        """
        message = "MeshEdit.OneNode({},{},{},{},{},{},{},'{}',{})".format(crlNode, crlFaceFixed, bOffsetvector, crCoord, dlOffset, dOffset, iDisttype, dDiststrong, dDistweak)
        return JPT_RUN_LINE(message)

    def SeparateNodes(crlShareNodes=[], crlTarget=[], iKeepNodeIDsOn=0):
        r"""
        ## Description
        
        Separate nodes
        
        ## Syntax
        
        ```python
        MeshEdit.SeparateNodes(crlShareNodes=[], crlTarget=[], iKeepNodeIDsOn=0)
        ```
        
        Macro: {ref}`Macro-MeshEdit-SeparateNode`
        
        Ribbon: {menuselection}`MeshEdit --> SeparateNodes`
        
        ## Inputs
        
        **`crlShareNodes`**
        : A _Cursor List_ specifying the share nodes. The default value is [].
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`iKeepNodeIDsOn`**
        : An _Integer_ specifying the keep node i ds on. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.SeparateNodes(crlShareNodes=[], crlTarget=[], iKeepNodeIDsOn=0)
        ```
        
        """
        message = "MeshEdit.SeparateNodes({},{},{})".format(crlShareNodes, crlTarget, iKeepNodeIDsOn)
        return JPT_RUN_LINE(message)

    def RefineQuality(iMetric, crlFace, crlElem, crlNode):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        MeshEdit.RefineQuality(iMetric, crlFace, crlElem, crlNode)
        ```
        
        Macro: {ref}`Macro-MeshEdit-MeshEdit_RefineQuality`
        
        Ribbon: {menuselection}`MeshEdit --> RefineQuality`
        
        ## Inputs
        
        **`iMetric`**
        : An _Integer_ specifying the metric. This is a required input.
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. This is a required input.
        
        **`crlElem`**
        : A _Cursor List_ specifying the element. This is a required input.
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.RefineQuality(iMetric, crlFace, crlElem, crlNode)
        ```
        
        """
        message = "MeshEdit.RefineQuality({},{},{},{})".format(iMetric, crlFace, crlElem, crlNode)
        return JPT_RUN_LINE(message)

    def Import(iSolverType=0, strFilePath="", iStep=0, dScale=1.0):
        r"""
        ## Description
        
        Move nodes deformation
        
        ## Syntax
        
        ```python
        MeshEdit.Import(iSolverType=0, strFilePath="", iStep=0, dScale=1.0)
        ```
        
        Macro: {ref}`Macro-MeshEdit-MoveNodeDeform`
        
        Ribbon: {menuselection}`MeshEdit --> Import`
        
        ## Inputs
        
        **`iSolverType`**
        : An _Integer_ specifying the solver type. The default value is 0.
        
        **`strFilePath`**
        : A _String_ specifying the file path. The default value is "".
        
        **`iStep`**
        : An _Integer_ specifying the step. The default value is 0.
        
        **`dScale`**
        : A _Double_ specifying the scale. The default value is 1.0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.Import(iSolverType=0, strFilePath="", iStep=0, dScale=1.0)
        ```
        
        """
        message = "MeshEdit.Import({},'{}',{},{})".format(iSolverType, strFilePath, iStep, dScale)
        return JPT_RUN_LINE(message)

    def RemoveSolidMesh(crlPart=[], bConvFirst=False):
        r"""
        ## Description
        
        Remove Solid Mesh
        
        ## Syntax
        
        ```python
        MeshEdit.RemoveSolidMesh(crlPart=[], bConvFirst=False)
        ```
        
        Macro: {ref}`Macro-MeshEdit-RemoveSolidMesh`
        
        Ribbon: {menuselection}`MeshEdit --> RemoveSolidMesh`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`bConvFirst`**
        : A _Boolean_ specifying the conv first. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.RemoveSolidMesh(crlPart=[], bConvFirst=False)
        ```
        
        """
        message = "MeshEdit.RemoveSolidMesh({},{})".format(crlPart, bConvFirst)
        return JPT_RUN_LINE(message)

    def MergeNodes(dTolerance=0.01, iKeepType=0, crlTarget=[], bGroup=False, bEquivalence=True):
        r"""
        ## Description
        
        Merge nodes
        
        ## Syntax
        
        ```python
        MeshEdit.MergeNodes(dTolerance=0.01, iKeepType=0, crlTarget=[], bGroup=False, bEquivalence=True)
        ```
        
        Macro: {ref}`Macro-MeshEdit-MergeNode`
        
        Ribbon: {menuselection}`MeshEdit --> MergeNodes`
        
        ## Inputs
        
        **`dTolerance`**
        : A _Double_ specifying the tolerance. The default value is 0.01.
        
        **`iKeepType`**
        : An _Integer_ specifying the keep type. The default value is 0.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`bGroup`**
        : A _Boolean_ specifying the group. The default value is False.
        
        **`bEquivalence`**
        : A _Boolean_ specifying the equivalence. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.MergeNodes(dTolerance=0.01, iKeepType=0, crlTarget=[], bGroup=False, bEquivalence=True)
        ```
        
        """
        message = "MeshEdit.MergeNodes({},{},{},{},{})".format(dTolerance, iKeepType, crlTarget, bGroup, bEquivalence)
        return JPT_RUN_LINE(message)

    def MeshCopy(crlFace=[], crlNode=[]):
        r"""
        ## Description
        
        Mesh Copy Pattern
        
        ## Syntax
        
        ```python
        MeshEdit.MeshCopy(crlFace=[], crlNode=[])
        ```
        
        Macro: {ref}`Macro-MeshEdit-MeshCopy`
        
        Ribbon: {menuselection}`MeshEdit --> MeshCopy`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.MeshCopy(crlFace=[], crlNode=[])
        ```
        
        """
        message = "MeshEdit.MeshCopy({},{})".format(crlFace, crlNode)
        return JPT_RUN_LINE(message)

    def RibThickness(crlFaceMove=[], crlFaceFixed=[], dMove=3.00, dDistStrong=10.00, dDistWeak=20.00):
        r"""
        ## Description
        
        Mesh Edit Morphing Rib Thickness
        
        ## Syntax
        
        ```python
        MeshEdit.RibThickness(crlFaceMove=[], crlFaceFixed=[], dMove=3.00, dDistStrong=10.00, dDistWeak=20.00)
        ```
        
        Macro: {ref}`Macro-MeshEdit-MeshEditMorphingRibThickness`
        
        Ribbon: {menuselection}`MeshEdit --> RibThickness`
        
        ## Inputs
        
        **`crlFaceMove`**
        : A _Cursor List_ specifying the face move. The default value is [].
        
        **`crlFaceFixed`**
        : A _Cursor List_ specifying the face fixed. The default value is [].
        
        **`dMove`**
        : A _Double_ specifying the move. The default value is 3.00.
        
        **`dDistStrong`**
        : A _Double_ specifying the dist strong. The default value is 10.00.
        
        **`dDistWeak`**
        : A _Double_ specifying the dist weak. The default value is 20.00.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.RibThickness(crlFaceMove=[], crlFaceFixed=[], dMove=3.00, dDistStrong=10.00, dDistWeak=20.00)
        ```
        
        """
        message = "MeshEdit.RibThickness({},{},{},{},{})".format(crlFaceMove, crlFaceFixed, dMove, dDistStrong, dDistWeak)
        return JPT_RUN_LINE(message)

    def ChangePattern(crlFace=[], iPatternType=0):
        r"""
        ## Description
        
        Element ChangePattern
        
        ## Syntax
        
        ```python
        MeshEdit.ChangePattern(crlFace=[], iPatternType=0)
        ```
        
        Macro: {ref}`Macro-MeshEdit-GeomEditChangePatternCr`
        
        Ribbon: {menuselection}`MeshEdit --> ChangePattern`
        
        ## Inputs
        
        **`crlFace`**
        : A _Cursor List_ specifying the face. The default value is [].
        
        **`iPatternType`**
        : An _Integer_ specifying the pattern type. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.ChangePattern(crlFace=[], iPatternType=0)
        ```
        
        """
        message = "MeshEdit.ChangePattern({},{})".format(crlFace, iPatternType)
        return JPT_RUN_LINE(message)

    def SurfaceMesh(crlPart=[], iType=1):
        r"""
        ## Description
        
        Element Conversion
        
        ## Syntax
        
        ```python
        MeshEdit.SurfaceMesh(crlPart=[], iType=1)
        ```
        
        Macro: {ref}`Macro-MeshEdit-ElementConv_Surface`
        
        Ribbon: {menuselection}`MeshEdit --> SurfaceMesh`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.SurfaceMesh(crlPart=[], iType=1)
        ```
        
        """
        message = "MeshEdit.SurfaceMesh({},{})".format(crlPart, iType)
        return JPT_RUN_LINE(message)

    def SolidMesh(crlPart=[], iType=1):
        r"""
        ## Description
        
        Element Conversion
        
        ## Syntax
        
        ```python
        MeshEdit.SolidMesh(crlPart=[], iType=1)
        ```
        
        Macro: {ref}`Macro-MeshEdit-ElementConv_Solid`
        
        Ribbon: {menuselection}`MeshEdit --> SolidMesh`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`iType`**
        : An _Integer_ specifying the type. The default value is 1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.SolidMesh(crlPart=[], iType=1)
        ```
        
        """
        message = "MeshEdit.SolidMesh({},{})".format(crlPart, iType)
        return JPT_RUN_LINE(message)

    def DividePartByRegion(crlPart=[], crlBoundaryParts=[]):
        r"""
        ## Description
        
        Divide Part By Region
        
        ## Syntax
        
        ```python
        MeshEdit.DividePartByRegion(crlPart=[], crlBoundaryParts=[])
        ```
        
        Macro: {ref}`Macro-MeshEdit-DividePartByRegion`
        
        Ribbon: {menuselection}`MeshEdit --> DividePartByRegion`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`crlBoundaryParts`**
        : A _Cursor List_ specifying the boundary parts. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MeshEdit.DividePartByRegion(crlPart=[], crlBoundaryParts=[])
        ```
        
        """
        message = "MeshEdit.DividePartByRegion({},{})".format(crlPart, crlBoundaryParts)
        return JPT_RUN_LINE(message)

class Meshing:
    CADProjection = Meshing_CADProjection()

    LocalMeshing = Meshing_LocalMeshing()

    LocalSetting = Meshing_LocalSetting()

    Templates = Meshing_Templates()

    def BarMeshing(crlCadEdge, crlBarEdge, crlBarPart, dDocMeshSize=0, iDocNumofElem=4):
        r"""
        ## Description
        
        meshing 1D edge/bar
        
        ## Syntax
        
        ```python
        Meshing.BarMeshing(crlCadEdge, crlBarEdge, crlBarPart, dDocMeshSize=0, iDocNumofElem=4)
        ```
        
        Macro: {ref}`Macro-Meshing-BeamMeshing`
        
        Ribbon: {menuselection}`Meshing --> BarMeshing`
        
        ## Inputs
        
        **`crlCadEdge`**
        : A _Cursor List_ specifying the CAD edge. This is a required input.
        
        **`crlBarEdge`**
        : A _Cursor List_ specifying the bar edge. This is a required input.
        
        **`crlBarPart`**
        : A _Cursor List_ specifying the bar part. This is a required input.
        
        **`dDocMeshSize`**
        : A _Double_ specifying the doc mesh size. The default value is 0.
        
        **`iDocNumofElem`**
        : An _Integer_ specifying the doc number of element. The default value is 4.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Meshing.BarMeshing(crlCadEdge, crlBarEdge, crlBarPart, dDocMeshSize=0, iDocNumofElem=4)
        ```
        
        """
        message = "Meshing.BarMeshing({},{},{},{},{})".format(crlCadEdge, crlBarEdge, crlBarPart, dDocMeshSize, iDocNumofElem)
        return JPT_RUN_LINE(message)

    def GridMesh(listGridMesh, bLocalsetting=True):
        r"""
        ## Description
        
        Grid meshing
        
        ## Syntax
        
        ```python
        Meshing.GridMesh(listGridMesh, bLocalsetting=True)
        ```
        
        Macro: {ref}`Macro-Meshing-MeshingLocalMeshingGridMesh`
        
        Ribbon: {menuselection}`Meshing --> GridMesh`
        
        ## Inputs
        
        **`listGridMesh`**
        : A _GRID_MESH List_ specifying the grid mesh. This is a required input.
        
        **`bLocalsetting`**
        : A _Boolean_ specifying the localsetting. The default value is True.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Meshing.GridMesh(listGridMesh, bLocalsetting=True)
        ```
        
        """
        message = "Meshing.GridMesh({},{})".format(listGridMesh, bLocalsetting)
        return JPT_RUN_LINE(message)

    def SolidMeshing(crlPart=[], bTet10=False, dGradingFactor=0, bGravCenter=False, dStretchLimit=0, iSpeedVsQual=0, iSpeedVsMem=0, iRegion=0, bInternalNodes=True, bSafeMode=True, iParallel=0, bSurfaceNodes=True, bEdgeNodes=True, bPreservation=True, bInternalMeshOnly=True, bMeshColor=False, iPartColor=2763429):
        r"""
        ## Description
        
        Solid Meshing
        
        ## Syntax
        
        ```python
        Meshing.SolidMeshing(crlPart=[], bTet10=False, dGradingFactor=0, bGravCenter=False, dStretchLimit=0, iSpeedVsQual=0, iSpeedVsMem=0, iRegion=0, bInternalNodes=True, bSafeMode=True, iParallel=0, bSurfaceNodes=True, bEdgeNodes=True, bPreservation=True, bInternalMeshOnly=True, bMeshColor=False, iPartColor=2763429)
        ```
        
        Macro: {ref}`Macro-Meshing-VolMeshing`
        
        Ribbon: {menuselection}`Meshing --> SolidMeshing`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`bTet10`**
        : A _Boolean_ specifying the tet10. The default value is False.
        
        **`dGradingFactor`**
        : A _Double_ specifying the grading factor. The default value is 0.
        
        **`bGravCenter`**
        : A _Boolean_ specifying the grav center. The default value is False.
        
        **`dStretchLimit`**
        : A _Double_ specifying the stretch limit. The default value is 0.
        
        **`iSpeedVsQual`**
        : An _Integer_ specifying the speed vs qual. The default value is 0.
        
        **`iSpeedVsMem`**
        : An _Integer_ specifying the speed vs mem. The default value is 0.
        
        **`iRegion`**
        : An _Integer_ specifying the region. The default value is 0.
        
        **`bInternalNodes`**
        : A _Boolean_ specifying the internal nodes. The default value is True.
        
        **`bSafeMode`**
        : A _Boolean_ specifying the safe mode. The default value is True.
        
        **`iParallel`**
        : An _Integer_ specifying the parallel. The default value is 0.
        
        **`bSurfaceNodes`**
        : A _Boolean_ specifying the surface nodes. The default value is True.
        
        **`bEdgeNodes`**
        : A _Boolean_ specifying the edge nodes. The default value is True.
        
        **`bPreservation`**
        : A _Boolean_ specifying the preservation. The default value is True.
        
        **`bInternalMeshOnly`**
        : A _Boolean_ specifying the internal mesh only. The default value is True.
        
        **`bMeshColor`**
        : A _Boolean_ specifying the mesh color. The default value is False.
        
        **`iPartColor`**
        : An _Integer_ specifying the part color. The default value is 2763429.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Meshing.SolidMeshing(crlPart=[], bTet10=False, dGradingFactor=0, bGravCenter=False, dStretchLimit=0, iSpeedVsQual=0, iSpeedVsMem=0, iRegion=0, bInternalNodes=True, bSafeMode=True, iParallel=0, bSurfaceNodes=True, bEdgeNodes=True, bPreservation=True, bInternalMeshOnly=True, bMeshColor=False, iPartColor=2763429)
        ```
        
        """
        message = "Meshing.SolidMeshing({},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(crlPart, bTet10, dGradingFactor, bGravCenter, dStretchLimit, iSpeedVsQual, iSpeedVsMem, iRegion, bInternalNodes, bSafeMode, iParallel, bSurfaceNodes, bEdgeNodes, bPreservation, bInternalMeshOnly, bMeshColor, iPartColor)
        return JPT_RUN_LINE(message)

    def SurfaceMeshing(crlPart=[], surfaceMesh=SURFACE_MESH(), bUseSetting=True, bFMesher=False, iThreadNum=8, bRefData=True, bMeshColor=False, iPartColor=65280):
        r"""
        ## Description
        
        Surface Meshing
        
        ## Syntax
        
        ```python
        Meshing.SurfaceMeshing(crlPart=[], surfaceMesh=SURFACE_MESH(), bUseSetting=True, bFMesher=False, iThreadNum=8, bRefData=True, bMeshColor=False, iPartColor=65280)
        ```
        
        Macro: {ref}`Macro-Meshing-SurfaceMeshing2D`
        
        Ribbon: {menuselection}`Meshing --> SurfaceMeshing`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`surfaceMesh`**
        : A _SURFACE_MESH_ specifying the mesh. The default value is SURFACE_MESH().
        
        **`bUseSetting`**
        : A _Boolean_ specifying the use setting. The default value is True.
        
        **`bFMesher`**
        : A _Boolean_ specifying the mesher. The default value is False.
        
        **`iThreadNum`**
        : An _Integer_ specifying the thread number. The default value is 8.
        
        **`bRefData`**
        : A _Boolean_ specifying the reference data. The default value is True.
        
        **`bMeshColor`**
        : A _Boolean_ specifying the mesh color. The default value is False.
        
        **`iPartColor`**
        : An _Integer_ specifying the part color. The default value is 65280.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Meshing.SurfaceMeshing(crlPart=[], surfaceMesh=SURFACE_MESH(), bUseSetting=True, bFMesher=False, iThreadNum=8, bRefData=True, bMeshColor=False, iPartColor=65280)
        ```
        
        """
        message = "Meshing.SurfaceMeshing({},{},{},{},{},{},{},{})".format(crlPart, surfaceMesh, bUseSetting, bFMesher, iThreadNum, bRefData, bMeshColor, iPartColor)
        return JPT_RUN_LINE(message)

    def SetAttib(crlPart = [], surfaceMesh = SURFACE_MESH()):
        r"""
        ## Description
        
        set attribute
        
        ## Syntax
        
        ```python
        Meshing.SetAttib(crlPart = [], surfaceMesh = SURFACE_MESH())
        ```
        
        Macro: {ref}`Macro-Meshing-SetMeshAttrib`
        
        Ribbon: {menuselection}`Meshing --> SetAttib`
        
        ## Inputs
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. The default value is [].
        
        **`surfaceMesh`**
        : A _SURFACE_MESH_ specifying the mesh. The default value is SURFACE_MESH().
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Meshing.SetAttib(crlPart = [], surfaceMesh = SURFACE_MESH())
        ```
        
        """
        message = "Meshing.SetAttib({},{})".format(crlPart , surfaceMesh )
        return JPT_RUN_LINE(message)

    LocalRemesh = Meshing_LocalRemesh()

    LocalSettings = Meshing_LocalSettings()

class MidPlane:
    def AdjustThickness(crlPart=[], dRatio=1.0, bAdjustFaceThick=False, bAdjustPropThick=False):
        r"""
        undefined
        """
        message = "MidPlane.AdjustThickness({},{},{},{})".format(crlPart, dRatio, bAdjustFaceThick, bAdjustPropThick)
        return JPT_RUN_LINE(message)

    def FaceCross(crlBodies=[], crlFaces=[]):
        r"""
        undefined
        """
        message = "MidPlane.FaceCross({},{})".format(crlBodies, crlFaces)
        return JPT_RUN_LINE(message)

    def CreateThickProps(crlPart=[], dThickDiff=0.1, dMaxThick=DFLT_DBL, dMinThick=DFLT_DBL, crMatMembrane=None, crMatBend=None, crMatShear=None, crMatCoupl=None, iMatOrientType=0, dMatOrientX=DFLT_DBL, dMatOrientY=DFLT_DBL, dMatOrientZ=DFLT_DBL, crCoord=None, dThickness=DFLT_DBL, dBendStiff=DFLT_DBL, dThickRatio=1, dNSM=DFLT_DBL, dFiberDist1=DFLT_DBL, dFiberDist2=DFLT_DBL, dPlateOff=DFLT_DBL, iNumInterPts=0, bThickSetting=False, iEntityType=0, bDivideProp=False, crlRefPart=[]):
        r"""
        undefined
        """
        message = "MidPlane.CreateThickProps({},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(crlPart, dThickDiff, dMaxThick, dMinThick, crMatMembrane, crMatBend, crMatShear, crMatCoupl, iMatOrientType, dMatOrientX, dMatOrientY, dMatOrientZ, crCoord, dThickness, dBendStiff, dThickRatio, dNSM, dFiberDist1, dFiberDist2, dPlateOff, iNumInterPts, bThickSetting, iEntityType, bDivideProp, crlRefPart)
        return JPT_RUN_LINE(message)

    def FindMidPlane():
        r"""
        undefined
        """
        message = "MidPlane.FindMidPlane({})".format('')
        return JPT_RUN_LINE(message)

class MidPlaneEdit:
    Edge = MidPlaneEdit_Edge()

    ExtendFace = MidPlaneEdit_ExtendFace()

    Face = MidPlaneEdit_Face()

    Manual = MidPlaneEdit_Manual()

    AddItems = MidPlaneEdit_AddItems()

class MMCCarACTools:
    ACModelCreationTools = MMCCarACTools_ACModelCreationTools()

    ClearanceElement = MMCCarACTools_ClearanceElement()

class MufflerHA:
    CreateEdge = MufflerHA_CreateEdge()

    CreateEdgeClassic = MufflerHA_CreateEdgeClassic()

    def CopyMeshCount(crlMasterEdge, crlSlaveEdge, strBaseName):
        r"""
        undefined
        """
        message = "MufflerHA.CopyMeshCount({},{},'{}')".format(crlMasterEdge, crlSlaveEdge, strBaseName)
        return JPT_RUN_LINE(message)

class MufflerT:
    SpecialModeling = MufflerT_SpecialModeling()

class MuxWeld:
    CreateWeld = MuxWeld_CreateWeld()

    DefineSequence = MuxWeld_DefineSequence()

    def MeshingPass(crPart=None, crlEdge=[], dMeshSize=0.0):
        r"""
        ## Description
        
        sweep cross section to create welding
        
        ## Syntax
        
        ```python
        MuxWeld.MeshingPass(crPart=None, crlEdge=[], dMeshSize=0.0)
        ```
        
        Macro: {ref}`Macro-MuxWeld-WeldHexSweepBodyCr`
        
        Ribbon: {menuselection}`MuxWeld --> MeshingPass`
        
        ## Inputs
        
        **`crPart`**
        : A _Cursor_ specifying the part. The default value is None.
        
        **`crlEdge`**
        : A _Cursor List_ specifying the edge. The default value is [].
        
        **`dMeshSize`**
        : A _Double_ specifying the mesh size. The default value is 0.0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MuxWeld.MeshingPass(crPart=None, crlEdge=[], dMeshSize=0.0)
        ```
        
        """
        message = "MuxWeld.MeshingPass({},{},{})".format(crPart, crlEdge, dMeshSize)
        return JPT_RUN_LINE(message)

    def Prop3DWeldBead(strName="Bead_1", crMaterial=None, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        create Property 3D Weld Bead
        
        ## Syntax
        
        ```python
        MuxWeld.Prop3DWeldBead(strName="Bead_1", crMaterial=None, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-MuxWeld-Prop3DWeldBead`
        
        Ribbon: {menuselection}`MuxWeld --> Prop3DWeldBead`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "Bead_1".
        
        **`crMaterial`**
        : A _Cursor_ specifying the material. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        MuxWeld.Prop3DWeldBead(strName="Bead_1", crMaterial=None, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "MuxWeld.Prop3DWeldBead('{}',{},{},{})".format(strName, crMaterial, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

class NSModeling:
    def NSModeling_Close_Hole(iType, dMaxLength, bMergeFaces, bSetCenterPoint, crlNode, crlPart):
        r"""
        ## Description
        
        NSModeling NSModeling_Close_Hole
        
        ## Syntax
        
        ```python
        NSModeling.NSModeling_Close_Hole(iType, dMaxLength, bMergeFaces, bSetCenterPoint, crlNode, crlPart)
        ```
        
        Macro: {ref}`Macro-NSModeling-NSModeling_Close_Hole`
        
        Ribbon: {menuselection}`NSModeling --> NSModeling_Close_Hole`
        
        ## Inputs
        
        **`iType`**
        : An _Integer_ specifying the type. This is a required input.
        
        **`dMaxLength`**
        : A _Double_ specifying the maximum length. This is a required input.
        
        **`bMergeFaces`**
        : A _Boolean_ specifying the merge faces. This is a required input.
        
        **`bSetCenterPoint`**
        : A _Boolean_ specifying the set center point. This is a required input.
        
        **`crlNode`**
        : A _Cursor List_ specifying the node. This is a required input.
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        NSModeling.NSModeling_Close_Hole(iType, dMaxLength, bMergeFaces, bSetCenterPoint, crlNode, crlPart)
        ```
        
        """
        message = "NSModeling.NSModeling_Close_Hole({},{},{},{},{},{})".format(iType, dMaxLength, bMergeFaces, bSetCenterPoint, crlNode, crlPart)
        return JPT_RUN_LINE(message)

class OasisAWizard:
    LocalMeshing = OasisAWizard_LocalMeshing()

class Post:
    ImportResults = Post_ImportResults()

class Properties:
    ElemRelatedInfo = Properties_ElemRelatedInfo()

    Material = Properties_Material()

    Section = Properties_Section()

    def Cohesive(strName, crMaterial, iResponse, bSpecifyThick, dInitialThick, crlTarget, crEdit=None, iFLG=0, iId=0, iSolverType=0, iADVCResponseType=0, iADVCStackDir=0, iEnableADVCThickness=0, dADVCThickness=DFLT_DBL):
        r"""
        ## Description
        
        create property 3d cohesive
        
        ## Syntax
        
        ```python
        Properties.Cohesive(strName, crMaterial, iResponse, bSpecifyThick, dInitialThick, crlTarget, crEdit=None, iFLG=0, iId=0, iSolverType=0, iADVCResponseType=0, iADVCStackDir=0, iEnableADVCThickness=0, dADVCThickness=DFLT_DBL)
        ```
        
        Macro: {ref}`Macro-Properties-Prop3DCohesive`
        
        Ribbon: {menuselection}`Properties --> Cohesive`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`crMaterial`**
        : A _Cursor_ specifying the material. This is a required input.
        
        **`iResponse`**
        : An _Integer_ specifying the response. This is a required input.
        
        **`bSpecifyThick`**
        : A _Boolean_ specifying the specify thickness. This is a required input.
        
        **`dInitialThick`**
        : A _Double_ specifying the initial thickness. This is a required input.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. This is a required input.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iFLG`**
        : An _Integer_ specifying the value FLG. The default value is 0.
        
        **`iId`**
        : An _Integer_ specifying the ID. The default value is 0.
        
        **`iSolverType`**
        : An _Integer_ specifying the solver type. The default value is 0.
        
        **`iADVCResponseType`**
        : An _Integer_ specifying the ADVC response type. The default value is 0.
        
        **`iADVCStackDir`**
        : An _Integer_ specifying the ADVC stack direction. The default value is 0.
        
        **`iEnableADVCThickness`**
        : An _Integer_ specifying the enable ADVC thickness. The default value is 0.
        
        **`dADVCThickness`**
        : A _Double_ specifying the ADVC thickness. The default value is DFLT_DBL.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.Cohesive(strName, crMaterial, iResponse, bSpecifyThick, dInitialThick, crlTarget, crEdit=None, iFLG=0, iId=0, iSolverType=0, iADVCResponseType=0, iADVCStackDir=0, iEnableADVCThickness=0, dADVCThickness=DFLT_DBL)
        ```
        
        """
        message = "Properties.Cohesive('{}',{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, crMaterial, iResponse, bSpecifyThick, dInitialThick, crlTarget, crEdit, iFLG, iId, iSolverType, iADVCResponseType, iADVCStackDir, iEnableADVCThickness, dADVCThickness)
        return JPT_RUN_LINE(message)

    def Gasket(strName, crMaterial, dThickX, dThickY, dThickZ, crlTarget, crEdit=None, iStData=0, iFLG=0):
        r"""
        ## Description
        
        create property 3d gasket
        
        ## Syntax
        
        ```python
        Properties.Gasket(strName, crMaterial, dThickX, dThickY, dThickZ, crlTarget, crEdit=None, iStData=0, iFLG=0)
        ```
        
        Macro: {ref}`Macro-Properties-Prop3DGasket`
        
        Ribbon: {menuselection}`Properties --> Gasket`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`crMaterial`**
        : A _Cursor_ specifying the material. This is a required input.
        
        **`dThickX`**
        : A _Double_ specifying the thickness x. This is a required input.
        
        **`dThickY`**
        : A _Double_ specifying the thickness y. This is a required input.
        
        **`dThickZ`**
        : A _Double_ specifying the thickness z. This is a required input.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. This is a required input.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iStData`**
        : An _Integer_ specifying the st data. The default value is 0.
        
        **`iFLG`**
        : An _Integer_ specifying the value FLG. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.Gasket(strName, crMaterial, dThickX, dThickY, dThickZ, crlTarget, crEdit=None, iStData=0, iFLG=0)
        ```
        
        """
        message = "Properties.Gasket('{}',{},{},{},{},{},{},{},{})".format(strName, crMaterial, dThickX, dThickY, dThickZ, crlTarget, crEdit, iStData, iFLG)
        return JPT_RUN_LINE(message)

    def Shell(strName="Shell Property", iPID=1, crMatMembrane=None, crMatBend=None, crMatShear=None, crMatCoupl=None, dMatOrient1=0.0, dMatOrient2=0.0, dMatOrient3=0.0, dThickness=1, dBendStiff=0.0, dThickRatio=0.5, dNSM=0.0, dFiberDist1=0.0, dFiberDist2=0.0, dPlateOff=0.0, iItgPts=0, iMatOrientType=0, crLocalCS=None, crlTarget=[], crEdit=None, iDuplicateOpt=0):
        r"""
        ## Description
        
        create shell property
        
        ## Syntax
        
        ```python
        Properties.Shell(strName="Shell Property", iPID=1, crMatMembrane=None, crMatBend=None, crMatShear=None, crMatCoupl=None, dMatOrient1=0.0, dMatOrient2=0.0, dMatOrient3=0.0, dThickness=1, dBendStiff=0.0, dThickRatio=0.5, dNSM=0.0, dFiberDist1=0.0, dFiberDist2=0.0, dPlateOff=0.0, iItgPts=0, iMatOrientType=0, crLocalCS=None, crlTarget=[], crEdit=None, iDuplicateOpt=0)
        ```
        
        Macro: {ref}`Macro-Properties-Property2DShell`
        
        Ribbon: {menuselection}`Properties --> Shell`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "Shell Property".
        
        **`iPID`**
        : An _Integer_ specifying the p ID. The default value is 1.
        
        **`crMatMembrane`**
        : A _Cursor_ specifying the material membrane. The default value is None.
        
        **`crMatBend`**
        : A _Cursor_ specifying the material bend. The default value is None.
        
        **`crMatShear`**
        : A _Cursor_ specifying the material shear. The default value is None.
        
        **`crMatCoupl`**
        : A _Cursor_ specifying the material couple. The default value is None.
        
        **`dMatOrient1`**
        : A _Double_ specifying the material orient1. The default value is 0.0.
        
        **`dMatOrient2`**
        : A _Double_ specifying the material orient2. The default value is 0.0.
        
        **`dMatOrient3`**
        : A _Double_ specifying the material orient3. The default value is 0.0.
        
        **`dThickness`**
        : A _Double_ specifying the thickness. The default value is 1.
        
        **`dBendStiff`**
        : A _Double_ specifying the bend stiff. The default value is 0.0.
        
        **`dThickRatio`**
        : A _Double_ specifying the thickness ratio. The default value is 0.5.
        
        **`dNSM`**
        : A _Double_ specifying the n s m. The default value is 0.0.
        
        **`dFiberDist1`**
        : A _Double_ specifying the fiber distance 1. The default value is 0.0.
        
        **`dFiberDist2`**
        : A _Double_ specifying the fiber distance 2. The default value is 0.0.
        
        **`dPlateOff`**
        : A _Double_ specifying the plate off. The default value is 0.0.
        
        **`iItgPts`**
        : An _Integer_ specifying the itg pts. The default value is 0.
        
        **`iMatOrientType`**
        : An _Integer_ specifying the material orient type. The default value is 0.
        
        **`crLocalCS`**
        : A _Cursor_ specifying the local coordinate system. The default value is None.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iDuplicateOpt`**
        : An _Integer_ specifying the duplicate opt. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.Shell(strName="Shell Property", iPID=1, crMatMembrane=None, crMatBend=None, crMatShear=None, crMatCoupl=None, dMatOrient1=0.0, dMatOrient2=0.0, dMatOrient3=0.0, dThickness=1, dBendStiff=0.0, dThickRatio=0.5, dNSM=0.0, dFiberDist1=0.0, dFiberDist2=0.0, dPlateOff=0.0, iItgPts=0, iMatOrientType=0, crLocalCS=None, crlTarget=[], crEdit=None, iDuplicateOpt=0)
        ```
        
        """
        message = "Properties.Shell('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, iPID, crMatMembrane, crMatBend, crMatShear, crMatCoupl, dMatOrient1, dMatOrient2, dMatOrient3, dThickness, dBendStiff, dThickRatio, dNSM, dFiberDist1, dFiberDist2, dPlateOff, iItgPts, iMatOrientType, crLocalCS, crlTarget, crEdit, iDuplicateOpt)
        return JPT_RUN_LINE(message)

    def PropertyTable(listRenumberProp=[]):
        r"""
        ## Description
        
        renumber property/material ID
        
        ## Syntax
        
        ```python
        Properties.PropertyTable(listRenumberProp=[])
        ```
        
        Macro: {ref}`Macro-Properties-RenumberPropertyTable`
        
        Ribbon: {menuselection}`Properties --> PropertyTable`
        
        ## Inputs
        
        **`listRenumberProp`**
        : A _RENUMBER_PROP List_ specifying the renumber property. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.PropertyTable(listRenumberProp=[])
        ```
        
        """
        message = "Properties.PropertyTable({})".format(listRenumberProp)
        return JPT_RUN_LINE(message)

    def Beam(strNewName="BEAM1", iPId=1, crSection=None, iShapeDataType=0, crMat=None, dArea=0.0, dlVecOrient=[0,0,0], dlVecInertia=[0,0,0], dTorConst=0.0, dNSM=DFLT_DBL, dNSMA=DFLT_DBL, dNSMB=DFLT_DBL, dNSMNode1=DFLT_DBL, dNSMNode2=DFLT_DBL, dNSMNode3=DFLT_DBL, dNSMNode4=DFLT_DBL, dShearStiffnessK1=0.0, dShearStiffnessK2=0.0, dShearAreaReliefS1=DFLT_DBL, dShearAreaReliefS2=DFLT_DBL, dWrapCoeff1=DFLT_DBL, dWrapCoeff2=DFLT_DBL, dNA1=DFLT_DBL, dNA2=DFLT_DBL, dNA3=DFLT_DBL, dNA4=DFLT_DBL, dStressRecoveryCoeffCy=0.0, dStressRecoveryCoeffCz=0.0, dStressRecoveryCoeffDy=0.0, dStressRecoveryCoeffDz=0.0, dStressRecoveryCoeffEy=0.0, dStressRecoveryCoeffEz=0.0, dStressRecoveryCoeffFy=0.0, dStressRecoveryCoeffFz=0.0, bPinA1=False, bPinA2=False, bPinA3=False, bPinA4=False, bPinA5=False, bPinA6=False, bPinB1=False, bPinB2=False, bPinB3=False, bPinB4=False, bPinB5=False, bPinB6=False, dlOffsetA=[DFLT_DBL,DFLT_DBL,DFLT_DBL], dlOffsetB=[DFLT_DBL,DFLT_DBL,DFLT_DBL], iLengthUnit=0, iMassUnit=0, crlTarget=[], crEdit=None, bTapped=False, dTapArea=DFLT_DBL, dlVecTapInertia=[DFLT_DBL,DFLT_DBL,DFLT_DBL], dTapTorConst=DFLT_DBL, dTapNSM=DFLT_DBL, dTapStressRecoveryCoeffCy=DFLT_DBL, dTapStressRecoveryCoeffCz=DFLT_DBL, dTapStressRecoveryCoeffDy=DFLT_DBL, dTapStressRecoveryCoeffDz=DFLT_DBL, dTapStressRecoveryCoeffEy=DFLT_DBL, dTapStressRecoveryCoeffEz=DFLT_DBL, dTapStressRecoveryCoeffFy=DFLT_DBL, dTapStressRecoveryCoeffFz=DFLT_DBL, iIntePtNum=DFLT_INT):
        r"""
        ## Description
        
        add property of 1D beam
        
        ## Syntax
        
        ```python
        Properties.Beam(strNewName="BEAM1", iPId=1, crSection=None, iShapeDataType=0, crMat=None, dArea=0.0, dlVecOrient=[0,0,0], dlVecInertia=[0,0,0], dTorConst=0.0, dNSM=DFLT_DBL, dNSMA=DFLT_DBL, dNSMB=DFLT_DBL, dNSMNode1=DFLT_DBL, dNSMNode2=DFLT_DBL, dNSMNode3=DFLT_DBL, dNSMNode4=DFLT_DBL, dShearStiffnessK1=0.0, dShearStiffnessK2=0.0, dShearAreaReliefS1=DFLT_DBL, dShearAreaReliefS2=DFLT_DBL, dWrapCoeff1=DFLT_DBL, dWrapCoeff2=DFLT_DBL, dNA1=DFLT_DBL, dNA2=DFLT_DBL, dNA3=DFLT_DBL, dNA4=DFLT_DBL, dStressRecoveryCoeffCy=0.0, dStressRecoveryCoeffCz=0.0, dStressRecoveryCoeffDy=0.0, dStressRecoveryCoeffDz=0.0, dStressRecoveryCoeffEy=0.0, dStressRecoveryCoeffEz=0.0, dStressRecoveryCoeffFy=0.0, dStressRecoveryCoeffFz=0.0, bPinA1=False, bPinA2=False, bPinA3=False, bPinA4=False, bPinA5=False, bPinA6=False, bPinB1=False, bPinB2=False, bPinB3=False, bPinB4=False, bPinB5=False, bPinB6=False, dlOffsetA=[DFLT_DBL,DFLT_DBL,DFLT_DBL], dlOffsetB=[DFLT_DBL,DFLT_DBL,DFLT_DBL], iLengthUnit=0, iMassUnit=0, crlTarget=[], crEdit=None, bTapped=False, dTapArea=DFLT_DBL, dlVecTapInertia=[DFLT_DBL,DFLT_DBL,DFLT_DBL], dTapTorConst=DFLT_DBL, dTapNSM=DFLT_DBL, dTapStressRecoveryCoeffCy=DFLT_DBL, dTapStressRecoveryCoeffCz=DFLT_DBL, dTapStressRecoveryCoeffDy=DFLT_DBL, dTapStressRecoveryCoeffDz=DFLT_DBL, dTapStressRecoveryCoeffEy=DFLT_DBL, dTapStressRecoveryCoeffEz=DFLT_DBL, dTapStressRecoveryCoeffFy=DFLT_DBL, dTapStressRecoveryCoeffFz=DFLT_DBL, iIntePtNum=DFLT_INT)
        ```
        
        Macro: {ref}`Macro-Properties-Property1DBeamN`
        
        Ribbon: {menuselection}`Properties --> Beam`
        
        ## Inputs
        
        **`strNewName`**
        : A _String_ specifying the new name. The default value is "BEAM1".
        
        **`iPId`**
        : An _Integer_ specifying the p ID. The default value is 1.
        
        **`crSection`**
        : A _Cursor_ specifying the section. The default value is None.
        
        **`iShapeDataType`**
        : An _Integer_ specifying the shape data type. The default value is 0.
        
        **`crMat`**
        : A _Cursor_ specifying the material. The default value is None.
        
        **`dArea`**
        : A _Double_ specifying the area. The default value is 0.0.
        
        **`dlVecOrient`**
        : A _Double List_ specifying the vector orient. The default value is [0,0,0].
        
        **`dlVecInertia`**
        : A _Double List_ specifying the vector inertia. The default value is [0,0,0].
        
        **`dTorConst`**
        : A _Double_ specifying the tor const. The default value is 0.0.
        
        **`dNSM`**
        : A _Double_ specifying the n s m. The default value is DFLT_DBL.
        
        **`dNSMA`**
        : A _Double_ specifying the n s m a. The default value is DFLT_DBL.
        
        **`dNSMB`**
        : A _Double_ specifying the n s m . The default value is DFLT_DBL.
        
        **`dNSMNode1`**
        : A _Double_ specifying the n s m node1. The default value is DFLT_DBL.
        
        **`dNSMNode2`**
        : A _Double_ specifying the n s m node2. The default value is DFLT_DBL.
        
        **`dNSMNode3`**
        : A _Double_ specifying the n s m node3. The default value is DFLT_DBL.
        
        **`dNSMNode4`**
        : A _Double_ specifying the n s m node4. The default value is DFLT_DBL.
        
        **`dShearStiffnessK1`**
        : A _Double_ specifying the shear stiffness k1. The default value is 0.0.
        
        **`dShearStiffnessK2`**
        : A _Double_ specifying the shear stiffness k2. The default value is 0.0.
        
        **`dShearAreaReliefS1`**
        : A _Double_ specifying the shear area relief s1. The default value is DFLT_DBL.
        
        **`dShearAreaReliefS2`**
        : A _Double_ specifying the shear area relief s2. The default value is DFLT_DBL.
        
        **`dWrapCoeff1`**
        : A _Double_ specifying the wrap coefficient 1. The default value is DFLT_DBL.
        
        **`dWrapCoeff2`**
        : A _Double_ specifying the wrap coefficient 2. The default value is DFLT_DBL.
        
        **`dNA1`**
        : A _Double_ specifying the n a1. The default value is DFLT_DBL.
        
        **`dNA2`**
        : A _Double_ specifying the n a2. The default value is DFLT_DBL.
        
        **`dNA3`**
        : A _Double_ specifying the n a3. The default value is DFLT_DBL.
        
        **`dNA4`**
        : A _Double_ specifying the n a4. The default value is DFLT_DBL.
        
        **`dStressRecoveryCoeffCy`**
        : A _Double_ specifying the stress recovery coeff cy. The default value is 0.0.
        
        **`dStressRecoveryCoeffCz`**
        : A _Double_ specifying the stress recovery coeff cz. The default value is 0.0.
        
        **`dStressRecoveryCoeffDy`**
        : A _Double_ specifying the stress recovery coeff dy. The default value is 0.0.
        
        **`dStressRecoveryCoeffDz`**
        : A _Double_ specifying the stress recovery coeff dz. The default value is 0.0.
        
        **`dStressRecoveryCoeffEy`**
        : A _Double_ specifying the stress recovery coeff ey. The default value is 0.0.
        
        **`dStressRecoveryCoeffEz`**
        : A _Double_ specifying the stress recovery coeff ez. The default value is 0.0.
        
        **`dStressRecoveryCoeffFy`**
        : A _Double_ specifying the stress recovery coeff fy. The default value is 0.0.
        
        **`dStressRecoveryCoeffFz`**
        : A _Double_ specifying the stress recovery coeff fz. The default value is 0.0.
        
        **`bPinA1`**
        : A _Boolean_ specifying the pin a1. The default value is False.
        
        **`bPinA2`**
        : A _Boolean_ specifying the pin a2. The default value is False.
        
        **`bPinA3`**
        : A _Boolean_ specifying the pin a3. The default value is False.
        
        **`bPinA4`**
        : A _Boolean_ specifying the pin a4. The default value is False.
        
        **`bPinA5`**
        : A _Boolean_ specifying the pin a5. The default value is False.
        
        **`bPinA6`**
        : A _Boolean_ specifying the pin a6. The default value is False.
        
        **`bPinB1`**
        : A _Boolean_ specifying the pin b1. The default value is False.
        
        **`bPinB2`**
        : A _Boolean_ specifying the pin b2. The default value is False.
        
        **`bPinB3`**
        : A _Boolean_ specifying the pin b3. The default value is False.
        
        **`bPinB4`**
        : A _Boolean_ specifying the pin b4. The default value is False.
        
        **`bPinB5`**
        : A _Boolean_ specifying the pin b5. The default value is False.
        
        **`bPinB6`**
        : A _Boolean_ specifying the pin b6. The default value is False.
        
        **`dlOffsetA`**
        : A _Double List_ specifying the offset a. The default value is [DFLT_DBL,DFLT_DBL,DFLT_DBL].
        
        **`dlOffsetB`**
        : A _Double List_ specifying the offset . The default value is [DFLT_DBL,DFLT_DBL,DFLT_DBL].
        
        **`iLengthUnit`**
        : An _Integer_ specifying the length unit. The default value is 0.
        
        **`iMassUnit`**
        : An _Integer_ specifying the mass unit. The default value is 0.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`bTapped`**
        : A _Boolean_ specifying the tapped. The default value is False.
        
        **`dTapArea`**
        : A _Double_ specifying the tapered area. The default value is DFLT_DBL.
        
        **`dlVecTapInertia`**
        : A _Double List_ specifying the vector tapered inertia. The default value is [DFLT_DBL,DFLT_DBL,DFLT_DBL].
        
        **`dTapTorConst`**
        : A _Double_ specifying the tapered tor const. The default value is DFLT_DBL.
        
        **`dTapNSM`**
        : A _Double_ specifying the tapered n s m. The default value is DFLT_DBL.
        
        **`dTapStressRecoveryCoeffCy`**
        : A _Double_ specifying the tapered stress recovery coeff cy. The default value is DFLT_DBL.
        
        **`dTapStressRecoveryCoeffCz`**
        : A _Double_ specifying the tapered stress recovery coeff cz. The default value is DFLT_DBL.
        
        **`dTapStressRecoveryCoeffDy`**
        : A _Double_ specifying the tapered stress recovery coeff dy. The default value is DFLT_DBL.
        
        **`dTapStressRecoveryCoeffDz`**
        : A _Double_ specifying the tapered stress recovery coeff dz. The default value is DFLT_DBL.
        
        **`dTapStressRecoveryCoeffEy`**
        : A _Double_ specifying the tapered stress recovery coeff ey. The default value is DFLT_DBL.
        
        **`dTapStressRecoveryCoeffEz`**
        : A _Double_ specifying the tapered stress recovery coeff ez. The default value is DFLT_DBL.
        
        **`dTapStressRecoveryCoeffFy`**
        : A _Double_ specifying the tapered stress recovery coeff fy. The default value is DFLT_DBL.
        
        **`dTapStressRecoveryCoeffFz`**
        : A _Double_ specifying the tapered stress recovery coeff fz. The default value is DFLT_DBL.
        
        **`iIntePtNum`**
        : An _Integer_ specifying the inte point number. The default value is DFLT_INT.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.Beam(strNewName="BEAM1", iPId=1, crSection=None, iShapeDataType=0, crMat=None, dArea=0.0, dlVecOrient=[0,0,0], dlVecInertia=[0,0,0], dTorConst=0.0, dNSM=DFLT_DBL, dNSMA=DFLT_DBL, dNSMB=DFLT_DBL, dNSMNode1=DFLT_DBL, dNSMNode2=DFLT_DBL, dNSMNode3=DFLT_DBL, dNSMNode4=DFLT_DBL, dShearStiffnessK1=0.0, dShearStiffnessK2=0.0, dShearAreaReliefS1=DFLT_DBL, dShearAreaReliefS2=DFLT_DBL, dWrapCoeff1=DFLT_DBL, dWrapCoeff2=DFLT_DBL, dNA1=DFLT_DBL, dNA2=DFLT_DBL, dNA3=DFLT_DBL, dNA4=DFLT_DBL, dStressRecoveryCoeffCy=0.0, dStressRecoveryCoeffCz=0.0, dStressRecoveryCoeffDy=0.0, dStressRecoveryCoeffDz=0.0, dStressRecoveryCoeffEy=0.0, dStressRecoveryCoeffEz=0.0, dStressRecoveryCoeffFy=0.0, dStressRecoveryCoeffFz=0.0, bPinA1=False, bPinA2=False, bPinA3=False, bPinA4=False, bPinA5=False, bPinA6=False, bPinB1=False, bPinB2=False, bPinB3=False, bPinB4=False, bPinB5=False, bPinB6=False, dlOffsetA=[DFLT_DBL,DFLT_DBL,DFLT_DBL], dlOffsetB=[DFLT_DBL,DFLT_DBL,DFLT_DBL], iLengthUnit=0, iMassUnit=0, crlTarget=[], crEdit=None, bTapped=False, dTapArea=DFLT_DBL, dlVecTapInertia=[DFLT_DBL,DFLT_DBL,DFLT_DBL], dTapTorConst=DFLT_DBL, dTapNSM=DFLT_DBL, dTapStressRecoveryCoeffCy=DFLT_DBL, dTapStressRecoveryCoeffCz=DFLT_DBL, dTapStressRecoveryCoeffDy=DFLT_DBL, dTapStressRecoveryCoeffDz=DFLT_DBL, dTapStressRecoveryCoeffEy=DFLT_DBL, dTapStressRecoveryCoeffEz=DFLT_DBL, dTapStressRecoveryCoeffFy=DFLT_DBL, dTapStressRecoveryCoeffFz=DFLT_DBL, iIntePtNum=DFLT_INT)
        ```
        
        """
        message = "Properties.Beam('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strNewName, iPId, crSection, iShapeDataType, crMat, dArea, dlVecOrient, dlVecInertia, dTorConst, dNSM, dNSMA, dNSMB, dNSMNode1, dNSMNode2, dNSMNode3, dNSMNode4, dShearStiffnessK1, dShearStiffnessK2, dShearAreaReliefS1, dShearAreaReliefS2, dWrapCoeff1, dWrapCoeff2, dNA1, dNA2, dNA3, dNA4, dStressRecoveryCoeffCy, dStressRecoveryCoeffCz, dStressRecoveryCoeffDy, dStressRecoveryCoeffDz, dStressRecoveryCoeffEy, dStressRecoveryCoeffEz, dStressRecoveryCoeffFy, dStressRecoveryCoeffFz, bPinA1, bPinA2, bPinA3, bPinA4, bPinA5, bPinA6, bPinB1, bPinB2, bPinB3, bPinB4, bPinB5, bPinB6, dlOffsetA, dlOffsetB, iLengthUnit, iMassUnit, crlTarget, crEdit, bTapped, dTapArea, dlVecTapInertia, dTapTorConst, dTapNSM, dTapStressRecoveryCoeffCy, dTapStressRecoveryCoeffCz, dTapStressRecoveryCoeffDy, dTapStressRecoveryCoeffDz, dTapStressRecoveryCoeffEy, dTapStressRecoveryCoeffEz, dTapStressRecoveryCoeffFy, dTapStressRecoveryCoeffFz, iIntePtNum)
        return JPT_RUN_LINE(message)

    def Rod(strName="", iId=1, crSection=None, crMat=None, dArea=DFLT_DBL, dTorConst=DFLT_DBL, dTorStressCoeff=DFLT_DBL, dNSM=DFLT_DBL, iLocalLengthUnit=0, iLocalMassUnit=0, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        create 1D rod property
        
        ## Syntax
        
        ```python
        Properties.Rod(strName="", iId=1, crSection=None, crMat=None, dArea=DFLT_DBL, dTorConst=DFLT_DBL, dTorStressCoeff=DFLT_DBL, dNSM=DFLT_DBL, iLocalLengthUnit=0, iLocalMassUnit=0, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-Properties-Property1DRod`
        
        Ribbon: {menuselection}`Properties --> Rod`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`iId`**
        : An _Integer_ specifying the ID. The default value is 1.
        
        **`crSection`**
        : A _Cursor_ specifying the section. The default value is None.
        
        **`crMat`**
        : A _Cursor_ specifying the material. The default value is None.
        
        **`dArea`**
        : A _Double_ specifying the area. The default value is DFLT_DBL.
        
        **`dTorConst`**
        : A _Double_ specifying the tor const. The default value is DFLT_DBL.
        
        **`dTorStressCoeff`**
        : A _Double_ specifying the tor stress coeff. The default value is DFLT_DBL.
        
        **`dNSM`**
        : A _Double_ specifying the n s m. The default value is DFLT_DBL.
        
        **`iLocalLengthUnit`**
        : An _Integer_ specifying the local length unit. The default value is 0.
        
        **`iLocalMassUnit`**
        : An _Integer_ specifying the local mass unit. The default value is 0.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.Rod(strName="", iId=1, crSection=None, crMat=None, dArea=DFLT_DBL, dTorConst=DFLT_DBL, dTorStressCoeff=DFLT_DBL, dNSM=DFLT_DBL, iLocalLengthUnit=0, iLocalMassUnit=0, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "Properties.Rod('{}',{},{},{},{},{},{},{},{},{},{},{})".format(strName, iId, crSection, crMat, dArea, dTorConst, dTorStressCoeff, dNSM, iLocalLengthUnit, iLocalMassUnit, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def Property1DBeamSimple(strName, iId, crSection=None, crMat=None, vecOrient=[DFLT_DBL,DFLT_DBL,DFLT_DBL], crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        ## Syntax
        
        ```python
        Properties.Property1DBeamSimple(strName, iId, crSection=None, crMat=None, vecOrient=[DFLT_DBL,DFLT_DBL,DFLT_DBL], crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-Properties-Property1DBeamSimple`
        
        Ribbon: {menuselection}`Properties --> Property1DBeamSimple`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`iId`**
        : An _Integer_ specifying the ID. This is a required input.
        
        **`crSection`**
        : A _Cursor_ specifying the section. The default value is None.
        
        **`crMat`**
        : A _Cursor_ specifying the material. The default value is None.
        
        **`vecOrient`**
        : A _Vector_ specifying the orient. The default value is [DFLT_DBL,DFLT_DBL,DFLT_DBL].
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.Property1DBeamSimple(strName, iId, crSection=None, crMat=None, vecOrient=[DFLT_DBL,DFLT_DBL,DFLT_DBL], crlTarget=[], crEdit=None)
        ```
        
        """
        message = "Properties.Property1DBeamSimple('{}',{},{},{},{},{},{})".format(strName, iId, crSection, crMat, vecOrient, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def Solid(strName="Solid Property", iPID=1, crMaterial=None, iCordM=0, iIN=0, iOutLoc=0, iISOP=0, iFLflag=0, iModifiedElem=0, iModifiedElemADVC=0, bHasDynaRemesh=False, dDynaRemeshVal1=0.0, dDynaRemeshVal2=0.0, iAbaqusPropHGtype=0, dDispHG=0.0, crlTarget=[], crEdit=None, iFLG=0):
        r"""
        ## Description
        
        create property solid
        
        ## Syntax
        
        ```python
        Properties.Solid(strName="Solid Property", iPID=1, crMaterial=None, iCordM=0, iIN=0, iOutLoc=0, iISOP=0, iFLflag=0, iModifiedElem=0, iModifiedElemADVC=0, bHasDynaRemesh=False, dDynaRemeshVal1=0.0, dDynaRemeshVal2=0.0, iAbaqusPropHGtype=0, dDispHG=0.0, crlTarget=[], crEdit=None, iFLG=0)
        ```
        
        Macro: {ref}`Macro-Properties-Property3DSolid`
        
        Ribbon: {menuselection}`Properties --> Solid`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "Solid Property".
        
        **`iPID`**
        : An _Integer_ specifying the process ID. The default value is 1.
        
        **`crMaterial`**
        : A _Cursor_ specifying the material. The default value is None.
        
        **`iCordM`**
        : An _Integer_ specifying the coordinate m. The default value is 0.
        
        **`iIN`**
        : An _Integer_ specifying the increment. The default value is 0.
        
        **`iOutLoc`**
        : An _Integer_ specifying the outpu location. The default value is 0.
        
        **`iISOP`**
        : An _Integer_ specifying the ISOP. The default value is 0.
        
        **`iFLflag`**
        : An _Integer_ specifying the FL flag. The default value is 0.
        
        **`iModifiedElem`**
        : An _Integer_ specifying the modified element. The default value is 0.
        
        **`iModifiedElemADVC`**
        : An _Integer_ specifying the modified element ADVC. The default value is 0.
        
        **`bHasDynaRemesh`**
        : A _Boolean_ specifying the has dyna remesh. The default value is False.
        
        **`dDynaRemeshVal1`**
        : A _Double_ specifying the dyna remesh value 1. The default value is 0.0.
        
        **`dDynaRemeshVal2`**
        : A _Double_ specifying the dyna remesh value 2. The default value is 0.0.
        
        **`iAbaqusPropHGtype`**
        : An _Integer_ specifying the abaqus property HG type. The default value is 0.
        
        **`dDispHG`**
        : A _Double_ specifying the displacement HG. The default value is 0.0.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`iFLG`**
        : An _Integer_ specifying the value FLG. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.Solid(strName="Solid Property", iPID=1, crMaterial=None, iCordM=0, iIN=0, iOutLoc=0, iISOP=0, iFLflag=0, iModifiedElem=0, iModifiedElemADVC=0, bHasDynaRemesh=False, dDynaRemeshVal1=0.0, dDynaRemeshVal2=0.0, iAbaqusPropHGtype=0, dDispHG=0.0, crlTarget=[], crEdit=None, iFLG=0)
        ```
        
        """
        message = "Properties.Solid('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, iPID, crMaterial, iCordM, iIN, iOutLoc, iISOP, iFLflag, iModifiedElem, iModifiedElemADVC, bHasDynaRemesh, dDynaRemeshVal1, dDynaRemeshVal2, iAbaqusPropHGtype, dDispHG, crlTarget, crEdit, iFLG)
        return JPT_RUN_LINE(message)

    def Section1D(strName="", iSecType=0, iSecGentype=2, dSecGensizeA=0, dSecGensizeB=0, dSecGensizeH=0, dSecGensizeT1=0, dSecGensizeT2=0, dSecGensizeT3=0, bSecTapered=False, dSecGensizeATap=0, dSecGensizeBTap=0, dSecGensizeHTap=0, dSecGensizeT1Tap=0, dSecGensizeT2Tap=0, dSecGensizeT3Tap=0):
        r"""
        ## Description
        
        Create 1D Property Sketcher Section
        
        ## Syntax
        
        ```python
        Properties.Section1D(strName="", iSecType=0, iSecGentype=2, dSecGensizeA=0, dSecGensizeB=0, dSecGensizeH=0, dSecGensizeT1=0, dSecGensizeT2=0, dSecGensizeT3=0, bSecTapered=False, dSecGensizeATap=0, dSecGensizeBTap=0, dSecGensizeHTap=0, dSecGensizeT1Tap=0, dSecGensizeT2Tap=0, dSecGensizeT3Tap=0)
        ```
        
        Macro: {ref}`Macro-Properties-Property1DSection`
        
        Ribbon: {menuselection}`Properties --> Section1D`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`iSecType`**
        : An _Integer_ specifying the section type. The default value is 0.
        
        **`iSecGentype`**
        : An _Integer_ specifying the section gentype. The default value is 2.
        
        **`dSecGensizeA`**
        : A _Double_ specifying the section general size a. The default value is 0.
        
        **`dSecGensizeB`**
        : A _Double_ specifying the section general size b. The default value is 0.
        
        **`dSecGensizeH`**
        : A _Double_ specifying the section general size h. The default value is 0.
        
        **`dSecGensizeT1`**
        : A _Double_ specifying the section general size t1. The default value is 0.
        
        **`dSecGensizeT2`**
        : A _Double_ specifying the section general size t2. The default value is 0.
        
        **`dSecGensizeT3`**
        : A _Double_ specifying the section general size t3. The default value is 0.
        
        **`bSecTapered`**
        : A _Boolean_ specifying the section tapered. The default value is False.
        
        **`dSecGensizeATap`**
        : A _Double_ specifying the section general size a tapered. The default value is 0.
        
        **`dSecGensizeBTap`**
        : A _Double_ specifying the section general size tapered. The default value is 0.
        
        **`dSecGensizeHTap`**
        : A _Double_ specifying the section general size h tapered. The default value is 0.
        
        **`dSecGensizeT1Tap`**
        : A _Double_ specifying the section general size t1 tapered. The default value is 0.
        
        **`dSecGensizeT2Tap`**
        : A _Double_ specifying the section general size t2 tapered. The default value is 0.
        
        **`dSecGensizeT3Tap`**
        : A _Double_ specifying the section general size t3 tapered. The default value is 0.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.Section1D(strName="", iSecType=0, iSecGentype=2, dSecGensizeA=0, dSecGensizeB=0, dSecGensizeH=0, dSecGensizeT1=0, dSecGensizeT2=0, dSecGensizeT3=0, bSecTapered=False, dSecGensizeATap=0, dSecGensizeBTap=0, dSecGensizeHTap=0, dSecGensizeT1Tap=0, dSecGensizeT2Tap=0, dSecGensizeT3Tap=0)
        ```
        
        """
        message = "Properties.Section1D('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, iSecType, iSecGentype, dSecGensizeA, dSecGensizeB, dSecGensizeH, dSecGensizeT1, dSecGensizeT2, dSecGensizeT3, bSecTapered, dSecGensizeATap, dSecGensizeBTap, dSecGensizeHTap, dSecGensizeT1Tap, dSecGensizeT2Tap, dSecGensizeT3Tap)
        return JPT_RUN_LINE(message)

    def Composite(strName="", iDFT=0, dGE=DFLT_DBL, iDLAM=0, crMat=None, dNSM=DFLT_DBL, iDPID=0, dSB=DFLT_DBL, iDSOUT=0, dTREF=DFLT_DBL, dZ0=DFLT_DBL, dZOFF=DFLT_DBL, crlTarget=[], crEdit=None, crDcrLocalCS=None, iDmatOrientType=0, vecDmatOrient=[DFLT_DBL, DFLT_DBL, DFLT_DBL]):
        r"""
        ## Description
        
        Create 2D Composite Material Shell Property
        
        ## Syntax
        
        ```python
        Properties.Composite(strName="", iDFT=0, dGE=DFLT_DBL, iDLAM=0, crMat=None, dNSM=DFLT_DBL, iDPID=0, dSB=DFLT_DBL, iDSOUT=0, dTREF=DFLT_DBL, dZ0=DFLT_DBL, dZOFF=DFLT_DBL, crlTarget=[], crEdit=None, crDcrLocalCS=None, iDmatOrientType=0, vecDmatOrient=[DFLT_DBL, DFLT_DBL, DFLT_DBL])
        ```
        
        Macro: {ref}`Macro-Properties-Create2DCompositeMaterialShellProperty`
        
        Ribbon: {menuselection}`Properties --> Composite`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`iDLAM`**
        : An _Integer_ specifying the DLAM. The default value is 0.
        
        **`dGE`**
        : A _Double_ specifying the back ground e. The default value is DFLT_DBL.
        
        **`iDLAM`**
        : An _Integer_ specifying the DLAM. The default value is 0.
        
        **`crMat`**
        : A _Cursor_ specifying the material. The default value is None.
        
        **`dNSM`**
        : A _Double_ specifying the NSM. The default value is DFLT_DBL.
        
        **`iDPID`**
        : An _Integer_ specifying the process ID. The default value is 0.
        
        **`dSB`**
        : A _Double_ specifying the sb. The default value is DFLT_DBL.
        
        **`iDSOUT`**
        : An _Integer_ specifying the ds output. The default value is 0.
        
        **`dTREF`**
        : A _Double_ specifying the TREF. The default value is DFLT_DBL.
        
        **`dZ0`**
        : A _Double_ specifying the z0. The default value is DFLT_DBL.
        
        **`dZOFF`**
        : A _Double_ specifying the ZOFF. The default value is DFLT_DBL.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        **`crDcrLocalCS`**
        : A _Cursor_ specifying the dcr local coordinate system. The default value is None.
        
        **`iDmatOrientType`**
        : An _Integer_ specifying the dmat orient type. The default value is 0.
        
        **`vecDmatOrient`**
        : A _Vector_ specifying the dmat orient. The default value is [DFLT_DBL, DFLT_DBL, DFLT_DBL].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.Composite(strName="", iDFT=0, dGE=DFLT_DBL, iDLAM=0, crMat=None, dNSM=DFLT_DBL, iDPID=0, dSB=DFLT_DBL, iDSOUT=0, dTREF=DFLT_DBL, dZ0=DFLT_DBL, dZOFF=DFLT_DBL, crlTarget=[], crEdit=None, crDcrLocalCS=None, iDmatOrientType=0, vecDmatOrient=[DFLT_DBL, DFLT_DBL, DFLT_DBL])
        ```
        
        """
        message = "Properties.Composite('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, iDFT, dGE, iDLAM, crMat, dNSM, iDPID, dSB, iDSOUT, dTREF, dZ0, dZOFF, crlTarget, crEdit, crDcrLocalCS, iDmatOrientType, vecDmatOrient)
        return JPT_RUN_LINE(message)

    def BAR(strName="", iId=1, crSection=None, iShapeDataType=0, crDatacrMat=None, dDatadArea=DFLT_DBL, dlDataOrient=[0, 0, 0], dlDataInertia=[0, 0, 0], dDatadTorConst=DFLT_DBL, dDatadNSM=DFLT_DBL, dDataShearAreaFactor0=DFLT_DBL, dDataShearAreaFactor1=DFLT_DBL, dDataStressRecoveryCoeff0=DFLT_DBL, dDataStressRecoveryCoeff1=DFLT_DBL, dDataStressRecoveryCoeff2=DFLT_DBL, dDataStressRecoveryCoeff3=DFLT_DBL, dDataStressRecoveryCoeff4=DFLT_DBL, dDataStressRecoveryCoeff5=DFLT_DBL, dDataStressRecoveryCoeff6=DFLT_DBL, dDataStressRecoveryCoeff7=DFLT_DBL, bDataPinA0=False, bDataPinA1=False, bDataPinA2=False, bDataPinA3=False, bDataPinA4=False, bDataPinA5=False, bDataPinB0=False, bDataPinB1=False, bDataPinB2=False, bDataPinB3=False, bDataPinB4=False, bDataPinB5=False, dlDataOffset0=[DFLT_DBL, DFLT_DBL, DFLT_DBL], dlDataOffset1=[DFLT_DBL, DFLT_DBL, DFLT_DBL], iLocalLengthUnit=0, iLocalMassUnit=0, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        create 1D bar property
        
        ## Syntax
        
        ```python
        Properties.BAR(strName="", iId=1, crSection=None, iShapeDataType=0, crDatacrMat=None, dDatadArea=DFLT_DBL, dlDataOrient=[0, 0, 0], dlDataInertia=[0, 0, 0], dDatadTorConst=DFLT_DBL, dDatadNSM=DFLT_DBL, dDataShearAreaFactor0=DFLT_DBL, dDataShearAreaFactor1=DFLT_DBL, dDataStressRecoveryCoeff0=DFLT_DBL, dDataStressRecoveryCoeff1=DFLT_DBL, dDataStressRecoveryCoeff2=DFLT_DBL, dDataStressRecoveryCoeff3=DFLT_DBL, dDataStressRecoveryCoeff4=DFLT_DBL, dDataStressRecoveryCoeff5=DFLT_DBL, dDataStressRecoveryCoeff6=DFLT_DBL, dDataStressRecoveryCoeff7=DFLT_DBL, bDataPinA0=False, bDataPinA1=False, bDataPinA2=False, bDataPinA3=False, bDataPinA4=False, bDataPinA5=False, bDataPinB0=False, bDataPinB1=False, bDataPinB2=False, bDataPinB3=False, bDataPinB4=False, bDataPinB5=False, dlDataOffset0=[DFLT_DBL, DFLT_DBL, DFLT_DBL], dlDataOffset1=[DFLT_DBL, DFLT_DBL, DFLT_DBL], iLocalLengthUnit=0, iLocalMassUnit=0, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-Properties-Property1DBar`
        
        Ribbon: {menuselection}`Properties --> BAR`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "".
        
        **`iId`**
        : An _Integer_ specifying the ID. The default value is 1.
        
        **`crSection`**
        : A _Cursor_ specifying the section. The default value is None.
        
        **`iShapeDataType`**
        : An _Integer_ specifying the shape data type. The default value is 0.
        
        **`crDatacrMat`**
        : A _Cursor_ specifying the datacr material. The default value is None.
        
        **`dDatadArea`**
        : A _Double_ specifying the datad area. The default value is DFLT_DBL.
        
        **`dlDataOrient`**
        : A _Double List_ specifying the data orient. The default value is [0, 0, 0].
        
        **`dlDataInertia`**
        : A _Double List_ specifying the data inertia. The default value is [0, 0, 0].
        
        **`dDatadTorConst`**
        : A _Double_ specifying the datad tor const. The default value is DFLT_DBL.
        
        **`dDatadNSM`**
        : A _Double_ specifying the datad n s m. The default value is DFLT_DBL.
        
        **`dDataShearAreaFactor0`**
        : A _Double_ specifying the data shear area factor0. The default value is DFLT_DBL.
        
        **`dDataShearAreaFactor1`**
        : A _Double_ specifying the data shear area factor1. The default value is DFLT_DBL.
        
        **`dDataStressRecoveryCoeff0`**
        : A _Double_ specifying the data stress recovery coefficient 0. The default value is DFLT_DBL.
        
        **`dDataStressRecoveryCoeff1`**
        : A _Double_ specifying the data stress recovery coefficient 1. The default value is DFLT_DBL.
        
        **`dDataStressRecoveryCoeff2`**
        : A _Double_ specifying the data stress recovery coefficient 2. The default value is DFLT_DBL.
        
        **`dDataStressRecoveryCoeff3`**
        : A _Double_ specifying the data stress recovery coefficient 3. The default value is DFLT_DBL.
        
        **`dDataStressRecoveryCoeff4`**
        : A _Double_ specifying the data stress recovery coefficient 4. The default value is DFLT_DBL.
        
        **`dDataStressRecoveryCoeff5`**
        : A _Double_ specifying the data stress recovery coefficient 5. The default value is DFLT_DBL.
        
        **`dDataStressRecoveryCoeff6`**
        : A _Double_ specifying the data stress recovery coefficient 6. The default value is DFLT_DBL.
        
        **`dDataStressRecoveryCoeff7`**
        : A _Double_ specifying the data stress recovery coefficient 7. The default value is DFLT_DBL.
        
        **`bDataPinA0`**
        : A _Boolean_ specifying the data pin a0. The default value is False.
        
        **`bDataPinA1`**
        : A _Boolean_ specifying the data pin a1. The default value is False.
        
        **`bDataPinA2`**
        : A _Boolean_ specifying the data pin a2. The default value is False.
        
        **`bDataPinA3`**
        : A _Boolean_ specifying the data pin a3. The default value is False.
        
        **`bDataPinA4`**
        : A _Boolean_ specifying the data pin a4. The default value is False.
        
        **`bDataPinA5`**
        : A _Boolean_ specifying the data pin a5. The default value is False.
        
        **`bDataPinB0`**
        : A _Boolean_ specifying the data pin b0. The default value is False.
        
        **`bDataPinB1`**
        : A _Boolean_ specifying the data pin b1. The default value is False.
        
        **`bDataPinB2`**
        : A _Boolean_ specifying the data pin b2. The default value is False.
        
        **`bDataPinB3`**
        : A _Boolean_ specifying the data pin b3. The default value is False.
        
        **`bDataPinB4`**
        : A _Boolean_ specifying the data pin b4. The default value is False.
        
        **`bDataPinB5`**
        : A _Boolean_ specifying the data pin b5. The default value is False.
        
        **`dlDataOffset0`**
        : A _Double List_ specifying the data offset0. The default value is [DFLT_DBL, DFLT_DBL, DFLT_DBL].
        
        **`dlDataOffset1`**
        : A _Double List_ specifying the data offset1. The default value is [DFLT_DBL, DFLT_DBL, DFLT_DBL].
        
        **`iLocalLengthUnit`**
        : An _Integer_ specifying the local length unit. The default value is 0.
        
        **`iLocalMassUnit`**
        : An _Integer_ specifying the local mass unit. The default value is 0.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.BAR(strName="", iId=1, crSection=None, iShapeDataType=0, crDatacrMat=None, dDatadArea=DFLT_DBL, dlDataOrient=[0, 0, 0], dlDataInertia=[0, 0, 0], dDatadTorConst=DFLT_DBL, dDatadNSM=DFLT_DBL, dDataShearAreaFactor0=DFLT_DBL, dDataShearAreaFactor1=DFLT_DBL, dDataStressRecoveryCoeff0=DFLT_DBL, dDataStressRecoveryCoeff1=DFLT_DBL, dDataStressRecoveryCoeff2=DFLT_DBL, dDataStressRecoveryCoeff3=DFLT_DBL, dDataStressRecoveryCoeff4=DFLT_DBL, dDataStressRecoveryCoeff5=DFLT_DBL, dDataStressRecoveryCoeff6=DFLT_DBL, dDataStressRecoveryCoeff7=DFLT_DBL, bDataPinA0=False, bDataPinA1=False, bDataPinA2=False, bDataPinA3=False, bDataPinA4=False, bDataPinA5=False, bDataPinB0=False, bDataPinB1=False, bDataPinB2=False, bDataPinB3=False, bDataPinB4=False, bDataPinB5=False, dlDataOffset0=[DFLT_DBL, DFLT_DBL, DFLT_DBL], dlDataOffset1=[DFLT_DBL, DFLT_DBL, DFLT_DBL], iLocalLengthUnit=0, iLocalMassUnit=0, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "Properties.BAR('{}',{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{})".format(strName, iId, crSection, iShapeDataType, crDatacrMat, dDatadArea, dlDataOrient, dlDataInertia, dDatadTorConst, dDatadNSM, dDataShearAreaFactor0, dDataShearAreaFactor1, dDataStressRecoveryCoeff0, dDataStressRecoveryCoeff1, dDataStressRecoveryCoeff2, dDataStressRecoveryCoeff3, dDataStressRecoveryCoeff4, dDataStressRecoveryCoeff5, dDataStressRecoveryCoeff6, dDataStressRecoveryCoeff7, bDataPinA0, bDataPinA1, bDataPinA2, bDataPinA3, bDataPinA4, bDataPinA5, bDataPinB0, bDataPinB1, bDataPinB2, bDataPinB3, bDataPinB4, bDataPinB5, dlDataOffset0, dlDataOffset1, iLocalLengthUnit, iLocalMassUnit, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

    def ThicknessDistribution(dMax=1, dMin=0, iByEach=0, dlThicknessValueSet=[]):
        r"""
        ## Description
        
        Properties view Thickness Distribution
        
        ## Syntax
        
        ```python
        Properties.ThicknessDistribution(dMax=1, dMin=0, iByEach=0, dlThicknessValueSet=[])
        ```
        
        Macro: {ref}`Macro-Properties-ThicknessDistribution`
        
        Ribbon: {menuselection}`Properties --> ThicknessDistribution`
        
        ## Inputs
        
        **`dMax`**
        : A _Double_ specifying the maximum. The default value is 1.
        
        **`dMin`**
        : A _Double_ specifying the minimum. The default value is 0.
        
        **`iByEach`**
        : An _Integer_ specifying the by each. The default value is 0.
        
        **`dlThicknessValueSet`**
        : A _Double List_ specifying the thickness value set. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.ThicknessDistribution(dMax=1, dMin=0, iByEach=0, dlThicknessValueSet=[])
        ```
        
        """
        message = "Properties.ThicknessDistribution({},{},{},{})".format(dMax, dMin, iByEach, dlThicknessValueSet)
        return JPT_RUN_LINE(message)

    def RigidBody(strName="RigidBody1", iId=1, iRefNodeId=0, crlTarget=[], crEdit=None):
        r"""
        ## Description
        
        assign properties rigid body
        
        ## Syntax
        
        ```python
        Properties.RigidBody(strName="RigidBody1", iId=1, iRefNodeId=0, crlTarget=[], crEdit=None)
        ```
        
        Macro: {ref}`Macro-Properties-Property2DRigidBody`
        
        Ribbon: {menuselection}`Properties --> RigidBody`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. The default value is "RigidBody1".
        
        **`iId`**
        : An _Integer_ specifying the ID. The default value is 1.
        
        **`iRefNodeId`**
        : An _Integer_ specifying the reference node ID. The default value is 0.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Properties.RigidBody(strName="RigidBody1", iId=1, iRefNodeId=0, crlTarget=[], crEdit=None)
        ```
        
        """
        message = "Properties.RigidBody('{}',{},{},{},{})".format(strName, iId, iRefNodeId, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

class SNOnePush:
    DropTest = SNOnePush_DropTest()

    def CADImport(dDsurfaceplaneTolerance, dDsurfaceplaneAngle, dMaxFacetWidth, bBnxMultipart, dChordHeightTolerance, dAngleToleranceDegree, iConvertIsolatedCurve, iIigesFixedcurevepreference, iIigesAutostitch, dDigesStitchtolerance, iIcatiaConvertnotshowedelement, iIcatiaConvertnotshowedinstance, iIcatiaConvertaxis, iIstepCreateseam, dDstepPointtolerance, iIacisHealacisbeforeversion, iIjtConvertgeometrytype, iIjtConvertgeneralpart, iIjtConvertaxis, iIjtConvertcenterline, dDcreoChordheighttolerance, dDcreoAngletolerancedegree, strAbsCreoPath, iTransType, iFileType, strFilePath, bRenameDuplicateName, strCSVFilePath):
        r"""
        undefined
        """
        message = "SNOnePush.CADImport({},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},'{}',{},{},'{}',{},'{}')".format(dDsurfaceplaneTolerance, dDsurfaceplaneAngle, dMaxFacetWidth, bBnxMultipart, dChordHeightTolerance, dAngleToleranceDegree, iConvertIsolatedCurve, iIigesFixedcurevepreference, iIigesAutostitch, dDigesStitchtolerance, iIcatiaConvertnotshowedelement, iIcatiaConvertnotshowedinstance, iIcatiaConvertaxis, iIstepCreateseam, dDstepPointtolerance, iIacisHealacisbeforeversion, iIjtConvertgeometrytype, iIjtConvertgeneralpart, iIjtConvertaxis, iIjtConvertcenterline, dDcreoChordheighttolerance, dDcreoAngletolerancedegree, strAbsCreoPath, iTransType, iFileType, strFilePath, bRenameDuplicateName, strCSVFilePath)
        return JPT_RUN_LINE(message)

    def DropTestSNOnePush(strName="", iDir=0, dRopHeight=0.0, dSolutionTime=0.0, iNumOutput=20, dContactFriction=0.1, iRotAxis=0, dRotAngle=0.0, dRelevantElemRate=0.0, dChangeMassRate=0.0, dMinTimeStep=0.0, strSolverFile="", dFloorSize=0.0, bRename=True, crMat=None):
        r"""
        undefined
        """
        message = "SNOnePush.DropTestSNOnePush('{}',{},{},{},{},{},{},{},{},{},{},'{}',{},{},{})".format(strName, iDir, dRopHeight, dSolutionTime, iNumOutput, dContactFriction, iRotAxis, dRotAngle, dRelevantElemRate, dChangeMassRate, dMinTimeStep, strSolverFile, dFloorSize, bRename, crMat)
        return JPT_RUN_LINE(message)

    def AutoSweepClosedLoopShaped(crlPart, dMeshSize, dLengthSize):
        r"""
        undefined
        """
        message = "SNOnePush.AutoSweepClosedLoopShaped({},{},{})".format(crlPart, dMeshSize, dLengthSize)
        return JPT_RUN_LINE(message)

class StiffCalc:
    def Force(strName, poslForce, poslMoment, iEnArrowDir, iDistributionMethod, crCurCoord, crTable, crNodeSet, dFPhase, dFDelay, crPhaseTable, strFormula0, strFormula1, strFormula2, strFormula3, strFormula4, strFormula5, crlTarget, crEdit):
        r"""
        ## Description
        
        create NormalUnityForce
        
        ## Syntax
        
        ```python
        StiffCalc.Force(strName, poslForce, poslMoment, iEnArrowDir, iDistributionMethod, crCurCoord, crTable, crNodeSet, dFPhase, dFDelay, crPhaseTable, strFormula0, strFormula1, strFormula2, strFormula3, strFormula4, strFormula5, crlTarget, crEdit)
        ```
        
        Macro: {ref}`Macro-StiffCalc-PermasForce`
        
        Ribbon: {menuselection}`StiffCalc --> Force`
        
        ## Inputs
        
        **`strName`**
        : A _String_ specifying the name. This is a required input.
        
        **`poslForce`**
        : A _Position List_ specifying the force. This is a required input.
        
        **`poslMoment`**
        : A _Position List_ specifying the moment. This is a required input.
        
        **`iEnArrowDir`**
        : An _Integer_ specifying the en arrow direction. This is a required input.
        
        **`iDistributionMethod`**
        : An _Integer_ specifying the distribution method. This is a required input.
        
        **`crCurCoord`**
        : A _Cursor_ specifying the cur coordinate. This is a required input.
        
        **`crTable`**
        : A _Cursor_ specifying the table. This is a required input.
        
        **`crNodeSet`**
        : A _Cursor_ specifying the node set. This is a required input.
        
        **`dFPhase`**
        : A _Double_ specifying the phase. This is a required input.
        
        **`dFDelay`**
        : A _Double_ specifying the delay. This is a required input.
        
        **`crPhaseTable`**
        : A _Cursor_ specifying the phase table. This is a required input.
        
        **`strFormula0`**
        : A _String_ specifying the formula0. This is a required input.
        
        **`strFormula1`**
        : A _String_ specifying the formula1. This is a required input.
        
        **`strFormula2`**
        : A _String_ specifying the formula2. This is a required input.
        
        **`strFormula3`**
        : A _String_ specifying the formula3. This is a required input.
        
        **`strFormula4`**
        : A _String_ specifying the formula4. This is a required input.
        
        **`strFormula5`**
        : A _String_ specifying the formula5. This is a required input.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. This is a required input.
        
        **`crEdit`**
        : A _Cursor_ specifying the edit. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        StiffCalc.Force(strName, poslForce, poslMoment, iEnArrowDir, iDistributionMethod, crCurCoord, crTable, crNodeSet, dFPhase, dFDelay, crPhaseTable, strFormula0, strFormula1, strFormula2, strFormula3, strFormula4, strFormula5, crlTarget, crEdit)
        ```
        
        """
        message = "StiffCalc.Force('{}',{},{},{},'{}',{},{},{},{},{},{},'{}','{}','{}','{}','{}','{}',{},{})".format(strName, poslForce, poslMoment, iEnArrowDir, iDistributionMethod, crCurCoord, crTable, crNodeSet, dFPhase, dFDelay, crPhaseTable, strFormula0, strFormula1, strFormula2, strFormula3, strFormula4, strFormula5, crlTarget, crEdit)
        return JPT_RUN_LINE(message)

class SZOnepushReliability:
    Assembly = SZOnepushReliability_Assembly()

    MeshEdit = SZOnepushReliability_MeshEdit()

    def AlignMidNode(crlSource, crlTarget):
        r"""
        ## Description
        
        align mid-nodes
        
        ## Syntax
        
        ```python
        SZOnepushReliability.AlignMidNode(crlSource, crlTarget)
        ```
        
        Macro: {ref}`Macro-SZOnepushReliability-SORAlignMidNode`
        
        Ribbon: {menuselection}`SZOnepushReliability --> AlignMidNode`
        
        ## Inputs
        
        **`crlSource`**
        : A _Cursor List_ specifying the source. This is a required input.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        SZOnepushReliability.AlignMidNode(crlSource, crlTarget)
        ```
        
        """
        message = "SZOnepushReliability.AlignMidNode({},{})".format(crlSource, crlTarget)
        return JPT_RUN_LINE(message)

class Test:
    Connection = Test_Connection()

    Muffler = Test_Muffler()

    ZGeometryTest = Test_ZGeometryTest()

    def FindFacesInPart(crPart, strIdentical):
        r"""
        ## Description
        
        Find faces in part by typical description
        
        ## Syntax
        
        ```python
        Test.FindFacesInPart(crPart, strIdentical)
        ```
        
        Macro: {ref}`Macro-Test-FindFacesInPart`
        
        Ribbon: {menuselection}`Test --> FindFacesInPart`
        
        ## Inputs
        
        **`crPart`**
        : A _Cursor_ specifying the part. This is a required input.
        
        **`strIdentical`**
        : A _String_ specifying the identical. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Test.FindFacesInPart(crPart, strIdentical)
        ```
        
        """
        message = "Test.FindFacesInPart({},'{}')".format(crPart, strIdentical)
        return JPT_RUN_LINE(message)

    def CreateElementForWelding(crlSrcElems, crlDstElems, crlSideElems, crlPart, crMaterial):
        r"""
        ## Description
        
        Create weld elements
        
        ## Syntax
        
        ```python
        Test.CreateElementForWelding(crlSrcElems, crlDstElems, crlSideElems, crlPart, crMaterial)
        ```
        
        Macro: {ref}`Macro-Test-CreateElementForWelding`
        
        Ribbon: {menuselection}`Test --> CreateElementForWelding`
        
        ## Inputs
        
        **`crlSrcElems`**
        : A _Cursor List_ specifying the source elems. This is a required input.
        
        **`crlDstElems`**
        : A _Cursor List_ specifying the dst elems. This is a required input.
        
        **`crlSideElems`**
        : A _Cursor List_ specifying the side elems. This is a required input.
        
        **`crlPart`**
        : A _Cursor List_ specifying the part. This is a required input.
        
        **`crMaterial`**
        : A _Cursor_ specifying the material. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Test.CreateElementForWelding(crlSrcElems, crlDstElems, crlSideElems, crlPart, crMaterial)
        ```
        
        """
        message = "Test.CreateElementForWelding({},{},{},{},{})".format(crlSrcElems, crlDstElems, crlSideElems, crlPart, crMaterial)
        return JPT_RUN_LINE(message)

class Toolbar:
    def Undo(iCntUndo=1):
        r"""
        ## Description
        
        Undo
        
        ## Syntax
        
        ```python
        Toolbar.Undo(iCntUndo=1)
        ```
        
        Macro: {ref}`Macro-Toolbar-Undo`
        
        Ribbon: {menuselection}`Toolbar --> Undo`
        
        ## Inputs
        
        **`iCntUndo`**
        : An _Integer_ specifying the cnt undo. The default value is 1.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Toolbar.Undo(iCntUndo=1)
        ```
        
        """
        message = "Toolbar.Undo({})".format(iCntUndo)
        return JPT_RUN_LINE(message)

    def Redo(iCntRedo=1):
        r"""
        undefined
        """
        message = "Toolbar.Redo({})".format(iCntRedo)
        return JPT_RUN_LINE(message)

class Tools:
    BySelection = Tools_BySelection()

    Coordinates = Tools_Coordinates()

    Group = Tools_Group()

    TotalLoad = Tools_TotalLoad()

    def NodeCS(crlInst=[], crCoordSystem=None):
        r"""
        ## Description
        
        create Node CS
        
        ## Syntax
        
        ```python
        Tools.NodeCS(crlInst=[], crCoordSystem=None)
        ```
        
        Macro: {ref}`Macro-Tools-AddNodeCS`
        
        Ribbon: {menuselection}`Tools --> NodeCS`
        
        ## Inputs
        
        **`crlInst`**
        : A _Cursor List_ specifying the inst. The default value is [].
        
        **`crCoordSystem`**
        : A _Cursor_ specifying the coordinate system. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.NodeCS(crlInst=[], crCoordSystem=None)
        ```
        
        """
        message = "Tools.NodeCS({},{})".format(crlInst, crCoordSystem)
        return JPT_RUN_LINE(message)

    def NodeCSGroup():
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Tools.NodeCSGroup()
        ```
        
        Macro: {ref}`Macro-Tools-Unknown Macro`
        
        Ribbon: {menuselection}`Tools --> NodeCSGroup`
        
        ## Inputs
        
        None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.NodeCSGroup()
        ```
        
        """
        message = "Tools.NodeCSGroup({})".format('')
        return JPT_RUN_LINE(message)

    def DisplacementCS(crlInst=[], crCoordSystem=None):
        r"""
        ## Description
        
        displace coordinate
        
        ## Syntax
        
        ```python
        Tools.DisplacementCS(crlInst=[], crCoordSystem=None)
        ```
        
        Macro: {ref}`Macro-Tools-CreateDispCSGroup`
        
        Ribbon: {menuselection}`Tools --> DisplacementCS`
        
        ## Inputs
        
        **`crlInst`**
        : A _Cursor List_ specifying the inst. The default value is [].
        
        **`crCoordSystem`**
        : A _Cursor_ specifying the coordinate system. The default value is None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.DisplacementCS(crlInst=[], crCoordSystem=None)
        ```
        
        """
        message = "Tools.DisplacementCS({},{})".format(crlInst, crCoordSystem)
        return JPT_RUN_LINE(message)

    def Connections(listConnectRenumberTool):
        r"""
        ## Description
        
        renumber connection
        
        ## Syntax
        
        ```python
        Tools.Connections(listConnectRenumberTool)
        ```
        
        Macro: {ref}`Macro-Tools-RenumberConnection`
        
        Ribbon: {menuselection}`Tools --> Connections`
        
        ## Inputs
        
        **`listConnectRenumberTool`**
        : A _CONNECT_RENUMBER_TOOL List_ specifying the connect renumber tool. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Connections(listConnectRenumberTool)
        ```
        
        """
        message = "Tools.Connections({})".format(listConnectRenumberTool)
        return JPT_RUN_LINE(message)

    def GroupByDCS():
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Tools.GroupByDCS()
        ```
        
        Macro: {ref}`Macro-Tools-CreateDispCSGroup`
        
        Ribbon: {menuselection}`Tools --> GroupByDCS`
        
        ## Inputs
        
        None.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.GroupByDCS()
        ```
        
        """
        message = "Tools.GroupByDCS({})".format('')
        return JPT_RUN_LINE(message)

    def Renumber(listRenumberItem=[], bAssignProp=True, bSurfCornerFirst=False):
        r"""
        ## Description
        
        Set renumber data
        
        ## Syntax
        
        ```python
        Tools.Renumber(listRenumberItem=[], bAssignProp=True, bSurfCornerFirst=False)
        ```
        
        Macro: {ref}`Macro-Tools-RenumberE`
        
        Ribbon: {menuselection}`Tools --> Renumber`
        
        ## Inputs
        
        **`listRenumberItem`**
        : A _RENUMBER_ITEM List_ specifying the renumber item. The default value is [].
        
        **`bAssignProp`**
        : A _Boolean_ specifying the assign property. The default value is True.
        
        **`bSurfCornerFirst`**
        : A _Boolean_ specifying the surface corner first. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Renumber(listRenumberItem=[], bAssignProp=True, bSurfCornerFirst=False)
        ```
        
        """
        message = "Tools.Renumber({},{},{})".format(listRenumberItem, bAssignProp, bSurfCornerFirst)
        return JPT_RUN_LINE(message)

    def RenumberByConnection(connectRenumberTool=CONNECT_RENUMBER_TOOL(), crlTarget=[]):
        r"""
        ## Description
        
        Renumber by selection
        
        ## Syntax
        
        ```python
        Tools.RenumberByConnection(connectRenumberTool=CONNECT_RENUMBER_TOOL(), crlTarget=[])
        ```
        
        Macro: {ref}`Macro-Tools-RenumberByConnection`
        
        Ribbon: {menuselection}`Tools --> RenumberByConnection`
        
        ## Inputs
        
        **`connectRenumberTool`**
        : A _CONNECT_RENUMBER_TOOL_ specifying the renumber tool. The default value is CONNECT_RENUMBER_TOOL().
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.RenumberByConnection(connectRenumberTool=CONNECT_RENUMBER_TOOL(), crlTarget=[])
        ```
        
        """
        message = "Tools.RenumberByConnection({},{})".format(connectRenumberTool, crlTarget)
        return JPT_RUN_LINE(message)

    def RenumberByFile(strCSVPath="", iConfilctStrategy=0, bNeedToUpdateCount=False):
        r"""
        ## Description
        
        Renumber By File
        
        ## Syntax
        
        ```python
        Tools.RenumberByFile(strCSVPath="", iConfilctStrategy=0, bNeedToUpdateCount=False)
        ```
        
        Macro: {ref}`Macro-Tools-RenumberByFile`
        
        Ribbon: {menuselection}`Tools --> RenumberByFile`
        
        ## Inputs
        
        **`strCSVPath`**
        : A _String_ specifying the CSV path. The default value is "".
        
        **`iConfilctStrategy`**
        : An _Integer_ specifying the confilct strategy. The default value is 0.
        
        **`bNeedToUpdateCount`**
        : A _Boolean_ specifying the need to update count. The default value is False.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.RenumberByFile(strCSVPath="", iConfilctStrategy=0, bNeedToUpdateCount=False)
        ```
        
        """
        message = "Tools.RenumberByFile('{}',{},{})".format(strCSVPath, iConfilctStrategy, bNeedToUpdateCount)
        return JPT_RUN_LINE(message)

    def ModelInfo(strPath, strPathName="", listMeshPartInfoTool=[], bPropertyAssignedPart=False, bPropertyAssignedSummary=False, iModelNode=0, iNmodelnodeWithprop=0, ilModelElement=[], ilNmodelelemWithprop=[], ilModelLBC=[], iModelContact=0, ilModelConnection=[], ilModelProperty=[]):
        r"""
        ## Description
        
        export model info file
        
        ## Syntax
        
        ```python
        Tools.ModelInfo(strPath, strPathName="", listMeshPartInfoTool=[], bPropertyAssignedPart=False, bPropertyAssignedSummary=False, iModelNode=0, iNmodelnodeWithprop=0, ilModelElement=[], ilNmodelelemWithprop=[], ilModelLBC=[], iModelContact=0, ilModelConnection=[], ilModelProperty=[])
        ```
        
        Macro: {ref}`Macro-Tools-ModelInfoCreateReport`
        
        Ribbon: {menuselection}`Tools --> ModelInfo`
        
        ## Inputs
        
        **`strPath`**
        : A _String_ specifying the path. This is a required input.
        
        **`strPathName`**
        : A _String_ specifying the path name. The default value is "".
        
        **`listMeshPartInfoTool`**
        : A _MESH_PART_INFO_TOOL List_ specifying the mesh part info tool. The default value is [].
        
        **`bPropertyAssignedPart`**
        : A _Boolean_ specifying the property assigned part. The default value is False.
        
        **`bPropertyAssignedSummary`**
        : A _Boolean_ specifying the property assigned summary. The default value is False.
        
        **`iModelNode`**
        : An _Integer_ specifying the model node. The default value is 0.
        
        **`iNmodelnodeWithprop`**
        : An _Integer_ specifying the nmodelnode withprop. The default value is 0.
        
        **`ilModelElement`**
        : A _Integer List_ specifying the model element. The default value is [].
        
        **`ilNmodelelemWithprop`**
        : A _Integer List_ specifying the nmodelelem withprop. The default value is [].
        
        **`ilModelLBC`**
        : A _Integer List_ specifying the model load boundary condition. The default value is [].
        
        **`iModelContact`**
        : An _Integer_ specifying the model contact. The default value is 0.
        
        **`ilModelConnection`**
        : A _Integer List_ specifying the model connection. The default value is [].
        
        **`ilModelProperty`**
        : A _Integer List_ specifying the model property. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.ModelInfo(strPath, strPathName="", listMeshPartInfoTool=[], bPropertyAssignedPart=False, bPropertyAssignedSummary=False, iModelNode=0, iNmodelnodeWithprop=0, ilModelElement=[], ilNmodelelemWithprop=[], ilModelLBC=[], iModelContact=0, ilModelConnection=[], ilModelProperty=[])
        ```
        
        """
        message = "Tools.ModelInfo('{}','{}',{},{},{},{},{},{},{},{},{},{},{})".format(strPath, strPathName, listMeshPartInfoTool, bPropertyAssignedPart, bPropertyAssignedSummary, iModelNode, iNmodelnodeWithprop, ilModelElement, ilNmodelelemWithprop, ilModelLBC, iModelContact, ilModelConnection, ilModelProperty)
        return JPT_RUN_LINE(message)

    def Section(bSection):
        r"""
        ## Description
        
        Unknown Description
        
        ## Syntax
        
        ```python
        Tools.Section(bSection)
        ```
        
        Macro: {ref}`Macro-Tools-ViewSection`
        
        Ribbon: {menuselection}`Tools --> Section`
        
        ## Inputs
        
        **`bSection`**
        : A _Boolean_ specifying the section. This is a required input.
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.Section(bSection)
        ```
        
        """
        message = "Tools.Section({})".format(bSection)
        return JPT_RUN_LINE(message)

    def ElementCS(iMethod=0, iDispType=0, bDispXDir=False, bDispCoord=False, dDispScale=1, crlTarget=[]):
        r"""
        ## Description
        
        create element coordinate system
        
        ## Syntax
        
        ```python
        Tools.ElementCS(iMethod=0, iDispType=0, bDispXDir=False, bDispCoord=False, dDispScale=1, crlTarget=[])
        ```
        
        Macro: {ref}`Macro-Tools-ModifyElemDir`
        
        Ribbon: {menuselection}`Tools --> ElementCS`
        
        ## Inputs
        
        **`iMethod`**
        : An _Integer_ specifying the method. The default value is 0.
        
        **`iDispType`**
        : An _Integer_ specifying the displacement type. The default value is 0.
        
        **`bDispXDir`**
        : A _Boolean_ specifying the displacement x direction. The default value is False.
        
        **`bDispCoord`**
        : A _Boolean_ specifying the displacement coordinate. The default value is False.
        
        **`dDispScale`**
        : A _Double_ specifying the displacement scale. The default value is 1.
        
        **`crlTarget`**
        : A _Cursor List_ specifying the target. The default value is [].
        
        ## Return Code
        
        An _String_ of 1 if successed, or 0 if failed.
        
        ## Sample Code
        
        ```python
        Tools.ElementCS(iMethod=0, iDispType=0, bDispXDir=False, bDispCoord=False, dDispScale=1, crlTarget=[])
        ```
        
        """
        message = "Tools.ElementCS({},{},{},{},{},{})".format(iMethod, iDispType, bDispXDir, bDispCoord, dDispScale, crlTarget)
        return JPT_RUN_LINE(message)

    Measure = Tools_Measure()

