{"JPT.RemoveEntitiesByID":{"prefix":"RemoveEntitiesByID","text":"*Function:* JPT.RemoveEntitiesByID  \n*Description:* remove entities from model by id  \n *Input1:* DItem type (JPT.EntityType)  \n *Input2:* id of entity (int)  \n *Return:* None  \n *Example:*   \n listbody = JPT.GetEntitiesByName(JPT.DTableType.DTABLE_BODY, \"Cube\", JPT.BoolType.FALSE_VAL)  \n idbody = listbody[0].id  \n JPT.RemoveEntitiesByID(JPT.EntityType.BODY, idbody)  \n "},"JPT.RemoveEntitiesByName":{"prefix":"RemoveEntitiesByName","text":"*Function:* JPT.RemoveEntitiesByName  \n*Description:* remove entities from model by name  \n *Input1:* DTable type (JPT.DTableType)  \n *Input2:* name of entity (string)  \n *Input3:* match with name option (1,0 or JPT.BoolType)  \n *Return:* None  \n *Example:* JPT.RemoveEntitiesByName(JPT.DTableType.DTABLE_BODY, \"Cube_1\", 1)  \n "},"JPT.RemoveAllLoadsBCs":{"prefix":"RemoveAllLoadsBCs","text":"*Function:* JPT.RemoveAllLoadsBCs  \n*Description:* Remove all Loads and Boundary Condition in model  \n *Input1:* None  \n *Return:* None  \n *Example:* JPT.RemoveAllLoadsBCs ()  \n "},"JPT.RemoveAllContacts":{"prefix":"RemoveAllContacts","text":"*Function:* JPT.RemoveAllContacts  \n*Description:* Remove all of Contact in models  \n *Input1:* None  \n *Return:* None  \n *Example:* JPT.RemoveAllContacts()  \n "},"JPT.RemoveAllConnections":{"prefix":"RemoveAllConnections","text":"*Function:* JPT.RemoveAllConnections  \n*Description:* Remove all of Connection in models  \n *Input1:* None  \n *Return:* None  \n *Example:* JPT.RemoveAllConnections()  \n "},"JPT.RemoveAllLoadCases":{"prefix":"RemoveAllLoadCases","text":"*Function:* JPT.RemoveAllLoadCases  \n*Description:* Remove all load cases in models  \n *Input1:* None  \n *Return:* None  \n *Example:* JPT.RemoveAllLoadCases()  \n "},"JPT.RemoveAllMaterials":{"prefix":"RemoveAllMaterials","text":"*Function:* JPT.RemoveAllMaterials  \n*Description:* Remove all of Material in User Data Base  \n *Input1:* None  \n *Return:* None  \n *Example:* JPT.RemoveAllMaterials()  \n "},"JPT.RemoveWSProperties":{"prefix":"RemoveWSProperties","text":"*Function:* JPT.RemoveWSProperties  \n*Description:* Remove all properties in models  \n *Input1:* None  \n *Return:* None  \n *Example:* JPT.RemoveWSProperties()  \n "},"JPT.RemoveAllCoordinates":{"prefix":"RemoveAllCoordinates","text":"*Function:* JPT.RemoveAllCoordinates  \n*Description:* Remove all of created coordinates  \n *Input1:* None  \n *Return:* None  \n *Example:* JPT.RemoveAllCoordinates()  \n "},"JPT.RemoveAllMeshSettings":{"prefix":"RemoveAllMeshSettings","text":"*Function:* JPT.RemoveAllMeshSettings  \n*Description:* Remove all local mesh settings  \n *Input1:* None  \n *Return:* None  \n *Example:* JPT.RemoveAllMeshSettings()  \n "},"JPT.RemoveAllFieldTables":{"prefix":"RemoveAllFieldTables","text":"*Function:* JPT.RemoveAllFieldTables  \n*Description:* Remove all of Field Data table in models  \n *Input1:* None  \n *Return:* None  \n *Example:* JPT.RemoveAllFieldTables()  \n "},"JPT.RemoveAllAbaqusStep":{"prefix":"RemoveAllAbaqusStep","text":"*Function:* JPT.RemoveAllAbaqusStep  \n*Description:* Remove all of Abaqus steps in Analysis  \n *Input1:* None  \n *Return:* None  \n *Example:* JPT.RemoveAllAbaqusStep()  \n "},"JPT.RemoveAllSolverjob":{"prefix":"RemoveAllSolverjob","text":"*Function:* JPT.RemoveAllSolverjob  \n*Description:* Remove all analysis Jobs  \n *Input1:* None  \n *Return:* None  \n *Example:* JPT.RemoveAllSolverjob()  \n "},"JPT.RemoveAllByTableType":{"prefix":"RemoveAllByTableType","text":"*Function:* JPT.RemoveAllByTableType  \n*Description:* remove all entities in models by table type   \n *Input1:* DTable type (JPT.DTableType)  \n *Return:* None  \n *Example:* JPT.RemoveAllByTableType(JPT.DTableType.DTABLE_BODY)  \n "},"JPT.CreateSubAssembly":{"prefix":"CreateSubAssembly","text":"*Function:* JPT.CreateSubAssembly  \n*Description:* Create a sub node under parent on assembly tree with name  \n *Input1:* name of sub node (string)  \n *Input2:* parent object (DItem class)  \n *Return:* new sub node object (DItem class)  \n *Example:* JPT.CreateSubAssembly(\"LocalSetting_1\", parentObject)  \n "},"JPT.DeleteSubAssembly":{"prefix":"DeleteSubAssembly","text":"*Function:* JPT.DeleteSubAssembly  \n*Description:* Delete a sub node from assembly tree  \n *Input1:* sub node object (DItem class)  \n *Return:* None  \n *Example:* JPT.DeleteSubAssembly(dentityObject)  \n "},"JPT.FindSubAssemblyByName":{"prefix":"FindSubAssemblyByName","text":"*Function:* JPT.FindSubAssemblyByName  \n*Description:* Find a sub node from assembly tree by name  \n *Input1:* name of sub node (string)  \n *Return:* list DItem object matched with input name (DItemVector)  \n *Example:* JPT.FindSubAssemblyByName(\"LocalSetting_1\")  \n "},"JPT.FindSubAssemblyByID":{"prefix":"FindSubAssemblyByID","text":"*Function:* JPT.FindSubAssemblyByID  \n*Description:* Find a sub node from assembly tree by id  \n *Input1:* id of entity sub node (int)   \n *Return:* sub node object matched with input id (DItem)   \n *Example:* JPT.FindSubAssemblyByID(1)  \n "},"JPT.DeleteSubAssemblyRecursively":{"prefix":"DeleteSubAssemblyRecursively","text":"*Function:* JPT.DeleteSubAssemblyRecursively  \n*Description:* Delete a sub node and all childs from assembly tree  \n *Input1:* sub node object (DItem class)  \n *Return:* None  \n *Example:* JPT.DeleteSubAssemblyRecursively(dentityObject)  \n "},"JPT.GetAllPartsInSubAssembly":{"prefix":"GetAllPartsInSubAssembly","text":"*Function:* JPT.GetAllPartsInSubAssembly  \n*Description:* get all parts in a sub node from assembly tree  \n *Input1:* sub node object (DItem class)  \n *Return:* list of DItem object matched with input name (DItemVector)  \n *Example:* JPT.GetAllPartsInSubAssembly(DItem)   \n "},"JPT.CastToDItem":{"prefix":"CastToDItem","text":"*Function:* JPT.CastToDItem  \n*Description:* cast a child object to entity object  \n *Input1:* any kind of objects (Body, Face, Elem, Edge, Group, Node,...)  \n *Return:* entity object (DItem class)  \n *Example:*   \n listDbodyObject = JPT.GetAllParts()   \n bodyObject = listDbodyObject[0]  \n entityObject = JPT.CastToDItem(dbodyObject)  \n "},"JPT.CastDItemToDBody":{"prefix":"CastDItemToDBody","text":"*Function:* JPT.CastDItemToDBody  \n*Description:* cast a DItem object to Body object  \n *Input1:* DItem object (DItem class)  \n *Return:* Body object (Body class)  \n *Example:*   \n listEntityObject = JPT.GetAllByType(JPT.EntityType.BODY)  \n entityObject = listEntityObject[0]  \n bodyObject = JPT.CastDItemToDBody(dentityObject)  \n "},"JPT.CastDItemToDFace":{"prefix":"CastDItemToDFace","text":"*Function:* JPT.CastDItemToDFace  \n*Description:* cast a DItem object to Face object  \n *Input1:* DItem object (DItem class)  \n *Return:* Face object (Face class)  \n *Example:*   \n listEntityObject = JPT.GetAllByType(JPT.EntityType.FACE)  \n entityObject = listEntityObject[0]  \n faceObject = JPT.CastDItemToDFace(dentityObject)  \n "},"JPT.CastDItemToDElem":{"prefix":"CastDItemToDElem","text":"*Function:* JPT.CastDItemToDElem  \n*Description:* cast a DItem object to Elem object  \n *Input1:* DItem object (DItem class)  \n *Return:* Elem object (Elem class)  \n *Example:*   \n listEntityObject = JPT.GetAllByType(JPT.EntityType.ELEM)  \n entityObject = listEntityObject[0]  \n elemObject = JPT.CastDItemToDElem(dentityObject)  \n "},"JPT.CastDItemToDEdge":{"prefix":"CastDItemToDEdge","text":"*Function:* JPT.CastDItemToDEdge  \n*Description:* cast a DItem object to Edge object  \n *Input1:* DItem object (DItem class)  \n *Return:* Edge object (Edge class)  \n *Example:*   \n listEntityObject = JPT.GetAllByType(JPT.EntityType.EDGE)  \n entityObject = listEntityObject[0]  \n edgeObject = JPT.CastDItemToDEdge(dentityObject)  \n "},"JPT.CastDItemToDGroup":{"prefix":"CastDItemToDGroup","text":"*Function:* JPT.CastDItemToDGroup  \n*Description:* cast a DItem object to Group object  \n *Input1:* DItem object (DItem class)  \n *Return:* Group object (Group class)  \n *Example:*   \n listEntityObject = JPT.GetAllByType(JPT.EntityType.GROUP)  \n entityObject = listEntityObject[0]  \n groupObject = JPT.CastDItemToDGroup(dentityObject)  \n "},"JPT.CastDItemToDNode":{"prefix":"CastDItemToDNode","text":"*Function:* JPT.CastDItemToDNode  \n*Description:* cast a DItem object to Node object  \n *Input1:* DItem object (DItem class)  \n *Return:* Node object (Node class)  \n *Example:*   \n listEntityObject = JPT.GetAllByType(JPT.EntityType.NODE)  \n entityObject = listEntityObject[0]  \n nodeObject = JPT.CastDItemToDNode(dentityObject)  \n "},"JPT.CastDItemToDCoord":{"prefix":"CastDItemToDCoord","text":"*Function:* JPT.CastDItemToDCoord  \n*Description:* cast a DItem object to Coordinate object  \n *Input1:* DItem object (DItem class)  \n *Return:* Coordinate object (DCoord class)  \n *Example:*   \n listEntityObject = JPT.GetAllByType(JPT.EntityType.COORD)  \n entityObject = listEntityObject[0]  \n coordObject = JPT.CastDItemToDCoord(dentityObject)  \n "},"JPT.CastDItemToDConnect":{"prefix":"CastDItemToDConnect","text":"*Function:* JPT.CastDItemToDConnect  \n*Description:* cast a DItem object to Connection object  \n *Input1:* DItem object (DItem class)  \n *Return:* DConnect object (DConnect class)  \n *Example:*   \n listEntityObject = JPT.GetAllByType(JPT.EntityType.CONNECT_MPC)  \n entityObject = listEntityObject[0]  \n connectObject= JPT.CastDItemToDConnect(dentityObject)  \n "},"JPT.CastDItemToDLoadBC":{"prefix":"CastDItemToDLoadBC","text":"*Function:* JPT.CastDItemToDLoadBC  \n*Description:* cast a DItem object to LBC object  \n *Input1:* DItem object (DItem class)  \n *Return:* LBC object (DLoadBC class)  \n *Example:*   \n listEntityObject = JPT.GetAllByType(JPT.EntityType.LBC_FORCE)  \n entityObject = listEntityObject[0]  \n lbcObject = JPT.CastDItemToDLoadBC(dentityObject)  \n "},"JPT.DItemToMacroTCursorPair":{"prefix":"DItemToMacroTCursorPair","text":"*Function:* JPT.DItemToMacroTCursorPair  \n*Description:* convert pair of DItem object to cursor pair macro string    \n *Input1:* DItem object 1 (DItem class)  \n *Input2:* DItem object 2 (DItem class)  \n *Return:* cursor pair macro string (string)  \n *Example:*   \n listNodeObject = JPT.GetAllNodes()  \n entityObject1 = JPT.CastToDItem(listNodeObject[0])  \n entityObject2 = JPT.CastToDItem(listNodeObject[1])  \n *strElemEdge = JPT.DItemToMacroTCursorPair(dentityObject1, dentityObject2) // 10:1-10:*2  \n "},"JPT.ListDoubleToMacroVector":{"prefix":"ListDoubleToMacroVector","text":"*Function:* JPT.ListDoubleToMacroVector  \n*Description:* convert list of double value to vector3d macro string    \n *Input1:* value1 (double)   \n *Input2:* value2 (double)   \n *Input2:* value3 (double)   \n *Return:* vector3d macro string (string)   \n *Example:*   \n JPT.ListDoubleToMacroVector(1.0, 1.0, 1.0) // [1.0,1.0,1.0]  \n JPT.ListDoubleToMacroVector(1, 2, 3) // [1,2,3]  \n "},"JPT.DTVector3dToMacroVector":{"prefix":"DTVector3dToMacroVector","text":"*Function:* JPT.DTVector3dToMacroVector  \n*Description:* convert Vector3d object to vector3d macro string   \n *Input1:* Vector3d object (DTVector3d class)  \n *Return:* vector3d macro string (string)   \n *Example:*   \n listNodeObject = JPT.GetAllNodes()  \n posNode1 = listNodeObject[0].pos  \n JPT.DTVector3dToMacroVector(posNode1)  \n "},"JPT.DItemToMacroTCursor":{"prefix":"DItemToMacroTCursor","text":"*Function:* JPT.DItemToMacroTCursor  \n*Description:* convert a DItem object to cursor macro string   \n *Input1:* DItem object (DItem class)  \n *Return:* cursor macro string (string)  \n *Example:*   \n listnode1 = JPT.GetEntitiesByID(JPT.EntityType.NODE, 435)  \n listnode2 = JPT.GetEntitiesByID(JPT.EntityType.NODE, 434)  \n *node1 = JPT.DItemToMacroTCursor(listnode1[0]) // 10:*1  \n *node2 = JPT.DItemToMacroTCursor(listnode2[0]) // 10:*2  \n JPT.Exec('Collapse({0}, {1})'.format(node1, node2))  \n "},"JPT.DItemListToMacroListTCursor":{"prefix":"DItemListToMacroListTCursor","text":"*Function:* JPT.DItemListToMacroListTCursor  \n*Description:* convert list of DItem objects to cursor list macro string   \n *Input1:* list of DItem objects (DItemVector)   \n *Return:* cursor list macro string (string)    \n *Example:*   \n listface1 = JPT.GetAllFaces()  \n *JPT.DItemListToMacroListTCursor(listface1) // [10:1, 10:*1, ...]  \n "},"JPT.DItemToMacroListTCursor":{"prefix":"DItemToMacroListTCursor","text":"*Function:* JPT.DItemToMacroListTCursor  \n*Description:* convert a DItem object to cursor list macro string   \n *Input1:* DItem objects (DItem class)  \n *Return:* cursor list macro string (string)    \n *Example:*   \n listnode = JPT.GetEntitiesByID(JPT.EntityType.NODE, 434)  \n *node = JPT.DItemToMacroTCursor(listnode[0]) // 10:*1  \n *JPT.DItemToMacroListTCursor(node) [10:*1]  \n "},"JPT.MacroResultParser":{"prefix":"MacroResultParser","text":"*Function:* JPT.MacroResultParser  \n*Description:* parse returned string from macro to list of string  \n *Input1:* returned string from macro (string)    \n *Input2:* list of string pattern (string, cursor, cursor_pair, list_number  \n list_cursor_pair, list_cursor, list_list_cursor, list_string, vector3d, number)   \n *Return:* list of result (list string)    \n *Example:*   \n *result = JPT.Exec('MC_Mesh_Quality_Manual_Check_Tri([3:*1], 0, 0, 0.1)')  \n *# result = 1, [6:100, 6:*101]  \n listString = JPT.MacroResultParser(result, [\"number\", \"list_cursor\"])   \n "},"JPT.MacroListTCursorToListDItem":{"prefix":"MacroListTCursorToListDItem","text":"*Function:* JPT.MacroListTCursorToListDItem  \n*Description:* convert a macro cursor list string to list of DItem objects  \n *Input1:* macro cursor list string (string)  \n *Return:* list of DItem objects (DItemVector)  \n *Example: listEntityObject = JPT.MacroListTCursorToListDItem('[10:1, 10:*1, ...]')  \n "},"JPT.MacroTCursorToDItem":{"prefix":"MacroTCursorToDItem","text":"*Function:* JPT.MacroTCursorToDItem  \n*Description:* convert a macro cursor string to DItem object  \n *Input1:* macro cursor string (string)  \n *Return:* DItem object (DItem class)  \n *Example: dentityObject = JPT.MacroTCursorToDItem('3:*1')  \n "},"JPT.ConvertRGBToJPTColor":{"prefix":"ConvertRGBToJPTColor","text":"*Function:* JPT.ConvertRGBToJPTColor  \n*Description:* convert a RGB (red,green,blue) value to JPT color number  \n *Input1:* RGB (red,green,blue)  \n *Return:* JPT color number (int)  \n *Example:*   \n newcolor = JPT.ConvertRGBToJPTColor(255,0,0) # red color  \n listbody = JPT.GetEntitiesByName(JPT.DTableType.DTABLE_BODY, \"Cube_1\", 1)  \n JPT.CastDItemToDBody(listbody[0]).color = newcolor  \n "},"JPT.CopyToClipBoard":{"prefix":"CopyToClipBoard","text":"*Function:* JPT.CopyToClipBoard  \n*Description:* put a text to clipboard buffer   \n *Input1:* text input (string)  \n *Return:* None  \n *Example:* JPT.CopyToClipBoard(text)  \n "},"JPT.CheckLicense":{"prefix":"CheckLicense","text":"*Function:* JPT.CheckLicense  \n*Description:* Check feature license whether active or not  \n *Input1:* License name(string)  \n *        Jupiter feature license:* Home > Preference > License  \n *Return:* True / False  \n *Example:* JPT.CheckLicense(\"JPT_BASE\")  \n "},"JPT.IsDefaultDouble":{"prefix":"IsDefaultDouble","text":"*Function:* JPT.IsDefaultDouble  \n*Description:* check a double value is Default value or not   \n *Input1:* value (double)   \n *Return:* True / False  \n *Example:* JPT.IsDefaultDouble(value)  \n "},"JPT.IsDefaultInt":{"prefix":"IsDefaultInt","text":"*Function:* JPT.IsDefaultInt  \n*Description:* check a int value is Default value or not   \n *Input1:* value (int)   \n *Return:* True / False  \n *Example:* JPT.IsDefaultInt(value)  \n "},"JPT.ConvertFromDocUnit":{"prefix":"ConvertFromDocUnit","text":"*Function:* JPT.ConvertFromDocUnit  \n*Description:* Convert value from JPT user setup unit to SI unit system  \n *Input1:* Conversion source value (double)  \n *Input2:* Unit system conversion type (JPT.UnitType)  \n *Return:* Converted Value (double)  \n *Example:* JPT.ConvertFromDocUnit(1, JPT.UnitType.Unit_Length)  \n "},"JPT.ConvertValueToDocUnit":{"prefix":"ConvertValueToDocUnit","text":"*Function:* JPT.ConvertValueToDocUnit  \n*Description:* Convert value from SI unit system to JPT user setup unit  \n *Input1:* Conversion source value (double)  \n *Input2:* Unit system conversion type (JPT.UnitType)  \n *Return:* Converted value (double)  \n *Example:* JPT.ConvertValueToDocUnit(1, JPT.UnitType.Unit_Length)  \n "},"JPT.ConvertFromMacroUnit":{"prefix":"ConvertFromMacroUnit","text":"*Function:* JPT.ConvertFromMacroUnit  \n*Description:* Convert unit system from user input unit to macro SI unit  \n *Input1:* Conversion source value (double)  \n *Input2:* Unit system conversion type (JPT.UnitType)  \n *Input3:* Unit abbreviation (string)  \n *Return:* Converted value (double)  \n *Example:* JPT.ConvertFromMacroUnit(1, JPT.UnitType.Unit_Length, 'mm')  \n "},"JPT.ConvertValueToMacroUnit":{"prefix":"ConvertValueToMacroUnit","text":"*Function:* JPT.ConvertValueToMacroUnit  \n*Description:* Convert unit system from macro SI unit to user input unit  \n *Input1:* Conversion source value (double)  \n *Input2:* Unit system conversion type (JPT.UnitType)  \n *Input3:* Unit abbreviation (string)  \n *Return:* Converted value(double)  \n *Example:* convToMacr = JPT.ConvertValueToMacroUnit(1, JPT.UnitType.Unit_Length, 'mm')  \n "},"JPT.GetJPTTempPath":{"prefix":"GetJPTTempPath","text":"*Function:* JPT.GetJPTTempPath  \n*Description:* Get temp document path  \n *Input1:* None  \n *Return:* Temp Document Path(string)  \n *Example:* JPT.GetJPTTempPath()  \n "},"JPT.GetProgramPath":{"prefix":"GetProgramPath","text":"*Function:* JPT.GetProgramPath  \n*Description:* Get application installation directory  \n *Input1:* None  \n *Return:* Program Path(string)  \n *Example:* JPT.GetProgramPath()  \n "},"JPT.GetCurrentDocumentPath":{"prefix":"GetCurrentDocumentPath","text":"*Function:* JPT.GetCurrentDocumentPath  \n*Description:* Get current document path  \n *Input1:* None  \n *Return:* Current Document Path(string)  \n *Example:* JPT.GetCurrentDocumentPath()  \n "},"JPT.QuitApplication":{"prefix":"QuitApplication","text":"*Function:* JPT.QuitApplication  \n*Description:* quit jupiter  \n *Input1:* None  \n *Return:* None  \n *Example:* JPT.QuitApplication()  \n "},"JPT.GetAppPathInfo":{"prefix":"GetAppPathInfo","text":"*Function:* JPT.GetAppPathInfo  \n*Description:* get a JPT path string (Program, Temp, Appdata, Document)  \n *Input1:* Path type (JPT.PathType)  \n *Return:* path (string)  \n *Example:* JPT.GetAppPathInfo()  \n "},"JPT.GetSelectedNodes":{"prefix":"GetSelectedNodes","text":"*Function:* JPT.GetSelectedNodes  \n*Description:* Get selected node information  \n *Input1:* None  \n *Return:* list of DNode objects contain selected node information (NodeVector)  \n *Example:* JPT.GetSelectedNodes()  \n "},"JPT.GetSelectedElems":{"prefix":"GetSelectedElems","text":"*Function:* JPT.GetSelectedElems  \n*Description:* Get selected element information  \n *Input1:* None  \n *Return:* list of DElem objects contain selected element information (ElemVector)  \n *Example:* JPT.GetSelectedElems()  \n "},"JPT.GetSelectedFaces":{"prefix":"GetSelectedFaces","text":"*Function:* JPT.GetSelectedFaces  \n*Description:* Get selected face information  \n *Input1:* None  \n *Return:* list of DFace objects contain selected face information (FaceVector)  \n *Example:* JPT.GetSelectedFaces()  \n "},"JPT.GetSelectedEdges":{"prefix":"GetSelectedEdges","text":"*Function:* JPT.GetSelectedEdges  \n*Description:* Get all of selected edge information  \n *Input1:* None  \n *Return:* list of DEdge objects contain selected edge information (EdgeVector)  \n *Example:* JPT.GetSelectedEdges()  \n "},"JPT.GetSelectedParts":{"prefix":"GetSelectedParts","text":"*Function:* JPT.GetSelectedParts  \n*Description:* Get selected part information  \n *Input1:* None  \n *Return:* list of DBody objects contain selected part information (BodyVector)  \n *Example:* JPT.GetSelectedParts()  \n "},"JPT.GetSelectedGroups":{"prefix":"GetSelectedGroups","text":"*Function:* JPT.GetSelectedGroups  \n*Description:* Get selected group information   \n *Input1:* None  \n *Return:* list of DGroup objects contain selected group information (GroupVector)  \n *Example:* JPT.GetSelectedGroups()  \n "},"JPT.GetAllParts":{"prefix":"GetAllParts","text":"*Function:* JPT.GetAllParts  \n*Description:* Get information of all parts  \n *Input1:* None  \n *Return:* list of DBody objects contain part information (BodyVector)  \n *Example:* JPT.GetAllParts()  \n "},"JPT.GetAllFaces":{"prefix":"GetAllFaces","text":"*Function:* JPT.GetAllFaces  \n*Description:* Get information of faces  \n *Input1:* None  \n *Return:* list of DFace objects contain face information (FaceVector)  \n *Example:* JPT.GetAllFaces()  \n "},"JPT.GetAllEdges":{"prefix":"GetAllEdges","text":"*Function:* JPT.GetAllEdges  \n*Description:* Get information of edges  \n *Input1:* None  \n *Return:* list of DEdge objects contain edge information (EdgeVector)  \n *Example:* JPT.GetAllEdges()  \n "},"JPT.GetAllElems":{"prefix":"GetAllElems","text":"*Function:* JPT.GetAllElems  \n*Description:* Get information of elements  \n *Input1:* None  \n *Return:* list of DNode objects contain element information (NodeVector)  \n *Example:* JPT.GetAllElems()  \n "},"JPT.GetAllNodes":{"prefix":"GetAllNodes","text":"*Function:* JPT.GetAllNodes  \n*Description:* Get information of all nodes  \n *Input1:* None  \n *Return:* list of DNode objects contain node information (NodeVector)  \n *Example:* JPT.GetAllNodes()  \n "},"JPT.GetAllGroups":{"prefix":"GetAllGroups","text":"*Function:* JPT.GetAllGroups  \n*Description:* Get all entities' information inside groups  \n *Input1:* None  \n *Return:* list of DGroup objects contain group information (GroupVector)  \n *Example:* JPT.GetAllGroups()  \n "},"JPT.GetAllByTableTypeID":{"prefix":"GetAllByTableTypeID","text":"*Function:* JPT.GetAllByTableTypeID  \n*Description:* Get the information about indicated entity by type ID  \n *Input1:* DTable type ID input(JPT.DTableType)  \n *Return:* Type ID(DItem)   \n *Example:* JPT.GetAllByTableTypeID(3)  \n "},"JPT.GetAllByType":{"prefix":"GetAllByType","text":"*Function:* JPT.GetAllByType  \n*Description:* Get entities information by inputting their DItem type  \n *Input1:* DItem type input (JPT.EntityType)  \n *Return:* DItem information (DItem)   \n *Example:* JPT.GetAllByType(JPT.EntityType.INST)  \n "},"JPT.GetCountByType":{"prefix":"GetCountByType","text":"*Function:* JPT.GetCountByType  \n*Description:* Get count of entities by type  \n *Input1: DItem Type:* BODY, VERTEX, EDGE, FACE, SOLID, ELEM,...(JPT.EntityType)  \n *Return:* Number of entities(int)  \n *Example:* JPT.GetCountByType(JPT.EntityType.BODY)  \n "},"JPT.GetAllSelected":{"prefix":"GetAllSelected","text":"*Function:* JPT.GetAllSelected  \n*Description:* Get entity information from the selected entity (Connections, Contacts, Parts, ...)  \n *Input1:* None  \n *Return:* list of DItem objects contain selected entity information (DItem)   \n *Example:* JPT.GetAllSelected()  \n "},"JPT.GetLastCreatedCursor":{"prefix":"GetLastCreatedCursor","text":"*Function:* JPT.GetLastCreatedCursor  \n*Description:* Get the latest id of created entity  \n *Input1:* None  \n *Return:* Last created Object(DItem)   \n *Example:* JPT.GetLastCreatedCursor()  \n "},"JPT.GetCenterOfEntities":{"prefix":"GetCenterOfEntities","text":"*Function:* JPT.GetCenterOfEntities  \n*Description:* Get center coordinate of selected entities  \n *Input1:* list of DItem object (DItemVector)  \n *Return:* Coordinate[x,y,z] of selected entities(double)  \n *Example:* JPT.GetCenterOfEntities(entity)  \n "},"JPT.GetSharedFaces":{"prefix":"GetSharedFaces","text":"*Function:* JPT.GetSharedFaces  \n*Description:* Get shared face information  \n *Input1:* list of DItem object (DItemVector)  \n *Return:* Shared face information (typeID, id, key)(DItem)   \n *Example:* JPT.GetSharedFaces(shareFace)  \n "},"JPT.GetSharedElements":{"prefix":"GetSharedElements","text":"*Function:* JPT.GetSharedElements  \n*Description:* Get shared element information  \n *Input1:* ist of DItem object (DItemVector)  \n *Return:* Shared element information (type, typeID, id, info, key, masters, slave, targets, children, parent)(DItem)   \n *Example:* JPT.GetSharedElements(bodies)  \n "},"JPT.GetSharedNodes":{"prefix":"GetSharedNodes","text":"*Function:* JPT.GetSharedNodes  \n*Description:* Get shared node information  \n *Input1:* ist of DItem object (DItemVector)  \n *Return:* Shared node information (typeID, id, key)(DItem)   \n *Example:* JPT.GetSharedNodes(shareNodes)  \n "},"JPT.GetAllLoadsBCs":{"prefix":"GetAllLoadsBCs","text":"*Function:* JPT.GetAllLoadsBCs  \n*Description:* Get information of all loads and BCs  \n *Input1:* None  \n *Return:* Load information (type, type ID, id, key, name, info, targets, isValid, masters, slaves, parent, children)(DItem)   \n *Example:* JPT.GetAllLoadsBCs()  \n "},"JPT.GetSelectedNodesCr":{"prefix":"GetSelectedNodesCr","text":"*Function:* JPT.GetSelectedNodesCr  \n*Description:* get selected node as string output  \n *Input1:* None  \n *Return:* selected node (string)  \n *Example:* JPT.GetSelectedNodesCr()  \n "},"JPT.GetSelectedElemsCr":{"prefix":"GetSelectedElemsCr","text":"*Function:* JPT.GetSelectedElemsCr  \n*Description:* get selected element as string output  \n *Input1:* None  \n *Return:* selected element (string)  \n *Example:* JPT.GetSelectedElemsCr()  \n "},"JPT.GetSelectedFacesCr":{"prefix":"GetSelectedFacesCr","text":"*Function:* JPT.GetSelectedFacesCr  \n*Description:* get selected face as string output  \n *Input1:* None  \n *Return:* selected face (string)  \n *Example:* JPT.GetSelectedFacesCr()  \n "},"JPT.GetSelectedEdgesCr":{"prefix":"GetSelectedEdgesCr","text":"*Function:* JPT.GetSelectedEdgesCr  \n*Description:* get selected edge as string output  \n *Input1:* None  \n *Return:* selected edge (string)  \n *Example:* JPT.GetSelectedEdgesCr()  \n "},"JPT.GetSelectedPartsCr":{"prefix":"GetSelectedPartsCr","text":"*Function:* JPT.GetSelectedPartsCr  \n*Description:* get selected part as string output  \n *Input1:* None  \n *Return:* selected part (string)  \n *Example:* JPT.GetSelectedPartsCr()  \n "},"JPT.GetSelectedGroupsCr":{"prefix":"GetSelectedGroupsCr","text":"*Function:* JPT.GetSelectedGroupsCr  \n*Description:* get selected group as string output  \n *Input1:* None  \n *Return:* selected group (string)  \n *Example:* JPT.GetSelectedGroupsCr()  \n "},"JPT.GetUndoCount":{"prefix":"GetUndoCount","text":"*Function:* JPT.GetUndoCount  \n*Description:* Get number of undo action which is capable of running  \n *Input1:* None  \n *Return:* Number of undo action(int)  \n *Example:* JPT.GetUndoCount()  \n "},"JPT.ClearUndo":{"prefix":"ClearUndo","text":"*Function:* JPT.ClearUndo  \n*Description:* Clear Undo list  \n *Input1:* None  \n *Return:* None  \n *Example:* JPT.ClearUndo()  \n "},"JPT.GetRedoCount":{"prefix":"GetRedoCount","text":"*Function:* JPT.GetRedoCount  \n*Description:* Get number of redo action which is capable of running  \n *Input1:* None  \n *Return:* Number of redo action(int)  \n *Example:* JPT.GetRedoCount()  \n "},"JPT.ClearRedo":{"prefix":"ClearRedo","text":"*Function:* JPT.ClearRedo  \n*Description:* Clear Redo list  \n *Input1:* None  \n *Return:* None  \n *Example:* JPT.ClearRedo()  \n "},"JPT.GetOpnList":{"prefix":"GetOpnList","text":"*Function:* JPT.GetOpnList  \n*Description:* Get list of Launch Operation  \n *Input1:* None  \n *Return:* List of Launch Operation(string)  \n *Example:* JPT.GetOpnList()  \n "},"JPT.GetMacroLog":{"prefix":"GetMacroLog","text":"*Function:* JPT.GetMacroLog  \n*Description:* Get all of the macro in Macro Window  \n *Input1:* None  \n *Return:* List of previous Macro in Macro Window (list string)  \n *Example:* JPT.GetMacroLog()  \n "},"JPT.GetPythonAPILog":{"prefix":"GetPythonAPILog","text":"*Function:* JPT.GetPythonAPILog  \n*Description:* Get log string from python API window  \n *Input1:* None  \n *Return:* List of messages from python API window (list string)  \n *Example:* JPT.GetPythonAPILog()  \n "},"JPT.ShowHideEntitiesByID":{"prefix":"ShowHideEntitiesByID","text":"*Function:* JPT.ShowHideEntitiesByID  \n*Description:* show or hide an entity by id in view  \n *Input1:* DTable type (JPT.DTableType)  \n *Input2:* entity id (int)  \n *Input3:* show/hide option (1,0 or JPT.BoolType)  \n *Return:* None  \n *Example:*   \n // hide a part  \n JPT.ShowHideEntitiesByID(JPT.DTableType.DTABLE_BODY, 1, JPT.BoolType.TRUE_VAL)  \n // show a part  \n JPT.ShowHideEntitiesByID(JPT.DTableType.DTABLE_BODY, 1, JPT.BoolType.FALSE_VAL)  \n "},"JPT.ShowHideAllParts":{"prefix":"ShowHideAllParts","text":"*Function:* JPT.ShowHideAllParts  \n*Description:* show or hide all parts in view  \n *Input1:* show/hide option (1,0 or JPT.BoolType)  \n *Return:* None  \n *Example:*   \n // show all parts  \n JPT.ShowHideAllParts(JPT.BoolType.TRUE_VAL)  \n // hide all parts  \n JPT.ShowHideAllParts(JPT.BoolType.FALSE_VAL)  \n "},"JPT.InverseHideBodies":{"prefix":"InverseHideBodies","text":"*Function:* JPT.InverseHideBodies  \n*Description:* inverse hide parts in view  \n *Input1:* id of part (int)  \n *Return:* None  \n *Example:*   \n listbody = JPT.GetEntitiesByName(JPT.DTableType.DTABLE_BODY, \"Cube1\", 1)  \n idbody = listbody[0].id  \n JPT.InverseHideBodies(idbody)  \n "},"JPT.ViewFitToModel":{"prefix":"ViewFitToModel","text":"*Function:* JPT.ViewFitToModel  \n*Description:* fit models to current view  \n *Input1:* idbody  \n *Return:* None  \n *Example:* JPT.ViewFitToModel()  \n "},"JPT.Exec":{"prefix":"Exec","text":"*Function:* JPT.Exec  \n*Description:* Run Jupiter macro  \n *Input1:* Macro command (string)  \n *Return:* Refer each macro command(string)  \n *Example: JPT.Exec('CreateCube([0, 0, 0], [0.01, 0.01, 0.01], [10, 10, 10], \"Cube_1\", 7105764, 0:*0) ')  \n "},"JPT.GetMaxIDEntity":{"prefix":"GetMaxIDEntity","text":"*Function:* JPT.GetMaxIDEntity  \n*Description:* get max id entity from DItem type  \n *Input1:* DItem type (JPT.EntityType)  \n *Return:* max id entity (int)   \n *Example:* JPT.GetMaxIDEntity(JPT.EntityType.BODY)  \n "},"JPT.GetMinIDEntity":{"prefix":"GetMinIDEntity","text":"*Function:* JPT.GetMinIDEntity  \n*Description:* get min id entity from DItem type  \n *Input1:* DItem type (JPT.EntityType)  \n *Return:* min id entity (int)   \n *Example:* JPT.GetMinIDEntity(JPT.EntityType.BODY)  \n "},"JPT.GetEntitiesByName":{"prefix":"GetEntitiesByName","text":"*Function:* JPT.GetEntitiesByName  \n*Description:* get list of object entity by name  \n *Input1:* DTableType type (JPT.DTableType)  \n *Input2:* name of entity (string)  \n *Input3:* match with name option (1,0 or JPT.BoolType)  \n *Return:* list of object entity (DItemVector)  \n *Example:* listbody = JPT.GetEntitiesByName(JPT.DTableType.DTABLE_BODY, \"Cube1\", 1)  \n "},"JPT.GetEntitiesByID":{"prefix":"GetEntitiesByID","text":"*Function:* JPT.GetEntitiesByID  \n*Description:* get list of object entity by id  \n *Input1:* DItem type (JPT.EntityType)  \n *Input2:* id entity (int)   \n *Return:* list of object entity (DItemVector)  \n *Example:* listbody = JPT.GetEntitiesByID(JPT.EntityType.BODY, 1)  \n "},"JPT.GetEntitiesByPosition":{"prefix":"GetEntitiesByPosition","text":"*Function:* JPT.GetEntitiesByPosition  \n*Description:* get list of entity object by position  \n *Input1:* AssociateType type (JPT.AssociateType)  \n *Input2:* x (double)    \n *Input3:* y (double)   \n *Input4:* z (double)   \n *Return:* list of DItem object (DItemVector)  \n *Example:* JPT.GetEntitiesByPosition(JPT.AssociateType.AS_BODY, 1, 2, 3)  \n "},"JPT.GetEntitiesByAssociation":{"prefix":"GetEntitiesByAssociation","text":"*Function:* JPT.GetEntitiesByAssociation  \n*Description:* get list of entity object by association  \n *Input1:* DItem type of parent entity (JPT.EntityType)  \n *Input2:* AssociateType type (JPT.AssociateType)  \n *Input3:* id entity (int)   \n *Return:* list of DItem object (DItemVector)  \n *Example:* JPT.GetEntitiesByAssociation(JPT.EntityType.BODY, JPT.AssociateType.AS_FACE, 1)  \n "},"JPT.GetEntitiesByAdjacent":{"prefix":"GetEntitiesByAdjacent","text":"*Function:* JPT.GetEntitiesByAdjacent  \n*Description:* get list of entity object by adjacency  \n *Input1:* only DItem Face/Element type (JPT.EntityType)  \n *Input2:* id entity (int)    \n *Input3:* stop angle (int)  \n *Return:* list of DItem object (DItemVector)  \n *Example:* JPT.GetEntitiesByAdjacent(JPT.EntityType.FACE, 1, 30)  \n "},"JPT.MsgOut":{"prefix":"MsgOut","text":"*Function:* JPT.MsgOut  \n*Description:* print out message to Python API window (~ print())  \n *Input1:* message (string)  \n *Return:* None  \n *Example:* JPT.MsgOut(\"this is test message\")  \n "},"JPT.PrintAppPathInfo":{"prefix":"PrintAppPathInfo","text":"*Function:* JPT.PrintAppPathInfo  \n*Description:* print all JPT path information (Program, Temp, Appdata, Document)  \n *Input1:* None  \n *Return:* None  \n *Example:* JPT.PrintAppPathInfo()  \n "},"JPT.PrintPSJUtilityManual":{"prefix":"PrintPSJUtilityManual","text":"*Function:* JPT.PrintPSJUtilityManual  \n*Description:* Print PSJ Utility Manual Information  \n *Input1:* None  \n *Return:* None  \n *Example:* JPT.PrintPSJUtilityManual()  \n "},"JPT.Debugger":{"prefix":"Debugger","text":"*Function:* JPT.Debugger  \n*Description:* console debugger for PSJ   \n *Input1:* any type, any argument number  \n *Return:* None  \n *Example:*   \n // debug enum type  \n JPT.Debugger(JPT.EntityType.values)   \n // debug python standard type  \n JPT.Debugger(1, \"abcd\", list, tuble, dict, ....)  \n // debug Jupiter data type  \n JPT.Debugger(JPT.GetAllNodes()[0].id)  \n JPT.Debugger(JPT.GetAllNodes()[0])  \n JPT.Debugger(JPT.GetAllNodes())  \n "},"JPT.GetElemsByKind":{"prefix":"GetElemsByKind","text":"*Function:* JPT.GetElemsByKind  \n*Description:* get list of element object by kind  \n *Input1:* element kind (JPT.ElemKind)  \n *Return:* list of Elem object (ElemVector)  \n *Example:* listElemObject = JPT.GetElemsByKind(JPT.ElemKind.ELEMKIND_2D)  \n "},"JPT.GetRandomJPTColor":{"prefix":"GetRandomJPTColor","text":"*Function:* JPT.GetRandomJPTColor  \n*Description:* get a random color   \n *Input1:* None  \n *Return:* random color number (int)  \n *Example:* color = JPT.GetRandomJPTColor()  \n "},"JPT.ConvertJPTColorToRGB":{"prefix":"ConvertJPTColorToRGB","text":"*Function:* JPT.ConvertJPTColorToRGB  \n*Description:* convert JPT color to string RGB (red, green, blue)  \n *Input1:* JPT color (int)  \n *Return:* string RGB (string)  \n *Example:* stringRGB = JPT.ConvertJPTColorToRGB(255)  \n "},"JPT.ClearLog":{"prefix":"ClearLog","text":"*Function:* JPT.ClearLog  \n*Description:* clear all log on Python API Window  \n *Input1:* None  \n *Return:* None  \n *Example:* JPT.ClearLog()  \n *Description:* return size of list  \n *Input1:* None  \n *Return:* None  \n *Example:* objectVector.sizeVec()  \n *Description:* clear all element in list, size reset to zero  \n *Input1:* None  \n *Return:* None  \n *Example:* objectVector.clearVec()  \n *Description:* append an entity to current list  \n *Input1:* entity object  \n *Return:* Node  \n *Example:* objectVector.addObj(entityObject)  \n *Description:* insert another list entity to current list  \n *Input1:* list of object  \n *Return:* None  \n *Example:* objectVector1.extendVec(objectVector2)  \n *Description:* delete a entity in list by index  \n *Input1:* None  \n *Return:* None  \n *Example:* objectVector.deleteObj(1)  \n *Description:* check if entityObject is exist in current list  \n *Input1:* None  \n *Return:* TRUE if existed/FALSE if not  \n *Example:* objectVector.isContainObj(entityObject)  \n "},"JPT.SetSelectMethod":{"prefix":"SetSelectMethod","text":"*Function:* JPT.SetSelectMethod  \n*Description:* set select method on view   \n *Input1:* select method type (JPT.SelectMethodType)  \n *Return:* None  \n *Example:* JPT.SetSelector(JPT.SelectMethodType.SELMTD_BODY)  \n "},"JPT.MacroTCursorPairToDItemPair":{"prefix":"MacroTCursorPairToDItemPair","text":"*Function:* JPT.MacroTCursorPairToDItemPair  \n*Description:* convert a macro cursor pair string to DItemPair objects  \n *Input1:* macro cursor pair string (string)  \n *Return:* DItemPair objects (DItemPair)  \n *Example: listEntityObject = JPT.MacroTCursorPairToDItemPair('10:210-10:*202')  \n "},"JPT.MessageBoxPSJ":{"prefix":"MessageBoxPSJ","text":"*Function:* JPT.MessageBoxPSJ  \n*Description:* display a message box  \n *Input1:* message (string)  \n *Input2:* message type (JPT.MsgBoxType)  \n *Return: anwser :* YES, NO, OK, CANCEL (string)  \n *Example:* anwser = JPT.MessageBoxPSJ(\"this is test message, JPT.MsgBoxType.MB_INFORMATION_OKCANCEL)  \n "},"JPT.GetProgramVersion":{"prefix":"GetProgramVersion","text":"*Function:* JPT.GetProgramVersion  \n*Description:* get jupiter version   \n *Input:* None  \n *Return:* VersionInfo object (VersionInfo)  \n *Example:* versionInfo = JPT.GetProgramVersion()  \n print(versionInfo.major)  \n print(versionInfo.minor)  \n print(versionInfo.sub)  \n print(versionInfo.build)  \n "},"JPT.GetMaterialFromProperty":{"prefix":"GetMaterialFromProperty","text":"*Function:* JPT.GetMaterialFromProperty  \n*Description:* get material from property ID  \n *Input:* property ID (init)  \n *Return:* DItem object (DItem)  \n *Example:* material = JPT.GetMaterialFromProperty(1)  \n "},"JPT.GetAllCoordinates":{"prefix":"GetAllCoordinates","text":"*Function:* JPT.GetAllCoordinates  \n*Description:* get jupiter version   \n *Input:* None  \n *Return:* list of DCoord object (CoordVector)  \n *Example:* coordinate = JPT.GetAllCoordinates()  \n "},"JPT.GetAllConnections":{"prefix":"GetAllConnections","text":"*Function:* JPT.GetAllConnections  \n*Description:* get jupiter version   \n *Input:* None  \n *Return:* list of DConnect object (ConnectVector)  \n *Example:* connection = JPT.GetAllConnections()  \n "},"JPT.GetAllLoadBoundaryConditions":{"prefix":"GetAllLoadBoundaryConditions","text":"*Function:* JPT.GetAllLoadBoundaryConditions  \n*Description:* get jupiter version   \n *Input:* None  \n *Return:* list of DLoadBC object (LoadBCVector)  \n *Example:* lbcs = JPT.GetAllLoadBoundaryConditions()  \n "},"JPT.GetThicknessOfEntity":{"prefix":"GetThicknessOfEntity","text":"*Function:* JPT.GetThicknessOfEntity  \n*Description:* get thickness of body or face or element   \n *Input1:* only DItem Body/Face/Element type (JPT.EntityType)  \n *Input2:* id entity (int)    \n *Return:* double thickness of entity  \n *Example:* dThickness = JPT.GetThicknessOfEntity(JPT.EntityType.FACE, 1)  \n "}}